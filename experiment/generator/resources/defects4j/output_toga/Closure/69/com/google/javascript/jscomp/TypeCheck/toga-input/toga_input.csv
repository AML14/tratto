focal_method,test_prefix,docstring
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(35);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test0011() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    typeCheck0.reportMissingProperties(false);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(16, node0, node0, node0, 151, 19);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public void process(Node externsRoot, Node jsRoot) {
    Preconditions.checkNotNull(scopeCreator);
    Preconditions.checkNotNull(topScope);
    Node externsAndJs = jsRoot.getParent();
    Preconditions.checkState(externsAndJs != null);
    Preconditions.checkState(externsRoot == null || externsAndJs.hasChild(externsRoot));
    if (externsRoot != null) {
        check(externsRoot, true);
    }
    check(jsRoot, false);
}","public void test0022() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((-36.6706435269342));
    Node node1 = new Node(43, node0);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.process(node0, node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Main entry point for this phase of processing. This follows the pattern for
 * JSCompiler phases.
 *
 * @param externsRoot The root of the externs parse tree.
 * @param jsRoot The root of the input parse tree to be checked.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test0033() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    typeCheck0.processForTesting((Node) null, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public void process(Node externsRoot, Node jsRoot) {
    Preconditions.checkNotNull(scopeCreator);
    Preconditions.checkNotNull(topScope);
    Node externsAndJs = jsRoot.getParent();
    Preconditions.checkState(externsAndJs != null);
    Preconditions.checkState(externsRoot == null || externsAndJs.hasChild(externsRoot));
    if (externsRoot != null) {
        check(externsRoot, true);
    }
    check(jsRoot, false);
}","public void test0044() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((-36.6706435269342));
    Node node1 = new Node(43, node0);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.process(node1, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Main entry point for this phase of processing. This follows the pattern for
 * JSCompiler phases.
 *
 * @param externsRoot The root of the externs parse tree.
 * @param jsRoot The root of the input parse tree to be checked.
 */"
"public Scope processForTesting(Node externsRoot, Node jsRoot) {
    Preconditions.checkState(scopeCreator == null);
    Preconditions.checkState(topScope == null);
    Preconditions.checkState(jsRoot.getParent() != null);
    Node externsAndJsRoot = jsRoot.getParent();
    scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));
    topScope = scopeCreator.createScope(externsAndJsRoot, null);
    TypeInferencePass inference = new TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
    inference.process(externsRoot, jsRoot);
    process(externsRoot, jsRoot);
    return topScope;
}","public void test0055() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""vJ"");
    Node node1 = new Node(27, node0, node0, node0, 2, 42);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node1, node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Main entry point of this phase for testing code.
 */"
"public Scope processForTesting(Node externsRoot, Node jsRoot) {
    Preconditions.checkState(scopeCreator == null);
    Preconditions.checkState(topScope == null);
    Preconditions.checkState(jsRoot.getParent() != null);
    Node externsAndJsRoot = jsRoot.getParent();
    scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));
    topScope = scopeCreator.createScope(externsAndJsRoot, null);
    TypeInferencePass inference = new TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
    inference.process(externsRoot, jsRoot);
    process(externsRoot, jsRoot);
    return topScope;
}","public void test0066() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = Node.newNumber(1.1654429604646246);
    Scope scope0 = new Scope(node0, compiler0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, compilerOptions0.reportUnknownTypes, compilerOptions0.checkShadowVars);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Main entry point of this phase for testing code.
 */"
"public Scope processForTesting(Node externsRoot, Node jsRoot) {
    Preconditions.checkState(scopeCreator == null);
    Preconditions.checkState(topScope == null);
    Preconditions.checkState(jsRoot.getParent() != null);
    Node externsAndJsRoot = jsRoot.getParent();
    scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));
    topScope = scopeCreator.createScope(externsAndJsRoot, null);
    TypeInferencePass inference = new TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
    inference.process(externsRoot, jsRoot);
    process(externsRoot, jsRoot);
    return topScope;
}","public void test0077() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Main entry point of this phase for testing code.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test0088() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(86, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(50, Node.LAST_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean isSyntheticBlock() {
    return getBooleanProp(SYNTHETIC_BLOCK_PROP);
}","public void test0099() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isSyntheticBlock());
}","/**
 * Returns whether this is a synthetic block that should not be considered
 * a real source block.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test01010() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    node0.addSuppression((String) null);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test01111() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(4);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(12, Node.COLUMN_BITS);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test01212() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(100.0);
    Node node1 = new Node(5, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test01213() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(100.0);
    Node node1 = new Node(5, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test01314() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""{8a"");
    Node node1 = new Node(6, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test01315() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""{8a"");
    Node node1 = new Node(6, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test01416() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(7);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test01417() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(7);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test01518() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node((-76));
    Node node1 = new Node(8, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test01519() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node((-76));
    Node node1 = new Node(8, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test01620() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(9, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test01621() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(9, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test01722() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(10, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test01723() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(10, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test01824() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = compiler0.parseTestCode("" }@'"");
    Node node1 = new Node(11, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(2, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test01925() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(12);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public boolean isSyntheticBlock() {
    return getBooleanProp(SYNTHETIC_BLOCK_PROP);
}","public void test02026() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(13, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(node1.isSyntheticBlock());
}","/**
 * Returns whether this is a synthetic block that should not be considered
 * a real source block.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test02127() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(1374.4969655242487);
    Node node1 = new Node(14, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals((-1), Node.CATCH_SCOPE_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test02228() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""F>J"");
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test02329() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(17);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test02430() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(18, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test02431() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(18, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test02532() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""T[=28Ba1$#{H5n\""Cz"");
    Node node1 = new Node(19, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test02533() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""T[=28Ba1$#{H5n\""Cz"");
    Node node1 = new Node(19, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test02534() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""T[=28Ba1$#{H5n\""Cz"");
    Node node1 = new Node(19, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test02635() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(150);
    Node node1 = new Node(20, node0);
    typeCheck0.visit((NodeTraversal) null, node1, node0);
    assertEquals(20, Node.FINALLY_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test02736() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(21, node0, node0, node0, node0, 48, 50);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(4095, Node.COLUMN_MASK);
}","/**
 * Traverses a node recursively.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test02837() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regp"");
    Node node1 = new Node(22, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test02838() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regp"");
    Node node1 = new Node(22, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test02839() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regp"");
    Node node1 = new Node(22, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test02940() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(23, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(31, Node.SKIP_INDEXES_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test03041() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 105);
    Node node1 = new Node(24, node0, node0, 49, 0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(48, Node.DIRECTIVES);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test03142() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(25, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test03143() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(25, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test03244() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString("" }@'"");
    Node node1 = new Node(26, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test03345() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = compiler0.parseTestCode(""vtJ"");
    Node node1 = new Node(27, node0, node0, node0, 2, 42);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, Node.LEFT);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test03446() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(28, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(11, Node.USES_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test03547() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(29);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test03648() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 105);
    Node node1 = new Node(31, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test03749() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(32, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(45, Node.IS_VAR_ARGS_PARAM);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test03850() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(121);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(34, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test03851() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(121);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(34, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test03952() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(36, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test03953() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(36, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test04054() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((-3109.550227217214));
    Node node1 = new Node(37, node0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test04155() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseSyntheticCode(""<TS0.1wr&V+'z4fXzE"", ""<TS0.1wr&V+'z4fXzE"");
    Node node1 = new Node(41, node0, node0, node0, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(4, Node.ENUM_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test04256() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((double) 88);
    Node node1 = new Node(42, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test04357() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(2705.904);
    Node node1 = new Node(43, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(24, Node.LASTUSE_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04559() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""<TS0.1ir&V+o'z4ftzE"");
    Node node1 = new Node(45, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals((-1), node1.getCharno());
}",""
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test04660() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node1 = new Node(46);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test04761() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(48);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test04762() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(48);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test04863() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(49, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(49, Node.DIRECT_EVAL);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test04964() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(51);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test05065() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(52);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05166() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(53);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test05167() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(53);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test05268() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(54);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05269() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(54);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test05370() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(55, (-1663), 1);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05471() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(56);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test05472() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(56);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05573() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(57, 57, 57);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test05574() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(57, 57, 57);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05675() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(58);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test05676() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(58);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test05777() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(59);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05778() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(59);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test05879() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(60);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test05880() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(60);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test05981() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(61);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05982() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(61);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test06083() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(2726.155);
    Node node1 = new Node(62, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test06084() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(2726.155);
    Node node1 = new Node(62, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test06185() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(63, ""Eq"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(9, Node.FIXUPS_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test06286() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(64);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(46, Node.IS_NAMESPACE);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test06387() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(65);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test06488() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
    Node node0 = new Node(66);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test06489() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
    Node node0 = new Node(66);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test06590() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(67);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test06591() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(67);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test06692() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(68);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test06693() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(68);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getType() {
    return type;
}","public void test06794() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(69, """");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(69, node0.getType());
}",""
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test06895() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(70, 70, 70);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test06896() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(70, 70, 70);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test06997() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(71);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test06998() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(71);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test07099() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(72);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test070100() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(72);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test071101() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(73);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test071102() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(73);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test072103() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(74);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test072104() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(74);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test073105() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(75);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test073106() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(75);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test074107() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(76);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test074108() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(76);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean isVarArgs() {
    return getBooleanProp(VAR_ARGS_NAME);
}","public void test075109() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(77);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isVarArgs());
}","/**
 * Returns whether this node is a variable length argument node. This
 * method's return value is meaningful only on {@link Token#NAME} nodes
 * used to define a {@link Token#FUNCTION}'s argument list.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test076110() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test076111() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test077112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(79);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test077113() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(79);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test078114() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(80);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test078115() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(80);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test079116() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber(Double.NaN);
    Node node1 = new Node(81, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test079117() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber(Double.NaN);
    Node node1 = new Node(81, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test080118() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(82, """");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test080119() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(82, """");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test081120() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    JSType[] jSTypeArray0 = new JSType[1];
    JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSTypeArray0[0] = jSType0;
    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(16, Node.SOURCENAME_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test082121() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(84, 84, 84);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test082122() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(84, 84, 84);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test083123() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(85, """");
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test084124() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(87, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test084125() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-33.72289608628942));
    Node node1 = new Node(87, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test085126() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(90);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test086127() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-889.9064));
    Node node1 = new Node(91, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals((-1), Node.CATCH_SCOPE_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test087128() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(92);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test088129() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(94, 94, 94);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test089130() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-35.17328011595348));
    Node node1 = new Node(96, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(3, Node.CONTINUE_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test090131() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(98);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(50, Node.FREE_CALL);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test091132() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(99, ""d/Joz{w4<if\""o``$z"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test091133() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(99, ""d/Joz{w4<if\""o``$z"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test092134() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(100, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test092135() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(100, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test093136() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(101);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals((-1), node0.getSourcePosition());
}",""
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test094137() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(102);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test095138() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-889.9064));
    Node node1 = new Node(103, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(25, Node.ISNUMBER_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test096139() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(104);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test096140() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(104);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test097141() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test098142() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(106);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test098143() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(106);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test099144() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(107);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test099145() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(107);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean isSyntheticBlock() {
    return getBooleanProp(SYNTHETIC_BLOCK_PROP);
}","public void test100146() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(108);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isSyntheticBlock());
}","/**
 * Returns whether this is a synthetic block that should not be considered
 * a real source block.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test101147() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(109);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test101148() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(109);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test102149() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(110);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(47, Node.IS_DISPATCHER);
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test103150() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(111);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test104151() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(112);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test105152() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(113);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(5, Node.FUNCTION_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test106153() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(114);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(12, Node.COLUMN_BITS);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test107154() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(115);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(50, Node.LAST_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test108155() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(116);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test109156() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(117);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(34, Node.NAME_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test110157() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(119);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test111158() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(120);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.RIGHT);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test112159() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(121);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test112160() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(121);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test113161() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(122);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(19, Node.LABEL_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test114162() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(123, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test114163() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(123, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getLineNumber() {
    Node cur = curNode;
    while (cur != null) {
        int line = cur.getLineno();
        if (line >= 0) {
            return line;
        }
        cur = cur.getParent();
    }
    return 0;
}","public void test115164() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(124);
    typeCheck0.visit(nodeTraversal0, node0, (Node) null);
    assertEquals(0, nodeTraversal0.getLineNumber());
}","/**
 * Gets the current line number, or zero if it cannot be determined. The line
 * number is retrieved lazily as a running time optimization.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test116165() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(126);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.ATTRIBUTE_FLAG);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test117166() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = new Node(127);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test117167() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = new Node(127);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test118168() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(128);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test118169() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(128);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test119170() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(129);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test119171() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(129);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test120172() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(131);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test120173() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(131);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test121174() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(133);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test121175() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(133);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test122176() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(134);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test122177() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(134);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test123178() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(135);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test123179() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(135);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test124180() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(136);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test124181() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(136);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test125182() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(137);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test125183() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(137);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test126184() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(138);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test126185() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(138);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test127186() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(139);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test127187() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(139);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test128188() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(140);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test128189() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(140);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test129190() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(141);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test129191() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(141);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test130192() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(142);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test130193() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(142);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test131194() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(143);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test131195() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(143);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test132196() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(144);
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeTraversal"", e);
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test133197() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(145);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test133198() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(145);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test134199() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(146);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test134200() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(146);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test135201() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(147);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    assertEquals(42, Node.SIDE_EFFECT_FLAGS);
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test136202() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(148);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(42, Node.SIDE_EFFECT_FLAGS);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test137203() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(149);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test137204() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(149);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test138205() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    Node node1 = new Node(150);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test138206() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(78);
    Node node1 = new Node(150);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test139207() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Node node0 = new Node(151);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // 151
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Traverses a node recursively.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test140208() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(152, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test140209() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(152, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test141210() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(153);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(49, Node.DIRECT_EVAL);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test142211() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""/OYJO0LbBJ?7%emi"");
    Node node1 = new Node(3, node0, node0, 153, 45);
    Node node2 = new Node(88, node1);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test142212() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""/OYJO0LbBJ?7%emi"");
    Node node1 = new Node(3, node0, node0, 153, 45);
    Node node2 = new Node(88, node1);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test143213() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(83);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test144214() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(64, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(27, Node.SPECIALCALL_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test145215() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber((-3109.134516841137));
    Node node1 = new Node(37, node0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test146216() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(15, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(34, Node.NAME_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test147217() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(47);
    Node node1 = new Node(15, node0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(7, Node.LOCAL_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test148218() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(64);
    node0.addChildToFront(node0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected node type: OBJECTLIT : com.google.javascript.rhino.jstype.UnknownType@0000000163
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test149219() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(50);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    TypeCheck typeCheck1 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, checkLevel0, checkLevel0);
    typeCheck1.visit(nodeTraversal0, node0, node0);
    assertEquals(2, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"boolean visitName(NodeTraversal t, Node n, Node parent) {
    // At this stage, we need to determine whether this is a leaf
    // node in an expression (which therefore needs to have a type
    // assigned for it) versus some other decorative node that we
    // can safely ignore.  Function names, arguments (children of LP nodes) and
    // variable declarations are ignored.
    // TODO(user): remove this short-circuiting in favor of a
    // pre order traversal of the FUNCTION, CATCH, LP and VAR nodes.
    int parentNodeType = parent.getType();
    if (parentNodeType == Token.FUNCTION || parentNodeType == Token.CATCH || parentNodeType == Token.LP || parentNodeType == Token.VAR) {
        return false;
    }
    JSType type = n.getJSType();
    if (type == null) {
        type = getNativeType(UNKNOWN_TYPE);
        Var var = t.getScope().getVar(n.getString());
        if (var != null) {
            JSType varType = var.getType();
            if (varType != null) {
                type = varType;
            }
        }
    }
    ensureTyped(t, n, type);
    return true;
}","public void test150220() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(105);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}","/**
 * Visits a NAME node.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 * @return whether the node is typeable or not
 */"
"boolean visitName(NodeTraversal t, Node n, Node parent) {
    // At this stage, we need to determine whether this is a leaf
    // node in an expression (which therefore needs to have a type
    // assigned for it) versus some other decorative node that we
    // can safely ignore.  Function names, arguments (children of LP nodes) and
    // variable declarations are ignored.
    // TODO(user): remove this short-circuiting in favor of a
    // pre order traversal of the FUNCTION, CATCH, LP and VAR nodes.
    int parentNodeType = parent.getType();
    if (parentNodeType == Token.FUNCTION || parentNodeType == Token.CATCH || parentNodeType == Token.LP || parentNodeType == Token.VAR) {
        return false;
    }
    JSType type = n.getJSType();
    if (type == null) {
        type = getNativeType(UNKNOWN_TYPE);
        Var var = t.getScope().getVar(n.getString());
        if (var != null) {
            JSType varType = var.getType();
            if (varType != null) {
                type = varType;
            }
        }
    }
    ensureTyped(t, n, type);
    return true;
}","public void test151221() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(120);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, memoizedScopeCreator0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}","/**
 * Visits a NAME node.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 * @return whether the node is typeable or not
 */"
"boolean visitName(NodeTraversal t, Node n, Node parent) {
    // At this stage, we need to determine whether this is a leaf
    // node in an expression (which therefore needs to have a type
    // assigned for it) versus some other decorative node that we
    // can safely ignore.  Function names, arguments (children of LP nodes) and
    // variable declarations are ignored.
    // TODO(user): remove this short-circuiting in favor of a
    // pre order traversal of the FUNCTION, CATCH, LP and VAR nodes.
    int parentNodeType = parent.getType();
    if (parentNodeType == Token.FUNCTION || parentNodeType == Token.CATCH || parentNodeType == Token.LP || parentNodeType == Token.VAR) {
        return false;
    }
    JSType type = n.getJSType();
    if (type == null) {
        type = getNativeType(UNKNOWN_TYPE);
        Var var = t.getScope().getVar(n.getString());
        if (var != null) {
            JSType varType = var.getType();
            if (varType != null) {
                type = varType;
            }
        }
    }
    ensureTyped(t, n, type);
    return true;
}","public void test152222() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newNumber(0.0);
    ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
    assertFalse(boolean0);
}","/**
 * Visits a NAME node.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 * @return whether the node is typeable or not
 */"
"boolean visitName(NodeTraversal t, Node n, Node parent) {
    // At this stage, we need to determine whether this is a leaf
    // node in an expression (which therefore needs to have a type
    // assigned for it) versus some other decorative node that we
    // can safely ignore.  Function names, arguments (children of LP nodes) and
    // variable declarations are ignored.
    // TODO(user): remove this short-circuiting in favor of a
    // pre order traversal of the FUNCTION, CATCH, LP and VAR nodes.
    int parentNodeType = parent.getType();
    if (parentNodeType == Token.FUNCTION || parentNodeType == Token.CATCH || parentNodeType == Token.LP || parentNodeType == Token.VAR) {
        return false;
    }
    JSType type = n.getJSType();
    if (type == null) {
        type = getNativeType(UNKNOWN_TYPE);
        Var var = t.getScope().getVar(n.getString());
        if (var != null) {
            JSType varType = var.getType();
            if (varType != null) {
                type = varType;
            }
        }
    }
    ensureTyped(t, n, type);
    return true;
}","public void test153223() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}","/**
 * Visits a NAME node.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 * @return whether the node is typeable or not
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test154224() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(16, node0, node0, node0, 23, 19);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test154225() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""msg.no.regexp"");
    Node node1 = new Node(16, node0, node0, node0, 23, 19);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test155226() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, ""MLs8xB9TL=eW.*g|X"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
    Node node0 = Node.newString(""km{!"");
    Node node1 = new Node(33, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test156227() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(118);
    Node node1 = new Node(118, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // VAR is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test157228() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    Node node2 = new Node(15, node1);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test158229() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    node1.setSourcePositionForTree(0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(1, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test158230() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newNumber((double) 1);
    Node node1 = new Node(30, node0);
    node1.setSourcePositionForTree(0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test159231() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Node node0 = new Node(50);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = compiler0.parseTestCode(""com.google.javascript.jscomp.BasicErrorManager$ErrorWithLevel"");
    Node node2 = new Node(30, node1, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node2, node1);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test160232() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(89);
    Node node1 = new Node(89, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, node1.getChildCount());
}",""
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test161233() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(95, """");
    node0.addChildToFront(node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(19, Node.LABEL_PROP);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    JSType childType;
    JSType leftType, rightType;
    Node left, right;
    // To be explicitly set to false if the node is not typeable.
    boolean typeable = true;
    switch(n.getType()) {
        case Token.NAME:
            typeable = visitName(t, n, parent);
            break;
        case Token.LP:
            // If this is under a FUNCTION node, it is a parameter list and can be
            // ignored here.
            if (parent.getType() != Token.FUNCTION) {
                ensureTyped(t, n, getJSType(n.getFirstChild()));
            } else {
                typeable = false;
            }
            break;
        case Token.COMMA:
            ensureTyped(t, n, getJSType(n.getLastChild()));
            break;
        case Token.TRUE:
        case Token.FALSE:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.THIS:
            ensureTyped(t, n, t.getScope().getTypeOfThis());
            break;
        case Token.REF_SPECIAL:
            ensureTyped(t, n);
            break;
        case Token.GET_REF:
            ensureTyped(t, n, getJSType(n.getFirstChild()));
            break;
        case Token.NULL:
            ensureTyped(t, n, NULL_TYPE);
            break;
        case Token.NUMBER:
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.STRING:
            // Object literal keys are handled with OBJECTLIT
            if (!NodeUtil.isObjectLitKey(n, n.getParent())) {
                ensureTyped(t, n, STRING_TYPE);
            }
            break;
        case Token.GET:
        case Token.SET:
            // Object literal keys are handled with OBJECTLIT
            break;
        case Token.ARRAYLIT:
            ensureTyped(t, n, ARRAY_TYPE);
            break;
        case Token.REGEXP:
            ensureTyped(t, n, REGEXP_TYPE);
            break;
        case Token.GETPROP:
            visitGetProp(t, n, parent);
            typeable = !(parent.getType() == Token.ASSIGN && parent.getFirstChild() == n);
            break;
        case Token.GETELEM:
            visitGetElem(t, n);
            // The type of GETELEM is always unknown, so no point counting that.
            // If that unknown leaks elsewhere (say by an assignment to another
            // variable), then it will be counted.
            typeable = false;
            break;
        case Token.VAR:
            visitVar(t, n);
            typeable = false;
            break;
        case Token.NEW:
            visitNew(t, n);
            typeable = true;
            break;
        case Token.CALL:
            visitCall(t, n);
            typeable = !NodeUtil.isExpressionNode(parent);
            break;
        case Token.RETURN:
            visitReturn(t, n);
            typeable = false;
            break;
        case Token.DEC:
        case Token.INC:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""increment/decrement"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.NOT:
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.VOID:
            ensureTyped(t, n, VOID_TYPE);
            break;
        case Token.TYPEOF:
            ensureTyped(t, n, STRING_TYPE);
            break;
        case Token.BITNOT:
            childType = getJSType(n.getFirstChild());
            if (!childType.matchesInt32Context()) {
                report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()), childType.toString());
            }
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.POS:
        case Token.NEG:
            left = n.getFirstChild();
            validator.expectNumber(t, left, getJSType(left), ""sign operator"");
            ensureTyped(t, n, NUMBER_TYPE);
            break;
        case Token.EQ:
        case Token.NE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                TernaryValue result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                if (result != TernaryValue.UNKNOWN) {
                    if (n.getType() == Token.NE) {
                        result = result.not();
                    }
                    report(t, n, DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.SHEQ:
        case Token.SHNE:
            {
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                    report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(), rightType.toString());
                }
                ensureTyped(t, n, BOOLEAN_TYPE);
                break;
            }
        case Token.LT:
        case Token.LE:
        case Token.GT:
        case Token.GE:
            leftType = getJSType(n.getFirstChild());
            rightType = getJSType(n.getLastChild());
            if (rightType.isNumber()) {
                validator.expectNumber(t, n, leftType, ""left side of numeric comparison"");
            } else if (leftType.isNumber()) {
                validator.expectNumber(t, n, rightType, ""right side of numeric comparison"");
            } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                // OK.
            } else {
                // Whether the comparison is numeric will be determined at runtime
                // each time the expression is evaluated. Regardless, both operands
                // should match a string context.
                String message = ""left side of comparison"";
                validator.expectString(t, n, leftType, message);
                validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(STRING_TYPE));
                message = ""right side of comparison"";
                validator.expectString(t, n, rightType, message);
                validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(STRING_TYPE));
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.IN:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right);
            validator.expectObject(t, n, rightType, ""'in' requires an object"");
            validator.expectString(t, left, leftType, ""left side of 'in'"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.INSTANCEOF:
            left = n.getFirstChild();
            right = n.getLastChild();
            leftType = getJSType(left);
            rightType = getJSType(right).restrictByNotNullOrUndefined();
            validator.expectAnyObject(t, left, leftType, ""deterministic instanceof yields false"");
            validator.expectActualObject(t, right, rightType, ""instanceof requires an object"");
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.ASSIGN:
            visitAssign(t, n);
            typeable = false;
            break;
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_MUL:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.DIV:
        case Token.MOD:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.SUB:
        case Token.ADD:
        case Token.MUL:
            visitBinaryOperator(n.getType(), t, n);
            break;
        case Token.DELPROP:
            if (!isReference(n.getFirstChild())) {
                report(t, n, BAD_DELETE);
            }
            ensureTyped(t, n, BOOLEAN_TYPE);
            break;
        case Token.CASE:
            JSType switchType = getJSType(parent.getFirstChild());
            JSType caseType = getJSType(n.getFirstChild());
            validator.expectSwitchMatchesCase(t, n, switchType, caseType);
            typeable = false;
            break;
        case Token.WITH:
            {
                Node child = n.getFirstChild();
                childType = getJSType(child);
                validator.expectObject(t, child, childType, ""with requires an object"");
                typeable = false;
                break;
            }
        case Token.FUNCTION:
            visitFunction(t, n);
            break;
        // These nodes have no interesting type behavior.
        case Token.LABEL:
        case Token.LABEL_NAME:
        case Token.SWITCH:
        case Token.BREAK:
        case Token.CATCH:
        case Token.TRY:
        case Token.SCRIPT:
        case Token.EXPR_RESULT:
        case Token.BLOCK:
        case Token.EMPTY:
        case Token.DEFAULT:
        case Token.CONTINUE:
        case Token.DEBUGGER:
        case Token.THROW:
            typeable = false;
            break;
        // These nodes require data flow analysis.
        case Token.DO:
        case Token.FOR:
        case Token.IF:
        case Token.WHILE:
            typeable = false;
            break;
        // These nodes are typed during the type inference.
        case Token.AND:
        case Token.HOOK:
        case Token.OBJECTLIT:
        case Token.OR:
            if (n.getJSType() != null) {
                // If we didn't run type inference.
                ensureTyped(t, n);
            } else {
                // If this is an enum, then give that type to the objectlit as well.
                if ((n.getType() == Token.OBJECTLIT) && (parent.getJSType() instanceof EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
            }
            if (n.getType() == Token.OBJECTLIT) {
                for (Node key : n.children()) {
                    visitObjLitKey(t, key, n);
                }
            }
            break;
        default:
            report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));
            ensureTyped(t, n);
            break;
    }
    // Don't count externs since the user's code may not even use that part.
    typeable = typeable && !inExterns;
    if (typeable) {
        doPercentTypedAccounting(t, n);
    }
    checkNoTypeCheckSection(n, false);
}","public void test162234() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(97, "" "");
    node0.addChildToFront(node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(43, Node.IS_CONSTANT_NAME);
}","/**
 * This is the meat of the type checking.  It is basically one big switch,
 * with each case representing one type of parse tree node.  The individual
 * cases are usually pretty straightforward.
 *
 * @param t The node traversal object that supplies context, such as the
 * scope chain to use in name lookups as well as error reporting.
 * @param n The node being visited.
 * @param parent The parent of the node n.
 */"
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test163235() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""  parent:"");
    Node node1 = new Node(93, node0, 18, 2);
    node1.addSuppression(""  parent:"");
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) typeCheck0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"double getTypedPercent() {
    int total = nullCount + unknownCount + typedCount;
    if (total == 0) {
        return 0.0;
    } else {
        return (100.0 * typedCount) / total;
    }
}","public void test164236() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = compiler0.parseTestCode("" }'"");
    Node node1 = Node.newNumber(2826.5521567642);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(100.0, double0, 0.01);
}","/**
 * Returns the percentage of nodes typed by the type checker.
 * @return a number between 0.0 and 100.0
 */"
"double getTypedPercent() {
    int total = nullCount + unknownCount + typedCount;
    if (total == 0) {
        return 0.0;
    } else {
        return (100.0 * typedCount) / total;
    }
}","public void test165237() throws Throwable {
    Compiler compiler0 = new Compiler();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    compiler0.initCompilerOptionsIfTesting();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(0.0, double0, 0.01);
}","/**
 * Returns the percentage of nodes typed by the type checker.
 * @return a number between 0.0 and 100.0
 */"
