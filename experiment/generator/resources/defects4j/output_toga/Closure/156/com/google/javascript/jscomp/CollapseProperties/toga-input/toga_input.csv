focal_method,test_prefix,docstring
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""var t;"");
    CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, true);
    collapseProperties0.process(node0, node0);
    assertEquals(1, node0.getChildCount());
}",""
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""var t;"");
    CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, true, true);
    collapseProperties0.process(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"@Override
public void process(Node externs, Node root) {
    GlobalNamespace namespace;
    if (collapsePropertiesOnExternTypes) {
        namespace = new GlobalNamespace(compiler, externs, root);
    } else {
        namespace = new GlobalNamespace(compiler, root);
    }
    if (inlineAliases) {
        inlineAliases(namespace);
    }
    nameMap = namespace.getNameIndex();
    globalNames = namespace.getNameForest();
    checkNamespaces();
    for (Name n : globalNames) {
        flattenReferencesToCollapsibleDescendantNames(n, n.name);
    }
    // We collapse property definitions after collapsing property references
    // because this step can alter the parse tree above property references,
    // invalidating the node ancestry stored with each reference.
    for (Name n : globalNames) {
        collapseDeclarationOfNameAndDescendants(n, n.name);
    }
}","public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, false);
    // Undeclared exception!
    try {
        collapseProperties0.process((Node) null, (Node) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
