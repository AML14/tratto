project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ClosureRewriteClass closureRewriteClass0 = new ClosureRewriteClass(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, closureRewriteClass0);
    typeValidator0.expectValidTypeofName(nodeTraversal0, node0, ""com.google.javascript.rhino.head.ast.XmlRef"");
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    VarCheck varCheck0 = new VarCheck(compiler0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
    typeValidator0.expectNumber(nodeTraversal0, node0, functionType0, ""<uFh0B%Mqok 5Qm'4g"");
    assertEquals(1, compiler0.getWarningCount());
}",0,"assertEquals(1, compiler0.getWarningCount())"
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""s4A[XTD"");
    InlineProperties inlineProperties0 = new InlineProperties(compiler0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""[n]A.97h/d,n"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, ""Not declared as a constructor"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test055,"public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""#M!Td_9QdzpvwM;W[C"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    // Undeclared exception!
    try {
        typeValidator0.expectObject((NodeTraversal) null, node0, jSType0, (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeValidator"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, ""M^dJr9 2rjR"");
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test077,"public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, ""F~\""8!okd"");
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test088,"public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""(hH 20;-Q7>&-"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, node0, jSType0);
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
    typeValidator0.expectAnyObject(nodeTraversal0, node0, enumType0, ""|Jf*"");
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test099,"public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    NoType noType0 = (NoType) modificationVisitor0.caseNoType();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
    typeValidator0.expectAnyObject(nodeTraversal0, node0, noType0, ""Not declared as a constructor"");
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test1010,"public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    typeValidator0.expectAnyObject(nodeTraversal0, (Node) null, jSType0, ""Q#"");
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    typeValidator0.expectString(nodeTraversal0, node0, jSType0, ""Not declared as a type name"");
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test1212,"public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
    typeValidator0.expectString(nodeTraversal0, node0, functionType0, ""Not declared as a constructor"");
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test1213,"public void test1213() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
    typeValidator0.expectString(nodeTraversal0, node0, functionType0, ""Not declared as a constructor"");
    assertEquals(1, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test1314,"public void test1314() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("""");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    typeValidator0.expectNumber((NodeTraversal) null, node0, jSType0, ""Named type with empty name component"");
    assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    typeValidator0.expectBitwiseable((NodeTraversal) null, node0, jSType0, ""Unknown class name"");
    assertEquals(0, JSType.NOT_ENUMDECL);
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("""");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
    typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, ""{y7~Is4<)*NTI*"");
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test1517,"public void test1517() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("""");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, node0);
    typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, ""{y7~Is4<)*NTI*"");
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test1618,"public void test1618() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""(hH s0;Q7>&-"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
    CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(compilerOptions0.brokenClosureRequiresLevel);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0, (ScopeCreator) null);
    typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType1, ""w!"");
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test1719,"public void test1719() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
    typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, jSType0, ""Not declared as a type name"");
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test1820,"public void test1820() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A [XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, ""Named type with empty name component"");
    assertTrue(objectType0.hasCachedValues());
}",0,assertTrue(objectType0.hasCachedValues())
project,0,test1821,"public void test1821() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A [XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, ""Named type with empty name component"");
    assertEquals(1, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test1922,"public void test1922() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseAllType();
    typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, ""~h._4LX.92H3-vo)4` "");
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test2023,"public void test2023() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ohH 2;Q7>&-"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    boolean boolean0 = typeValidator0.expectNotNullOrUndefined((NodeTraversal) null, node0, jSType0, ""Named type with empty name component"", jSType0);
    assertTrue(boolean0);
}",0,
project,0,test2124,"public void test2124() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    NameReferenceGraph nameReferenceGraph0 = new NameReferenceGraph(compiler0);
    NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.WINDOW;
    JSType jSType0 = nameReferenceGraph_Name0.getType();
    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, ""|Tgv|~lM<z;x+Lk&ln"", jSType0);
    assertTrue(boolean0);
}",0,
project,0,test2225,"public void test2225() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""s4A[XTD"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, enumType0, ""Not declared as a constructor"", enumType0);
    assertTrue(boolean0);
}",0,
project,0,test2326,"public void test2326() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
    JSType jSType2 = modificationVisitor0.caseBooleanType();
    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType1, ""Unknown class name"", jSType2);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test2327,"public void test2327() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
    JSType jSType2 = modificationVisitor0.caseBooleanType();
    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType1, ""Unknown class name"", jSType2);
    assertFalse(boolean0);
}",0,
project,0,test2428,"public void test2428() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
    typeValidator0.expectSwitchMatchesCase(nodeTraversal0, (Node) null, jSType0, jSType0);
    assertFalse(jSType0.isConstructor());
}",0,assertFalse(jSType0.isConstructor())
project,0,test2529,"public void test2529() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""s4A[XTD"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, enumType0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test2630,"public void test2630() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
    JSType jSType2 = modificationVisitor0.caseBooleanType();
    typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType1, jSType2);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test2731,"public void test2731() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNoType();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, ""Unknown class name"");
    assertTrue(boolean0);
}",0,
project,0,test2832,"public void test2832() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""sA[XD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, ""Not declared as a constructor"");
    assertTrue(boolean0);
}",0,
project,0,test2933,"public void test2933() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
    JSType[] jSTypeArray0 = new JSType[7];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, functionType0, node0, ""Unknown class name"");
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test2934,"public void test2934() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
    JSType[] jSTypeArray0 = new JSType[7];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, functionType0, node0, ""Unknown class name"");
    assertFalse(boolean0);
}",0,
project,0,test3035,"public void test3035() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, enumType0, node0, ""Named type with empty name component"");
    assertEquals(1, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test3036,"public void test3036() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, enumType0, node0, ""Named type with empty name component"");
    assertFalse(boolean0);
}",0,
project,0,test3137,"public void test3137() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""4\"">e:P9G%oD*"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    EnumType enumType1 = jSTypeRegistry0.createEnumType(""4\"">e:P9G%oD*"", node0, jSType0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType1, enumType0, node0, """");
    assertFalse(boolean0);
}",0,
project,0,test3138,"public void test3138() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""4\"">e:P9G%oD*"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    EnumType enumType1 = jSTypeRegistry0.createEnumType(""4\"">e:P9G%oD*"", node0, jSType0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType1, enumType0, node0, """");
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test3239,"public void test3239() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, ""Not declared as a constructor"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3340,"public void test3340() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s`4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, jSType0, ""Not declared as a constructor"");
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test3341,"public void test3341() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s`4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, jSType0, ""Not declared as a constructor"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3442,"public void test3442() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, enumType0, """");
    assertEquals(1, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test3443,"public void test3443() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, enumType0, """");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3544,"public void test3544() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""(hH 20;-Q7>&-"");
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    NoType noType0 = (NoType) modificationVisitor0.caseNoType();
    NullType nullType0 = (NullType) modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""5_0^ EnV;"", node0, nullType0);
    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, noType0, ""Not declared as a type name"");
    assertTrue(noType0.hasCachedValues());
}",0,assertTrue(noType0.hasCachedValues())
project,0,test3545,"public void test3545() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""(hH 20;-Q7>&-"");
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    NoType noType0 = (NoType) modificationVisitor0.caseNoType();
    NullType nullType0 = (NullType) modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""5_0^ EnV;"", node0, nullType0);
    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, noType0, ""Not declared as a type name"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3646,"public void test3646() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, 40);
    assertEquals(0, nodeTraversal0.getLineNumber());
}",0,"assertEquals(0, nodeTraversal0.getLineNumber())"
project,0,test3747,"public void test3747() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ohH 2;Q7>&-"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseNoType();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);
    // Undeclared exception!
    try {
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType1, node0, 1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeValidator"", e);
    }
}",0,
project,0,test3848,"public void test3848() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("""");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, ""Z\""]|+*^8;"", jSType0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test3949,"public void test3949() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
    typeValidator0.expectCanOverride(nodeTraversal0, (Node) null, functionType0, jSType0, ""variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}"", functionType0);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test3950,"public void test3950() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
    typeValidator0.expectCanOverride(nodeTraversal0, (Node) null, functionType0, jSType0, ""variable {0} redefined with type {1}, original definition at {2}:{3} with type {4}"", functionType0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test4051,"public void test4051() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A [XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
    assertTrue(objectType0.hasCachedValues());
}",0,assertTrue(objectType0.hasCachedValues())
project,0,test4052,"public void test4052() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A [XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test4153,"public void test4153() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""ohH 2;Q7>&-"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    NoType noType0 = (NoType) modificationVisitor0.caseNoType();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    FindExportableNodes findExportableNodes0 = new FindExportableNodes(compiler0);
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, findExportableNodes0, typedScopeCreator0);
    typeValidator0.expectSuperType(nodeTraversal0, node0, noType0, noType0);
    assertEquals(43, Node.IS_CONSTANT_NAME);
}",1,
project,0,test4254,"public void test4254() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""#M!Td_9QdzpvwM;W[C"");
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""unknown type: {0}"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, enumType0);
    assertEquals(53, Node.INPUT_ID);
}",1,
project,0,test4355,"public void test4355() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
    assertTrue(objectType0.hasCachedValues());
}",0,assertFalse(objectType0.hasCachedValues())
project,0,test4356,"public void test4356() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    JSTypeNative jSTypeNative0 = JSTypeNative.DATE_TYPE;
    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
    assertEquals(1, compiler0.getWarningCount());
}",0,"assertEquals(1, compiler0.getWarningCount())"
project,0,test4457,"public void test4457() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, enumType0);
    assertEquals(2, Node.POST_FLAG);
}",0,
project,0,test4558,"public void test4558() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, jSType0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test4659,"public void test4659() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
    typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, objectType0);
    assertTrue(objectType0.hasCachedValues());
}",0,assertFalse(objectType0.hasCachedValues())
project,0,test4660,"public void test4660() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", node0, jSType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
    typeValidator0.expectCanCast(nodeTraversal0, node0, enumType0, objectType0);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test4761,"public void test4761() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    InputId inputId0 = node0.getInputId();
    CompilerInput compilerInput0 = compiler0.getInput(inputId0);
    Scope.Var scope_Var0 = mock(Scope.Var.class, new ViolatedAssumptionAnswer());
    doReturn((Scope) null).when(scope_Var0).getScope();
    doReturn(jSType0).when(scope_Var0).getType();
    // Undeclared exception!
    try {
        typeValidator0.expectUndeclaredVariable(""Named type with empty name component"", compilerInput0, node0, node0, scope_Var0, ""Not declared as a constructor"", jSType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeValidator"", e);
    }
}",0,
project,0,test5064,"public void test5064() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
    JSType[] jSTypeArray0 = new JSType[7];
    jSTypeArray0[0] = jSType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, jSType0, ""g}anvg/coPorL5"");
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test5065,"public void test5065() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
    JSType[] jSTypeArray0 = new JSType[7];
    jSTypeArray0[0] = jSType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType(jSType0, false, jSTypeArray0);
    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, jSType0, ""g}anvg/coPorL5"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test5166,"public void test5166() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.rhino.head.ast.XmlRef"");
    TypeValidator typeValidator0 = new TypeValidator(compiler0);
    String string0 = typeValidator0.getReadableJSTypeName(node0, false);
    assertEquals(""?"", string0);
}",0,
project,0,test5267,"public void test5267() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
    typeValidator0.setShouldReport(false);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
    JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, (Node) null, functionType0, jSType1, node0, ""e1!r`,AKpl?T"");
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test5268,"public void test5268() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
    typeValidator0.setShouldReport(false);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
    JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);
    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, (Node) null, functionType0, jSType1, node0, ""e1!r`,AKpl?T"");
    assertFalse(boolean0);
}",0,
project,0,test5672,"public void test5672() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    String[] stringArray0 = new String[8];
    JSError jSError0 = JSError.make(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
    TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, jSType0, jSError0);
    TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, enumType0, jSError0);
    boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test5774,"public void test5774() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""s4A[XTD"");
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNullType();
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a constructor"", node0, jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    String[] stringArray0 = new String[8];
    JSError jSError0 = JSError.make(node0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);
    TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, jSType0, jSError0);
    TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(enumElementType0, enumElementType0, jSError0);
    boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
