{
  "test1212" : {
    "methodSignature" : "public void applySubclassRelationship(FunctionType parentCtor, FunctionType childCtor, SubclassType type)",
    "methodName" : "applySubclassRelationship",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.INHERITS;\n    googleCodingConvention0.applySubclassRelationship((FunctionType) null, (FunctionType) null, codingConvention_SubclassType0);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "public Bind describeFunctionBind(Node n)",
    "methodName" : "describeFunctionBind",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Node node0 = new Node((-2921));\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node0);\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public SubclassRelationship getClassesDefinedByCall(Node callNode)",
    "methodName" : "getClassesDefinedByCall",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    JSType[] jSTypeArray0 = new JSType[1];\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);\n    CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = googleCodingConvention0.getClassesDefinedByCall(node0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public Bind describeFunctionBind(Node n)",
    "methodName" : "describeFunctionBind",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    Node node0 = new Node((-2921));\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);\n    CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public Collection<AssertionFunctionSpec> getAssertionFunctions()",
    "methodName" : "getAssertionFunctions",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Collection<CodingConvention.AssertionFunctionSpec> collection0 = googleCodingConvention0.getAssertionFunctions();\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode)",
    "methodName" : "getObjectLiteralCast",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = Node.newNumber((-10.67296378501237));\n    googleCodingConvention0.getObjectLiteralCast((NodeTraversal) null, node0);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public String getDelegateSuperclassName()",
    "methodName" : "getDelegateSuperclassName",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.MIXIN;\n    googleCodingConvention0.applySubclassRelationship((FunctionType) null, (FunctionType) null, codingConvention_SubclassType0);\n    googleCodingConvention0.getDelegateSuperclassName();\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode)",
    "methodName" : "getObjectLiteralCast",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Node node0 = new Node((-2921), (-2921), (-2921));\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);\n    CodingConvention.ObjectLiteralCast codingConvention_ObjectLiteralCast0 = googleCodingConvention0.getObjectLiteralCast((NodeTraversal) null, node1);\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "public String extractClassNameIfProvide(Node node, Node parent)",
    "methodName" : "extractClassNameIfProvide",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    googleCodingConvention0.extractClassNameIfProvide((Node) null, (Node) null);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public boolean isOptionalParameter(Node parameter)",
    "methodName" : "isOptionalParameter",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    boolean boolean0 = closureCodingConvention0.isOptionalParameter((Node) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public String getAbstractMethodName()",
    "methodName" : "getAbstractMethodName",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    String string0 = googleCodingConvention0.getAbstractMethodName();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public String getExportPropertyFunction()",
    "methodName" : "getExportPropertyFunction",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    String string0 = googleCodingConvention0.getExportPropertyFunction();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public String getGlobalObject()",
    "methodName" : "getGlobalObject",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    String string0 = closureCodingConvention0.getGlobalObject();\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public String extractClassNameIfRequire(Node node, Node parent)",
    "methodName" : "extractClassNameIfRequire",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = Node.newNumber(1131.2815601);\n    String string0 = googleCodingConvention0.extractClassNameIfRequire(node0, node0);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public List<String> identifyTypeDeclarationCall(Node n)",
    "methodName" : "identifyTypeDeclarationCall",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\";isT$dOPOt2yWcxs\", \";isT$dOPOt2yWcxs\");\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    List<String> list0 = googleCodingConvention0.identifyTypeDeclarationCall(node0);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public SubclassRelationship getClassesDefinedByCall(Node callNode)",
    "methodName" : "getClassesDefinedByCall",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = new Node(33, 33, 33);\n    Node node1 = new Node(4, node0, 47, 33);\n    googleCodingConvention0.getClassesDefinedByCall(node1);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public Bind describeFunctionBind(Node n)",
    "methodName" : "describeFunctionBind",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Node node0 = new Node(42, 42, 42);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);\n    CodingConvention.Bind codingConvention_Bind0 = googleCodingConvention0.describeFunctionBind(node1);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public SubclassRelationship getClassesDefinedByCall(Node callNode)",
    "methodName" : "getClassesDefinedByCall",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = Node.newNumber((-10.67296378501237));\n    Node node1 = new Node((-1), node0, node0, node0, 20, 16);\n    CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = googleCodingConvention0.getClassesDefinedByCall(node1);\n}",
    "testName" : "test1515"
  },
  "test2020" : {
    "methodSignature" : "public boolean isPropertyTestFunction(Node call)",
    "methodName" : "isPropertyTestFunction",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Node node0 = new Node((-2921), (-2921), (-2921));\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node1 = new Node(37, node0, node0, node0, node0, 0, 5);\n    boolean boolean0 = googleCodingConvention0.isPropertyTestFunction(node1);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public boolean isVarArgsParameter(Node parameter)",
    "methodName" : "isVarArgsParameter",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    boolean boolean0 = closureCodingConvention0.isVarArgsParameter((Node) null);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public String getExportSymbolFunction()",
    "methodName" : "getExportSymbolFunction",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    String string0 = googleCodingConvention0.getExportSymbolFunction();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public boolean isSuperClassReference(String propertyName)",
    "methodName" : "isSuperClassReference",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    boolean boolean0 = closureCodingConvention0.isSuperClassReference((String) null);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public boolean isPrivate(String name)",
    "methodName" : "isPrivate",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    boolean boolean0 = closureCodingConvention0.isPrivate(\"com.google.javascript.jscomp.ControlFlowGraph$Branch\");\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public void applySingletonGetter(FunctionType functionType, FunctionType getterType, ObjectType objectType)",
    "methodName" : "applySingletonGetter",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    googleCodingConvention0.applySingletonGetter((FunctionType) null, (FunctionType) null, (ObjectType) null);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public String getSingletonGetterClassName(Node callNode)",
    "methodName" : "getSingletonGetterClassName",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = Node.newNumber((-2.1474836446971633E9));\n    Node node1 = new Node(50, node0, node0, node0, 35, 31);\n    String string0 = googleCodingConvention0.getSingletonGetterClassName(node1);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public boolean isPropertyTestFunction(Node call)",
    "methodName" : "isPropertyTestFunction",
    "className" : "com.google.javascript.jscomp.ClosureCodingConvention",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = Node.newNumber((-1488.2425));\n    googleCodingConvention0.isPropertyTestFunction(node0);\n}",
    "testName" : "test1919"
  }
}