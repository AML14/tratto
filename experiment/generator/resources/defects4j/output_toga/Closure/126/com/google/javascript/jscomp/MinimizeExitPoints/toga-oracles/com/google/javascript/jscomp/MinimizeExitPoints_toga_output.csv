project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""function JSCompiler_emptyFn() {  return function() {}}"");
    node0.setType(113);
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    minimizeExitPoints0.process(node0, node0);
    assertFalse(node0.isCall());
}",0,
project,0,test11,"public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""J;xg3*=h4t48^$@Z"");
    Node node1 = new Node(114, node0, node0, node0, 29, 0);
    minimizeExitPoints0.process(node0, node1);
    assertEquals(40, Node.ORIGINALNAME_PROP);
}",0,
project,0,test22,"public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""7;"");
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    Node node1 = new Node(115, node0, 34, 40);
    minimizeExitPoints0.process(node0, node1);
    assertFalse(node0.isName());
}",0,assertTrue(node0.isName())
project,0,test33,"public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, """");
    Node node1 = new Node(126, node0, node0, node0, 29, 0);
    // Undeclared exception!
    try {
        minimizeExitPoints0.process(node0, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test44,"public void test44() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node((-219), 102, (-2314));
    Node node1 = new Node(77, node0);
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    // Undeclared exception!
    try {
        minimizeExitPoints0.tryMinimizeExits(node1, (-219), (String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // -219
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test55,"public void test55() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""function JSCompiler_emptyFn() {  return function() {}}"");
    Node node1 = new Node(126, node0);
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    minimizeExitPoints0.tryMinimizeExits(node1, (-816), ""com.google.javascript.jscomp.MinimizeExitPoints"");
    assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
}",0,
project,0,test66,"public void test66() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(""com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache"");
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    minimizeExitPoints0.tryMinimizeExits(node0, 40, ""com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache"");
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test77,"public void test77() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""7;"");
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    Node node1 = new Node(115, node0, 34, 40);
    minimizeExitPoints0.tryMinimizeExits(node1, 115, (String) null);
    assertFalse(node1.isNoSideEffectsCall());
}",0,assertTrue(node1.isNoSideEffectsCall())
project,0,test88,"public void test88() throws Throwable {
    Compiler compiler0 = new Compiler();
    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
    Node node0 = new Node(0, 0, 0);
    Node node1 = new Node(0, node0);
    // Undeclared exception!
    try {
        minimizeExitPoints0.tryMinimizeExits(node1, 0, """");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 0
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
