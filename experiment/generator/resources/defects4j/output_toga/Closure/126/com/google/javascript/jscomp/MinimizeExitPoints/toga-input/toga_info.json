{
  "test00" : {
    "methodSignature" : "public boolean isCall()",
    "methodName" : "isCall",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"function JSCompiler_emptyFn() {  return function() {}}\");\n    node0.setType(113);\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    minimizeExitPoints0.process(node0, node0);\n    node0.isCall();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"J;xg3*=h4t48^$@Z\");\n    Node node1 = new Node(114, node0, node0, node0, 29, 0);\n    minimizeExitPoints0.process(node0, node1);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public boolean isName()",
    "methodName" : "isName",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"7;\");\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    Node node1 = new Node(115, node0, 34, 40);\n    minimizeExitPoints0.process(node0, node1);\n    node0.isName();\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\");\n    Node node1 = new Node(126, node0, node0, node0, 29, 0);\n    minimizeExitPoints0.process(node0, node1);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "void tryMinimizeExits(Node n, int exitType, String labelName)",
    "methodName" : "tryMinimizeExits",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = new Node((-219), 102, (-2314));\n    Node node1 = new Node(77, node0);\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    minimizeExitPoints0.tryMinimizeExits(node1, (-219), (String) null);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "void tryMinimizeExits(Node n, int exitType, String labelName)",
    "methodName" : "tryMinimizeExits",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"function JSCompiler_emptyFn() {  return function() {}}\");\n    Node node1 = new Node(126, node0);\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    minimizeExitPoints0.tryMinimizeExits(node1, (-816), \"com.google.javascript.jscomp.MinimizeExitPoints\");\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "public boolean isString()",
    "methodName" : "isString",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Node.newString(\"com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache\");\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    minimizeExitPoints0.tryMinimizeExits(node0, 40, \"com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache\");\n    node0.isString();\n}",
    "testName" : "test66"
  },
  "test77" : {
    "methodSignature" : "public boolean isNoSideEffectsCall()",
    "methodName" : "isNoSideEffectsCall",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"7;\");\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    Node node1 = new Node(115, node0, 34, 40);\n    minimizeExitPoints0.tryMinimizeExits(node1, 115, (String) null);\n    node1.isNoSideEffectsCall();\n}",
    "testName" : "test77"
  },
  "test88" : {
    "methodSignature" : "void tryMinimizeExits(Node n, int exitType, String labelName)",
    "methodName" : "tryMinimizeExits",
    "className" : "com.google.javascript.jscomp.MinimizeExitPoints",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);\n    Node node0 = new Node(0, 0, 0);\n    Node node1 = new Node(0, node0);\n    minimizeExitPoints0.tryMinimizeExits(node1, 0, \"\");\n}",
    "testName" : "test88"
  }
}