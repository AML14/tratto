[ {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test000"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean areMatchingExits(Node nodeThis, Node nodeThat)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test011"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test022"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test033"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test044"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean isAssignAdd()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isAssignAdd())",
  "exception" : "",
  "testName" : "test055"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test066"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean isEmpty()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isEmpty())",
  "exception" : "",
  "testName" : "test077"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean isThrow()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isThrow())",
  "exception" : "",
  "testName" : "test088"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test099"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1010"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1111"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1212"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1313"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean isAnd()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isAnd())",
  "exception" : "",
  "testName" : "test1414"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1515"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1616"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1717"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1818"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test1919"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2020"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean hasOneChild()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2021"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public int getType()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node2.getType())",
  "exception" : "",
  "testName" : "test2122"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean isBlock()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isBlock())",
  "exception" : "",
  "testName" : "test2223"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2324"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean isPure(Node n)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2425"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean isPure(Node n)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2526"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean isPure(Node n)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2627"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean isPure(Node n)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2728"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean areMatchingExits(Node nodeThis, Node nodeThat)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test2829"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean areMatchingExits(Node nodeThis, Node nodeThat)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test2930"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean isExceptionPossible(Node n)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test3031"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "boolean isExceptionPossible(Node n)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test3132"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3233"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3334"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3435"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public int getCharno()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertEquals(0, node2.getCharno())",
  "exception" : "",
  "testName" : "test3436"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3537"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean hasOneChild()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertFalse(node2.hasOneChild())",
  "exception" : "",
  "testName" : "test3538"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3639"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3740"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3841"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public Node optimizeSubtree(Node node)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test3942"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "public boolean isFor()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(node1.isFor())",
  "exception" : "",
  "testName" : "test4043"
}, {
  "className" : "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
  "methodSignature" : "static boolean containsUnicodeEscape(String s)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "assertTrue(boolean0)",
  "exception" : "",
  "testName" : "test4144"
} ]