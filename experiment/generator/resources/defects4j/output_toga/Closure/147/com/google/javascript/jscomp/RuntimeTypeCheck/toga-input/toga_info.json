{
  "test00" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RuntimeTypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    RuntimeTypeCheck runtimeTypeCheck0 = new RuntimeTypeCheck(compiler0, \"\");\n    Node node0 = Node.newString(\"\");\n    runtimeTypeCheck0.process(node0, node0);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RuntimeTypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    RuntimeTypeCheck runtimeTypeCheck0 = new RuntimeTypeCheck(compiler0, \"function(warning, expr) {}\");\n    Node node0 = compiler0.parseTestCode(\"function(warning, expr) {}\");\n    runtimeTypeCheck0.process(node0, node0);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RuntimeTypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Node.newString(4, \"com.google.javasbript.jscomp.RuntimeTypeCheck\");\n    RuntimeTypeCheck runtimeTypeCheck0 = new RuntimeTypeCheck(compiler0, \"com.google.javasbript.jscomp.RuntimeTypeCheck\");\n    runtimeTypeCheck0.process(node0, node0);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "static Node getBoilerplateCode(AbstractCompiler compiler, @Nullable String logFunction)",
    "methodName" : "getBoilerplateCode",
    "className" : "com.google.javascript.jscomp.RuntimeTypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    RuntimeTypeCheck.getBoilerplateCode(compiler0, (String) null);\n}",
    "testName" : "test33"
  }
}