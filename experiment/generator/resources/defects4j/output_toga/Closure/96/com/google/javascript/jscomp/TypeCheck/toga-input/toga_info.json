{
  "test0000" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(35, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test0000"
  },
  "test125179" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125179() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNTON_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(134, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test125179"
  },
  "test114165" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114165() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(120, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test114165"
  },
  "test125178" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125178() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNTON_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(134, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test125178"
  },
  "test04057" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04057() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(34, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test04057"
  },
  "test136198" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136198() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(145, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test136198"
  },
  "test136197" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136197() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(145, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test136197"
  },
  "test02431" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02431() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCT>Ow_McSKS_VARIABLE\", \"JSC_FUNCT>Ow_McSKS_VARIABLE\");\n    Node node1 = new Node(1, node0, node0, (-1037), 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test02431"
  },
  "test02430" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02430() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCT>Ow_McSKS_VARIABLE\", \"JSC_FUNCT>Ow_McSKS_VARIABLE\");\n    Node node1 = new Node(1, node0, node0, (-1037), 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.processForTesting(node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02430"
  },
  "test04056" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04056() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(34, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test04056"
  },
  "test119171" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119171() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(126, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test119171"
  },
  "test093140" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093140() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(97, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test093140"
  },
  "test131189" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131189() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"|VT(otpgYD7{[ln9[\", \"|VT(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(140, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test131189"
  },
  "test093141" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093141() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(97, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test093141"
  },
  "test01212" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/Ifl,^.'6,Axz\", \"(nN?\\\"e9hO\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, typedScopeCreator0);\n    Node node1 = Node.newNumber(0.0, 2088, 23);\n    Node node2 = new Node(37, node1, node0, node0, 7, 25);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    typeCheck0.visit(nodeTraversal0, node2, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01212"
  },
  "test108159" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108159() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"NaN\", \"NaN\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(113, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test108159"
  },
  "test03753" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03753() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(29, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test03753"
  },
  "test04966" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04966() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(48, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test04966"
  },
  "test05371" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05371() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(52, \"?<(}4%qAI<Ew.\\\"lO\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test05371"
  },
  "test0011" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(\"_FUNTON_MASKSVARIBL\");\n    Node node1 = new Node(90, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node1);\n}",
    "testName" : "test0011"
  },
  "test06588" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06588() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"Input variable map parse error: {0}\", \"Input variable map parse error: {0}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    Node node0 = Node.newString(65, \"Input variable map parse error: {0}\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test06588"
  },
  "test098147" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098147() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.a'26,Axz\", \"o/qWIfl,^.a'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(102, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test098147"
  },
  "test02532" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02532() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(17, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test02532"
  },
  "test077109" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077109() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Node.newString(\"implements\");\n    Node node1 = compiler0.parseTestCode(\"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node2 = new Node(79, node0, node1, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node2, node2);\n    compiler0.getErrorCount();\n}",
    "testName" : "test077109"
  },
  "test103153" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103153() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(108, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test103153"
  },
  "test06690" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06690() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"~`Wh~f&\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(66, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test06690"
  },
  "test0022" : {
    "methodSignature" : "public void process(Node externsRoot, Node jsRoot)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(269, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.process(node1, node1);\n}",
    "testName" : "test0022"
  },
  "test139202" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139202() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(148, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test139202"
  },
  "test04158" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04158() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"mismatch of the {0} property type and the type of the property it overrides from superclass {1}\\noriginal: {2}\\noverride: {3}\", \"mismatch of the {0} property type and the type of the property it overrides from superclass {1}\\noriginal: {2}\\noverride: {3}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(36, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test04158"
  },
  "test01313" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01313() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(4, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test01313"
  },
  "test076107" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076107() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_sARIABLE\", \"JSC_FUNCTION_MASKS_sARIABLE\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(78, \"JSC_FUNCTION_MASKS_sARIABLE\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test076107"
  },
  "test156223" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156223() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(10, node0, node0, node0);\n    node1.addSuppression((String) null);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test156223"
  },
  "test03854" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03854() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(31, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03854"
  },
  "test076108" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076108() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_sARIABLE\", \"JSC_FUNCTION_MASKS_sARIABLE\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(78, \"JSC_FUNCTION_MASKS_sARIABLE\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test076108"
  },
  "test156224" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156224() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(10, node0, node0, node0);\n    node1.addSuppression((String) null);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test156224"
  },
  "test139203" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139203() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(148, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test139203"
  },
  "test156225" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156225() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(10, node0, node0, node0);\n    node1.addSuppression((String) null);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test156225"
  },
  "test151218" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151218() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"@d QyEPqbq\");\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    Node node1 = new Node(118, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, compilerOptions0.checkRequires, compilerOptions0.checkMissingGetCssNameLevel);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);\n}",
    "testName" : "test151218"
  },
  "test07097" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07097() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.javascript.jscomp.DefaultPassConfig$53\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(70, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test07097"
  },
  "test07096" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07096() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.javascript.jscomp.DefaultPassConfig$53\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(70, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07096"
  },
  "test087127" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087127() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(91, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test087127"
  },
  "test087128" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087128() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(91, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test087128"
  },
  "test092139" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092139() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(96, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test092139"
  },
  "test0033" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node1 = new Node(152, node0, node0, 4, 122);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.processForTesting((Node) null, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test0033"
  },
  "test145211" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145211() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(0, node0, node0, node0, 11, 42);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test145211"
  },
  "test145212" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(0, node0, node0, node0, 11, 42);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test145212"
  },
  "test082117" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082117() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"I0iTHOWv]VLMs-4a\\\"Iy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(84, \"I0iTHOWv]VLMs-4a\\\"Iy\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test082117"
  },
  "test06689" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06689() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"~`Wh~f&\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(66, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06689"
  },
  "test140204" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140204() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(149, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test140204"
  },
  "test05473" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05473() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"~SC_FUNCTION_MASKS_VARIABLE\", \"N|6\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(53, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05473"
  },
  "test05472" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05472() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"~SC_FUNCTION_MASKS_VARIABLE\", \"N|6\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(53, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test05472"
  },
  "test140205" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140205() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(149, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test140205"
  },
  "test02634" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02634() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(18, node0, node0, node0, 29, 32);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02634"
  },
  "test02633" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02633() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(18, node0, node0, node0, 29, 32);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02633"
  },
  "test04259" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04259() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" E7#8S}ax\\\\\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(41, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test04259"
  },
  "test120172" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120172() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(127, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test120172"
  },
  "test086125" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086125() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(90, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test086125"
  },
  "test086126" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086126() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(90, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test086126"
  },
  "test06791" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06791() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"\", \"\");\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(67, \"\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06791"
  },
  "test121174" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121174() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(128, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test121174"
  },
  "test110161" : {
    "methodSignature" : "public boolean hasMoreThanOneChild()",
    "methodName" : "hasMoreThanOneChild",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110161() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(115, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.hasMoreThanOneChild();\n}",
    "testName" : "test110161"
  },
  "test081116" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081116() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"b\\\"f?;az\", \"(nN?\\\"pe9hO\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Stack<JSType> stack0 = new Stack<JSType>();\n    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test081116"
  },
  "test03041" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03041() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(22, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test03041"
  },
  "test03042" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03042() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(22, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03042"
  },
  "test06792" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06792() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"\", \"\");\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(67, \"\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06792"
  },
  "test132190" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132190() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"ha?\", \"ha?\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(141, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test132190"
  },
  "test086124" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086124() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(90, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test086124"
  },
  "test03955" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03955() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"g++1 #,E14W@$AA\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(32, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test03955"
  },
  "test097146" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097146() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUNTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(101, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test097146"
  },
  "test104155" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104155() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(109, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test104155"
  },
  "test104154" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104154() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(109, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test104154"
  },
  "test01414" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01414() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"PncQc1<N$:\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(5, node0, node0, node0, 0, 4);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01414"
  },
  "test121173" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121173() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(128, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test121173"
  },
  "test092138" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092138() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(96, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test092138"
  },
  "test109160" : {
    "methodSignature" : "public String getSourceName()",
    "methodName" : "getSourceName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109160() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"I0iTHyWv]VMs-4a\\\"y\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(114, \"m\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    nodeTraversal0.getSourceName();\n}",
    "testName" : "test109160"
  },
  "test126180" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126180() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"|VT(otpgYD7{[ln9[\", \"|VT(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);\n    Node node1 = new Node(135, node0, node0, node0, 19, 2);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test126180"
  },
  "test126181" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126181() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"|VT(otpgYD7{[ln9[\", \"|VT(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);\n    Node node1 = new Node(135, node0, node0, node0, 19, 2);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test126181"
  },
  "test07198" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07198() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCT>Ow_McSKS_VARIABLE\", \"JSC_FUNCT>Ow_McSKS_VARIABLE\");\n    Node node1 = new Node(71, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test07198"
  },
  "test04360" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04360() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(42, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test04360"
  },
  "test115167" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115167() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASPS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(121, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test115167"
  },
  "test147214" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test147214() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"hSC_FU[CTI)N_MASKSVA5IALE\");\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);\n    Node node1 = Node.newString(100, \"hSC_FU[CTI)N_MASKSVA5IALE\");\n    Node node2 = new Node(33, node0, node1);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);\n    TypeCheck typeCheck1 = defaultPassConfig0.makeTypeCheck(compiler0);\n    typeCheck1.visit(nodeTraversal0, node2, node1);\n    typeCheck1.visit(nodeTraversal0, node2, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test147214"
  },
  "test115166" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115166() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASPS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(121, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test115166"
  },
  "test07199" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07199() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCT>Ow_McSKS_VARIABLE\", \"JSC_FUNCT>Ow_McSKS_VARIABLE\");\n    Node node1 = new Node(71, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test07199"
  },
  "test05574" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05574() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(54, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05574"
  },
  "test142208" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142208() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"@d QyEPqbq\");\n    Node node1 = new Node(151, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test142208"
  },
  "test02736" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02736() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(19, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test02736"
  },
  "test02735" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02735() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(19, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02735"
  },
  "test116168" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116168() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"I0iTHyWv]VMs-4a\\\"y\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(122, \"I0iTHyWv]VMs-4a\\\"y\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test116168"
  },
  "test146213" : {
    "methodSignature" : "public boolean isVarArgs()",
    "methodName" : "isVarArgs",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test146213() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"b\\\"f?;az\", \"(nN?\\\"pe9hO\");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Stack<JSType> stack0 = new Stack<JSType>();\n    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);\n    Node node2 = new Node(105, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node2);\n    node1.isVarArgs();\n}",
    "testName" : "test146213"
  },
  "test03144" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03144() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(23, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test03144"
  },
  "test06894" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06894() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"com.google.javascript.jscomp.RemoveConstantExpressions$RemoveConstantRValuesCallback\", \"com.google.javascript.jscomp.RemoveConstantExpressions$RemoveConstantRValuesCallback\");\n    Node node1 = new Node(68, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test06894"
  },
  "test141206" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141206() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(150, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test141206"
  },
  "test03143" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03143() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(23, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03143"
  },
  "test06893" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06893() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"com.google.javascript.jscomp.RemoveConstantExpressions$RemoveConstantRValuesCallback\", \"com.google.javascript.jscomp.RemoveConstantExpressions$RemoveConstantRValuesCallback\");\n    Node node1 = new Node(68, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test06893"
  },
  "test141207" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141207() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(150, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test141207"
  },
  "test01516" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01516() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(6, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test01516"
  },
  "test01515" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01515() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(6, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01515"
  },
  "test06081" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06081() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(60, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06081"
  },
  "test06082" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06082() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(60, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06082"
  },
  "test05675" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05675() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"C!hb(~Oaav%W0+G=\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(55, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05675"
  },
  "test137199" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137199() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);\n    Node node1 = Node.newString(146, \"implements\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test137199"
  },
  "test04461" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04461() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(43, \"JSC_FUNCTION_MASKS_VARIABLE\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test04461"
  },
  "test100149" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100149() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(105, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test100149"
  },
  "test096145" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096145() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"Input variable map parse error: {0}\", \"Input variable map parse error: {0}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    Node node0 = Node.newString(100, \"Input variable map parse error: {0}\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test096145"
  },
  "test075106" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCTION_ASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(77, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test075106"
  },
  "test105156" : {
    "methodSignature" : "public boolean isOptionalArg()",
    "methodName" : "isOptionalArg",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105156() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"I0iTHyWv]VMs-4\\\"y\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(110, \"I0iTHyWv]VMs-4\\\"y\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isOptionalArg();\n}",
    "testName" : "test105156"
  },
  "test157226" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test157226() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test157226"
  },
  "test02838" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02838() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(20, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test02838"
  },
  "test02837" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02837() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(20, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02837"
  },
  "test091137" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091137() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    Node node1 = new Node(95, node0, node0, node0, node0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test091137"
  },
  "test091136" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091136() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    Node node1 = new Node(95, node0, node0, node0, node0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test091136"
  },
  "test152219" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test152219() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"mismatch of the {0} property type and the type of the property it overrides from interface {1}\\noriginal: {2}\\noverride: {3}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(\"\");\n    Node node2 = new Node(33, node0, node1);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node2, node0);\n}",
    "testName" : "test152219"
  },
  "test0088" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0088() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(86, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test0088"
  },
  "test148215" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test148215() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(105, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);\n}",
    "testName" : "test148215"
  },
  "test06995" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06995() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"I0iTHOWv]VLMs-4a\\\"Iy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(69, \"I0iTHOWv]VLMs-4a\\\"Iy\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test06995"
  },
  "test137200" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137200() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);\n    Node node1 = Node.newString(146, \"implements\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test137200"
  },
  "test03245" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03245() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(24, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test03245"
  },
  "test03246" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03246() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(24, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03246"
  },
  "test143209" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143209() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"I0iTHyWv]VMs-4a\\\"y\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = Node.newString(152, \"LD.2]?9)o# #,!~Q;E\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test143209"
  },
  "test02940" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02940() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Z#NR#,A4d}Fq`FNS;$\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(21, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test02940"
  },
  "test074105" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074105() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"SC_FUNTON_MASKS_VARIABL\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(76, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test074105"
  },
  "test154221" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test154221() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCION_MASPS_VARIABLE\", \"JSC_FUNCION_MASPS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(37, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test154221"
  },
  "test02026" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02026() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(12, node0, node0, node0, 1, 21);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test02026"
  },
  "test074104" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074104() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"SC_FUNTON_MASKS_VARIABL\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(76, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test074104"
  },
  "test05777" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05777() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"java/lang/Integer\", \"java/lang/Integer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(56, node0);\n    ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test05777"
  },
  "test079113" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079113() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(81, node0, node0, node0, 9, 90);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test079113"
  },
  "test01618" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01618() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCION_MASPS_VARIABLE\", \"JSC_FUNCION_MASPS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(7, node0, node0, node0, 2, 23);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01618"
  },
  "test079112" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079112() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(81, node0, node0, node0, 9, 90);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test079112"
  },
  "test01617" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01617() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCION_MASPS_VARIABLE\", \"JSC_FUNCION_MASPS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(7, node0, node0, node0, 2, 23);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test01617"
  },
  "test085123" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085123() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"|VT(otpgYD7{[ln9[\", \"|VT(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(89, node0, node0, node0, 2, 1);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test085123"
  },
  "test06183" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06183() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/Ifl,^.'26,Axz\", \"(nN?\\\"pe9hO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(61, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06183"
  },
  "test085122" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085122() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"|VT(otpgYD7{[ln9[\", \"|VT(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(89, node0, node0, node0, 2, 1);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test085122"
  },
  "test0099" : {
    "methodSignature" : "protected void traverseInnerNode(Node node, Node parent, Scope refinedScope)",
    "methodName" : "traverseInnerNode",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0099() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(105, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    nodeTraversal0.traverseInnerNode(node1, node0, (Scope) null);\n}",
    "testName" : "test0099"
  },
  "test111162" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111162() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"I0iTHOWv]VLMs-4a\\\"Iy\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(116, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    node1.getType();\n}",
    "testName" : "test111162"
  },
  "test122175" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122175() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"@d QyEPqbq\");\n    Node node1 = new Node(129, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test122175"
  },
  "test05776" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05776() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"java/lang/Integer\", \"java/lang/Integer\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(56, node0);\n    ConvertToDottedProperties convertToDottedProperties0 = new ConvertToDottedProperties(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, convertToDottedProperties0);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05776"
  },
  "test080115" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080115() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"~SC_FUNCTION_MASKS_VARIABLE\", \"d>C0efN/)\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node1 = Node.newString(82, \"\");\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test080115"
  },
  "test080114" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080114() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"~SC_FUNCTION_MASKS_VARIABLE\", \"d>C0efN/)\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node1 = Node.newString(82, \"\");\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test080114"
  },
  "test04562" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04562() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"JSC_FUNTON_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(44, 4095, 1);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test04562"
  },
  "test01720" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01720() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(8, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01720"
  },
  "test03347" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03347() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNTON_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(25, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test03347"
  },
  "test03348" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03348() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNTON_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(25, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test03348"
  },
  "test03349" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03349() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNTON_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(25, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test03349"
  },
  "test02939" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02939() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Z#NR#,A4d}Fq`FNS;$\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(21, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test02939"
  },
  "test127182" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127182() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention) compiler0.defaultCodingConvention;\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(136, node0, node0, node0);\n    RemoveConstantExpressions.RemoveConstantRValuesCallback removeConstantExpressions_RemoveConstantRValuesCallback0 = new RemoveConstantExpressions.RemoveConstantRValuesCallback();\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, removeConstantExpressions_RemoveConstantRValuesCallback0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test127182"
  },
  "test084121" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084121() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);\n    Node node1 = new Node(88, node0, node0, node0, 8, 28);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test084121"
  },
  "test084120" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084120() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);\n    Node node1 = new Node(88, node0, node0, node0, 8, 28);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test084120"
  },
  "test112163" : {
    "methodSignature" : "public boolean isNoSideEffectsCall()",
    "methodName" : "isNoSideEffectsCall",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112163() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(117, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node1.isNoSideEffectsCall();\n}",
    "testName" : "test112163"
  },
  "test123176" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123176() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"'Z[vb(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(131, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test123176"
  },
  "test089132" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089132() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(93, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n    compiler0.getWarningCount();\n}",
    "testName" : "test089132"
  },
  "test089131" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089131() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(93, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, (Node) null);\n    compiler0.hasErrors();\n}",
    "testName" : "test089131"
  },
  "test02127" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02127() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(13, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test02127"
  },
  "test128184" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128184() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASPS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(137, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test128184"
  },
  "test095144" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095144() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(99, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test095144"
  },
  "test106157" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106157() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"ha?\", \"ha?\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(111, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test106157"
  },
  "test095143" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095143() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(99, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test095143"
  },
  "test05878" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05878() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(57, \"?<(}4%qAI<Ew.\\\"lO\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05878"
  },
  "test090135" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090135() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(94, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test090135"
  },
  "test090134" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(94, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test090134"
  },
  "test128183" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128183() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASPS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(137, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test128183"
  },
  "test01719" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01719() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(8, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01719"
  },
  "test090133" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090133() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(94, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test090133"
  },
  "test06285" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06285() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(62, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06285"
  },
  "test06284" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06284() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckRegExp checkRegExp0 = new CheckRegExp(compiler0);\n    Node node1 = new Node(62, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkRegExp0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test06284"
  },
  "test117169" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117169() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"=`8#h|\", \"=`8#h|\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(123, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test117169"
  },
  "test04663" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04663() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(45, node0, node0, node0, 42, 13);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test04663"
  },
  "test03450" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03450() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" E7#8S}ax\\\\\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(26, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03450"
  },
  "test133192" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133192() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(142, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test133192"
  },
  "test133191" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133191() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(142, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test133191"
  },
  "test153220" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test153220() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(118, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test153220"
  },
  "test101151" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101151() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(106, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test101151"
  },
  "test101150" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101150() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(106, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test101150"
  },
  "test01822" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01822() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(9, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01822"
  },
  "test01821" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01821() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"?<(}4%qAI<Ew.\\\"lO\", \"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(9, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01821"
  },
  "test144210" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test144210() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(153);\n    typeCheck0.visit((NodeTraversal) null, node1, node0);\n}",
    "testName" : "test144210"
  },
  "test150217" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150217() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Vector<JSType> vector0 = new Vector<JSType>(49);\n    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);\n}",
    "testName" : "test150217"
  },
  "test0044" : {
    "methodSignature" : "public void process(Node externsRoot, Node jsRoot)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(269, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.processForTesting(node0, node0);\n    typeCheck0.process(node1, node0);\n}",
    "testName" : "test0044"
  },
  "test05067" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05067() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(49, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test05067"
  },
  "test05980" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05980() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(58, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test05980"
  },
  "test05979" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05979() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(58, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05979"
  },
  "test02228" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02228() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" E7#8S}ax\\\\\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(14, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test02228"
  },
  "test0055" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"V(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);\n    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, compilerOptions0.checkMethods, compilerOptions0.checkFunctions);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test0055"
  },
  "test03551" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03551() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" E7#8S}ax\\\\\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(27, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03551"
  },
  "test135195" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135195() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(144, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test135195"
  },
  "test04764" : {
    "methodSignature" : "public int getLineNumber()",
    "methodName" : "getLineNumber",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04764() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"V(otpgYD7{[ln9[\", \"fy?Jf'=j}+t-g\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(46, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    nodeTraversal0.getLineNumber();\n}",
    "testName" : "test04764"
  },
  "test135196" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135196() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNCION_MASKSVARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    Node node1 = new Node(144, node0, node0, node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test135196"
  },
  "test06386" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06386() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"C!hb(~Oaav%W0+G=\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    Node node0 = Node.newString(63, \"C!hb(~Oaav%W0+G=\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test06386"
  },
  "test01010" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0, (ScopeCreator) null);\n    Node node0 = Node.newString(118, \"implements\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test01010"
  },
  "test073102" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073102() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(74, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test073102"
  },
  "test155222" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test155222() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" ms \", \" ms \");\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(12, \"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node2 = new Node(30, node0, node1);\n    typeCheck0.visit((NodeTraversal) null, node2, node2);\n}",
    "testName" : "test155222"
  },
  "test073103" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073103() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(74, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test073103"
  },
  "test107158" : {
    "methodSignature" : "public boolean isQuotedString()",
    "methodName" : "isQuotedString",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107158() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(112, \"\");\n    typeCheck0.visit((NodeTraversal) null, node1, node0);\n    node1.isQuotedString();\n}",
    "testName" : "test107158"
  },
  "test094142" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094142() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/Ifl,^.'26,Axz\", \"o/Ifl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(98, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test094142"
  },
  "test01923" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01923() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(11, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test01923"
  },
  "test130188" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130188() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"JSC_FUNCTION_ASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    Node node0 = Node.newString(139, \"JSC_FUNCTION_ASKS_VARIABLE\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test130188"
  },
  "test130187" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130187() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"JSC_FUNCTION_ASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    CodingConvention codingConvention0 = compiler0.getCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    Node node0 = Node.newString(139, \"JSC_FUNCTION_ASKS_VARIABLE\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test130187"
  },
  "test078111" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078111() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(80, node0, node0, node0, 2, 1);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test078111"
  },
  "test01925" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01925() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(11, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test01925"
  },
  "test01924" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01924() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JC_FUTIONMASS_VARABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(11, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test01924"
  },
  "test078110" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078110() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(80, node0, node0, node0, 2, 1);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test078110"
  },
  "test088129" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088129() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/Ifl,^.'26,Axz\", \"o/Ifl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(92, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test088129"
  },
  "test0066" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNpTION_MSKS_VARIABLE\", \"msg.function.not.found\");\n    Node node1 = new Node(0, node0, node0, node0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);\n    Scope scope0 = typeCheck0.processForTesting(node0, node0);\n    TypeCheck typeCheck1 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (ScopeCreator) null, checkLevel0, checkLevel0);\n    typeCheck1.processForTesting(node1, node1);\n}",
    "testName" : "test0066"
  },
  "test05169" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05169() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(50, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05169"
  },
  "test05168" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05168() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    Node node1 = new Node(50, node0, node0, 20, 1);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test05168"
  },
  "test083118" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083118() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(87, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test083118"
  },
  "test134194" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134194() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"mismatch of the {0} property type and the type of the property it overrides from interface {1}\\noriginal: {2}\\noverride: {3}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(143);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test134194"
  },
  "test134193" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134193() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"mismatch of the {0} property type and the type of the property it overrides from interface {1}\\noriginal: {2}\\noverride: {3}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(143);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test134193"
  },
  "test072100" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072100() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"~SC_FUNCTION_MASKS_VARIABLE\", \"N|6\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = Node.newString(72, \"N|6\");\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test072100"
  },
  "test099148" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099148() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(103, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test099148"
  },
  "test072101" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072101() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"~SC_FUNCTION_MASKS_VARIABLE\", \"N|6\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = Node.newString(72, \"N|6\");\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test072101"
  },
  "test02329" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02329() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"I0iTHyWv]VMs-4\\\"y\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = Node.newString(15, \"bad left operand to bitwise operator\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test02329"
  },
  "test04865" : {
    "methodSignature" : "public String getSourceName()",
    "methodName" : "getSourceName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04865() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(47, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    nodeTraversal0.getSourceName();\n}",
    "testName" : "test04865"
  },
  "test102152" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102152() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"$b0\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(107, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test102152"
  },
  "test05270" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05270() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"Input variable map parse error: {0}\", \"Input variable map parse error: {0}\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    Node node0 = Node.newString(51, \"Input variable map parse error: {0}\");\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test05270"
  },
  "test0077" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0077() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_FUNCTION_MASKS_VARIABLE\", \"JSC_FUNCTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test0077"
  },
  "test113164" : {
    "methodSignature" : "public int getLineNumber()",
    "methodName" : "getLineNumber",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113164() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(119, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    nodeTraversal0.getLineNumber();\n}",
    "testName" : "test113164"
  },
  "test149216" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test149216() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"?<(}4%qAI<Ew.\\\"lO\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(120, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);\n}",
    "testName" : "test149216"
  },
  "test124177" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124177() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(133, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test124177"
  },
  "test138201" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138201() throws Throwable {\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"|VT(otpgYD7{[ln9[\", \"|VT(otpgYD7{[ln9[\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(147, node0, node0);\n    FunctionNames functionNames0 = new FunctionNames(compiler0);\n    RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, functionNames0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, recordFunctionInformation0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test138201"
  },
  "test088130" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088130() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/Ifl,^.'26,Axz\", \"o/Ifl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(92, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test088130"
  },
  "test03652" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03652() throws Throwable {\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_FUNTION_MASKS_VARIABLE\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(28, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test03652"
  },
  "test01111" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"o/qWIfl,^.'26,Axz\", \"o/qWIfl,^.'26,Axz\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    node0.addSuppression(\"o/qWIfl,^.'26,Axz\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test01111"
  },
  "test06487" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06487() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"implements\", \"implements\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    Node node1 = Node.newString(64, \"implements\");\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test06487"
  },
  "test118170" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118170() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"=`8#h|\", \"=`8#h|\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(124, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isSyntheticBlock();\n}",
    "testName" : "test118170"
  },
  "test129186" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129186() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(138, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.hasErrors();\n}",
    "testName" : "test129186"
  },
  "test129185" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129185() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(138, node0, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n    compiler0.getErrorCount();\n}",
    "testName" : "test129185"
  },
  "test083119" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083119() throws Throwable {\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"Id0iTnZWVLMh-4a\\\">(\", \"Id0iTnZWVLMh-4a\\\">(\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node1 = new Node(87, node0, node0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test083119"
  }
}