project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(302);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test001,"public void test001() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(302);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}",0,
project,0,test012,"public void test012() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""z%#GOU36^`^3=s`W;Uw"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    TypeCheck typeCheck1 = typeCheck0.reportMissingProperties(false);
    assertSame(typeCheck1, typeCheck0);
}",0,
project,0,test023,"public void test023() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""z%#GOU36^`^3=s`W;Uw"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = new Node(83);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Scope scope0 = Scope.createGlobalScope(node0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn);
    Node node1 = Node.newString(""Object#Key"");
    typeCheck0.check(node1, false);
    assertFalse(node1.isInc());
}",0,assertTrue(node1.isInc())
project,0,test034,"public void test034() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""element {0} does not exist on this enum"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    Node node0 = new Node(5273);
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, compilerOptions0.reportMissingOverride);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test045,"public void test045() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""z%#GOU36^`^3=s`W;Uw"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = new Node(83);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Scope scope0 = Scope.createGlobalScope(node0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test056,"public void test056() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(1337);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test067,"public void test067() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    SyntheticAst syntheticAst0 = new SyntheticAst(""P#G`JlOuslIU;"");
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(52, Node.LENGTH);
}",0,
project,0,test078,"public void test078() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(100);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(8, node0, node0, node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 8
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test089,"public void test089() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(83);
    Node node1 = new Node(15, (-2021), 1113);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""z%#GOU36^`^3=s`W;Uw"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
    Node node0 = new Node(21);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(31, 114, 4);
    typeCheck0.visit(nodeTraversal0, node0, (Node) null);
    assertFalse(node0.isSetterDef());
}",0,assertTrue(node0.isSetterDef())
project,0,test1112,"public void test1112() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", """");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
    Node node0 = new Node(126);
    Node node1 = new Node(32, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(node0.isAnd());
}",0,assertTrue(node0.isAnd())
project,0,test1213,"public void test1213() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
    Node node0 = new Node(34);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 34
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test1314,"public void test1314() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""element {0} does not exist on this enum"", ""element {0} does not exist on this enum"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newNumber(0.0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(100.0, double0, 0.01);
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    Node node0 = new Node(139, (-3803), 111);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node1 = new Node(52, node0, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(node0.isLabelName());
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""{1} cannot extend this type; {0}s can only extend {0}s"", ""{1} cannot extend this type; {0}s can only extend {0}s"", ""Object#Key"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(302);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(55, node0, node0, node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 55
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""z%#GOU36^`^3=s`W;Uw"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    VarCheck varCheck0 = new VarCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
    Node node0 = new Node(83);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    Scope scope0 = Scope.createGlobalScope(node0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isVar());
}",0,assertTrue(node0.isVar())
project,0,test1718,"public void test1718() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    Node node0 = new Node(86);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalNamesLevel);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(90);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(100);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.hasChildren());
}",0,assertTrue(node0.hasChildren())
project,0,test2021,"public void test2021() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""z%#GOU36^`^3=s`W;Uw"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(104);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 104
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test2122,"public void test2122() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(107, (-3803), 107);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 107
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(112);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(40, Node.ORIGINALNAME_PROP);
}",0,
project,0,test2324,"public void test2324() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
    Node node0 = new Node(119);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(121);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 121
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(302);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node1 = new Node(124, 53, 29);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(53, Node.INPUT_ID);
}",0,
project,0,test2627,"public void test2627() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Element"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalNamesLevel);
    Node node0 = new Node(145, 86, 4095);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 145
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);
    Node node0 = new Node(150);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 150
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(302);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visitName(nodeTraversal0, node0, node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STAR is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test2930,"public void test2930() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = new Node(83);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""Object#Key"", ""Object#Element"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(302);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    Node node1 = new Node(30, node0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(1, compiler0.getErrorCount())"
project,0,test3132,"public void test3132() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    SourceFile sourceFile0 = SourceFile.fromCode(""7<BOa$7R"", ""7<BOa$7R"");
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(0.0, double0, 0.01);
}",0,
