{
  "test2324" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2324() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);\n    Node node0 = new Node(119);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2324"
  },
  "test1213" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);\n    Node node0 = new Node(34);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test1213"
  },
  "test2425" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(121);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2425"
  },
  "test1314" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"element {0} does not exist on this enum\", \"element {0} does not exist on this enum\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = Node.newNumber(0.0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test1314"
  },
  "test2122" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(107, (-3803), 107);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2122"
  },
  "test1011" : {
    "methodSignature" : "public boolean isSetterDef()",
    "methodName" : "isSetterDef",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(31, 114, 4);\n    typeCheck0.visit(nodeTraversal0, node0, (Node) null);\n    node0.isSetterDef();\n}",
    "testName" : "test1011"
  },
  "test2223" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);\n    Node node0 = new Node(112);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2223"
  },
  "test1112" : {
    "methodSignature" : "public boolean isAnd()",
    "methodName" : "isAnd",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);\n    Node node0 = new Node(126);\n    Node node1 = new Node(32, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isAnd();\n}",
    "testName" : "test1112"
  },
  "test2728" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);\n    Node node0 = new Node(150);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2728"
  },
  "test012" : {
    "methodSignature" : "TypeCheck reportMissingProperties(boolean report)",
    "methodName" : "reportMissingProperties",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"z%#GOU36^`^3=s`W;Uw\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    TypeCheck typeCheck1 = typeCheck0.reportMissingProperties(false);\n}",
    "testName" : "test012"
  },
  "test034" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"element {0} does not exist on this enum\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    Node node0 = new Node(5273);\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(syntacticScopeCreator0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, memoizedScopeCreator0, compilerOptions0.reportMissingOverride);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test034"
  },
  "test056" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(1337);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test056"
  },
  "test078" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(100);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(8, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test078"
  },
  "test1617" : {
    "methodSignature" : "public boolean isVar()",
    "methodName" : "isVar",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"z%#GOU36^`^3=s`W;Uw\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    VarCheck varCheck0 = new VarCheck(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);\n    Node node0 = new Node(83);\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Scope scope0 = Scope.createGlobalScope(node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.isVar();\n}",
    "testName" : "test1617"
  },
  "test2829" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2829() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(302);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2829"
  },
  "test1718" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    Node node0 = new Node(86);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalNamesLevel);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test1718"
  },
  "test2526" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(302);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(124, 53, 29);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test2526"
  },
  "test1415" : {
    "methodSignature" : "public boolean isLabelName()",
    "methodName" : "isLabelName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    Node node0 = new Node(139, (-3803), 111);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node1 = new Node(52, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    node0.isLabelName();\n}",
    "testName" : "test1415"
  },
  "test2627" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0, compilerOptions0.checkGlobalNamesLevel);\n    Node node0 = new Node(145, 86, 4095);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2627"
  },
  "test1516" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"{1} cannot extend this type; {0}s can only extend {0}s\", \"{1} cannot extend this type; {0}s can only extend {0}s\", \"Object#Key\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(302);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node1 = new Node(55, node0, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node1);\n}",
    "testName" : "test1516"
  },
  "test3031" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3031() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(302);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    Node node1 = new Node(30, node0, node0, node0);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test3031"
  },
  "test2021" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"z%#GOU36^`^3=s`W;Uw\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(104);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2021"
  },
  "test3132" : {
    "methodSignature" : "double getTypedPercent()",
    "methodName" : "getTypedPercent",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3132() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"7<BOa$7R\", \"7<BOa$7R\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    double double0 = typeCheck0.getTypedPercent();\n}",
    "testName" : "test3132"
  },
  "test2930" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2930() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(83);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test2930"
  },
  "test000" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(302);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test000"
  },
  "test001" : {
    "methodSignature" : "boolean visitName(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visitName",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(302);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);\n}",
    "testName" : "test001"
  },
  "test023" : {
    "methodSignature" : "public boolean isInc()",
    "methodName" : "isInc",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"z%#GOU36^`^3=s`W;Uw\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = new Node(83);\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Scope scope0 = Scope.createGlobalScope(node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn);\n    Node node1 = Node.newString(\"Object#Key\");\n    typeCheck0.check(node1, false);\n    node1.isInc();\n}",
    "testName" : "test023"
  },
  "test045" : {
    "methodSignature" : "public Scope processForTesting(Node externsRoot, Node jsRoot)",
    "methodName" : "processForTesting",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"z%#GOU36^`^3=s`W;Uw\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    Node node0 = new Node(83);\n    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    Scope scope0 = Scope.createGlobalScope(node0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0, scope0, (MemoizedScopeCreator) null, compilerOptions0.checkMissingReturn);\n    typeCheck0.processForTesting(node0, node0);\n}",
    "testName" : "test045"
  },
  "test067" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    SyntheticAst syntheticAst0 = new SyntheticAst(\"P#G`JlOuslIU;\");\n    Node node0 = syntheticAst0.getAstRoot(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test067"
  },
  "test089" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(83);\n    Node node1 = new Node(15, (-2021), 1113);\n    typeCheck0.visit(nodeTraversal0, node1, node0);\n}",
    "testName" : "test089"
  },
  "test1920" : {
    "methodSignature" : "public boolean hasChildren()",
    "methodName" : "hasChildren",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    Node node0 = new Node(100);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n    node0.hasChildren();\n}",
    "testName" : "test1920"
  },
  "test0910" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Element\", \"z%#GOU36^`^3=s`W;Uw\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    VarCheck varCheck0 = new VarCheck(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, varCheck0);\n    Node node0 = new Node(21);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test0910"
  },
  "test1819" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.TypeCheck",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    SourceFile sourceFile0 = SourceFile.fromCode(\"Object#Key\", \"Object#Element\");\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile(sourceFile0, sourceFile0, compilerOptions0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);\n    Node node0 = new Node(90);\n    typeCheck0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test1819"
  }
}