project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
    stringType0.getTypesUnderInequality(functionType0);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test001,"public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
    stringType0.getTypesUnderInequality(functionType0);
    assertFalse(stringType0.isEmptyType());
}",0,assertTrue(stringType0.isEmptyType())
project,0,test012,"public void test012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertFalse(instanceObjectType0.isEmptyType());
}",0,assertTrue(instanceObjectType0.isEmptyType())
project,0,test013,"public void test013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test014,"public void test014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertFalse(instanceObjectType0.isAllType());
}",0,assertTrue(instanceObjectType0.isAllType())
project,0,test015,"public void test015() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test026,"public void test026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.isStringValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test027,"public void test027() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.isStringValueType();
    assertFalse(allType0.isResolved());
}",0,
project,0,test028,"public void test028() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.isStringValueType();
    assertFalse(allType0.isEmptyType());
}",0,
project,0,test039,"public void test039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test0310,"public void test0310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test0311,"public void test0311() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test0312,"public void test0312() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertNull(jSType0);
}",0,
project,0,test0413,"public void test0413() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertFalse(objectType0.isResolved());
}",0,assertTrue(objectType0.isResolved())
project,0,test0414,"public void test0414() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertFalse(objectType0.isAllType());
}",0,assertTrue(objectType0.isAllType())
project,0,test0415,"public void test0415() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertTrue(objectType0.isEmptyType());
}",0,assertTrue(objectType0.isEmptyType())
project,0,test0416,"public void test0416() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertNotNull(objectType0);
}",1,
project,0,test0517,"public void test0517() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertFalse(noType0.isNoResolvedType());
}",0,assertTrue(noType0.isNoResolvedType())
project,0,test0518,"public void test0518() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertFalse(noType0.isAllType());
}",0,assertTrue(noType0.isAllType())
project,0,test0519,"public void test0519() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test0520,"public void test0520() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertFalse(noType0.isResolved());
}",0,assertTrue(noType0.isResolved())
project,0,test0621,"public void test0621() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertEquals(""function (this:me, {9}): me"", string0);
}",0,
project,0,test0622,"public void test0622() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test0623,"public void test0623() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test0624,"public void test0624() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test0725,"public void test0725() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test0726,"public void test0726() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertFalse(boolean0);
}",0,
project,0,test0727,"public void test0727() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test0728,"public void test0728() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test0829,"public void test0829() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.hasCachedValues());
}",0,
project,0,test0830,"public void test0830() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test0831,"public void test0831() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test0832,"public void test0832() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0833,"public void test0833() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test0934,"public void test0934() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.isDateType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0935,"public void test0935() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.isDateType();
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test1036,"public void test1036() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isNullType());
}",0,assertTrue(jSType0.isNullType())
project,0,test1037,"public void test1037() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isVoidType());
}",0,assertTrue(jSType0.isVoidType())
project,0,test1038,"public void test1038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test1039,"public void test1039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test1140,"public void test1140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(arrowType0.isEmptyType());
}",0,assertTrue(arrowType0.isEmptyType())
project,0,test1141,"public void test1141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test1142,"public void test1142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1243,"public void test1243() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.isNullable();
    assertFalse(stringType0.isEmptyType());
}",0,assertTrue(stringType0.isEmptyType())
project,0,test1244,"public void test1244() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.isNullable();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1245,"public void test1245() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.isNullable();
    assertFalse(stringType0.isResolved());
}",0,assertTrue(stringType0.isResolved())
project,0,test1346,"public void test1346() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    templateType0.canTestForEqualityWith(noType0);
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test1347,"public void test1347() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    templateType0.canTestForEqualityWith(noType0);
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test1348,"public void test1348() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    templateType0.canTestForEqualityWith(noType0);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test1449,"public void test1449() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""a"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(boolean0);
}",0,
project,0,test1450,"public void test1450() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""a"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test1451,"public void test1451() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""a"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test1552,"public void test1552() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isArrayType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1553,"public void test1553() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isArrayType();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test1554,"public void test1554() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isArrayType();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test1655,"public void test1655() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    // Undeclared exception!
    try {
        noResolvedType0.setValidator((Predicate<JSType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
project,0,test1756,"public void test1756() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isBooleanValueType();
    assertFalse(voidType0.isEmptyType());
}",0,assertTrue(voidType0.isEmptyType())
project,0,test1757,"public void test1757() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isBooleanValueType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test1758,"public void test1758() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isBooleanValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test1859,"public void test1859() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.canBeCalled();
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test1860,"public void test1860() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.canBeCalled();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1961,"public void test1961() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    boolean boolean0 = jSType0.hasDisplayName();
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test1962,"public void test1962() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    boolean boolean0 = jSType0.hasDisplayName();
    assertFalse(boolean0);
}",0,
project,0,test2063,"public void test2063() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        numberType0.isNumber();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
project,0,test2164,"public void test2164() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test2165,"public void test2165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test2166,"public void test2166() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertFalse(noType0.isNoResolvedType());
}",0,assertTrue(noType0.isNoResolvedType())
project,0,test2167,"public void test2167() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertFalse(noType0.isResolved());
}",0,
project,0,test2268,"public void test2268() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""&*a>eWMWz"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2269,"public void test2269() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""&*a>eWMWz"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test2270,"public void test2270() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""&*a>eWMWz"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test2371,"public void test2371() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2372,"public void test2372() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertTrue(noObjectType0.isEmptyType());
}",0,assertTrue(noObjectType0.isEmptyType())
project,0,test2373,"public void test2373() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertFalse(noObjectType0.isResolved());
}",0,assertTrue(noObjectType0.isResolved())
project,0,test2374,"public void test2374() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertFalse(noObjectType0.isNoResolvedType());
}",0,assertTrue(noObjectType0.isNoResolvedType())
project,0,test2475,"public void test2475() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.matchesInt32Context();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test2476,"public void test2476() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.matchesInt32Context();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test2577,"public void test2577() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isInterface();
    assertFalse(boolean0);
}",0,
project,0,test2578,"public void test2578() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isInterface();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test2579,"public void test2579() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isInterface();
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test2680,"public void test2680() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.JSType$2"");
    boolean boolean0 = templateType0.isInstanceType();
    assertFalse(templateType0.isResolved());
}",0,assertTrue(templateType0.isResolved())
project,0,test2681,"public void test2681() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.JSType$2"");
    boolean boolean0 = templateType0.isInstanceType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2682,"public void test2682() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.JSType$2"");
    boolean boolean0 = templateType0.isInstanceType();
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test2783,"public void test2783() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType_TypePair0.typeA);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test2784,"public void test2784() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType_TypePair0.typeA);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2885,"public void test2885() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test2886,"public void test2886() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test2987,"public void test2987() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTheObjectType();
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test2988,"public void test2988() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTheObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2989,"public void test2989() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTheObjectType();
    assertFalse(noType0.isNoResolvedType());
}",0,assertTrue(noType0.isNoResolvedType())
project,0,test3090,"public void test3090() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.matchesUint32Context();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3091,"public void test3091() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.matchesUint32Context();
    assertFalse(allType0.isEmptyType());
}",0,assertTrue(allType0.isEmptyType())
project,0,test3192,"public void test3192() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
    boolean boolean0 = templateType0.isEnumType();
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test3193,"public void test3193() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
    boolean boolean0 = templateType0.isEnumType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3294,"public void test3294() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    assertFalse(functionPrototypeType0.isVoidType());
}",0,assertTrue(functionPrototypeType0.isVoidType())
project,0,test3295,"public void test3295() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    assertFalse(functionPrototypeType0.isNullType());
}",0,assertTrue(functionPrototypeType0.isNullType())
project,0,test3296,"public void test3296() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test3297,"public void test3297() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
    assertFalse(functionPrototypeType0.isEmptyType());
}",0,assertTrue(functionPrototypeType0.isEmptyType())
project,0,test3298,"public void test3298() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
    assertFalse(boolean0);
}",0,
project,0,test3399,"public void test3399() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(noType0.isResolved());
}",0,
project,0,test34100,"public void test34100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.forgiveUnknownNames();
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test35101,"public void test35101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearResolved();
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test35102,"public void test35102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearResolved();
    assertFalse(noType0.isNoResolvedType());
}",0,assertTrue(noType0.isNoResolvedType())
project,0,test35103,"public void test35103() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearResolved();
    assertFalse(noType0.isResolved());
}",0,assertTrue(noType0.isResolved())
project,0,test36104,"public void test36104() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test36105,"public void test36105() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    assertTrue(parameterizedType0.isEmptyType());
}",0,assertTrue(parameterizedType0.isEmptyType())
project,0,test37106,"public void test37106() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    enumElementType0.toString();
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test37107,"public void test37107() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    enumElementType0.toString();
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test38108,"public void test38108() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasDisplayName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test38109,"public void test38109() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasDisplayName();
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test39110,"public void test39110() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isEmptyType());
}",0,assertTrue(errorFunctionType0.isEmptyType())
project,0,test39111,"public void test39111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test40112,"public void test40112() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(noObjectType0);
    assertTrue(noObjectType0.hasCachedValues());
}",0,
project,0,test40113,"public void test40113() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(noObjectType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test41114,"public void test41114() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) noResolvedType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
    assertFalse(functionType0.isEmptyType());
}",0,assertTrue(functionType0.isEmptyType())
project,0,test41115,"public void test41115() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) noResolvedType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test42116,"public void test42116() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
    booleanType0.getTypesUnderShallowEquality(proxyObjectType0);
    assertFalse(proxyObjectType0.isEmptyType());
}",0,assertTrue(proxyObjectType0.isEmptyType())
project,0,test42117,"public void test42117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
    booleanType0.getTypesUnderShallowEquality(proxyObjectType0);
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test43118,"public void test43118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.isEquivalent(noResolvedType0, noResolvedType0);
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test44119,"public void test44119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, (JSType) null);
    boolean boolean0 = JSType.isEquivalent(proxyObjectType0, (JSType) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test45120,"public void test45120() throws Throwable {
    boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test46121,"public void test46121() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.equals(simpleErrorReporter0);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test46122,"public void test46122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.equals(simpleErrorReporter0);
    assertFalse(noType0.isNoResolvedType());
}",0,assertTrue(noType0.isNoResolvedType())
project,0,test46123,"public void test46123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.equals(simpleErrorReporter0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test47124,"public void test47124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    noType0.equals(numberType0);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test47125,"public void test47125() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    noType0.equals(numberType0);
    assertFalse(numberType0.isEmptyType());
}",0,assertTrue(numberType0.isEmptyType())
project,0,test48126,"public void test48126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    nullType0.findPropertyType(""Unknown class name"");
    assertFalse(nullType0.isEmptyType());
}",0,assertTrue(nullType0.isEmptyType())
project,0,test49127,"public void test49127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test49128,"public void test49128() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test50129,"public void test50129() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test50130,"public void test50130() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    boolean boolean0 = jSType0.canAssignTo(jSType_TypePair0.typeB);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test51131,"public void test51131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    ObjectType objectType0 = stringType0.dereference();
    assertFalse(objectType0.isEmptyType());
}",0,assertTrue(objectType0.isEmptyType())
project,0,test51132,"public void test51132() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    ObjectType objectType0 = stringType0.dereference();
    assertNotNull(objectType0);
}",0,
project,0,test52133,"public void test52133() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isEmptyType());
}",0,assertTrue(allType0.isEmptyType())
project,0,test52134,"public void test52134() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(allType0);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test52135,"public void test52135() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(allType0);
    assertFalse(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test53136,"public void test53136() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderEquality(templateType0);
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test53137,"public void test53137() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderEquality(templateType0);
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test53138,"public void test53138() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderEquality(templateType0);
    assertFalse(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test54139,"public void test54139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(noType0);
    jSType_TypePair0.typeA.testForEqualityHelper(templateType0, noType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test54140,"public void test54140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(noType0);
    jSType_TypePair0.typeA.testForEqualityHelper(templateType0, noType0);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test55141,"public void test55141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
    noType0.getTypesUnderInequality(jSType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test56142,"public void test56142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    noType0.getTypesUnderEquality(errorFunctionType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test57143,"public void test57143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(functionPrototypeType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.getTypesUnderInequality(jSType_TypePair0.typeB);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test58144,"public void test58144() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a type name"", noType0);
    errorFunctionType0.getTypesUnderInequality(enumType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test59145,"public void test59145() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(enumElementType0);
    enumType0.getTypesUnderInequality(jSType_TypePair0.typeB);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test59146,"public void test59146() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(enumElementType0);
    enumType0.getTypesUnderInequality(jSType_TypePair0.typeB);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test60147,"public void test60147() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    assertFalse(jSType0.isEnumElementType());
}",0,assertFalse(jSType0.isEnumElementType())
project,0,test60148,"public void test60148() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(jSType0.isFunctionType());
}",0,assertFalse(jSType0.isFunctionType())
project,0,test60149,"public void test60149() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test60150,"public void test60150() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(numberType0.isEmptyType());
}",0,assertTrue(numberType0.isEmptyType())
project,0,test61151,"public void test61151() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test61152,"public void test61152() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
    assertFalse(noType0.isNoResolvedType());
}",0,assertTrue(noType0.isNoResolvedType())
project,0,test61153,"public void test61153() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test62154,"public void test62154() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""{"", voidType0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumType0);
    assertFalse(enumType0.isEmptyType());
}",0,assertTrue(enumType0.isEmptyType())
project,0,test62155,"public void test62155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""{"", voidType0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test63156,"public void test63156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test63157,"public void test63157() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(noResolvedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test64158,"public void test64158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
    noType0.getLeastSupertype(jSType_TypePair0.typeB);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test65159,"public void test65159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test65160,"public void test65160() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
    errorFunctionType0.getLeastSupertype(jSType0);
    assertFalse(errorFunctionType0.isEmptyType());
}",0,assertTrue(errorFunctionType0.isEmptyType())
project,0,test66161,"public void test66161() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    errorFunctionType0.getLeastSupertype(noResolvedType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test67162,"public void test67162() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    noResolvedType0.getTypesUnderShallowEquality(recordType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test68163,"public void test68163() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType1 = numberType0.autoboxesTo();
    jSType0.getTypesUnderShallowEquality(jSType1);
    assertFalse(jSType1.isEmptyType());
}",0,assertTrue(jSType1.isEmptyType())
project,0,test68164,"public void test68164() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType1 = numberType0.autoboxesTo();
    jSType0.getTypesUnderShallowEquality(jSType1);
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test69165,"public void test69165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
    jSTypeNativeArray0[0] = jSTypeNative0;
    jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
    errorFunctionType0.getTypesUnderShallowEquality(jSType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test70166,"public void test70166() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    jSType0.getTypesUnderShallowEquality(numberType0);
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test71167,"public void test71167() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
    JSType.filterNoResolvedType(unionType0);
    assertFalse(unionType0.isEmptyType());
}",0,assertTrue(unionType0.isEmptyType())
project,0,test72168,"public void test72168() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertNotSame(jSType0, noType0);
}",0,
project,0,test72169,"public void test72169() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertTrue(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test72170,"public void test72170() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test73171,"public void test73171() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    JSType jSType0 = allType0.getRestrictedTypeGivenToBooleanOutcome(true);
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test74172,"public void test74172() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test74173,"public void test74173() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    noResolvedType0.getTypesUnderEquality(jSType0);
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test75174,"public void test75174() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    jSType0.getTypesUnderEquality(numberType0);
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test76175,"public void test76175() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getTypesUnderInequality(noType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test77176,"public void test77176() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
    jSType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isEmptyType());
}",0,assertTrue(jSType0.isEmptyType())
project,0,test77177,"public void test77177() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
    jSType0.getTypesUnderShallowInequality(jSType0);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test78178,"public void test78178() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = templateType0.differsFrom(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertFalse(noResolvedType0.hasCachedValues())
project,0,test78179,"public void test78179() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = templateType0.differsFrom(noResolvedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test79180,"public void test79180() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
    assertTrue(noType0.isEmptyType());
}",0,assertTrue(noType0.isEmptyType())
project,0,test79181,"public void test79181() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
    assertFalse(noType0.isNoResolvedType());
}",0,assertTrue(noType0.isNoResolvedType())
project,0,test79182,"public void test79182() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test80183,"public void test80183() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = noResolvedType0.differsFrom(templateType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test80184,"public void test80184() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = noResolvedType0.differsFrom(templateType0);
    assertTrue(noResolvedType0.isEmptyType());
}",0,assertTrue(noResolvedType0.isEmptyType())
project,0,test80185,"public void test80185() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = noResolvedType0.differsFrom(templateType0);
    assertFalse(templateType0.isEmptyType());
}",0,assertTrue(templateType0.isEmptyType())
project,0,test81186,"public void test81186() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test81187,"public void test81187() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test82188,"public void test82188() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowEquality(templateType0);
    boolean boolean0 = JSType.isSubtype((JSType) noType0, jSType_TypePair0.typeB);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test82189,"public void test82189() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowEquality(templateType0);
    boolean boolean0 = JSType.isSubtype((JSType) noType0, jSType_TypePair0.typeB);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test83190,"public void test83190() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderShallowEquality(allType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test84191,"public void test84191() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setResolvedTypeInternal((JSType) null);
    noType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(noType0.isResolved());
}",0,assertTrue(noType0.isResolved())
