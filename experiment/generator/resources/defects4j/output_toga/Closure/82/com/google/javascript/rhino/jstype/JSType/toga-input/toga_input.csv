focal_method,test_prefix,docstring
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
    stringType0.getTypesUnderInequality(functionType0);
    assertTrue(functionType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.getNativeType(jSTypeNative0);
    stringType0.getTypesUnderInequality(functionType0);
    assertFalse(stringType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertFalse(instanceObjectType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public boolean isAllType() {
    return false;
}","public void test014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertFalse(instanceObjectType0.isAllType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test015() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    boolean boolean0 = instanceObjectType0.isResolved();
    assertFalse(boolean0);
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isStringValueType() {
    return false;
}","public void test026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.isStringValueType();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test027() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.isStringValueType();
    assertFalse(allType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test028() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.isStringValueType();
    assertFalse(allType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertFalse(noResolvedType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isAllType() {
    return false;
}","public void test0310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertFalse(noResolvedType0.isAllType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test0311() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"@Override
public JSType unboxesTo() {
    if (isStringObjectType()) {
        return getNativeType(JSTypeNative.STRING_TYPE);
    } else if (isBooleanObjectType()) {
        return getNativeType(JSTypeNative.BOOLEAN_TYPE);
    } else if (isNumberObjectType()) {
        return getNativeType(JSTypeNative.NUMBER_TYPE);
    } else {
        return super.unboxesTo();
    }
}","public void test0312() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.unboxesTo();
    assertNull(jSType0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test0413() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertFalse(objectType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isAllType() {
    return false;
}","public void test0414() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertFalse(objectType0.isAllType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test0415() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertTrue(objectType0.isEmptyType());
}",""
"public final ObjectType dereference() {
    JSType restricted = restrictByNotNullOrUndefined();
    JSType autobox = restricted.autoboxesTo();
    return ObjectType.cast(autobox == null ? restricted : autobox);
}","public void test0416() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertNotNull(objectType0);
}","/**
 * Dereference a type for property access.
 *
 * Autoboxes the type, filters null/undefined, and returns the result
 * iff it's an object.
 */"
"public boolean isNoResolvedType() {
    return false;
}","public void test0517() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertFalse(noType0.isNoResolvedType());
}",""
"public boolean isAllType() {
    return false;
}","public void test0518() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertFalse(noType0.isAllType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test0519() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertTrue(noType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test0520() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getJSDocInfo();
    assertFalse(noType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"@Override
public String toDebugHashCodeString() {
    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
        return super.toDebugHashCodeString();
    }
    StringBuilder b = new StringBuilder(32);
    b.append(""function ("");
    int paramNum = call.parameters.getChildCount();
    boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();
    if (hasKnownTypeOfThis) {
        b.append(""this:"");
        b.append(getDebugHashCodeStringOf(typeOfThis));
    }
    if (paramNum > 0) {
        if (hasKnownTypeOfThis) {
            b.append("", "");
        }
        Node p = call.parameters.getFirstChild();
        b.append(getDebugHashCodeStringOf(p.getJSType()));
        p = p.getNext();
        while (p != null) {
            b.append("", "");
            b.append(getDebugHashCodeStringOf(p.getJSType()));
            p = p.getNext();
        }
    }
    b.append("")"");
    b.append("": "");
    b.append(getDebugHashCodeStringOf(call.returnType));
    return b.toString();
}","public void test0621() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertEquals(""function (this:me, {9}): me"", string0);
}",""
"public boolean isAllType() {
    return false;
}","public void test0622() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertFalse(noResolvedType0.isAllType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test0623() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test0624() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    String string0 = noResolvedType0.toDebugHashCodeString();
    assertFalse(noResolvedType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test0725() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public boolean isRegexpType() {
    return false;
}","public void test0726() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test0727() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertFalse(noResolvedType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isAllType() {
    return false;
}","public void test0728() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isRegexpType();
    assertFalse(noResolvedType0.isAllType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test0829() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.hasCachedValues());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test0830() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test0831() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isString() {
    return this.isSubtype(getNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));
}","public void test0832() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertTrue(boolean0);
}","/**
 * Tests whether the type is a string (value or Object).
 * @return {@code this &lt;: (String, string)}
 */"
"public boolean isAllType() {
    return false;
}","public void test0833() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isString();
    assertFalse(noResolvedType0.isAllType());
}",""
"public boolean isDateType() {
    return false;
}","public void test0934() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.isDateType();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test0935() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.isDateType();
    assertFalse(numberType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isNullType() {
    return false;
}","public void test1036() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isNullType());
}",""
"public boolean isVoidType() {
    return false;
}","public void test1037() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isVoidType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test1039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(arrowType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test1141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(arrowType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean matchesObjectContext() {
    return false;
}","public void test1142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(boolean0);
}","/**
 * This predicate is used to test whether a given type can appear in an
 * {@code Object} context, such as the expression in a with statement.
 *
 * Most types we will encounter, except notably {@code null}, have at least
 * the potential for converting to {@code Object}.  Host defined objects can
 * get peculiar.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1243() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.isNullable();
    assertFalse(stringType0.isEmptyType());
}",""
"public boolean isNullable() {
    return this.isSubtype(getNativeType(JSTypeNative.NULL_TYPE));
}","public void test1244() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.isNullable();
    assertFalse(boolean0);
}","/**
 * Tests whether this type is nullable.
 */"
"public final boolean isResolved() {
    return resolved;
}","public void test1245() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.isNullable();
    assertFalse(stringType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isResolved() {
    return resolved;
}","public void test1346() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    templateType0.canTestForEqualityWith(noType0);
    assertFalse(templateType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1347() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    templateType0.canTestForEqualityWith(noType0);
    assertFalse(templateType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1348() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    templateType0.canTestForEqualityWith(noType0);
    assertTrue(noType0.isEmptyType());
}",""
"@Override
public boolean isConstructor() {
    return referencedType.isConstructor();
}","public void test1449() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""a"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1450() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""a"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(templateType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test1451() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""a"");
    boolean boolean0 = templateType0.isConstructor();
    assertFalse(templateType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isArrayType() {
    return false;
}","public void test1552() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isArrayType();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test1553() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isArrayType();
    assertFalse(noResolvedType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1554() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isArrayType();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public boolean setValidator(Predicate<JSType> validator) {
    return validator.apply(this);
}","public void test1655() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    // Undeclared exception!
    try {
        noResolvedType0.setValidator((Predicate<JSType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}","/**
 * Certain types have constraints on them at resolution-time.
 * For example, a type in an {@code @extends} annotation must be an
 * object. Clients should inject a validator that emits a warning
 * if the type does not validate, and return false.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test1756() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isBooleanValueType();
    assertFalse(voidType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test1757() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isBooleanValueType();
    assertFalse(voidType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isBooleanValueType() {
    return false;
}","public void test1758() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isBooleanValueType();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test1859() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.canBeCalled();
    assertFalse(numberType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean canBeCalled() {
    return false;
}","public void test1860() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    boolean boolean0 = numberType0.canBeCalled();
    assertFalse(boolean0);
}","/**
 * This predicate is used to test whether a given type can be used as the
 * 'function' in a function call.
 *
 * @return {@code true} if this type might be callable.
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test1961() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    boolean boolean0 = jSType0.hasDisplayName();
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public boolean hasDisplayName() {
    String displayName = getDisplayName();
    return displayName != null && !displayName.isEmpty();
}","public void test1962() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    boolean boolean0 = jSType0.hasDisplayName();
    assertFalse(boolean0);
}","/**
 * @return true if the JSType has a user meaningful label.
 */"
"public final boolean isNumber() {
    return this.isSubtype(getNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));
}","public void test2063() throws Throwable {
    NumberType numberType0 = new NumberType((JSTypeRegistry) null);
    // Undeclared exception!
    try {
        numberType0.isNumber();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}","/**
 * Tests whether the type is a number (value or Object).
 * @return {@code this &lt;: (Number, number)}
 */"
"public boolean isTemplateType() {
    return false;
}","public void test2164() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertFalse(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test2165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertTrue(noType0.isEmptyType());
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test2166() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertFalse(noType0.isNoResolvedType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test2167() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTemplateType();
    assertFalse(noType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"@Override
public boolean isOrdinaryFunction() {
    return referencedType.isOrdinaryFunction();
}","public void test2268() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""&*a>eWMWz"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test2269() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""&*a>eWMWz"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(templateType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test2270() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""&*a>eWMWz"");
    boolean boolean0 = templateType0.isOrdinaryFunction();
    assertFalse(templateType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"boolean isNamedType() {
    return false;
}","public void test2371() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertFalse(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test2372() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertTrue(noObjectType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test2373() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertFalse(noObjectType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public boolean isNoResolvedType() {
    return false;
}","public void test2374() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.isNamedType();
    assertFalse(noObjectType0.isNoResolvedType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test2475() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.matchesInt32Context();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test2476() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.matchesInt32Context();
    assertFalse(noResolvedType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"@Override
public boolean isInterface() {
    return referencedType.isInterface();
}","public void test2577() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isInterface();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test2578() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isInterface();
    assertFalse(templateType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test2579() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = templateType0.isInterface();
    assertFalse(templateType0.isEmptyType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test2680() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.JSType$2"");
    boolean boolean0 = templateType0.isInstanceType();
    assertFalse(templateType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"@Override
public boolean isInstanceType() {
    return referencedType.isInstanceType();
}","public void test2681() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.JSType$2"");
    boolean boolean0 = templateType0.isInstanceType();
    assertFalse(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test2682() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""com.google.javascript.rhino.jstype.JSType$2"");
    boolean boolean0 = templateType0.isInstanceType();
    assertFalse(templateType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test2783() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType_TypePair0.typeA);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertTrue(noType0.hasCachedValues());
}",""
"@Override
public boolean isCheckedUnknownType() {
    return referencedType.isCheckedUnknownType();
}","public void test2784() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, jSType_TypePair0.typeA);
    boolean boolean0 = proxyObjectType0.isCheckedUnknownType();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test2885() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    assertFalse(errorFunctionType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isResolved() {
    return resolved;
}","public void test2886() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(errorFunctionType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test2987() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTheObjectType();
    assertTrue(noType0.isEmptyType());
}",""
"boolean isTheObjectType() {
    return false;
}","public void test2988() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTheObjectType();
    assertFalse(boolean0);
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test2989() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.isTheObjectType();
    assertFalse(noType0.isNoResolvedType());
}",""
"public final boolean matchesUint32Context() {
    return matchesNumberContext();
}","public void test3090() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.matchesUint32Context();
    assertFalse(boolean0);
}","/**
 * This predicate is used to test whether a given type can appear in a
 * 'Uint32' context.  This context includes the right-hand operand of a shift
 * operator.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test3091() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    boolean boolean0 = allType0.matchesUint32Context();
    assertFalse(allType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test3192() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
    boolean boolean0 = templateType0.isEnumType();
    assertFalse(templateType0.isEmptyType());
}",""
"@Override
public boolean isEnumType() {
    return referencedType.isEnumType();
}","public void test3193() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
    boolean boolean0 = templateType0.isEnumType();
    assertFalse(boolean0);
}",""
"public boolean isVoidType() {
    return false;
}","public void test3294() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    assertFalse(functionPrototypeType0.isVoidType());
}",""
"public boolean isNullType() {
    return false;
}","public void test3295() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    assertFalse(functionPrototypeType0.isNullType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test3296() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test3297() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
    assertFalse(functionPrototypeType0.isEmptyType());
}",""
"public boolean isNumberValueType() {
    return false;
}","public void test3298() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noResolvedType0, noResolvedType0, false);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(functionPrototypeType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNumberValueType();
    assertFalse(boolean0);
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test3399() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(noType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test34100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.forgiveUnknownNames();
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test35101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearResolved();
    assertTrue(noType0.isEmptyType());
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test35102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearResolved();
    assertFalse(noType0.isNoResolvedType());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test35103() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.clearResolved();
    assertFalse(noType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
"@Override
public boolean isFunctionPrototypeType() {
    return referencedType.isFunctionPrototypeType();
}","public void test36104() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    assertFalse(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test36105() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    boolean boolean0 = parameterizedType0.isFunctionPrototypeType();
    assertTrue(parameterizedType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test37106() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    enumElementType0.toString();
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test37107() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Named type with empty name component"", jSType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    enumElementType0.toString();
    assertFalse(jSType0.isNoResolvedType());
}",""
"public boolean hasDisplayName() {
    String displayName = getDisplayName();
    return displayName != null && !displayName.isEmpty();
}","public void test38108() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasDisplayName();
    assertFalse(boolean0);
}","/**
 * @return true if the JSType has a user meaningful label.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test38109() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, """");
    boolean boolean0 = templateType0.hasDisplayName();
    assertFalse(templateType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test39110() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isEmptyType());
}",""
"public boolean hasDisplayName() {
    String displayName = getDisplayName();
    return displayName != null && !displayName.isEmpty();
}","public void test39111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(boolean0);
}","/**
 * @return true if the JSType has a user meaningful label.
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test40112() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(noObjectType0);
    assertTrue(noObjectType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test40113() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(noObjectType0);
    assertTrue(noType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test41114() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) noResolvedType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
    assertFalse(functionType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test41115() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) noResolvedType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test42116() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
    booleanType0.getTypesUnderShallowEquality(proxyObjectType0);
    assertFalse(proxyObjectType0.isEmptyType());
}",""
"public boolean isNoObjectType() {
    return false;
}","public void test42117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, booleanType0);
    booleanType0.getTypesUnderShallowEquality(proxyObjectType0);
    assertFalse(booleanType0.isNoObjectType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test43118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.isEquivalent(noResolvedType0, noResolvedType0);
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public static boolean isEquivalent(JSType typeA, JSType typeB) {
    return (typeA == null || typeB == null) ? typeA == typeB : typeA.isEquivalentTo(typeB);
}","public void test44119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, (JSType) null);
    boolean boolean0 = JSType.isEquivalent(proxyObjectType0, (JSType) null);
    assertFalse(boolean0);
}",""
"public static boolean isEquivalent(JSType typeA, JSType typeB) {
    return (typeA == null || typeB == null) ? typeA == typeB : typeA.isEquivalentTo(typeB);
}","public void test45120() throws Throwable {
    boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    assertTrue(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test46121() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.equals(simpleErrorReporter0);
    assertTrue(noType0.isEmptyType());
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test46122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.equals(simpleErrorReporter0);
    assertFalse(noType0.isNoResolvedType());
}",""
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test46123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = noType0.equals(simpleErrorReporter0);
    assertFalse(boolean0);
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test47124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    noType0.equals(numberType0);
    assertTrue(noType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test47125() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    noType0.equals(numberType0);
    assertFalse(numberType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test48126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    nullType0.findPropertyType(""Unknown class name"");
    assertFalse(nullType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test49127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public boolean canAssignTo(JSType that) {
    if (this.isSubtype(that)) {
        return true;
    }
    return false;
}","public void test49128() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    boolean boolean0 = stringType0.canAssignTo(noResolvedType0);
    assertFalse(boolean0);
}","/**
 * Tests whether values of {@code this} type can be safely assigned
 * to values of {@code that} type.<p>
 *
 * The default implementation verifies that {@code this} is a subtype
 * of {@code that}.<p>
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test50129() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public boolean canAssignTo(JSType that) {
    if (this.isSubtype(that)) {
        return true;
    }
    return false;
}","public void test50130() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noResolvedType0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    boolean boolean0 = jSType0.canAssignTo(jSType_TypePair0.typeB);
    assertTrue(boolean0);
}","/**
 * Tests whether values of {@code this} type can be safely assigned
 * to values of {@code that} type.<p>
 *
 * The default implementation verifies that {@code this} is a subtype
 * of {@code that}.<p>
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test51131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    ObjectType objectType0 = stringType0.dereference();
    assertFalse(objectType0.isEmptyType());
}",""
"public final ObjectType dereference() {
    JSType restricted = restrictByNotNullOrUndefined();
    JSType autobox = restricted.autoboxesTo();
    return ObjectType.cast(autobox == null ? restricted : autobox);
}","public void test51132() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    ObjectType objectType0 = stringType0.dereference();
    assertNotNull(objectType0);
}","/**
 * Dereference a type for property access.
 *
 * Autoboxes the type, filters null/undefined, and returns the result
 * iff it's an object.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test52133() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test52134() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(allType0);
    assertTrue(noType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test52135() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noType0.getTypesUnderEquality(allType0);
    assertFalse(noType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test53136() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderEquality(templateType0);
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test53137() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderEquality(templateType0);
    assertFalse(templateType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test53138() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    noResolvedType0.getTypesUnderEquality(templateType0);
    assertFalse(noResolvedType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test54139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(noType0);
    jSType_TypePair0.typeA.testForEqualityHelper(templateType0, noType0);
    assertTrue(noType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test54140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(noType0);
    jSType_TypePair0.typeA.testForEqualityHelper(templateType0, noType0);
    assertTrue(noType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test55141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
    noType0.getTypesUnderInequality(jSType0);
    assertTrue(noType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test56142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    noType0.getTypesUnderEquality(errorFunctionType0);
    assertTrue(noType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test57143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0, true);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(functionPrototypeType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    errorFunctionType0.getTypesUnderInequality(jSType_TypePair0.typeB);
    assertTrue(errorFunctionType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test58144() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a type name"", noType0);
    errorFunctionType0.getTypesUnderInequality(enumType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",""
"public boolean hasCachedValues() {
    return !unknown;
}","public void test59145() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(enumElementType0);
    enumType0.getTypesUnderInequality(jSType_TypePair0.typeB);
    assertTrue(enumElementType0.hasCachedValues());
}","/**
 * Returns true if any cached valeus have been set for this type.  If true,
 * then the prototype chain should not be changed, as it might invalidate the
 * cached values.
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test59146() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(enumElementType0);
    enumType0.getTypesUnderInequality(jSType_TypePair0.typeB);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public boolean isEnumElementType() {
    return false;
}","public void test60147() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    assertFalse(jSType0.isEnumElementType());
}",""
"public boolean isFunctionType() {
    return false;
}","public void test60148() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(jSType0.isFunctionType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test60149() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(jSType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test60150() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    numberType0.testForEquality(jSType0);
    assertFalse(numberType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test61151() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
    assertTrue(noType0.isEmptyType());
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test61152() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
    assertFalse(noType0.isNoResolvedType());
}",""
"public final boolean canTestForShallowEqualityWith(JSType that) {
    return this.isSubtype(that) || that.isSubtype(this);
}","public void test61153() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
    assertTrue(boolean0);
}","/**
 * Tests whether {@code this} and {@code that} are meaningfully
 * comparable using shallow comparison. By meaningfully, we mean compatible
 * types that are not rejected by step 1 of the definition of the Strict
 * Equality Comparison Algorithm (11.9.6, page 56&ndash;57) of the
 * ECMA-262 specification.<p>
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test62154() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""{"", voidType0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumType0);
    assertFalse(enumType0.isEmptyType());
}",""
"public final boolean canTestForShallowEqualityWith(JSType that) {
    return this.isSubtype(that) || that.isSubtype(this);
}","public void test62155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""{"", voidType0);
    boolean boolean0 = voidType0.canTestForShallowEqualityWith(enumType0);
    assertFalse(boolean0);
}","/**
 * Tests whether {@code this} and {@code that} are meaningfully
 * comparable using shallow comparison. By meaningfully, we mean compatible
 * types that are not rejected by step 1 of the definition of the Strict
 * Equality Comparison Algorithm (11.9.6, page 56&ndash;57) of the
 * ECMA-262 specification.<p>
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test63156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public final boolean canTestForShallowEqualityWith(JSType that) {
    return this.isSubtype(that) || that.isSubtype(this);
}","public void test63157() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", noResolvedType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(noResolvedType0);
    assertTrue(boolean0);
}","/**
 * Tests whether {@code this} and {@code that} are meaningfully
 * comparable using shallow comparison. By meaningfully, we mean compatible
 * types that are not rejected by step 1 of the definition of the Strict
 * Equality Comparison Algorithm (11.9.6, page 56&ndash;57) of the
 * ECMA-262 specification.<p>
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test64158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality(noType0);
    noType0.getLeastSupertype(jSType_TypePair0.typeB);
    assertTrue(noType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test65159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test65160() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createOptionalType(errorFunctionType0);
    errorFunctionType0.getLeastSupertype(jSType0);
    assertFalse(errorFunctionType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test66161() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    errorFunctionType0.getLeastSupertype(noResolvedType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test67162() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    noResolvedType0.getTypesUnderShallowEquality(recordType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test68163() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType1 = numberType0.autoboxesTo();
    jSType0.getTypesUnderShallowEquality(jSType1);
    assertFalse(jSType1.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test68164() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType1 = numberType0.autoboxesTo();
    jSType0.getTypesUnderShallowEquality(jSType1);
    assertFalse(jSType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test69165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
    jSTypeNativeArray0[0] = jSTypeNative0;
    jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
    errorFunctionType0.getTypesUnderShallowEquality(jSType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test70166() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    jSType0.getTypesUnderShallowEquality(numberType0);
    assertFalse(jSType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test71167() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
    JSType.filterNoResolvedType(unionType0);
    assertFalse(unionType0.isEmptyType());
}",""
"public JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {
    BooleanLiteralSet literals = getPossibleToBooleanOutcomes();
    if (literals.contains(outcome)) {
        return this;
    } else {
        return getNativeType(JSTypeNative.NO_TYPE);
    }
}","public void test72168() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertNotSame(jSType0, noType0);
}","/**
 * Computes the restricted type of this type knowing that the
 * {@code ToBoolean} predicate has a specific value. For more information
 * about the {@code ToBoolean} predicate, see
 * {@link #getPossibleToBooleanOutcomes}.
 *
 * @param outcome the value of the {@code ToBoolean} predicate
 *
 * @return the restricted type, or the Any Type if the underlying type could
 *         not have yielded this ToBoolean value
 *
 * TODO(user): Move this method to the SemanticRAI and use the visit
 * method of types to get the restricted type.
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test72169() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertTrue(jSType0.isEmptyType());
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test72170() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = noType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(jSType0.isNoResolvedType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test73171() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    JSType jSType0 = allType0.getRestrictedTypeGivenToBooleanOutcome(true);
    assertFalse(jSType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test74172() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test74173() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    noResolvedType0.getTypesUnderEquality(jSType0);
    assertFalse(jSType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test75174() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    jSType0.getTypesUnderEquality(numberType0);
    assertFalse(jSType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test76175() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.getTypesUnderInequality(noType0);
    assertTrue(noType0.hasCachedValues());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test77176() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
    jSType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test77177() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(noType0);
    jSType0.getTypesUnderShallowInequality(jSType0);
    assertTrue(noType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test78178() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = templateType0.differsFrom(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public boolean differsFrom(JSType that) {
    // if there are no unknowns, just use normal equality.
    if (!this.isUnknownType() && !that.isUnknownType()) {
        return !this.isEquivalentTo(that);
    }
    // otherwise, they're different iff one is unknown and the other is not.
    return this.isUnknownType() ^ that.isUnknownType();
}","public void test78179() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = templateType0.differsFrom(noResolvedType0);
    assertTrue(boolean0);
}","/**
 * Whether this type is meaningfully different from {@code that} type.
 * This is a trickier check than pure equality, because it has to properly
 * handle unknown types.
 *
 * @see <a href=""http://www.youtube.com/watch?v=_RpSv3HjpEw"">Unknown
 *     unknowns</a>
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test79180() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
    assertTrue(noType0.isEmptyType());
}",""
"public boolean isNoResolvedType() {
    return false;
}","public void test79181() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
    assertFalse(noType0.isNoResolvedType());
}",""
"public boolean differsFrom(JSType that) {
    // if there are no unknowns, just use normal equality.
    if (!this.isUnknownType() && !that.isUnknownType()) {
        return !this.isEquivalentTo(that);
    }
    // otherwise, they're different iff one is unknown and the other is not.
    return this.isUnknownType() ^ that.isUnknownType();
}","public void test79182() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowInequality(noType0);
    boolean boolean0 = noType0.differsFrom(jSType_TypePair0.typeA);
    assertFalse(boolean0);
}","/**
 * Whether this type is meaningfully different from {@code that} type.
 * This is a trickier check than pure equality, because it has to properly
 * handle unknown types.
 *
 * @see <a href=""http://www.youtube.com/watch?v=_RpSv3HjpEw"">Unknown
 *     unknowns</a>
 */"
"public boolean differsFrom(JSType that) {
    // if there are no unknowns, just use normal equality.
    if (!this.isUnknownType() && !that.isUnknownType()) {
        return !this.isEquivalentTo(that);
    }
    // otherwise, they're different iff one is unknown and the other is not.
    return this.isUnknownType() ^ that.isUnknownType();
}","public void test80183() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = noResolvedType0.differsFrom(templateType0);
    assertTrue(boolean0);
}","/**
 * Whether this type is meaningfully different from {@code that} type.
 * This is a trickier check than pure equality, because it has to properly
 * handle unknown types.
 *
 * @see <a href=""http://www.youtube.com/watch?v=_RpSv3HjpEw"">Unknown
 *     unknowns</a>
 */"
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test80184() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = noResolvedType0.differsFrom(templateType0);
    assertTrue(noResolvedType0.isEmptyType());
}",""
"public final boolean isEmptyType() {
    return isNoType() || isNoObjectType() || isNoResolvedType();
}","public void test80185() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Named type with empty name component"");
    boolean boolean0 = noResolvedType0.differsFrom(templateType0);
    assertFalse(templateType0.isEmptyType());
}",""
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test81186() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",""
"public boolean differsFrom(JSType that) {
    // if there are no unknowns, just use normal equality.
    if (!this.isUnknownType() && !that.isUnknownType()) {
        return !this.isEquivalentTo(that);
    }
    // otherwise, they're different iff one is unknown and the other is not.
    return this.isUnknownType() ^ that.isUnknownType();
}","public void test81187() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = noResolvedType0.differsFrom(errorFunctionType0);
    assertTrue(boolean0);
}","/**
 * Whether this type is meaningfully different from {@code that} type.
 * This is a trickier check than pure equality, because it has to properly
 * handle unknown types.
 *
 * @see <a href=""http://www.youtube.com/watch?v=_RpSv3HjpEw"">Unknown
 *     unknowns</a>
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test82188() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowEquality(templateType0);
    boolean boolean0 = JSType.isSubtype((JSType) noType0, jSType_TypePair0.typeB);
    assertTrue(noType0.hasCachedValues());
}",""
"static boolean isSubtype(JSType thisType, JSType thatType) {
    // unknown
    if (thatType.isUnknownType()) {
        return true;
    }
    // equality
    if (thisType.isEquivalentTo(thatType)) {
        return true;
    }
    // all type
    if (thatType.isAllType()) {
        return true;
    }
    // unions
    if (thatType instanceof UnionType) {
        UnionType union = (UnionType) thatType;
        for (JSType element : union.alternates) {
            if (thisType.isSubtype(element)) {
                return true;
            }
        }
    }
    // named types
    if (thatType instanceof NamedType) {
        return thisType.isSubtype(((NamedType) thatType).getReferencedType());
    }
    return false;
}","public void test82189() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderShallowEquality(templateType0);
    boolean boolean0 = JSType.isSubtype((JSType) noType0, jSType_TypePair0.typeB);
    assertTrue(boolean0);
}","/**
 * A generic implementation meant to be used as a helper for common subtyping
 * cases.
 */"
"@Override
public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
}","public void test83190() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderShallowEquality(allType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",""
"public final boolean isResolved() {
    return resolved;
}","public void test84191() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    noType0.setResolvedTypeInternal((JSType) null);
    noType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
    assertTrue(noType0.isResolved());
}","/**
 * Whether the type has been resolved.
 */"
