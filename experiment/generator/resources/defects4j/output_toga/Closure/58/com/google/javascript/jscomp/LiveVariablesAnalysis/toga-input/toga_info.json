{
  "test1212" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"%\", \"%\");\n    Node node1 = Node.newString(101, \"%\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(35);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"ep {+KEi:~ !q=Xw9\", \"ep {+KEi:~ !q=Xw9\");\n    Node node1 = Node.newString(105, \"ep {+KEi:~ !q=Xw9\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(14);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"eJp {+KUEi:~ !9q=Xw,\", \"eJp {+KUEi:~ !9q=Xw,\");\n    Node node1 = Node.newString(98, \"eJp {+KUEi:~ !9q=Xw,\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(4);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"R\", \"R\");\n    Node node1 = Node.newString(118, \"R\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node1, (Scope) null);\n    scope0.declare(\"R\", node0, (JSType) null, (CompilerInput) null, true);\n    node1.addChildrenToFront(node0);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(32);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \")Gg8=cacX>>r|gD\", \")Gg8=cacX>>r|gD\");\n    Node node1 = Node.newString(100, \"Should be unreachable.\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(2);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "void markAllParametersEscaped()",
    "methodName" : "markAllParametersEscaped",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"OBJECT_NUMBER_STRING_BOOLEAN\", \"OBJECT_NUMBER_STRING_BOOLEAN\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    node0.addChildrenToFront(node0);\n    liveVariablesAnalysis0.markAllParametersEscaped();\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "public int getVarIndex(String var)",
    "methodName" : "getVarIndex",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.getVarIndex(\"arguments\");\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_EX;\n    controlFlowGraph0.connectToImplicitReturn(node0, controlFlowGraph_Branch0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(5);\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "protected L join(L latticeA, L latticeB)",
    "methodName" : "join",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"}A=P@Yq[Qhyj\", \"}A=P@Yq[Qhyj\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    LiveVariablesAnalysis.LiveVariableLattice liveVariablesAnalysis_LiveVariableLattice0 = liveVariablesAnalysis0.createEntryLattice();\n    LiveVariablesAnalysis.LiveVariableLattice liveVariablesAnalysis_LiveVariableLattice1 = liveVariablesAnalysis0.join(liveVariablesAnalysis_LiveVariableLattice0, liveVariablesAnalysis_LiveVariableLattice0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"g5xD3>UE?$(/^Ayc{\\\"o\", \"g5xD3>UE?$(/^Ayc{\\\"o\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_FALSE;\n    controlFlowGraph0.connect(node0, controlFlowGraph_Branch0, node0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(0);\n}",
    "testName" : "test088"
  },
  "test099" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"R\", \"R\");\n    Node node1 = Node.newString(118, \"R\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node1, (Scope) null);\n    node1.addChildrenToFront(node0);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(32);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"U.Pv<\", \"U.Pv<\");\n    Node node0 = Node.newString(114, \"U.Pv<\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(1);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"com.google.javascript.jscmp.LiveVaiabesAnalysis$LiveVariableJoinOp\", \"com.google.javascript.jscmp.LiveVaiabesAnalysis$LiveVariableJoinOp\");\n    Node node1 = Node.newString(115, \"com.google.javascript.jscmp.LiveVaiabesAnalysis$LiveVariableJoinOp\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(36);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    Node node0 = Node.newString(108, \"\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(5);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"%\", \"%\");\n    Node node1 = Node.newString(113, \"%\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(15);\n}",
    "testName" : "test1515"
  },
  "test1818" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"R\", \"R\");\n    Node node0 = Node.newString(125, \"9TS[fA;KO;9<kLRW\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node0, (Scope) null);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(1024);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"\", \"\");\n    Node node1 = Node.newString(118, \"\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node1, (Scope) null);\n    node1.addChildrenToFront(node0);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(20);\n}",
    "testName" : "test1919"
  },
  "test2020" : {
    "methodSignature" : "final void analyze(int maxSteps)",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.LiveVariablesAnalysis",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"`\", \"`\");\n    Node node1 = Node.newString(97, \"`\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, true, true);\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    Scope scope0 = syntacticScopeCreator0.createScope(node1, (Scope) null);\n    node1.addChildrenToFront(node0);\n    LiveVariablesAnalysis liveVariablesAnalysis0 = new LiveVariablesAnalysis(controlFlowGraph0, scope0, compiler0);\n    liveVariablesAnalysis0.analyze(19);\n}",
    "testName" : "test2020"
  }
}