focal_method,test_prefix,docstring
"public ReferenceCollection getReferenceCollection(Var v) {
    return referenceMap.get(v);
}","public void test077() throws Throwable {
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback((AbstractCompiler) null, referenceCollectingCallback_Behavior0);
    ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferenceCollection((Scope.Var) null);
    assertNull(referenceCollectingCallback_ReferenceCollection0);
}","/**
 * Gets the reference collection for the given variable.
 */"
"public boolean isOnlyModifiesThisCall() {
    return areBitFlagsSet(getSideEffectFlags() & Node.NO_SIDE_EFFECTS, Node.FLAG_GLOBAL_STATE_UNMODIFIED | Node.FLAG_ARGUMENTS_UNMODIFIED | Node.FLAG_NO_THROWS);
}","public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""n8qEI_N^f"");
    node0.setType(77);
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    referenceCollectingCallback0.process(node0, node0);
    assertFalse(node0.isOnlyModifiesThisCall());
}","/**
 * @return Whether the only side-effect is ""modifies this""
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascriptjscomp.ReferenceCollectingCallback$ReferenceCollection"", ""com.google.javascriptjscomp.ReferenceCollectingCallback$ReferenceCollection"");
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    Node node1 = new Node(98, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = new Node(100, node0, node0);
    referenceCollectingCallback0.visit(nodeTraversal0, node0, node1);
    assertFalse(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test1212() throws Throwable {
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    Node node0 = Node.newString(101, ""ce8m|nX/C*Ds5E2B^"");
    Compiler compiler0 = new Compiler();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test1313() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    Node node0 = Node.newString(108, ""%W&|UWB>}b9/"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test1414() throws Throwable {
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    Node node0 = Node.newString(113, ""ce8m|nX/C*Ds5E2B^"");
    Compiler compiler0 = new Compiler();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1515() throws Throwable {
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback((AbstractCompiler) null, referenceCollectingCallback_Behavior0);
    NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, referenceCollectingCallback0);
    Node node0 = new Node(114);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test1616() throws Throwable {
    Node node0 = Node.newString(115, "" Tn'K#B92I#)H"");
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test1717() throws Throwable {
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    Node node0 = Node.newString(119, ""ce8m|nX/C*Ds5E2B^"");
    Compiler compiler0 = new Compiler();
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.NAME) {
        Var v = t.getScope().getVar(n.getString());
        if (v != null && varFilter.apply(v)) {
            addReference(t, v, new Reference(n, parent, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1818() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    Node node0 = new Node(111);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
