focal_method,test_prefix,docstring
"boolean isBottom() {
    return isBottom;
}","public void test1128() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.jscomp.Scope$1"", ""com.google.javascript.jscomp.Scope$1"");
    Scope scope0 = new Scope(node0, compiler0);
    boolean boolean0 = scope0.isBottom();
    assertFalse(boolean0);
}","/**
 * Whether this is the bottom of the lattice.
 */"
"public StaticSlot<JSType> getSlot(String name) {
    return getVar(name);
}","public void test1229() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""Scope.Var "", ""Scope.Var "");
    Scope scope0 = new Scope(node0, compiler0);
    StaticSlot<JSType> staticSlot0 = scope0.getSlot(""Scope.Var "");
    assertNull(staticSlot0);
}",""
"int getDepth() {
    return depth;
}","public void test1431() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""E3W7 lV`%l]"", ""E3W7 lV`%l]"");
    Scope scope0 = new Scope(node0, compiler0);
    int int0 = scope0.getDepth();
    assertEquals(0, int0);
}","/**
 * The depth of the scope. The global scope has depth 0.
 */"
"public int getVarCount() {
    return vars.size();
}","public void test1532() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""Scope.Var "", ""Scope.Var "");
    Scope scope0 = new Scope(node0, compiler0);
    int int0 = scope0.getVarCount();
    assertEquals(0, int0);
}","/**
 * Returns number of variables in this scope
 */"
"public StaticSlot<JSType> getOwnSlot(String name) {
    return vars.get(name);
}","public void test1633() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""Scope.Var "", ""Scope.Var "");
    Scope scope0 = new Scope(node0, compiler0);
    StaticSlot<JSType> staticSlot0 = scope0.getOwnSlot(""Scope.Var "");
    assertNull(staticSlot0);
}",""
"public boolean isSyntheticBlock() {
    return getBooleanProp(SYNTHETIC_BLOCK_PROP);
}","public void test2346() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.Scope$1"", ""com.google.javascript.jscomp.Scope$1"");
    Node node1 = new Node(86, node0, 31, 0);
    Scope scope0 = new Scope(node0, compiler0);
    Scope.Var scope_Var0 = scope0.declare(""com.google.javascript.jscomp.Scope$1"", node0, (JSType) null, (CompilerInput) null);
    Node node2 = scope_Var0.getInitialValue();
    assertTrue(node2.isSyntheticBlock());
}","/**
 * Returns whether this is a synthetic block that should not be considered
 * a real source block.
 */"
"public int getType() {
    return type;
}","public void test2451() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.ScZpe$1"", ""com.google.javascript.jscomp.ScZpe$1"");
    Node node1 = new Node(105, node0, 31, 32);
    Scope scope0 = new Scope(node0, compiler0);
    Scope.Var scope_Var0 = scope0.declare(""com.google.javascript.jscomp.ScZpe$1"", node0, (JSType) null, (CompilerInput) null);
    Node node2 = scope_Var0.getInitialValue();
    assertEquals(105, node2.getType());
}",""
"public int getType() {
    return type;
}","public void test2553() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""eo4"", ""eo4"");
    Node node1 = new Node(118, node0, 18, 26);
    Scope scope0 = new Scope(node1, compiler0);
    Scope.Var scope_Var0 = scope0.declare(""eo4"", node0, (JSType) null, (CompilerInput) null);
    Node node2 = scope_Var0.getInitialValue();
    assertEquals(130, node2.getType());
}",""
"// TODO(johnlenz): Include this the list of Vars for the scope.
// TODO(johnlenz): provide the type of ""Arguments"".
/**
 * Creates a Scope given the parent Scope and the root node of the scope.
 * @param parent  The parent Scope. Cannot be null.
 * @param rootNode  Typically the FUNCTION node.
 */
Scope(Scope parent, Node rootNode) {
    Preconditions.checkNotNull(parent);
    Preconditions.checkArgument(rootNode != parent.rootNode);
    this.parent = parent;
    this.rootNode = rootNode;
    JSType nodeType = rootNode.getJSType();
    if (nodeType != null && nodeType instanceof FunctionType) {
        thisType = ((FunctionType) nodeType).getTypeOfThis();
    } else {
        thisType = parent.thisType;
    }
    this.isBottom = false;
    this.depth = parent.depth + 1;
}","public void test3572() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""lP@G#|XkcckM"", ""lP@G#|XkcckM"");
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
    Scope scope1 = null;
    try {
        scope1 = new Scope(scope0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * A special subclass of Var used to distinguish ""arguments"" in the current
 * scope.
 */"
"public boolean isLocal() {
    return !isGlobal();
}","public void test3673() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, """", """");
    Node node1 = compiler0.parseSyntheticCode("""", """");
    Scope scope0 = new Scope(node0, compiler0);
    Scope scope1 = new Scope(scope0, node1);
    Scope scope2 = scope1.getGlobalScope();
    assertFalse(scope2.isLocal());
}","/**
 * Returns whether this is a local scope (i.e. not the global scope).
 */"
"Var declare(String name, Node nameNode, JSType type, CompilerInput input) {
    return declare(name, nameNode, type, input, true);
}","public void test3774() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""Y51F"", ""Y51F"");
    Scope scope0 = new Scope(node0, compiler0);
    // Undeclared exception!
    try {
        scope0.declare((String) null, node0, (JSType) null, (CompilerInput) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Declares a variable whose type is inferred.
 *
 * @param name name of the variable
 * @param nameNode the NAME node declaring the variable
 * @param type the variable's type
 * @param input the input in which this variable is defined.
 */"
"Var declare(String name, Node nameNode, JSType type, CompilerInput input) {
    return declare(name, nameNode, type, input, true);
}","public void test3875() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("""");
    Scope scope0 = new Scope(node0, compiler0);
    // Undeclared exception!
    try {
        scope0.declare("""", node0, (JSType) null, (CompilerInput) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Declares a variable whose type is inferred.
 *
 * @param name name of the variable
 * @param nameNode the NAME node declaring the variable
 * @param type the variable's type
 * @param input the input in which this variable is defined.
 */"
"Var declare(String name, Node nameNode, JSType type, CompilerInput input) {
    return declare(name, nameNode, type, input, true);
}","public void test3976() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.Scope$1"", ""com.google.javascript.jscomp.Scope$1"");
    Scope scope0 = new Scope(node0, compiler0);
    scope0.declare(""com.google.javascript.jscomp.Scope$1"", node0, (JSType) null, (CompilerInput) null);
    // Undeclared exception!
    try {
        scope0.declare(""com.google.javascript.jscomp.Scope$1"", node0, (JSType) null, (CompilerInput) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Declares a variable whose type is inferred.
 *
 * @param name name of the variable
 * @param nameNode the NAME node declaring the variable
 * @param type the variable's type
 * @param input the input in which this variable is defined.
 */"
"void undeclare(Var var) {
    Preconditions.checkState(var.scope == this);
    Preconditions.checkState(vars.get(var.name) == var);
    vars.remove(var.name);
}","public void test4077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""qom.googleFjavscript.j3compsScope$1"");
    Scope scope0 = new Scope(node0, compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
    Scope scope1 = new Scope(node0, functionType0);
    Scope.Var scope_Var0 = scope1.declare(""Named type with empty name component"", node0, (JSType) null, (CompilerInput) null);
    // Undeclared exception!
    try {
        scope0.undeclare(scope_Var0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Undeclares a variable, to be used when the compiler optimizes out
 * a variable and removes it from the scope.
 */"
"void undeclare(Var var) {
    Preconditions.checkState(var.scope == this);
    Preconditions.checkState(vars.get(var.name) == var);
    vars.remove(var.name);
}","public void test4178() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""5GA"");
    Scope scope0 = new Scope(node0, compiler0);
    Scope.Var scope_Var0 = scope0.declare(""5GA"", node0, (JSType) null, (CompilerInput) null);
    scope0.undeclare(scope_Var0);
    // Undeclared exception!
    try {
        scope0.undeclare(scope_Var0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Undeclares a variable, to be used when the compiler optimizes out
 * a variable and removes it from the scope.
 */"
"public Var getVar(String name) {
    Var var = vars.get(name);
    if (var != null) {
        return var;
    } else if (parent != null) {
        // Recurse up the parent Scope
        return parent.getVar(name);
    } else {
        return null;
    }
}","public void test4280() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.jscomp.Scope$1"", ""com.google.javascript.jscomp.Scope$1"");
    Scope scope0 = new Scope(node0, compiler0);
    scope0.declare(""com.google.javascript.jscomp.Scope$1"", node0, (JSType) null, (CompilerInput) null);
    Scope.Var scope_Var0 = scope0.getVar(""com.google.javascript.jscomp.Scope$1"");
    assertNotNull(scope_Var0);
}","/**
 * Returns the variable, may be null
 */"
"public Var getVar(String name) {
    Var var = vars.get(name);
    if (var != null) {
        return var;
    } else if (parent != null) {
        // Recurse up the parent Scope
        return parent.getVar(name);
    } else {
        return null;
    }
}","public void test4381() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, """", """");
    Node node1 = compiler0.parseSyntheticCode("""", ""checkMissingGetCssName"");
    Scope scope0 = new Scope(node1, compiler0);
    Scope scope1 = new Scope(scope0, node0);
    Scope.Var scope_Var0 = scope1.getVar("""");
    assertNull(scope_Var0);
}","/**
 * Returns the variable, may be null
 */"
"/**
 * Returns true if a variable is declared.
 */
public boolean isDeclared(String name, boolean recurse) {
    Scope scope = this;
    if (scope.vars.containsKey(name))
        return true;
    if (scope.parent != null && recurse) {
        return scope.parent.isDeclared(name, recurse);
    }
    return false;
}","public void test4483() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""eo4"", ""eo4"");
    Scope scope0 = new Scope(node0, compiler0);
    Scope.Var scope_Var0 = scope0.declare(""eo4"", node0, (JSType) null, (CompilerInput) null);
    boolean boolean0 = scope0.isDeclared(""eo4"", false);
    assertTrue(boolean0);
}","/**
 * Get a unique VAR object to represents ""arguments"" within this scope
 */"
"/**
 * Returns true if a variable is declared.
 */
public boolean isDeclared(String name, boolean recurse) {
    Scope scope = this;
    if (scope.vars.containsKey(name))
        return true;
    if (scope.parent != null && recurse) {
        return scope.parent.isDeclared(name, recurse);
    }
    return false;
}","public void test4584() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""eo4"", ""eo4"");
    Node node1 = compiler0.parseSyntheticCode(""eo4"", ""eo4"");
    Scope scope0 = new Scope(node0, compiler0);
    Scope scope1 = new Scope(scope0, node1);
    boolean boolean0 = scope1.isDeclared(""eo4"", true);
    assertFalse(boolean0);
}","/**
 * Get a unique VAR object to represents ""arguments"" within this scope
 */"
"/**
 * Returns true if a variable is declared.
 */
public boolean isDeclared(String name, boolean recurse) {
    Scope scope = this;
    if (scope.vars.containsKey(name))
        return true;
    if (scope.parent != null && recurse) {
        return scope.parent.isDeclared(name, recurse);
    }
    return false;
}","public void test4685() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, """", """");
    Node node1 = compiler0.parseSyntheticCode("""", ""JSC_UNKNOWN_OVERRIDE"");
    Scope scope0 = new Scope(node1, compiler0);
    Scope scope1 = new Scope(scope0, node0);
    boolean boolean0 = scope1.isDeclared("""", false);
    assertFalse(boolean0);
}","/**
 * Get a unique VAR object to represents ""arguments"" within this scope
 */"
"public boolean isLocal() {
    return !isGlobal();
}","public void test4786() throws Throwable {
    Node node0 = Node.newString(""E3W7 lV`%l]"");
    Compiler compiler0 = new Compiler();
    Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, """", ""E3W7 lV`%l]"");
    Scope scope0 = new Scope(node1, compiler0);
    Scope scope1 = new Scope(scope0, node0);
    boolean boolean0 = scope1.isLocal();
    assertTrue(boolean0);
}","/**
 * Returns whether this is a local scope (i.e. not the global scope).
 */"
