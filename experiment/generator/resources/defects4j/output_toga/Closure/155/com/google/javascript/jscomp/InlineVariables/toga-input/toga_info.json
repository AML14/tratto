{
  "test00" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.InlineVariables",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;\n    InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\", \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\");\n    inlineVariables0.process(node0, node0);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public boolean isOnlyModifiesThisCall()",
    "methodName" : "isOnlyModifiesThisCall",
    "className" : "com.google.javascript.jscomp.InlineVariables",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.LOCALS_ONLY;\n    InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, false);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\", \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\");\n    inlineVariables0.process(node0, node0);\n    node0.isOnlyModifiesThisCall();\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.InlineVariables",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.CONSTANTS_ONLY;\n    InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, false);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"7~ZP\", \"7~ZP\");\n    inlineVariables0.process(node0, node0);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.InlineVariables",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;\n    InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\", \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\");\n    Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\", \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\");\n    node1.addChildToBack(node0);\n    inlineVariables0.process(node1, node1);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.InlineVariables",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;\n    InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\", \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\");\n    Node node1 = Normalize.parseAndNormalizeSyntheticCode(compiler0, \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\", \"function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}\");\n    node1.addChildToBack(node0);\n    node0.checkTreeEquals(node1);\n    inlineVariables0.process(node0, node1);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.InlineVariables",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    InlineVariables.Mode inlineVariables_Mode0 = InlineVariables.Mode.ALL;\n    InlineVariables inlineVariables0 = new InlineVariables(compiler0, inlineVariables_Mode0, true);\n    Node node0 = compiler0.parseSyntheticCode(\"function JSompile_get(JSCompiler_get_name) {  return function() {return this[JSCompilerget_name]}}\", \"function JSompile_get(JSCompiler_get_name) {  return function() {return this[JSCompilerget_name]}}\");\n    Node node1 = compiler0.parseTestCode(\"function JSompile_get(JSCompiler_get_name) {  return function() {return this[JSCompilerget_name]}}\");\n    Node node2 = Normalize.parseAndNormalizeSyntheticCode(compiler0, \"JSompile_get\", \"function JSompile_get(JSCompiler_get_name) {  return function() {return this[JSCompilerget_name]}}\");\n    node2.addChildToBack(node1);\n    inlineVariables0.process(node0, node2);\n}",
    "testName" : "test55"
  }
}