project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""goog.base"");
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    processClosurePrimitives0.process(node0, node0);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test001,"public void test001() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""goog.base"");
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    processClosurePrimitives0.process(node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test023,"public void test023() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(30);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
    processClosurePrimitives0.process(node0, node0);
    assertEquals(0, Node.SIDE_EFFECTS_ALL);
}",0,
project,0,test034,"public void test034() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""msgno.brac=et"");
    CheckLevel checkLevel0 = CheckLevel.WARNING;
    Node node1 = new Node(37, node0, node0, 1, 0);
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    // Undeclared exception!
    try {
        processClosurePrimitives0.process((Node) null, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",0,
project,0,test045,"public void test045() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(37, 37, 37);
    node0.addChildToBack(node0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
    processClosurePrimitives0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.POST_FLAG);
}",0,
project,0,test056,"public void test056() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(37);
    Node node1 = new Node(34, node0, node0, node0, node0);
    node0.addChildToBack(node1);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    node1.setType(33);
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
    processClosurePrimitives0.visit(nodeTraversal0, node0, node1);
    assertFalse(node1.isSyntheticBlock());
}",0,assertFalse(node1.isSyntheticBlock())
project,0,test067,"public void test067() throws Throwable {
    Node node0 = new Node(105);
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);
    Node node1 = new Node(15, node0, node0, node0, 18, 13);
    processClosurePrimitives0.visit(nodeTraversal0, node0, node1);
    assertEquals(4095, Node.COLUMN_MASK);
}",0,
project,0,test078,"public void test078() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    Node node1 = Node.newString(6, ""JSC_TOO_MANY_ARGUMENTS_ERROR"");
    node0.addChildrenToFront(node1);
    Compiler compiler0 = new Compiler();
    StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, true, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    Node node2 = new Node(125, node0, node0, 38, 43);
    processClosurePrimitives0.visit(nodeTraversal0, node0, node2);
    assertEquals(10, Node.VARS_PROP);
}",0,
project,0,test089,"public void test089() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""msg.cant.convert"");
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
    processClosurePrimitives0.process(node0, node0);
    assertEquals(33, Node.NAME_PROP);
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(86);
    Node node1 = new Node(46, node0, node0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, false);
    processClosurePrimitives0.process(node1, node1);
    assertFalse(node1.isLocalResultCall());
}",0,assertFalse(node1.isLocalResultCall())
project,0,test1011,"public void test1011() throws Throwable {
    Node node0 = new Node(89, 89, 89);
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    Node node1 = new Node(30, node0, node0, 12, 0);
    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, checkLevel0, true);
    processClosurePrimitives0.process(node0, node1);
    assertFalse(node1.hasMoreThanOneChild());
}",0,
