project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Compiler compiler0 = commandLineRunner0.createCompiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", """");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JSModule[] jSModuleArray0 = new JSModule[0];
    Result result1 = new Result(result0.warnings, result0.warnings, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, (String) null, (Map<String, Integer>) null);
    int int0 = commandLineRunner0.processResults(result1, jSModuleArray0, compilerOptions0);
    assertEquals(0, int0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    commandLineRunner0.setRunOptions(compilerOptions0);
    assertFalse(compilerOptions0.exportTestFunctions);
}",0,
project,0,test022,"public void test022() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Compiler compiler0 = commandLineRunner0.getCompiler();
    assertNull(compiler0);
}",0,assertNotNull(compiler0)
project,0,test033,"public void test033() throws Throwable {
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
    } catch (System.SystemExitException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.System"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
    try {
        AbstractCommandLineRunner.createJsModules(list0, list0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Expected 2-4 colon-delimited parts in module spec: removeUnreachableCode
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test055,"public void test055() throws Throwable {
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.createJsModules((List<String>) null, (List<String>) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test066,"public void test066() throws Throwable {
    Stack<String> stack0 = new Stack<String>();
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.createJsModules(stack0, stack0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test077,"public void test077() throws Throwable {
    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.createJsModules(list0, (List<String>) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test088,"public void test088() throws Throwable {
    Stack<String> stack0 = new Stack<String>();
    stack0.add(""--deine flag syntax invalid: "");
    try {
        AbstractCommandLineRunner.createJsModules(stack0, stack0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Invalid module name: '--deine flag syntax invalid'
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test099,"public void test099() throws Throwable {
    Vector<String> vector0 = new Vector<String>();
    vector0.add(""Bax:otR^F'J"");
    try {
        AbstractCommandLineRunner.createJsModules(vector0, vector0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Invalid js file count 'otR^F'J' for module: Bax
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",1,
project,0,test1010,"public void test1010() throws Throwable {
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, (JSModule[]) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    Stack<String> stack0 = new Stack<String>();
    JSModule[] jSModuleArray0 = new JSModule[10];
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.parseModuleWrappers(stack0, jSModuleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
    JSModule[] jSModuleArray0 = new JSModule[0];
    try {
        AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Expected module wrapper to have <name>:<wrapper> format: removeUnreachableCode
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Stack<String> stack0 = new Stack<String>();
    stack0.add(""ugQ:a|:XP<"");
    JSModule[] jSModuleArray0 = new JSModule[0];
    try {
        AbstractCommandLineRunner.parseModuleWrappers(stack0, jSModuleArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unknown module: 'ugQ'
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""W;)sq!`2Ob[\"""");
    Compiler compiler0 = new Compiler();
    AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, ""W;)sq!`2Ob[\"""", ""W;)sq!`2Ob[\"""", ""3R}\""#GIfQ."");
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""u;"");
    Compiler compiler0 = new Compiler();
    AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, ""u;"", ""Bad --externs flag. "", ""."");
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""{"");
    Compiler compiler0 = new Compiler();
    AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, ""{"", ""{"", ""{"");
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""TYPE_BOOL"");
    AbstractCommandLineRunner.writeOutput(mockPrintStream0, (Compiler) null, ""TYPE_BOOL"", ""TYPE_BOOL"", ""TYPE_BOOL"");
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", """");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JSModule[] jSModuleArray0 = new JSModule[0];
    int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
    assertEquals(1, int0);
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""p"", ""p"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    Result result1 = new Result(result0.warnings, result0.errors, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, """", (Map<String, Integer>) null);
    // Undeclared exception!
    try {
        commandLineRunner0.processResults(result1, (JSModule[]) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    Vector<String> vector0 = new Vector<String>();
    vector0.add("""");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        AbstractCommandLineRunner.createDefineReplacements(vector0, compilerOptions0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // --define flag syntax invalid:
        //
        verifyException(""com.google.javascript.jscomp.AbstractCommandLineRunner"", e);
    }
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
    CompilerOptions compilerOptions0 = new CompilerOptions();
    AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
    assertFalse(compilerOptions0.inlineLocalVariables);
}",0,
