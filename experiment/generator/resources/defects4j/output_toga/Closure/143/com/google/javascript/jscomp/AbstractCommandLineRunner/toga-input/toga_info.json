{
  "test1212" : {
    "methodSignature" : "static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException",
    "methodName" : "parseModuleWrappers",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException",
    "methodName" : "parseModuleWrappers",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Stack<String> stack0 = new Stack<String>();\n    stack0.add(\"ugQ:a|:XP<\");\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    AbstractCommandLineRunner.parseModuleWrappers(stack0, jSModuleArray0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException",
    "methodName" : "parseModuleWrappers",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, (JSModule[]) null);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "static void createDefineReplacements(List<String> definitions, CompilerOptions options)",
    "methodName" : "createDefineReplacements",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException",
    "methodName" : "parseModuleWrappers",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Stack<String> stack0 = new Stack<String>();\n    JSModule[] jSModuleArray0 = new JSModule[10];\n    AbstractCommandLineRunner.parseModuleWrappers(stack0, jSModuleArray0);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "final protected void setRunOptions(B options) throws IOException, FlagUsageException",
    "methodName" : "setRunOptions",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();\n    commandLineRunner0.setRunOptions(compilerOptions0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public static void main(String[] args)",
    "methodName" : "main",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner.main(stringArray0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    AbstractCommandLineRunner.createJsModules((List<String>) null, (List<String>) null);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;\n    AbstractCommandLineRunner.createJsModules(list0, (List<String>) null);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Vector<String> vector0 = new Vector<String>();\n    vector0.add(\"Bax:otR^F'J\");\n    AbstractCommandLineRunner.createJsModules(vector0, vector0);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "static void writeOutput(PrintStream out, Compiler compiler, String code, String wrapper, String codePlaceholder)",
    "methodName" : "writeOutput",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"{\");\n    Compiler compiler0 = new Compiler();\n    AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, \"{\", \"{\", \"{\");\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "static void writeOutput(PrintStream out, Compiler compiler, String code, String wrapper, String codePlaceholder)",
    "methodName" : "writeOutput",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"TYPE_BOOL\");\n    AbstractCommandLineRunner.writeOutput(mockPrintStream0, (Compiler) null, \"TYPE_BOOL\", \"TYPE_BOOL\", \"TYPE_BOOL\");\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "static void writeOutput(PrintStream out, Compiler compiler, String code, String wrapper, String codePlaceholder)",
    "methodName" : "writeOutput",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"W;)sq!`2Ob[\\\"\");\n    Compiler compiler0 = new Compiler();\n    AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, \"W;)sq!`2Ob[\\\"\", \"W;)sq!`2Ob[\\\"\", \"3R}\\\"#GIfQ.\");\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "static void writeOutput(PrintStream out, Compiler compiler, String code, String wrapper, String codePlaceholder)",
    "methodName" : "writeOutput",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"u;\");\n    Compiler compiler0 = new Compiler();\n    AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, \"u;\", \"Bad --externs flag. \", \".\");\n}",
    "testName" : "test1515"
  },
  "test2020" : {
    "methodSignature" : "static void createDefineReplacements(List<String> definitions, CompilerOptions options)",
    "methodName" : "createDefineReplacements",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Vector<String> vector0 = new Vector<String>();\n    vector0.add(\"\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    AbstractCommandLineRunner.createDefineReplacements(vector0, compilerOptions0);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException",
    "methodName" : "processResults",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Compiler compiler0 = commandLineRunner0.createCompiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"\", \"\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    Result result1 = new Result(result0.warnings, result0.warnings, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, (String) null, (Map<String, Integer>) null);\n    int int0 = commandLineRunner0.processResults(result1, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "final protected A getCompiler()",
    "methodName" : "getCompiler",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Compiler compiler0 = commandLineRunner0.getCompiler();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;\n    AbstractCommandLineRunner.createJsModules(list0, list0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Stack<String> stack0 = new Stack<String>();\n    AbstractCommandLineRunner.createJsModules(stack0, stack0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Stack<String> stack0 = new Stack<String>();\n    stack0.add(\"--deine flag syntax invalid: \");\n    AbstractCommandLineRunner.createJsModules(stack0, stack0);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException",
    "methodName" : "processResults",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"\", \"\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException",
    "methodName" : "processResults",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"p\", \"p\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    Result result1 = new Result(result0.warnings, result0.errors, (String) null, (VariableMap) null, (VariableMap) null, (VariableMap) null, (FunctionInformationMap) null, (SourceMap) null, \"\", (Map<String, Integer>) null);\n    commandLineRunner0.processResults(result1, (JSModule[]) null, compilerOptions0);\n}",
    "testName" : "test1919"
  }
}