{
  "test1212" : {
    "methodSignature" : "void addExpr(Node n, int minPrecedence)",
    "methodName" : "addExpr",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Node node0 = Node.newNumber((-32.092457627454955));\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    codeGenerator0.addExpr(node0, 47);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "static String identifierEscape(String s)",
    "methodName" : "identifierEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    String string0 = CodeGenerator.identifierEscape(\"E_DOUBLE\\u0010\\u0001\\u0012\\u000E\\n\\nTYPE_FLOAT\\u0010\\u0002\\u0012\\u000E\\n\\nTYPE_INT64\\u0010\\u0003\\u0012\\u000F\\n\\u000BTYPE_UINT64\\u0010\\u0004\\u0012\\u000E\\n\\nTYPE_INT32\\u0010\\u0005\\u0012\\u0010\\n\\fTYPE_FIXED64\\u0010\\u0006\\u0012\\u0010\\n\\fTYPE_FIXED32\\u0010\\u0007\\u0012\\r\\n\\tTYPE_BOOL\\u0010\\b\\u0012\\u000F\\n\\u000BTYPE_STRING\\u0010\\t\\u0012\\u000E\\n\\nTYPE_GROUP\\u0010\\n\\u0012\\u0010\\n\\fYPE_MESSAGE\\u0010\\u000B\\u0012\\u000E\\n\\nTYPE_BYTES\\u0010\\f\\u0012\\u000F\\n\\u000BTYPE_UINT32\\u0010\\r\\u0012\\r\\n\\tTYPE_ENUM\\u0010\\u000E\\u0012\\u0011\\n\\rTYPE_SFIXED32\\u0010\\u000F\\u0012\\u0011\\n\\rTYPE_SFIXED64\\u0010\\u0010\\u0012\\u000F\\n\\u000BTYPE_SINT32\\u0010\\u0011\\u0012\\u000F\\n\\u000BTYPE_SINT64\\u0010\\u0012\\\"C\\n\\u0005Label\\u0012\\u0012\\n\\u000ELABEL_OPTIONAL\\u0010\\u0001\\u0012\\u0012\\n\\u000ELABEL_REQUIRED\\u0010\\u0002\\u0012\\u0012\\n\\u000ELABEL_REPEATED\\u0010\\u0003\\\"\\u008C\\u0001\\n\\u0013EnumDescriptorProto\\u0012\\f\\n\\u0004name\\u0018\\u0001\");\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    Node node0 = Node.newString(\"-^LmUek7'&^Q$,qPju\");\n    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;\n    codeGenerator0.addList(node0, false, codeGenerator_Context0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "static String identifierEscape(String s)",
    "methodName" : "identifierEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    String string0 = CodeGenerator.identifierEscape(\"OTHER\");\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "CodeGenerator(CodeConsumer consumer, Charset outputCharset)",
    "methodName" : "CodeGenerator",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Charset charset0 = Charset.forName(\"default\");\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "static String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(\"&m_3</scriptf}\");\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "CodeGenerator(CodeConsumer consumer, Charset outputCharset)",
    "methodName" : "CodeGenerator",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "static String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(\"`<sRFfLs\");\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "void addArrayList(Node firstInList)",
    "methodName" : "addArrayList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    Node node0 = Node.newString(\"-^LmUek7'&^Q$,qPju\");\n    codeGenerator0.addArrayList(node0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
    "methodName" : "jsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    String string0 = CodeGenerator.jsString(\"E_DOUBLE\\u0010\\u0001\\u0012\\u000E\\n\\nTYPE_FLOATC\\u0002v\\u000E?\\n#YE_INT64\\u0010\\u0003\\u0012\\u000F\\u000BTYP_UINT64\\u0010:\\u0012\\u000E\\nTPE_I_T32{9\\u0012\\u0010\\n\\fTYPE_FIXED64\\u0010\\u0006\\u0012\\u0010\\n\\fTYPE_FIXED32\\u0010\\u0007\\u0012\\r\\n\\tTPE_BOOL\\u0010\\b\\u0012\\n\\u000BTYP_TRING\\u0010\\t\\u0012\\u000E\\n\\nTYPE_GOUP\\u0010\\n\\u0012\\u0010\\fYPE_MESSAE\\u0010\\u000B\\u0012\\u000E\\n\\n/YPE_YTS\\u0010\\f\\u0012\\u000F\\n\\u000BTYPE_IT32\\u0010\\r\\u0012\\r\\n\\tTYPE_ENUM\\u0010\\u000E\\u0012\\u0011J\\rTYPE_SFIXED32\\u0010\\u000F\\u0012\\u0011\\n\\rTYPE_SFIXED64\\u0010\\u0010\\u0012\\u000F\\n\\u000BTYPE_SINT32S\\u0012.\\n\\u000BTYPE_SIT64\\u0010\\u0012\\\"C\\n\\u0005Labl..)\\u000ELABEL:OPTIONAL\\u0010\\u0012\\u0012\\n\\u000ELABEL_REQUIRD\\u0010\\u0002\\u0012\\u0012\\u000ERBEREPEATED\\u0010\\u0003\\\"\\u008C\\n\\u0013EnumDes(riptorProto\\u0012\\f\\n\\u0004namI\\u0018\\u0001\", (CharsetEncoder) null);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public void tagAsStrict()",
    "methodName" : "tagAsStrict",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    codeGenerator0.tagAsStrict();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "void addCaseBody(Node caseBody)",
    "methodName" : "addCaseBody",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    codeGenerator0.addCaseBody((Node) null);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    Node node0 = new Node(107, 107, 107);\n    codeGenerator0.addList(node0, false);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "static String jsString(String s, CharsetEncoder outputCharsetEncoder)",
    "methodName" : "jsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    String string0 = CodeGenerator.jsString(\"Mei[&'=f^.k\", (CharsetEncoder) null);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder)",
    "methodName" : "strEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    String string0 = CodeGenerator.strEscape(\"\\n\\ndeprecated\\u0018\\u0003 \\u0001(\\b:\\u0005false\\u0012\\u001C\\n\\u0014experimental_map_key\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption\\\"/\\n\\u0005CType\\u0012\\n\\n\\u0006STRING\\u0010\\u0000\\u0012\\b\\n\\u0004CORD\\u0010\\u0001\\u0012\\u0010\\n\\fSTRING_PIECE\\u0010\\u0002*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"]\\n\\u000BEnumOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"b\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"`\\n\\u000EServiceOptions\\u0012C\\n\", 'x', \"\\n\\ndeprecated\\u0018\\u0003 \\u0001(\\b:\\u0005false\\u0012\\u001C\\n\\u0014experimental_map_key\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption\\\"/\\n\\u0005CType\\u0012\\n\\n\\u0006STRING\\u0010\\u0000\\u0012\\b\\n\\u0004CORD\\u0010\\u0001\\u0012\\u0010\\n\\fSTRING_PIECE\\u0010\\u0002*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"]\\n\\u000BEnumOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"b\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"`\\n\\u000EServiceOptions\\u0012C\\n\", \"\\n\\ndeprecated\\u0018\\u0003 \\u0001(\\b:\\u0005false\\u0012\\u001C\\n\\u0014experimental_map_key\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption\\\"/\\n\\u0005CType\\u0012\\n\\n\\u0006STRING\\u0010\\u0000\\u0012\\b\\n\\u0004CORD\\u0010\\u0001\\u0012\\u0010\\n\\fSTRING_PIECE\\u0010\\u0002*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"]\\n\\u000BEnumOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"b\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"`\\n\\u000EServiceOptions\\u0012C\\n\", \"\\n\\ndeprecated\\u0018\\u0003 \\u0001(\\b:\\u0005false\\u0012\\u001C\\n\\u0014experimental_map_key\\u0018\\t \\u0001(\\t\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption\\\"/\\n\\u0005CType\\u0012\\n\\n\\u0006STRING\\u0010\\u0000\\u0012\\b\\n\\u0004CORD\\u0010\\u0001\\u0012\\u0010\\n\\fSTRING_PIECE\\u0010\\u0002*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"]\\n\\u000BEnumOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"b\\n\\u0010EnumValueOptions\\u0012C\\n\\u0014uninterpreted_option\\u0018\\u00E7\\u0007 \\u0003(\\u000B2$.google.protobuf.UninterpretedOption*\\t\\b\\u00E8\\u0007\\u0010\\u0080\\u0080\\u0080\\u0080\\u0002\\\"`\\n\\u000EServiceOptions\\u0012C\\n\", charsetEncoder0);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "void addList(Node firstInList)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    codeGenerator0.addList((Node) null);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "void addAllSiblings(Node n)",
    "methodName" : "addAllSiblings",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    codeGenerator0.addAllSiblings((Node) null);\n}",
    "testName" : "test1515"
  },
  "test2020" : {
    "methodSignature" : "static String regexpEscape(String s)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    String string0 = CodeGenerator.regexpEscape(\":a&!-4qn->\");\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    Node node0 = new Node(51, 51, 51);\n    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;\n    codeGenerator0.addList(node0, false, codeGenerator_Context0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "static String regexpEscape(String s)",
    "methodName" : "regexpEscape",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    String string0 = CodeGenerator.regexpEscape(\"G@tT@r:=]>9N `'K(\");\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "void addList(Node firstInList)",
    "methodName" : "addList",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Node node0 = Node.newNumber(0.0);\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    codeGenerator0.addList(node0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "static String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(\":J]]>\");\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "void addAllSiblings(Node n)",
    "methodName" : "addAllSiblings",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Node node0 = Node.newString(\",[k#o\");\n    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);\n    codeGenerator0.addAllSiblings(node0);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "static String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(\":a&<!-->\");\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "static String escapeToDoubleQuotedJsString(String s)",
    "methodName" : "escapeToDoubleQuotedJsString",
    "className" : "com.google.javascript.jscomp.CodeGenerator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(\"*>$b/l)A}m*qS\");\n}",
    "testName" : "test1919"
  }
}