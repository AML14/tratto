{
  "test00" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenamePrototypes",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);\n    Node node0 = Node.newString(\"KN\");\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    Node node1 = new Node(64, node0, node0, node0);\n    renamePrototypes0.process(node0, node1);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenamePrototypes",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes\", \"cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes\");\n    renamePrototypes0.process(node0, node0);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenamePrototypes",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"cm.google.javascrnp.jscomp.RenmeProWotypes$ProcessPropertes\", \"cm.google.javascrnp.jscomp.RenmeProWotypes$ProcessPropertes\");\n    Node node1 = Node.newString(\".B-nmF}S]~\", 262, (-1548));\n    char[] charArray0 = new char[5];\n    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, charArray0, (VariableMap) null);\n    Node node2 = new Node(35, node0, node1, node1);\n    renamePrototypes0.process(node0, node2);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public int getCharno()",
    "methodName" : "getCharno",
    "className" : "com.google.javascript.jscomp.RenamePrototypes",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, (VariableMap) null);\n    Node node0 = Node.newString(64, \"com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation\", 2534, 2534);\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.init((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    Node node1 = compiler0.parseSyntheticCode(\"vMzVZ\");\n    Node node2 = new Node(35, node0, node0, node1);\n    renamePrototypes0.process(node2, node2);\n    node2.getCharno();\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenamePrototypes",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);\n    Node node0 = new Node(64, 64, 64);\n    Node node1 = Node.newNumber((double) 0, 17, 16);\n    node0.addChildToBack(node1);\n    renamePrototypes0.process(node0, node0);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenamePrototypes",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED;\n    compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);\n    TreeMap<String, String> treeMap0 = new TreeMap<String, String>();\n    VariableMap variableMap0 = new VariableMap(treeMap0);\n    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, false, (char[]) null, variableMap0);\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes\", \"cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes\");\n    Node node1 = compiler0.parseTestCode(\"cm.google.javascrip.jscomp.RenmePrototypes$ProcessPropertes\");\n    node1.addChildToBack(node0);\n    renamePrototypes0.process(node1, node1);\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "VariableMap getPropertyMap()",
    "methodName" : "getPropertyMap",
    "className" : "com.google.javascript.jscomp.RenamePrototypes",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    RenamePrototypes renamePrototypes0 = new RenamePrototypes(compiler0, true, (char[]) null, (VariableMap) null);\n    VariableMap variableMap0 = renamePrototypes0.getPropertyMap();\n}",
    "testName" : "test66"
  }
}