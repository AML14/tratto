focal_method,test_prefix,docstring
"static boolean referencesThis(Node n) {
    Node start = (isFunction(n)) ? n.getLastChild() : n;
    return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);
}","public void test0011() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the shallow scope contains references to 'this' keyword
 */"
"static Node getArgumentForCallOrNew(Node call, int index) {
    Preconditions.checkState(isCallOrNew(call));
    return getNthSibling(call.getFirstChild().getNext(), index);
}","public void test0022() throws Throwable {
    Node node0 = new Node(85, 85, 85);
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForCallOrNew(node0, 1233);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the new or call, this returns the nth
 * argument of the call or null if no such argument exists.
 */"
"static boolean mayBeString(Node n, boolean recurse) {
    if (recurse) {
        return valueCheck(n, MAY_BE_STRING_PREDICATE);
    } else {
        return mayBeStringHelper(n);
    }
}","public void test0033() throws Throwable {
    Node node0 = new Node(21, 21, 21);
    // Undeclared exception!
    try {
        NodeUtil.mayBeString(node0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test0044() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test0055() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, """", 71, 1176);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(291992, node0.getSourcePosition());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test0056() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, """", 71, 1176);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"public int getType() {
    return type;
}","public void test0057() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, """", 71, 1176);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(38, node0.getType());
}",""
"static String getPrototypePropertyName(Node qName) {
    String qNameStr = qName.getQualifiedName();
    int prototypeIdx = qNameStr.lastIndexOf("".prototype."");
    int memberIndex = prototypeIdx + "".prototype"".length() + 1;
    return qNameStr.substring(memberIndex);
}","public void test0068() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getPrototypePropertyName((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The string property name part of a qualified prototype name.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test0079() throws Throwable {
    Node node0 = Node.newNumber((double) 64);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test00810() throws Throwable {
    Node node0 = new Node(64);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static boolean functionCallHasSideEffects(Node callNode) {
    return functionCallHasSideEffects(callNode, null);
}","public void test00911() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    // Undeclared exception!
    try {
        NodeUtil.functionCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected CALL node, got SEMI
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"static boolean containsCall(Node n) {
    return containsType(n, Token.CALL);
}","public void test01012() throws Throwable {
    Node node0 = new Node(47, 47, 47);
    boolean boolean0 = NodeUtil.containsCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node or any of its children a CALL?
 */"
"static Node getArgumentForFunction(Node function, int index) {
    Preconditions.checkState(isFunction(function));
    return getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
}","public void test01113() throws Throwable {
    Node node0 = new Node(118, 118, 329);
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForFunction(node0, 6);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the function, this returns the nth
 * argument or null if no such parameter exists.
 */"
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test01214() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""==="", (-849), 45);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""==="", node0, ""==="");
    assertTrue(node1.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"public int getType() {
    return type;
}","public void test01215() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""==="", (-849), 45);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""==="", node0, ""==="");
    assertEquals(38, node0.getType());
}",""
"static Node newName(CodingConvention convention, String name, Node basisNode, String originalName) {
    Node nameNode = newName(convention, name, basisNode);
    nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);
    return nameNode;
}","public void test01216() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""==="", (-849), 45);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""==="", node0, ""==="");
    assertNotSame(node1, node0);
}","/**
 * Creates a new node representing an *existing* name, copying over the source
 * location information from the basis node and assigning the given original
 * name to the node.
 *
 * @param name The name for the new NAME node.
 * @param basisNode The node that represents the name as currently found in
 *     the AST.
 * @param originalName The original name of the item being represented by the
 *     NAME node. Used for debugging information.
 *
 * @return The node created.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test01217() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""==="", (-849), 45);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""==="", node0, ""==="");
    assertEquals((-1), node1.getCharno());
}",""
"static boolean isVarArgsFunction(Node function) {
    Preconditions.checkArgument(isFunction(function));
    return isNameReferenced(function.getLastChild(), ""arguments"", MATCH_NOT_FUNCTION);
}","public void test01318() throws Throwable {
    Node node0 = new Node(31);
    // Undeclared exception!
    try {
        NodeUtil.isVarArgsFunction(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines if a function takes a variable number of arguments by
 * looking for references to the ""arguments"" var_args object.
 */"
"static Node newUndefinedNode(Node srcReferenceNode) {
    Node node = new Node(Token.VOID, Node.newNumber(0));
    if (srcReferenceNode != null) {
        node.copyInformationFromForTree(srcReferenceNode);
    }
    return node;
}","public void test01419() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    assertNotNull(node0);
}","/**
 * Create a node for an empty result expression:
 *   ""void 0""
 */"
"static int getNodeTypeReferenceCount(Node node, int type, Predicate<Node> traverseChildrenPred) {
    return getCount(node, new MatchNodeType(type), traverseChildrenPred);
}","public void test01420() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 47, sourceMap_DetailLevel0);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"public int getType() {
    return type;
}","public void test01421() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 47, sourceMap_DetailLevel0);
    assertEquals(122, node0.getType());
}",""
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test01522() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test01623() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static Node getFunctionBody(Node fn) {
    Preconditions.checkArgument(isFunction(fn));
    return fn.getLastChild();
}","public void test01724() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getFunctionBody((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Return a BLOCK node for the given FUNCTION node.
 */"
"static boolean isFunctionObjectCallOrApply(Node callNode) {
    return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);
}","public void test01825() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.apply(...)
 *    x['apply'](...)
 *  or
 *    x.call(...)
 *    x['call'](...)
 */"
"public int getType() {
    return type;
}","public void test01926() throws Throwable {
    Node node0 = Node.newNumber((-2216.365954));
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test01927() throws Throwable {
    Node node0 = Node.newNumber((-2216.365954));
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test02028() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean has(Node node, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    if (pred.apply(node)) {
        return true;
    }
    if (!traverseChildrenPred.apply(node)) {
        return false;
    }
    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
        if (has(c, pred, traverseChildrenPred)) {
            return true;
        }
    }
    return false;
}","public void test02129() throws Throwable {
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    Node node0 = Node.newString(24, ""goog.tweak.registerString"", 30, 2);
    boolean boolean0 = NodeUtil.has(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
    assertFalse(boolean0);
}","/**
 * @return Whether the predicate is true for the node or any of its children.
 */"
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test02230() throws Throwable {
    Node node0 = new Node(22, 3315, 3315);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02432() throws Throwable {
    Node node0 = new Node(26);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test02533() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(471155, node0.getSourcePosition());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test02534() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    NodeUtil.getImpureBooleanValue(node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02635() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02736() throws Throwable {
    Node node0 = new Node(64);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02837() throws Throwable {
    Node node0 = new Node(85, 85, 85);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02938() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03039() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03140() throws Throwable {
    Node node0 = Node.newString(100, ""2"");
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03241() throws Throwable {
    Node node0 = new Node(26);
    // Undeclared exception!
    try {
        NodeUtil.getPureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03342() throws Throwable {
    Node node0 = Node.newString(""p"", 117, 117);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03443() throws Throwable {
    Node node0 = new Node(41, 41, 41);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03544() throws Throwable {
    Node node0 = new Node(43, 1535, 43);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03645() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    Node node1 = new Node(44, node0, node0, node0, node0);
    NodeUtil.getImpureBooleanValue(node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03746() throws Throwable {
    Node node0 = new Node(22, (-37), 3377);
    Node node1 = new Node(47, node0);
    NodeUtil.getImpureBooleanValue(node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03847() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"public int getType() {
    return type;
}","public void test03948() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(122, node0.getType());
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test04049() throws Throwable {
    Node node0 = new Node(1976);
    Node node1 = new Node(26, node0, node0, node0, node0, 91, 3);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test04150() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""undefined"", 51, 122);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(209018, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test04151() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""undefined"", 51, 122);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(38, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test04252() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", (-1605), 100);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test04253() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", (-1605), 100);
    NodeUtil.getImpureBooleanValue(node0);
    assertTrue(node0.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test04254() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Infinity"", (-1605), 100);
    NodeUtil.getImpureBooleanValue(node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test04355() throws Throwable {
    Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 26, 2676);
    Node node1 = new Node(26, node0, node0, node0, node0, 12, 3);
    String string0 = NodeUtil.getStringValue(node1);
    assertNotNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test04457() throws Throwable {
    Node node0 = new Node(64);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNotNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test04559() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""\naent:"", 803, 803);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(3289891, node0.getSourcePosition());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test04560() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""\naent:"", 803, 803);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test04561() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""\naent:"", 803, 803);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertNull(string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test04562() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""\naent:"", 803, 803);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertTrue(node0.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test04663() throws Throwable {
    Node node0 = new Node(41);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""null"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test04764() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(""false"", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test04865() throws Throwable {
    Node node0 = new Node(44, 44, 44);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(""true"", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test04966() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test05068() throws Throwable {
    Node node0 = new Node(108);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertNotNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test05170() throws Throwable {
    Node node0 = new Node(2679);
    Node node1 = new Node(26, node0, node0, node0, node0, 12, 3);
    String string0 = NodeUtil.getStringValue(node1);
    assertNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(double value) {
    long longValue = (long) value;
    // Return ""1"" instead of ""1.0""
    if (longValue == value) {
        return Long.toString(longValue);
    } else {
        return Double.toString(value);
    }
}","public void test05271() throws Throwable {
    String string0 = NodeUtil.getStringValue(2877.36018564);
    assertEquals(""2877.36018564"", string0);
}",""
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test05372() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals("""", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05374() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals(78, node1.getLineno());
}",""
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test05475() throws Throwable {
    Node node0 = new Node(124, 124, (-27));
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals("""", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test05576() throws Throwable {
    Node node0 = Node.newNumber(8233.0);
    Node node1 = new Node(0, node0, node0, 49, 12);
    String string0 = NodeUtil.arrayToString(node1);
    assertNotNull(string0);
}",""
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test05678() throws Throwable {
    Node node0 = new Node(135, 135, 135);
    Node node1 = new Node(11, node0, node0, 110, 4095);
    String string0 = NodeUtil.arrayToString(node1);
    assertNull(string0);
}",""
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test05779() throws Throwable {
    Node node0 = Node.newString(""Cmo<a@LP)"", 18, 118);
    Node node1 = node0.cloneNode();
    Node node2 = new Node(38, node1, node0);
    String string0 = NodeUtil.arrayToString(node2);
    assertEquals(""Cmo<a@LP),Cmo<a@LP)"", string0);
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05881() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05982() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 2836, 101);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test05984() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 2836, 101);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(11616357, node0.getSourcePosition());
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06085() throws Throwable {
    Node node0 = new Node(39);
    // Undeclared exception!
    try {
        NodeUtil.getNumberValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Number node not created with Node.newNumber
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06186() throws Throwable {
    Node node0 = Node.newString(""+infinity"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06287() throws Throwable {
    Node node0 = new Node(41);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06388() throws Throwable {
    Node node0 = new Node(43);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06489() throws Throwable {
    Node node0 = new Node(108);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06591() throws Throwable {
    Node node0 = new Node(85, 85, 85);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test06692() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(471155, node0.getSourcePosition());
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06693() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test06694() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06795() throws Throwable {
    Node node0 = Node.newNumber((double) 26, 1957, 1957);
    Node node1 = new Node(26, node0, node0, node0, node0, 91, 3);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
        // vertical tab is not always whitespace
        return null;
    }
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test06897() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""g1"");
    assertNotNull(double0);
}",""
"static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
        // vertical tab is not always whitespace
        return null;
    }
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test06999() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""infinity"");
    assertNull(double0);
}",""
"static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
        // vertical tab is not always whitespace
        return null;
    }
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test070100() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""-infinity"");
    assertNull(double0);
}",""
"static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
        // vertical tab is not always whitespace
        return null;
    }
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test071101() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue("" invalidated "");
    assertEquals(Double.NaN, (double) double0, 0.01);
}",""
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test072103() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(9);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test073104() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(10);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test074105() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(11);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test075106() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(12);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test076107() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(13);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test077108() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(160);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test078109() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(8232);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test079110() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(8233);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test080111() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(65279);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", EcmaScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test081112() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(12288);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"public static String getNearestFunctionName(Node n) {
    String name = getFunctionName(n);
    if (name != null) {
        return name;
    }
    // Check for the form { 'x' : function() { } }
    Node parent = n.getParent();
    switch(parent.getType()) {
        case Token.SET:
        case Token.GET:
        case Token.STRING:
            // Return the name of the literal's key.
            return parent.getString();
        case Token.NUMBER:
            return getStringValue(parent);
    }
    return null;
}","public void test082113() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertNotNull(string0);
}","/**
 * Gets the function's name. This method recognizes the forms:
 * <ul>
 * <li>{@code &#123;'name': function() ...&#125;}</li>
 * <li>{@code &#123;name: function() ...&#125;}</li>
 * <li>{@code function name() ...}</li>
 * <li>{@code var name = function() ...}</li>
 * <li>{@code qualified.name = function() ...}</li>
 * <li>{@code var name2 = function name1() ...}</li>
 * <li>{@code qualified.name2 = function name1() ...}</li>
 * </ul>
 *
 * @param n a node whose type is {@link Token#FUNCTION}
 * @return the function's name, or {@code null} if it has no name
 */"
"public int getType() {
    return type;
}","public void test082114() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertEquals(105, node1.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test082115() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertEquals(3, node1.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test082116() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    String string0 = NodeUtil.getNearestFunctionName(node1);
    assertEquals(114736, node1.getSourcePosition());
}",""
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test083118() throws Throwable {
    Node node0 = new Node(145);
    Node node1 = new Node(26, node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    assertFalse(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        case Token.NOT:
            return isImmutableValue(n.getFirstChild());
        case Token.VOID:
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test084119() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    // Undeclared exception!
    try {
        NodeUtil.isImmutableValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if this is an immutable value.
 */"
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test085120() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    assertTrue(node0.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test085121() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertEquals(471155, node0.getSourcePosition());
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test085122() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test086123() throws Throwable {
    Node node0 = Node.newString(""Remove try/catch/finally"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test087124() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test088125() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test089126() throws Throwable {
    Node node0 = new Node(44, 80, 44);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test090127() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test091128() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", (-3815), (-518));
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test092129() throws Throwable {
    Node node0 = new Node(45);
    node0.setType(47);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test093130() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test094131() throws Throwable {
    Node node0 = new Node(64);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test095132() throws Throwable {
    Node node0 = Node.newNumber((double) 71, 71, 71);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""common"", vector0, node0, 50, 1);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    assertFalse(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test095133() throws Throwable {
    Node node0 = Node.newNumber((double) 71, 71, 71);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""common"", vector0, node0, 50, 1);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    assertEquals(3, node1.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test095134() throws Throwable {
    Node node0 = Node.newNumber((double) 71, 71, 71);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""common"", vector0, node0, 50, 1);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    assertEquals(105, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test095135() throws Throwable {
    Node node0 = Node.newNumber((double) 71, 71, 71);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""common"", vector0, node0, 50, 1);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    assertEquals(204801, node1.getSourcePosition());
}",""
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test096136() throws Throwable {
    Node node0 = new Node(64, 64, (-1));
    node0.addChildrenToBack(node0);
    // Undeclared exception!
    NodeUtil.isLiteralValue(node0, true);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test097137() throws Throwable {
    Node node0 = Node.newNumber((double) 71, 71, 71);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""common"", vector0, node0, 50, 1);
    Node node2 = new Node(42, node1);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test097138() throws Throwable {
    Node node0 = Node.newNumber((double) 71, 71, 71);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""common"", vector0, node0, 50, 1);
    Node node2 = new Node(42, node1);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    assertEquals(204801, node1.getSourcePosition());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test097139() throws Throwable {
    Node node0 = Node.newNumber((double) 71, 71, 71);
    Vector<Node> vector0 = new Vector<Node>();
    Node node1 = NodeUtil.newFunctionNode(""common"", vector0, node0, 50, 1);
    Node node2 = new Node(42, node1);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    assertEquals(3, node1.getChildCount());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test098140() throws Throwable {
    Node node0 = new Node(113, (-2175), 941);
    Node node1 = new Node(9, node0, node0, 2, 16);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test099141() throws Throwable {
    Node node0 = new Node(10);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test100142() throws Throwable {
    Node node0 = new Node(12, 12, (-387));
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test101143() throws Throwable {
    Node node0 = new Node(13);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test102144() throws Throwable {
    Node node0 = new Node(14);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test103145() throws Throwable {
    Node node0 = new Node(15, 15, 15);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test104146() throws Throwable {
    Node node0 = new Node(85, (-399), (-120));
    Node node1 = new Node(16, node0, node0, node0, (-2159), (-399));
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test105147() throws Throwable {
    Node node0 = new Node(18);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test106148() throws Throwable {
    Node node0 = new Node(19);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test107149() throws Throwable {
    Node node0 = Node.newNumber((double) 26, 26, 26);
    Node node1 = new Node(20, node0, node0, node0, node0, 25, 35);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test108150() throws Throwable {
    Node node0 = new Node(21);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test109151() throws Throwable {
    Node node0 = new Node(22, 884, 884);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test110152() throws Throwable {
    Node node0 = new Node(24);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test111153() throws Throwable {
    Node node0 = new Node(26);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test112154() throws Throwable {
    Node node0 = new Node(27);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test113155() throws Throwable {
    Node node0 = new Node(28, 28, 28);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test114156() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    HashSet<String> hashSet0 = new HashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test115157() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test116158() throws Throwable {
    Node node0 = new Node(31, 31, 31);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test117159() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test118160() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertEquals(24582, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test118161() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertEquals(33, node0.getType());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test118162() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test118163() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertEquals(2, node0.getChildCount());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test119164() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Node node1 = new Node(34, node0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test120165() throws Throwable {
    Node node0 = Node.newString(""Y3$thk3h8iMyq2"", (-861), (-861));
    Node node1 = new Node(36, node0, node0, node0, 26, 23);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, compilerOptions0.aliasableStrings);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test121166() throws Throwable {
    Node node0 = new Node(37);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test122167() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Qgc"", 1550, 1550);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test123168() throws Throwable {
    Node node0 = Node.newString(""Y3$thk3h8iMyq2"", (-886), (-886));
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test124169() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test125170() throws Throwable {
    Node node0 = new Node(43);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test126171() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    Node node1 = new Node(44, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test127172() throws Throwable {
    Node node0 = new Node(45);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test128173() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties"", 803, 803);
    node0.removeFirstChild();
    assertTrue(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test128174() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties"", 803, 803);
    node0.removeFirstChild();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test129175() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    HashSet<String> hashSet0 = new HashSet<String>();
    hashSet0.add(""?y.`ze<N3[ZiYI[gK'"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test129176() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    HashSet<String> hashSet0 = new HashSet<String>();
    hashSet0.add(""?y.`ze<N3[ZiYI[gK'"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertEquals(24582, node0.getSourcePosition());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test129177() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    HashSet<String> hashSet0 = new HashSet<String>();
    hashSet0.add(""?y.`ze<N3[ZiYI[gK'"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertTrue(node0.hasChildren());
}",""
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test130178() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""&="", ""&="");
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertTrue(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test131179() throws Throwable {
    Node node0 = new Node(9, 9, 9);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test132180() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test133181() throws Throwable {
    Node node0 = new Node(11);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test134182() throws Throwable {
    Node node0 = new Node(12);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test135183() throws Throwable {
    Node node0 = new Node(13);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test136184() throws Throwable {
    Node node0 = new Node(14, 88, 80);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test137185() throws Throwable {
    Node node0 = new Node(15);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test138186() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(16, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test139187() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test140188() throws Throwable {
    Node node0 = new Node(18, 18, 18);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test141189() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test142190() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test143191() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test144192() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test145193() throws Throwable {
    Node node0 = new Node(23);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test146194() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test147195() throws Throwable {
    Node node0 = new Node(25);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test148196() throws Throwable {
    Node node0 = new Node(26);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test149197() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    Node node1 = new Node(27, node0);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test150198() throws Throwable {
    Node node0 = new Node(28, 28, 28);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test151199() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test152200() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test153201() throws Throwable {
    Node node0 = new Node(31, 31, 31);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test154202() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test155203() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    Node node1 = new Node(33, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test156204() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test157205() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test158206() throws Throwable {
    Node node0 = new Node(36);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test159207() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test160208() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test161209() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test162210() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test163211() throws Throwable {
    Node node0 = new Node(46, 46, 46);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test164212() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test165213() throws Throwable {
    Node node0 = new Node(48);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test166214() throws Throwable {
    Node node0 = new Node(49);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTHROW
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test167215() throws Throwable {
    Node node0 = new Node(50);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRETHROW
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test168216() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test169217() throws Throwable {
    Node node0 = new Node(2119, 2119, 2119);
    Node node1 = new Node(52, node0, node0, node0, 403, 2);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test170218() throws Throwable {
    Node node0 = new Node(53);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test171219() throws Throwable {
    Node node0 = new Node(54, 54, 54);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test172220() throws Throwable {
    Node node0 = new Node(56, 56, 56);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCATCH_SCOPE 56
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test173221() throws Throwable {
    Node node0 = Node.newString(57, ""ExpectdCALL node, got"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test174222() throws Throwable {
    Node node0 = new Node(58);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_INIT_VALUES
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test175223() throws Throwable {
    Node node0 = new Node(59);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_NEXT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test176224() throws Throwable {
    Node node0 = new Node(60);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_ID
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test177225() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(61);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test178226() throws Throwable {
    Node node0 = new Node(62);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRETURN_RESULT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test179227() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test180228() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test181229() throws Throwable {
    Node node0 = new Node(65);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test182230() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSET_REF 66
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test183231() throws Throwable {
    Node node0 = new Node(67, 67, 67);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test184232() throws Throwable {
    Node node0 = Node.newString(68, ""JSCompiler_renameProperty"");
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_CALL JSCompiler_renameProperty
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test185233() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(69);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test186234() throws Throwable {
    Node node0 = new Node(70);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEFAULTNAMESPACE
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test187235() throws Throwable {
    Node node0 = new Node(71);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeESCXMLATTR
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test188236() throws Throwable {
    Node node0 = Node.newString(72, ""mf0cU]UM]Dt"", 72, 72);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeESCXMLTEXT mf0cU]UM]Dt 72
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test189237() throws Throwable {
    Node node0 = new Node(73);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test190238() throws Throwable {
    Node node0 = new Node(74);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test191239() throws Throwable {
    Node node0 = new Node(75, 120, 122);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NAME 120
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test192240() throws Throwable {
    Node node0 = new Node(76);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_NAME
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test193241() throws Throwable {
    Node node0 = new Node(77, (-8), 77);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTRY
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test194242() throws Throwable {
    Node node0 = new Node(79, 79, 79);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLB 79
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test195243() throws Throwable {
    Node node0 = new Node(80, 80, 80);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRB 80
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test196244() throws Throwable {
    Node node0 = new Node(81);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test197245() throws Throwable {
    Node node0 = new Node(82);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRC
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test198246() throws Throwable {
    Node node0 = new Node(83);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test199247() throws Throwable {
    Node node0 = new Node(84, 483, (-1894));
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test200248() throws Throwable {
    Node node0 = new Node(85);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test201249() throws Throwable {
    Node node0 = new Node(87);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test202250() throws Throwable {
    Node node0 = new Node(88, 88, 88);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test203251() throws Throwable {
    Node node0 = Node.newString(""case expression doesn't match switch"", 1547, 1547);
    Node node1 = new Node(89, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test204252() throws Throwable {
    Node node0 = new Node(90);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test205253() throws Throwable {
    Node node0 = new Node(91);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test206254() throws Throwable {
    Node node0 = new Node(92);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test207255() throws Throwable {
    Node node0 = new Node(93, 51, 91);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test208256() throws Throwable {
    Node node0 = new Node(95, 95, 425);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test209257() throws Throwable {
    Node node0 = new Node(96);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test210258() throws Throwable {
    Node node0 = new Node(97);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test211259() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test212260() throws Throwable {
    Node node0 = new Node(99, (-2311), 99);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test213261() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test214262() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test215263() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test216264() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test217265() throws Throwable {
    Node node0 = new Node(104);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDOT
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test218266() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test219267() throws Throwable {
    Node node0 = new Node(106);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test220268() throws Throwable {
    Node node0 = new Node(108);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeIF
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test221269() throws Throwable {
    Node node0 = new Node(109);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test222270() throws Throwable {
    Node node0 = new Node(110);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSWITCH
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test223271() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(112);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test224272() throws Throwable {
    Node node0 = new Node(113, (-2175), 967);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test225273() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test226274() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test227275() throws Throwable {
    Node node0 = new Node(116);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test228276() throws Throwable {
    Node node0 = new Node(117);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCONTINUE
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test229277() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test230278() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test231279() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test232280() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test233281() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test234282() throws Throwable {
    Node node0 = new Node(32);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"public int getType() {
    return type;
}","public void test235283() throws Throwable {
    Node node0 = Node.newNumber((double) 64);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertEquals(37, node1.getType());
}",""
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test235284() throws Throwable {
    Node node0 = Node.newNumber((double) 64);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test236285() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 2836, 101);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertEquals(11616357, node0.getSourcePosition());
}",""
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test236286() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 2836, 101);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test237287() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test238288() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test239289() throws Throwable {
    Node node0 = new Node(43, 1535, 43);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test240290() throws Throwable {
    Node node0 = new Node(44);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test241291() throws Throwable {
    Node node0 = new Node(46, 46, 46);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test242292() throws Throwable {
    Node node0 = new Node(47, 47, 47);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test243293() throws Throwable {
    Node node0 = Node.newNumber(0.0, 144, 144);
    Node node1 = new Node(49, node0, node0, 84, 31);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test244294() throws Throwable {
    Node node0 = new Node(50);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test245295() throws Throwable {
    Node node0 = Node.newString(51, ""W(%UJ7s`vyd<%##5"", 51, 51);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test246296() throws Throwable {
    Node node0 = new Node(52, 52, 105);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test247297() throws Throwable {
    Node node0 = new Node(56);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test248298() throws Throwable {
    Node node0 = new Node(59);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test249299() throws Throwable {
    Node node0 = new Node(62);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test250300() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test251301() throws Throwable {
    Node node0 = Node.newString(68, ""3EF|WB+c#<&"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test252302() throws Throwable {
    Node node0 = new Node(70);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test253303() throws Throwable {
    Node node0 = new Node(71, 71, 71);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test254304() throws Throwable {
    Node node0 = Node.newNumber(1.0, 118, (-2083));
    Node node1 = new Node(72, node0, node0, 2, 39);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test255305() throws Throwable {
    Node node0 = new Node(75);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test256306() throws Throwable {
    Node node0 = new Node(76, 76, 76);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test257307() throws Throwable {
    Node node0 = Node.newString(77, ""3EF|WB+c#<&"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test258308() throws Throwable {
    Node node0 = Node.newString(79, ""msg.unexpected.eof"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test259309() throws Throwable {
    Node node0 = new Node(80, 80, 80);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test260310() throws Throwable {
    Node node0 = new Node(82, 103, 103);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test261311() throws Throwable {
    Node node0 = Node.newString(83, ""1bDRjaVE"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test262312() throws Throwable {
    Node node0 = new Node(84, 84, 84);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test263313() throws Throwable {
    Node node0 = new Node(98);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test264314() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test265315() throws Throwable {
    Node node0 = new Node(101, 118, 1227);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test266316() throws Throwable {
    Node node0 = new Node(104, 104, 104);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test267317() throws Throwable {
    Node node0 = Node.newString(107, "":qkXl"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test268318() throws Throwable {
    Node node0 = new Node(108, 108, 108);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test269319() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test270320() throws Throwable {
    Node node0 = new Node(111);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test271321() throws Throwable {
    Node node0 = new Node(117);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test272322() throws Throwable {
    Node node0 = new Node(123);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test273323() throws Throwable {
    Node node0 = new Node(124, 124, 124);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test274324() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""CGUL||Nl*k$5%z)h"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test275325() throws Throwable {
    Node node0 = new Node(126, 126, 126);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test276326() throws Throwable {
    Node node0 = new Node(127);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test277327() throws Throwable {
    Node node0 = new Node(128, 128, 128);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test278328() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test279329() throws Throwable {
    Node node0 = new Node(64);
    node0.addChildrenToBack(node0);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test280330() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test281331() throws Throwable {
    Node node0 = new Node(99);
    Node node1 = new Node(38, node0, node0, node0, 15, (-1));
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test282332() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertEquals(114736, node1.getSourcePosition());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test282333() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertEquals(3, node1.getChildCount());
}",""
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test282334() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test283335() throws Throwable {
    Node node0 = new Node(688, 99, (-1774));
    Node node1 = new Node(86, node0, node0, 33, (-41));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean constructorCallHasSideEffects(Node callNode, AbstractCompiler compiler) {
    if (callNode.getType() != Token.NEW) {
        throw new IllegalStateException(""Expected NEW node, got "" + Token.name(callNode.getType()));
    }
    if (callNode.isNoSideEffectsCall()) {
        return false;
    }
    Node nameNode = callNode.getFirstChild();
    if (nameNode.getType() == Token.NAME && CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
        return false;
    }
    return true;
}","public void test284336() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties"", 803, 803);
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        NodeUtil.constructorCallHasSideEffects(node0, compiler0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NEW node, got GETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean callHasLocalResult(Node n) {
    Preconditions.checkState(n.getType() == Token.CALL);
    return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;
}","public void test285337() throws Throwable {
    Node node0 = new Node(76);
    // Undeclared exception!
    try {
        NodeUtil.callHasLocalResult(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether the call has a local result.
 */"
"public int getType() {
    return type;
}","public void test286338() throws Throwable {
    Node node0 = Node.newNumber((double) 51);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertEquals(37, node1.getType());
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test286339() throws Throwable {
    Node node0 = Node.newNumber((double) 51);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean newHasLocalResult(Node n) {
    Preconditions.checkState(n.getType() == Token.NEW);
    return n.isOnlyModifiesThisCall();
}","public void test287340() throws Throwable {
    Node node0 = new Node(115);
    // Undeclared exception!
    try {
        NodeUtil.newHasLocalResult(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether the new has a local result.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test288341() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test289342() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test290343() throws Throwable {
    Node node0 = new Node(31, 31, 31);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test291344() throws Throwable {
    Node node0 = Node.newNumber((double) 64);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test292345() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""undefined"", node0, ""undefined"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test292346() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""undefined"", node0, ""undefined"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertEquals(63, node1.getCharno());
}",""
"public int getType() {
    return type;
}","public void test292347() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""undefined"", node0, ""undefined"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertEquals(38, node1.getType());
}",""
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test293348() throws Throwable {
    Node node0 = Node.newString(49, ""9k[g@a(avp:M"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test294349() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"public int getType() {
    return type;
}","public void test295350() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""msg.let.redecl"", 3127, 3127);
    NodeUtil.canBeSideEffected(node0);
    assertEquals(33, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test295351() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""msg.let.redecl"", 3127, 3127);
    NodeUtil.canBeSideEffected(node0);
    assertEquals(12811319, node0.getSourcePosition());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test295352() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""msg.let.redecl"", 3127, 3127);
    NodeUtil.canBeSideEffected(node0);
    assertEquals(3127, node0.getLineno());
}",""
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test296353() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test297354() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test298355() throws Throwable {
    Node node0 = new Node(105);
    // Undeclared exception!
    try {
        NodeUtil.canBeSideEffected(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test299356() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""II>#M"", 114, 158);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertEquals(467102, node0.getSourcePosition());
}",""
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test299357() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""II>#M"", 114, 158);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test300358() throws Throwable {
    Node node0 = new Node(126, 126, 126);
    Node node1 = new Node(31, node0, node0, 17, 35);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test301359() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""kH"", ""kH"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test302360() throws Throwable {
    int int0 = NodeUtil.precedence(9);
    assertEquals(5, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test303361() throws Throwable {
    int int0 = NodeUtil.precedence(44);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test304362() throws Throwable {
    int int0 = NodeUtil.precedence(10);
    assertEquals(6, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test305363() throws Throwable {
    int int0 = NodeUtil.precedence(11);
    assertEquals(7, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test306364() throws Throwable {
    int int0 = NodeUtil.precedence(12);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test307365() throws Throwable {
    int int0 = NodeUtil.precedence(13);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test308366() throws Throwable {
    int int0 = NodeUtil.precedence(14);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test309367() throws Throwable {
    int int0 = NodeUtil.precedence(15);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test310368() throws Throwable {
    int int0 = NodeUtil.precedence(16);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test311369() throws Throwable {
    int int0 = NodeUtil.precedence(17);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test312370() throws Throwable {
    int int0 = NodeUtil.precedence(18);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test313371() throws Throwable {
    int int0 = NodeUtil.precedence(19);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test314372() throws Throwable {
    int int0 = NodeUtil.precedence(20);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test315373() throws Throwable {
    int int0 = NodeUtil.precedence(21);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test316374() throws Throwable {
    int int0 = NodeUtil.precedence(22);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test317375() throws Throwable {
    int int0 = NodeUtil.precedence(23);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test318376() throws Throwable {
    int int0 = NodeUtil.precedence(24);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test319377() throws Throwable {
    int int0 = NodeUtil.precedence(25);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test320378() throws Throwable {
    int int0 = NodeUtil.precedence(26);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test321379() throws Throwable {
    int int0 = NodeUtil.precedence(27);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test322380() throws Throwable {
    int int0 = NodeUtil.precedence(28);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test323381() throws Throwable {
    int int0 = NodeUtil.precedence(29);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test324382() throws Throwable {
    int int0 = NodeUtil.precedence(30);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test325383() throws Throwable {
    int int0 = NodeUtil.precedence(31);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test326384() throws Throwable {
    int int0 = NodeUtil.precedence(32);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test327385() throws Throwable {
    int int0 = NodeUtil.precedence(33);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test328386() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setprop (type 34)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test329387() throws Throwable {
    int int0 = NodeUtil.precedence(35);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test330388() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(36);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setelem (type 36)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test331389() throws Throwable {
    int int0 = NodeUtil.precedence(37);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test332390() throws Throwable {
    int int0 = NodeUtil.precedence(38);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test333391() throws Throwable {
    int int0 = NodeUtil.precedence(39);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test334392() throws Throwable {
    int int0 = NodeUtil.precedence(40);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test335393() throws Throwable {
    int int0 = NodeUtil.precedence(41);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test336394() throws Throwable {
    int int0 = NodeUtil.precedence(42);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test337395() throws Throwable {
    int int0 = NodeUtil.precedence(43);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test338396() throws Throwable {
    int int0 = NodeUtil.precedence(45);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test339397() throws Throwable {
    int int0 = NodeUtil.precedence(46);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test340398() throws Throwable {
    int int0 = NodeUtil.precedence(47);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test341399() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for bindname (type 48)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test342400() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for throw (type 49)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test343401() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=50> (type 50)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test344402() throws Throwable {
    int int0 = NodeUtil.precedence(51);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test345403() throws Throwable {
    int int0 = NodeUtil.precedence(52);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test346404() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=53> (type 53)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test347405() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=56> (type 56)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test348406() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((byte) 57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=57> (type 57)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test349407() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=58> (type 58)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test350408() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=59> (type 59)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test351409() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=60> (type 60)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test352410() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(61);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for thisfn (type 61)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test353411() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=62> (type 62)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test354412() throws Throwable {
    int int0 = NodeUtil.precedence(63);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test355413() throws Throwable {
    int int0 = NodeUtil.precedence(64);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test356414() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(65);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for get_ref (type 65)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test357415() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=66> (type 66)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test358416() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=67> (type 67)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test359417() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=68> (type 68)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test360418() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(69);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ref_special (type 69)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test361419() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=70> (type 70)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test362420() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=71> (type 71)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test363421() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=72> (type 72)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test364422() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=73> (type 73)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test365423() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(74);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=74> (type 74)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test366424() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=75> (type 75)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test367425() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(76);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=76> (type 76)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test368426() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for try (type 77)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test369427() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for semi (type 78)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test370428() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lb (type 79)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test371429() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(80);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rb (type 80)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test372430() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lc (type 81)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test373431() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rc (type 82)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test374432() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(83);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lp (type 83)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test375433() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(84);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rp (type 84)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test376434() throws Throwable {
    int int0 = NodeUtil.precedence(85);
    assertEquals(0, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test377435() throws Throwable {
    int int0 = NodeUtil.precedence(86);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test378436() throws Throwable {
    int int0 = NodeUtil.precedence(87);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test379437() throws Throwable {
    int int0 = NodeUtil.precedence(88);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test380438() throws Throwable {
    int int0 = NodeUtil.precedence(89);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test381439() throws Throwable {
    int int0 = NodeUtil.precedence(90);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test382440() throws Throwable {
    int int0 = NodeUtil.precedence(91);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test383441() throws Throwable {
    int int0 = NodeUtil.precedence(92);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test384442() throws Throwable {
    int int0 = NodeUtil.precedence(93);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test385443() throws Throwable {
    int int0 = NodeUtil.precedence(94);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test386444() throws Throwable {
    int int0 = NodeUtil.precedence(95);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test387445() throws Throwable {
    int int0 = NodeUtil.precedence(96);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test388446() throws Throwable {
    int int0 = NodeUtil.precedence(97);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test389447() throws Throwable {
    int int0 = NodeUtil.precedence(98);
    assertEquals(2, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test390448() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(99);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for colon (type 99)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test391449() throws Throwable {
    int int0 = NodeUtil.precedence(100);
    assertEquals(3, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test392450() throws Throwable {
    int int0 = NodeUtil.precedence(101);
    assertEquals(4, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test393451() throws Throwable {
    int int0 = NodeUtil.precedence(102);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test394452() throws Throwable {
    int int0 = NodeUtil.precedence(103);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test395453() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for dot (type 104)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test396454() throws Throwable {
    int int0 = NodeUtil.precedence(105);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test397455() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for export (type 106)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test398456() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for import (type 107)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test399457() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(108);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for if (type 108)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test400458() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for else (type 109)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test401459() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for switch (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test402460() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for case (type 111)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test403461() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for default (type 112)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test404462() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for while (type 113)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test405463() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for do (type 114)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test406464() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for for (type 115)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test407465() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for break (type 116)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test408466() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for continue (type 117)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test409467() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for var (type 118)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test410468() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for with (type 119)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test411469() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for catch (type 120)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test412470() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for finally (type 121)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test413471() throws Throwable {
    int int0 = NodeUtil.precedence(122);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test414472() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(123);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for reserved (type 123)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test415473() throws Throwable {
    int int0 = NodeUtil.precedence(124);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test416474() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence((-37));
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=-37> (type -37)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test417475() throws Throwable {
    Node node0 = new Node(85, 85, 85);
    // Undeclared exception!
    try {
        NodeUtil.isNumericResult(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test418476() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.isNumericResult(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test419477() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test420478() throws Throwable {
    Node node0 = new Node(101);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test421479() throws Throwable {
    Node node0 = new Node(100);
    Node node1 = new Node(37);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test422480() throws Throwable {
    Node node0 = new Node(9, 9, 9);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test423481() throws Throwable {
    Node node0 = new Node(10);
    boolean boolean0 = NodeUtil.isNumericResult(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test424482() throws Throwable {
    Node node0 = new Node(18);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test425483() throws Throwable {
    Node node0 = new Node(95, 110, 425);
    Node node1 = new Node(19, node0, node0, node0, node0, 3966, 31);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test426484() throws Throwable {
    Node node0 = Node.newNumber((double) 26, 26, 26);
    Node node1 = new Node(20, node0, node0, node0, node0, 25, 35);
    boolean boolean0 = NodeUtil.isNumericResult(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static int getCount(Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    int total = 0;
    if (pred.apply(n)) {
        total++;
    }
    if (traverseChildrenPred.apply(n)) {
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            total += getCount(c, pred, traverseChildrenPred);
        }
    }
    return total;
}","public void test427485() throws Throwable {
    Node node0 = new Node(23, 23, 147);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
    int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
    assertEquals(0, int0);
}","/**
 * @return The number of times the the predicate is true for the node
 * or any of its children.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test428486() throws Throwable {
    Node node0 = new Node(25, (-2639), 4114);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test429487() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    Node node1 = new Node(27, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test430488() throws Throwable {
    Node node0 = Node.newString(28, ""Muy`^e)u[Af"");
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test431489() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static int getCount(Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    int total = 0;
    if (pred.apply(n)) {
        total++;
    }
    if (traverseChildrenPred.apply(n)) {
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            total += getCount(c, pred, traverseChildrenPred);
        }
    }
    return total;
}","public void test432490() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 23, 147);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
    int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
    assertEquals(3, int0);
}","/**
 * @return The number of times the the predicate is true for the node
 * or any of its children.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test432491() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 23, 147);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
    int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
    assertEquals(94355, node0.getSourcePosition());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test432492() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 23, 147);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
    int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
    assertTrue(node0.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test433493() throws Throwable {
    Node node0 = Node.newNumber((double) 26, 1957, 1957);
    boolean boolean0 = NodeUtil.isNumericResult(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test434494() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.isNumericResult(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test435495() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test436496() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 98, 47);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test436497() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 98, 47);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertEquals(401455, node0.getSourcePosition());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test437498() throws Throwable {
    Node node0 = new Node(37);
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node1 = NodeUtil.newName(defaultCodingConvention0, ""Infinity"", node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test437499() throws Throwable {
    Node node0 = new Node(37);
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node1 = NodeUtil.newName(defaultCodingConvention0, ""Infinity"", node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertTrue(node1.isQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test438500() throws Throwable {
    Node node0 = new Node(12, 12, 12);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test439501() throws Throwable {
    Node node0 = new Node(13, 94, 65535);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test440502() throws Throwable {
    Node node0 = new Node(14);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test441503() throws Throwable {
    Node node0 = new Node(15);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test442504() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(16, node0, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test443505() throws Throwable {
    Node node0 = new Node(113, (-2247), (-2247));
    Node node1 = new Node(17, node0, node0, node0, 49, 23);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertTrue(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test444506() throws Throwable {
    Node node0 = new Node(18, 23, 98);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test445507() throws Throwable {
    Node node0 = new Node(95, 110, 425);
    Node node1 = new Node(19, node0, node0, node0, node0, 3966, 281);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test446508() throws Throwable {
    Node node0 = new Node(102, (-664), 102);
    Node node1 = new Node(20, node0, node0, 4, 0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test447509() throws Throwable {
    Node node0 = new Node(21, 21, 4114);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test448510() throws Throwable {
    Node node0 = new Node(22, 22, 136);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test449511() throws Throwable {
    Node node0 = new Node(24, 97, 4886);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test450512() throws Throwable {
    Node node0 = new Node(25, (-2639), 4114);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test451513() throws Throwable {
    Node node0 = new Node(26);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test452514() throws Throwable {
    Node node0 = new Node(27, 27, 37);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test453515() throws Throwable {
    Node node0 = Node.newString(28, ""Z*|Y5BtckE-JB"");
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test454516() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test455517() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test456518() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test457519() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Node node1 = new Node(34, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertTrue(boolean0);
}",""
"static boolean valueCheck(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return valueCheck(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return valueCheck(n.getFirstChild(), p) && valueCheck(n.getLastChild(), p);
        case Token.HOOK:
            return valueCheck(n.getFirstChild().getNext(), p) && valueCheck(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test458520() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_BooleanResultPredicate0);
    assertFalse(boolean0);
}","/**
 * Apply the supplied predicate against the potential
 * all possible result of the expression.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test459521() throws Throwable {
    Node node0 = new Node(36, (-534), 11);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test460522() throws Throwable {
    Node node0 = Node.newNumber((double) 51);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test461523() throws Throwable {
    Node node0 = new Node(42, 17, 4095);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test462524() throws Throwable {
    Node node0 = new Node(43, 1397, 1535);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test463525() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    Node node1 = new Node(44, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test464526() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test465527() throws Throwable {
    Node node0 = new Node(46, (-1743), 38);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test466528() throws Throwable {
    Node node0 = new Node(47, 47, 47);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test467529() throws Throwable {
    Node node0 = Node.newString(48, ""Muy`^e)u[af"");
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test468530() throws Throwable {
    Node node0 = Node.newString(49, ""9k[g@a(avp:M"");
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test469531() throws Throwable {
    Node node0 = new Node(50, 50, 50);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test470532() throws Throwable {
    Node node0 = Node.newString(51, ""W(%UJ7s`vyd<%##5"", 51, 51);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test471533() throws Throwable {
    Node node0 = new Node(2119, 2119, 2119);
    Node node1 = new Node(52, node0, node0, node0, 403, 2);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test472534() throws Throwable {
    Node node0 = new Node(122);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test473535() throws Throwable {
    Node node0 = new Node(41);
    Node node1 = new Node(0, node0, node0, 49, 12);
    String string0 = NodeUtil.arrayToString(node1);
    assertNotNull(string0);
}",""
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test474537() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(2);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test475538() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(10);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test476539() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(11);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test477540() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test478541() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(100);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test479542() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(101);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test480543() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(30);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test481544() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(10);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test482545() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(11);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test483546() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test484547() throws Throwable {
    Node node0 = new Node(87, 87, 65);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(9, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test485548() throws Throwable {
    Node node0 = new Node(123);
    // Undeclared exception!
    try {
        NodeUtil.getOpFromAssignmentOp(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not an assiment op
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test486549() throws Throwable {
    Node node0 = Node.newString(""case expresmion doesn't match switch"", 1547, 1547);
    Node node1 = new Node(89, node0, node0, node0, node0);
    int int0 = NodeUtil.getOpFromAssignmentOp(node1);
    assertEquals(11, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test487550() throws Throwable {
    Node node0 = Node.newString(90, ""test"", 109, 109);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(18, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test488551() throws Throwable {
    Node node0 = new Node(91);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(19, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test489552() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(22, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test490553() throws Throwable {
    Node node0 = new Node(95, 95, 425);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(23, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test491554() throws Throwable {
    Node node0 = Node.newString(""case expression doesn't match switch"", 1536, 1536);
    Node node1 = new Node(97, node0, node0, 1, 76);
    int int0 = NodeUtil.getOpFromAssignmentOp(node1);
    assertEquals(25, int0);
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test492555() throws Throwable {
    Node node0 = Node.newNumber(Double.POSITIVE_INFINITY, 26, 2676);
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertFalse(boolean0);
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test493556() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""my"", 58, 10);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExpressionNode(node1);
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test493557() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""my"", 58, 10);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExpressionNode(node1);
    assertEquals(237578, node1.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test494558() throws Throwable {
    Node node0 = new Node(41);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""ze{EzS+}"", stack0, node0, 38, 4095);
    boolean boolean0 = NodeUtil.referencesThis(node1);
    assertEquals(159743, node1.getSourcePosition());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test494559() throws Throwable {
    Node node0 = new Node(41);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""ze{EzS+}"", stack0, node0, 38, 4095);
    boolean boolean0 = NodeUtil.referencesThis(node1);
    assertEquals(3, node1.getChildCount());
}",""
"static boolean referencesThis(Node n) {
    Node start = (isFunction(n)) ? n.getLastChild() : n;
    return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);
}","public void test494560() throws Throwable {
    Node node0 = new Node(41);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""ze{EzS+}"", stack0, node0, 38, 4095);
    boolean boolean0 = NodeUtil.referencesThis(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the shallow scope contains references to 'this' keyword
 */"
"public int getType() {
    return type;
}","public void test494561() throws Throwable {
    Node node0 = new Node(41);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""ze{EzS+}"", stack0, node0, 38, 4095);
    boolean boolean0 = NodeUtil.referencesThis(node1);
    assertEquals(105, node1.getType());
}",""
"static Node newCallNode(Node callTarget, Node... parameters) {
    boolean isFreeCall = !isGet(callTarget);
    Node call = new Node(Token.CALL, callTarget);
    call.putBooleanProp(Node.FREE_CALL, isFreeCall);
    for (Node parameter : parameters) {
        call.addChildToBack(parameter);
    }
    return call;
}","public void test495562() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""?y.`ze<N3[ZiYI[gK'"", 6, 6);
    Node[] nodeArray0 = new Node[2];
    // Undeclared exception!
    try {
        NodeUtil.newCallNode(node0, nodeArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * A new CALL node with the ""FREE_CALL"" set based on call target.
 */"
"static boolean isGet(Node n) {
    return n.getType() == Token.GETPROP || n.getType() == Token.GETELEM;
}","public void test496563() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(boolean0);
}","/**
 * Is this a GETPROP or GETELEM node?
 */"
"static Node getPrototypeClassName(Node qName) {
    Node cur = qName;
    while (isGetProp(cur)) {
        if (cur.getLastChild().getString().equals(""prototype"")) {
            return cur.getFirstChild();
        } else {
            cur = cur.getFirstChild();
        }
    }
    return null;
}","public void test497564() throws Throwable {
    Node node0 = Node.newString(""y[@>az[*wUri@"", 1429, (-987));
    Node node1 = new Node(33, node0, node0, node0, node0);
    Node node2 = NodeUtil.getPrototypeClassName(node1);
    assertNull(node2);
}","/**
 * @return The class name part of a qualified prototype name.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test498565() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, """", 71, 1176);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(291992, node0.getSourcePosition());
}",""
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test498566() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, """", 71, 1176);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"static boolean isCallOrNew(Node node) {
    return NodeUtil.isCall(node) || NodeUtil.isNew(node);
}","public void test499567() throws Throwable {
    Node node0 = new Node(30, 8, (-865));
    boolean boolean0 = NodeUtil.isCallOrNew(node0);
    assertTrue(boolean0);
}","/**
 * @param node A node
 * @return Whether the call is a NEW or CALL node.
 */"
"static boolean isVar(Node n) {
    return n.getType() == Token.VAR;
}","public void test500568() throws Throwable {
    Node node0 = new Node(53, 29, 148);
    Node node1 = NodeUtil.newVarNode(""valueOf"", node0);
    boolean boolean0 = NodeUtil.isVar(node1);
    assertTrue(boolean0);
}","/**
 * Is this a VAR node?
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test500569() throws Throwable {
    Node node0 = new Node(53, 29, 148);
    Node node1 = NodeUtil.newVarNode(""valueOf"", node0);
    boolean boolean0 = NodeUtil.isVar(node1);
    assertEquals(0, node0.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test500570() throws Throwable {
    Node node0 = new Node(53, 29, 148);
    Node node1 = NodeUtil.newVarNode(""valueOf"", node0);
    boolean boolean0 = NodeUtil.isVar(node1);
    assertEquals(118932, node1.getSourcePosition());
}",""
"static Node parseAndNormalizeTestCode(AbstractCompiler compiler, String code, String prefix) {
    Node js = compiler.parseTestCode(code);
    NodeTraversal.traverse(compiler, js, new Normalize.NormalizeStatements(compiler, false));
    NodeTraversal.traverse(compiler, js, new MakeDeclaredNamesUnique());
    return js;
}","public void test501571() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate"", ""com.google.javascript.jscomp.NodeUtil$NumbericResultPredicate"");
    assertEquals(1, Node.TARGET_PROP);
}",""
"public int getType() {
    return type;
}","public void test502572() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""Z*|Y5BtckE-JB"", 2486, 2486);
    Node node1 = NodeUtil.newExpr(node0);
    assertEquals(130, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test502573() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""Z*|Y5BtckE-JB"", 2486, 2486);
    Node node1 = NodeUtil.newExpr(node0);
    NodeUtil.getAssignedValue(node0);
    assertEquals(10185142, node0.getSourcePosition());
}",""
"static boolean isString(Node n) {
    return n.getType() == Token.STRING;
}","public void test503574() throws Throwable {
    Node node0 = Node.newString(""3EF|WB+c#<&"");
    boolean boolean0 = NodeUtil.isString(node0);
    assertTrue(boolean0);
}","/**
 * Is this a STRING node?
 */"
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test504575() throws Throwable {
    Node node0 = new Node(97);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test505576() throws Throwable {
    Node node0 = new Node(92, 92, 92);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
    assertFalse(boolean0);
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"public int getType() {
    return type;
}","public void test505577() throws Throwable {
    Node node0 = new Node(92, 92, 92);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
    assertEquals(130, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test506578() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 23, 147);
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertEquals(94355, node0.getSourcePosition());
}",""
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test506579() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 23, 147);
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test506580() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 23, 147);
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertTrue(node0.hasChildren());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test506581() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 23, 147);
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test507582() throws Throwable {
    Node node0 = Node.newNumber((double) 92);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"public int getType() {
    return type;
}","public void test507583() throws Throwable {
    Node node0 = Node.newNumber((double) 92);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(130, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test508584() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    Node node1 = new Node(2, node0);
    boolean boolean0 = NodeUtil.isLValue(node0);
    assertEquals(471155, node0.getSourcePosition());
}",""
"static boolean isLValue(Node node) {
    int nType = node.getType();
    Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP || nType == Token.GETELEM);
    Node parent = node.getParent();
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node) || NodeUtil.isVar(parent) || (parent.getType() == Token.FUNCTION && parent.getFirstChild() == node) || parent.getType() == Token.DEC || parent.getType() == Token.INC || parent.getType() == Token.LP || parent.getType() == Token.CATCH;
}","public void test508585() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""infinity"", 115, 115);
    Node node1 = new Node(2, node0);
    boolean boolean0 = NodeUtil.isLValue(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as synactically similar to
 * ""var x = 0;"".
 *
 * @param node The node
 * @return True if n is an L-value.
 */"
"static boolean isForIn(Node n) {
    return n.getType() == Token.FOR && n.getChildCount() == 3;
}","public void test509586() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test510587() throws Throwable {
    Node node0 = new Node(113, (-2247), (-2247));
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static boolean isWithinLoop(Node n) {
    for (Node parent : n.getAncestors()) {
        if (NodeUtil.isLoopStructure(parent)) {
            return true;
        }
        if (NodeUtil.isFunction(parent)) {
            break;
        }
    }
    return false;
}","public void test511588() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    Node node1 = new Node(27, node0);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the specified node has a loop parent that
 * is within the current scope.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test512589() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test513590() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test514591() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test515592() throws Throwable {
    Node node0 = Node.newString(114, ""J]!m|?pMddgw qX5%"");
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test516593() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"public int getType() {
    return type;
}","public void test517594() throws Throwable {
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node0 = Node.newString(1237, ""g="");
    Node node1 = NodeUtil.newFunctionNode(""g="", linkedList0, node0, (-2102), 4);
    assertEquals(105, node1.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test517595() throws Throwable {
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node0 = Node.newString(1237, ""g="");
    Node node1 = NodeUtil.newFunctionNode(""g="", linkedList0, node0, (-2102), 4);
    assertEquals(3, node1.getChildCount());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test517596() throws Throwable {
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node0 = Node.newString(1237, ""g="");
    Node node1 = NodeUtil.newFunctionNode(""g="", linkedList0, node0, (-2102), 4);
    assertEquals((-1), node1.getLineno());
}",""
"static boolean isWithinLoop(Node n) {
    for (Node parent : n.getAncestors()) {
        if (NodeUtil.isLoopStructure(parent)) {
            return true;
        }
        if (NodeUtil.isFunction(parent)) {
            break;
        }
    }
    return false;
}","public void test517597() throws Throwable {
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node0 = Node.newString(1237, ""g="");
    Node node1 = NodeUtil.newFunctionNode(""g="", linkedList0, node0, (-2102), 4);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the specified node has a loop parent that
 * is within the current scope.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test518598() throws Throwable {
    Node node0 = Node.newString(77, ""x'}|ECbh\""&O"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test519599() throws Throwable {
    Node node0 = new Node(108, 108, 108);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test520600() throws Throwable {
    Node node0 = new Node(110);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test521601() throws Throwable {
    Node node0 = new Node(111, (-2100), (-2100));
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test522602() throws Throwable {
    Node node0 = new Node(112);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test523603() throws Throwable {
    Node node0 = new Node(113, 113, 113);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test524604() throws Throwable {
    Node node0 = Node.newString(114, ""Imls\""*Bw2+zmM^{w"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test526606() throws Throwable {
    Node node0 = Node.newString(119, ""NaN"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test527607() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test528608() throws Throwable {
    Node node0 = Node.newString(77, ""x'}|ECbh\""&O"");
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test529609() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test530610() throws Throwable {
    Node node0 = new Node(108, 108, 108);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test531611() throws Throwable {
    Node node0 = Node.newString(112, ""JSC_EGATING_A_NON_NUBER_ERROR"", 112, 112);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test532612() throws Throwable {
    Node node0 = new Node(113, (-2247), (-2247));
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test533613() throws Throwable {
    Node node0 = Node.newString(114, ""II>#M"");
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test534614() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test535615() throws Throwable {
    Node node0 = Node.newString(119, ""NaN"");
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test536616() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test537617() throws Throwable {
    Node node0 = new Node(43, 1535, 43);
    // Undeclared exception!
    try {
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test538618() throws Throwable {
    Node node0 = new Node(77, 77, 23);
    node0.addChildrenToBack(node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test539619() throws Throwable {
    Node node0 = new Node(120);
    node0.addChildrenToFront(node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test540620() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    node0.addChildToFront(node0);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test541621() throws Throwable {
    Node node0 = new Node(108, 108, 108);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test542622() throws Throwable {
    Node node0 = new Node(48);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // BINDNAME does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test543623() throws Throwable {
    Node node0 = new Node(109, 109, 109);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ELSE 109 does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test544624() throws Throwable {
    Node node0 = Node.newString(110, ""JSC_EATING_A_NON_NUBER_ERROR"", 110, 110);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // SWITCH JSC_EATING_A_NON_NUBER_ERROR 110 does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test545625() throws Throwable {
    Node node0 = new Node(113, (-2247), (-2247));
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"// TODO(dcc): Some (all) of these can probably be better achieved
// using the control flow graph (like CheckUnreachableCode).
// There is an existing CFG pass (UnreachableCodeElimination) that
// could be changed to use code from CheckUnreachableCode to do this.
@Override
Node optimizeSubtree(Node subtree) {
    switch(subtree.getType()) {
        case Token.ASSIGN:
            return tryFoldAssignment(subtree);
        case Token.COMMA:
            return tryFoldComma(subtree);
        case Token.SCRIPT:
        case Token.BLOCK:
            return tryOptimizeBlock(subtree);
        case Token.EXPR_RESULT:
            subtree = tryFoldExpr(subtree);
            return subtree;
        case Token.HOOK:
            return tryFoldHook(subtree);
        case Token.SWITCH:
            return tryOptimizeSwitch(subtree);
        case Token.IF:
            return tryFoldIf(subtree);
        case Token.WHILE:
            return tryFoldWhile(subtree);
        case Token.FOR:
            {
                Node condition = NodeUtil.getConditionExpression(subtree);
                if (condition != null) {
                    tryFoldForCondition(condition);
                }
            }
            return tryFoldFor(subtree);
        case Token.DO:
            return tryFoldDo(subtree);
        case Token.TRY:
            return tryFoldTry(subtree);
        default:
            return subtree;
    }
}","public void test546626() throws Throwable {
    Node node0 = Node.newString(114, ""I>.#M"");
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    // Undeclared exception!
    try {
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test547627() throws Throwable {
    Node node0 = new Node(115);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static boolean isStatementParent(Node parent) {
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test548628() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""g6glO<^H9[u[1UhXn"", ""g6glO<^H9[u[1UhXn"");
    boolean boolean0 = NodeUtil.isStatementParent(node0);
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test549629() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""kH"", ""kH"");
    NameReferenceGraphConstruction nameReferenceGraphConstruction0 = new NameReferenceGraphConstruction(compiler0);
    nameReferenceGraphConstruction0.process(node0, node0);
    assertEquals(132, node0.getType());
}",""
"static boolean isSwitchCase(Node n) {
    return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;
}","public void test550630() throws Throwable {
    Node node0 = new Node(111, 111, 967);
    boolean boolean0 = NodeUtil.isSwitchCase(node0);
    assertTrue(boolean0);
}","/**
 * Whether the node is part of a switch statement.
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test551631() throws Throwable {
    Node node0 = Node.newString(""W(%UJ7s`vyd<%##5"");
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test552632() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""undefined"", 51, 122);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test552633() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(442);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""undefined"", 51, 122);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(209018, node0.getSourcePosition());
}",""
"static boolean isLabelName(Node n) {
    return (n != null && n.getType() == Token.LABEL_NAME);
}","public void test553634() throws Throwable {
    boolean boolean0 = NodeUtil.isLabelName((Node) null);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static boolean isLabelName(Node n) {
    return (n != null && n.getType() == Token.LABEL_NAME);
}","public void test554635() throws Throwable {
    Node node0 = Node.newNumber(0.0, 144, 144);
    boolean boolean0 = NodeUtil.isLabelName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise only its children can be removed.
            node.detachChildren();
        }
    } else if (node.getType() == Token.CATCH) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test555636() throws Throwable {
    Node node0 = new Node(108, 108, 108);
    Node node1 = new Node(27, node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: IF 108 of IF 108
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void maybeAddFinally(Node tryNode) {
    Preconditions.checkState(tryNode.getType() == Token.TRY);
    if (!NodeUtil.hasFinally(tryNode)) {
        tryNode.addChildrenToBack(new Node(Token.BLOCK).copyInformationFrom(tryNode));
    }
}","public void test556637() throws Throwable {
    Node node0 = new Node(73);
    // Undeclared exception!
    try {
        NodeUtil.maybeAddFinally(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add a finally block if one does not exist.
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test557638() throws Throwable {
    Node node0 = Node.newString(77, ""x'}|ECbh\""&O"");
    NodeUtil.maybeAddFinally(node0);
    assertTrue(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test557639() throws Throwable {
    Node node0 = Node.newString(77, ""x'}|ECbh\""&O"");
    NodeUtil.maybeAddFinally(node0);
    assertTrue(node0.hasChildren());
}",""
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else {
        return false;
    }
}","public void test558640() throws Throwable {
    Node node0 = new Node(43, 1397, 1397);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else {
        return false;
    }
}","public void test559641() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""PR}`e)Hc(cA7v<0W"", ""Recording function information"");
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean isThis(Node node) {
    return node.getType() == Token.THIS;
}","public void test560642() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.isThis(node0);
    assertFalse(boolean0);
}","/**
 * Is this a THIS node?
 */"
"static boolean isThis(Node node) {
    return node.getType() == Token.THIS;
}","public void test561643() throws Throwable {
    Node node0 = Node.newString(42, ""NaN"");
    boolean boolean0 = NodeUtil.isThis(node0);
    assertTrue(boolean0);
}","/**
 * Is this a THIS node?
 */"
"static boolean isArrayLiteral(Node node) {
    return node.getType() == Token.ARRAYLIT;
}","public void test562644() throws Throwable {
    Node node0 = new Node(44, 80, 44);
    boolean boolean0 = NodeUtil.isArrayLiteral(node0);
    assertFalse(boolean0);
}","/**
 * Is this an ARRAYLIT node
 */"
"static boolean isArrayLiteral(Node node) {
    return node.getType() == Token.ARRAYLIT;
}","public void test563645() throws Throwable {
    Node node0 = new Node(63, 63, 63);
    boolean boolean0 = NodeUtil.isArrayLiteral(node0);
    assertTrue(boolean0);
}","/**
 * Is this an ARRAYLIT node
 */"
"static boolean isEmptyFunctionExpression(Node node) {
    return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());
}","public void test564646() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    assertFalse(boolean0);
}","/**
 * Determines if a node is a function expression that has an empty body.
 *
 * @param node a node
 * @return whether the given node is a function expression that is empty
 */"
"public int getType() {
    return type;
}","public void test565647() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
    assertEquals(105, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test565648() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
    assertEquals(114736, node1.getSourcePosition());
}",""
"static boolean isEmptyFunctionExpression(Node node) {
    return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());
}","public void test565649() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
    assertFalse(boolean0);
}","/**
 * Determines if a node is a function expression that has an empty body.
 *
 * @param node a node
 * @return whether the given node is a function expression that is empty
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test565650() throws Throwable {
    Node node0 = Node.newString(""#em~3+7r8o]#f#|ijf"");
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""+?Q=+)\""|7>-X"", stack0, node0, 28, 48);
    Node node2 = new Node(34, node1);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node1);
    assertEquals(3, node1.getChildCount());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test566651() throws Throwable {
    Node node0 = Node.newNumber((double) 64);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
    assertEquals(1, node1.getChildCount());
}",""
"static boolean isSimpleFunctionObjectCall(Node callNode) {
    if (isFunctionObjectCall(callNode)) {
        if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME) {
            return true;
        }
    }
    return false;
}","public void test566652() throws Throwable {
    Node node0 = Node.newNumber((double) 64);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.call(...)
 *    x['call'](...)
 * where x is a NAME node.
 */"
"static boolean isVarOrSimpleAssignLhs(Node n, Node parent) {
    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) || parent.getType() == Token.VAR;
}","public void test567653() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"static Node newVarNode(String name, Node value) {
    Node nodeName = Node.newString(Token.NAME, name);
    if (value != null) {
        Preconditions.checkState(value.getNext() == null);
        nodeName.addChildToBack(value);
        nodeName.copyInformationFrom(value);
    }
    Node var = new Node(Token.VAR, nodeName).copyInformationFrom(nodeName);
    return var;
}","public void test568654() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""-"", (Node) null);
    assertNotNull(node0);
}","/**
 * Create a VAR node containing the given name and initial value expression.
 */"
"static boolean isVarOrSimpleAssignLhs(Node n, Node parent) {
    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) || parent.getType() == Token.VAR;
}","public void test568655() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""-"", (Node) null);
    boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"static boolean isLValue(Node node) {
    int nType = node.getType();
    Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP || nType == Token.GETELEM);
    Node parent = node.getParent();
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node) || NodeUtil.isVar(parent) || (parent.getType() == Token.FUNCTION && parent.getFirstChild() == node) || parent.getType() == Token.DEC || parent.getType() == Token.INC || parent.getType() == Token.LP || parent.getType() == Token.CATCH;
}","public void test569656() throws Throwable {
    Node node0 = new Node(31, 31, 31);
    // Undeclared exception!
    try {
        NodeUtil.isLValue(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as synactically similar to
 * ""var x = 0;"".
 *
 * @param node The node
 * @return True if n is an L-value.
 */"
"static boolean isLValue(Node node) {
    int nType = node.getType();
    Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP || nType == Token.GETELEM);
    Node parent = node.getParent();
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node) || NodeUtil.isVar(parent) || (parent.getType() == Token.FUNCTION && parent.getFirstChild() == node) || parent.getType() == Token.DEC || parent.getType() == Token.INC || parent.getType() == Token.LP || parent.getType() == Token.CATCH;
}","public void test570657() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""#G!A.jNM<#_H/vx6?5"", 1717, 147);
    // Undeclared exception!
    try {
        NodeUtil.isLValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as synactically similar to
 * ""var x = 0;"".
 *
 * @param node The node
 * @return True if n is an L-value.
 */"
"static boolean isLValue(Node node) {
    int nType = node.getType();
    Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP || nType == Token.GETELEM);
    Node parent = node.getParent();
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node) || NodeUtil.isVar(parent) || (parent.getType() == Token.FUNCTION && parent.getFirstChild() == node) || parent.getType() == Token.DEC || parent.getType() == Token.INC || parent.getType() == Token.LP || parent.getType() == Token.CATCH;
}","public void test571658() throws Throwable {
    Node node0 = new Node(2119, 2119, 2119);
    Node node1 = new Node(35, node0, node0, node0, 405, 2);
    // Undeclared exception!
    try {
        NodeUtil.isLValue(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as synactically similar to
 * ""var x = 0;"".
 *
 * @param node The node
 * @return True if n is an L-value.
 */"
"static boolean isObjectLitKey(Node node, Node parent) {
    switch(node.getType()) {
        case Token.STRING:
            return parent.getType() == Token.OBJECTLIT;
        case Token.GET:
        case Token.SET:
            return true;
    }
    return false;
}","public void test572659() throws Throwable {
    Node node0 = new Node(147);
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether a node represents an object literal key
 * (e.g. key1 in {key1: value1, key2: value2}).
 *
 * @param node A node
 * @param parent The node's parent
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test573660() throws Throwable {
    Node node0 = Node.newString(""Y3$thk3h8iMyq2"", (-886), (-886));
    String string0 = NodeUtil.getObjectLitKeyName(node0);
    assertEquals(""Y3$thk3h8iMyq2"", string0);
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test574661() throws Throwable {
    Node node0 = new Node(126, 126, 126);
    // Undeclared exception!
    try {
        NodeUtil.getObjectLitKeyName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected node type: LABEL 126
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test575662() throws Throwable {
    Node node0 = new Node(147);
    // Undeclared exception!
    try {
        NodeUtil.getObjectLitKeyName(node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // GET is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType) {
    if (valueType != null) {
        switch(key.getType()) {
            case Token.GET:
                // GET must always return a function type.
                if (valueType.isFunctionType()) {
                    FunctionType fntype = ((FunctionType) valueType);
                    valueType = fntype.getReturnType();
                } else {
                    return null;
                }
                break;
            case Token.SET:
                if (valueType.isFunctionType()) {
                    // SET must always return a function type.
                    FunctionType fntype = ((FunctionType) valueType);
                    Node param = fntype.getParametersNode().getFirstChild();
                    // SET function must always have one parameter.
                    valueType = param.getJSType();
                } else {
                    return null;
                }
                break;
        }
    }
    return valueType;
}","public void test576663() throws Throwable {
    JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType((Node) null, (JSType) null);
    assertNull(jSType0);
}","/**
 * @param key A OBJECTLIT key node.
 * @return The type expected when using the key.
 */"
"public boolean isTemplateType() {
    return false;
}","public void test577664() throws Throwable {
    Node node0 = Node.newString(90, ""test"", 109, 109);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType jSType0 = jSTypeRegistry0.createNamedType(""test"", ""+"", 0, 8);
    JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
    assertFalse(jSType1.isTemplateType());
}",""
"static boolean isGetOrSetKey(Node node) {
    switch(node.getType()) {
        case Token.GET:
        case Token.SET:
            return true;
    }
    return false;
}","public void test578665() throws Throwable {
    Node node0 = new Node(113, (-2175), 967);
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal get or set key
 * (e.g. key1 in {get key1() {}, set key2(a){}).
 *
 * @param node A node
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test579666() throws Throwable {
    String string0 = NodeUtil.opToStr(9);
    assertEquals(""|"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test580668() throws Throwable {
    String string0 = NodeUtil.opToStr(64);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test581669() throws Throwable {
    String string0 = NodeUtil.opToStr(10);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test582671() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(11);
    assertEquals(""&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test583672() throws Throwable {
    String string0 = NodeUtil.opToStr(12);
    assertEquals(""=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test584673() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(13);
    assertEquals(""!="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test585674() throws Throwable {
    String string0 = NodeUtil.opToStr(14);
    assertEquals(""<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test586675() throws Throwable {
    String string0 = NodeUtil.opToStr(15);
    assertEquals(""<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test587676() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(16);
    assertEquals("">"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test588677() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(17);
    assertEquals("">="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test589678() throws Throwable {
    String string0 = NodeUtil.opToStr(18);
    assertEquals(""<<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test590679() throws Throwable {
    String string0 = NodeUtil.opToStr(19);
    assertEquals("">>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test591680() throws Throwable {
    String string0 = NodeUtil.opToStr(20);
    assertEquals("">>>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test592681() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(21);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test593682() throws Throwable {
    String string0 = NodeUtil.opToStr(22);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test594683() throws Throwable {
    String string0 = NodeUtil.opToStr(23);
    assertEquals(""*"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test595684() throws Throwable {
    String string0 = NodeUtil.opToStr(24);
    assertEquals(""/"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test596685() throws Throwable {
    String string0 = NodeUtil.opToStr(25);
    assertEquals(""%"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test597686() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(26);
    assertEquals(""!"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test598687() throws Throwable {
    String string0 = NodeUtil.opToStr(27);
    assertEquals(""~"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test599688() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(28);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test600689() throws Throwable {
    String string0 = NodeUtil.opToStr(29);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test601691() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(30);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 30: NEW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test602692() throws Throwable {
    String string0 = NodeUtil.opToStr(31);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test603693() throws Throwable {
    String string0 = NodeUtil.opToStr(32);
    assertEquals(""typeof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test604694() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(33);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 33: GETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test605695() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 34: SETPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test606696() throws Throwable {
    String string0 = NodeUtil.opToStr(35);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test607697() throws Throwable {
    String string0 = NodeUtil.opToStr(36);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test608698() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(37);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 37: CALL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test609699() throws Throwable {
    String string0 = NodeUtil.opToStr(38);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test610700() throws Throwable {
    String string0 = NodeUtil.opToStr(39);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test611701() throws Throwable {
    String string0 = NodeUtil.opToStr(40);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test612702() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(41);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 41: NULL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test613703() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(42);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 42: THIS
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test614704() throws Throwable {
    String string0 = NodeUtil.opToStr(43);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test615705() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(44);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 44: TRUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test616706() throws Throwable {
    String string0 = NodeUtil.opToStr(45);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test617708() throws Throwable {
    String string0 = NodeUtil.opToStr(46);
    assertEquals(""!=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test618710() throws Throwable {
    String string0 = NodeUtil.opToStr(47);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test619711() throws Throwable {
    String string0 = NodeUtil.opToStr(48);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test620712() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 49: THROW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test621713() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 50: RETHROW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test622714() throws Throwable {
    String string0 = NodeUtil.opToStr(51);
    assertEquals(""in"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test623716() throws Throwable {
    String string0 = NodeUtil.opToStr(52);
    assertEquals(""instanceof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test624718() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 53: LOCAL_LOAD
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test625719() throws Throwable {
    String string0 = NodeUtil.opToStr(54);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test626720() throws Throwable {
    String string0 = NodeUtil.opToStr(55);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test627721() throws Throwable {
    String string0 = NodeUtil.opToStr(56);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test628722() throws Throwable {
    String string0 = NodeUtil.opToStr(57);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test629723() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 58: ENUM_INIT_VALUES
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test630724() throws Throwable {
    String string0 = NodeUtil.opToStr(59);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test631725() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(61);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 61: THISFN
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test632726() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 62: RETURN_RESULT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test633727() throws Throwable {
    String string0 = NodeUtil.opToStr(63);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test634728() throws Throwable {
    String string0 = NodeUtil.opToStr(65);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test635729() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 66: SET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test636730() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 67: DEL_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test637731() throws Throwable {
    String string0 = NodeUtil.opToStr(69);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test638732() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 70: DEFAULTNAMESPACE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test639733() throws Throwable {
    String string0 = NodeUtil.opToStr(71);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test640734() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 72: ESCXMLTEXT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test641735() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 73: REF_MEMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test642736() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(74);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 74: REF_NS_MEMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test643737() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 75: REF_NAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test644738() throws Throwable {
    String string0 = NodeUtil.opToStr(76);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test645739() throws Throwable {
    String string0 = NodeUtil.opToStr(77);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test646740() throws Throwable {
    String string0 = NodeUtil.opToStr(78);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test647741() throws Throwable {
    String string0 = NodeUtil.opToStr(79);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test648742() throws Throwable {
    String string0 = NodeUtil.opToStr(80);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test649743() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 81: LC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test650744() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 82: RC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test651745() throws Throwable {
    String string0 = NodeUtil.opToStr(83);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test652746() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(84);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 84: RP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test653747() throws Throwable {
    String string0 = NodeUtil.opToStr(85);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test654748() throws Throwable {
    String string0 = NodeUtil.opToStr(86);
    assertEquals(""="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test655750() throws Throwable {
    String string0 = NodeUtil.opToStr(87);
    assertEquals(""|="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test656751() throws Throwable {
    String string0 = NodeUtil.opToStr(88);
    assertEquals(""^="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test657752() throws Throwable {
    String string0 = NodeUtil.opToStr(89);
    assertEquals(""&="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test658753() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(90);
    assertEquals(""<<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test659754() throws Throwable {
    String string0 = NodeUtil.opToStr(91);
    assertEquals("">>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test660755() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(92);
    assertEquals("">>>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test661756() throws Throwable {
    String string0 = NodeUtil.opToStr(93);
    assertEquals(""+="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test662757() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(94);
    assertEquals(""-="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test663758() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(95);
    assertEquals(""*="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test664759() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(96);
    assertEquals(""/="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test665760() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(97);
    assertEquals(""%="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test666761() throws Throwable {
    String string0 = NodeUtil.opToStr(98);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test667762() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(99);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 99: COLON
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test668763() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(100);
    assertEquals(""||"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test669764() throws Throwable {
    String string0 = NodeUtil.opToStr(101);
    assertEquals(""&&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test670765() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(102);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 102: INC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test671766() throws Throwable {
    String string0 = NodeUtil.opToStr(103);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test672767() throws Throwable {
    String string0 = NodeUtil.opToStr(104);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test673768() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(105);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 105: FUNCTION
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test674769() throws Throwable {
    String string0 = NodeUtil.opToStr(106);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test675770() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 107: IMPORT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test676771() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(108);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 108: IF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test677772() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 109: ELSE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test678773() throws Throwable {
    String string0 = NodeUtil.opToStr(110);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test679774() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 111: CASE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test680775() throws Throwable {
    String string0 = NodeUtil.opToStr(112);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test681776() throws Throwable {
    String string0 = NodeUtil.opToStr(113);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test682777() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 114: DO
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test683778() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 115: FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test684779() throws Throwable {
    String string0 = NodeUtil.opToStr(116);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test685780() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 117: CONTINUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test686781() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 118: VAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test687782() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 119: WITH
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test688783() throws Throwable {
    String string0 = NodeUtil.opToStr(120);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test689784() throws Throwable {
    String string0 = NodeUtil.opToStr(121);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test690785() throws Throwable {
    String string0 = NodeUtil.opToStr(122);
    assertEquals(""void"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test691786() throws Throwable {
    String string0 = NodeUtil.opToStr((-2405));
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static void redeclareVarsInsideBranch(Node branch) {
    Collection<Node> vars = getVarsDeclaredInBranch(branch);
    if (vars.isEmpty()) {
        return;
    }
    Node parent = getAddingRoot(branch);
    for (Node nameNode : vars) {
        Node var = new Node(Token.VAR, Node.newString(Token.NAME, nameNode.getString()).copyInformationFrom(nameNode)).copyInformationFrom(nameNode);
        copyNameAnnotations(nameNode, var.getFirstChild());
        parent.addChildToFront(var);
    }
}","public void test692787() throws Throwable {
    Node node0 = Node.newString(""case expression doesn't match switch"", 1536, 1536);
    Node node1 = NodeUtil.newVarNode(""case expression doesn't match switch"", node0);
    Node node2 = new Node((-2082), 38, 24);
    Node node3 = new Node(97, node2, node1, 1, 76);
    // Undeclared exception!
    try {
        NodeUtil.redeclareVarsInsideBranch(node3);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Given a node tree, finds all the VAR declarations in that tree that are
 * not in an inner scope. Then adds a new VAR node at the top of the current
 * scope that redeclares them, if necessary.
 */"
"static void copyNameAnnotations(Node source, Node destination) {
    if (source.getBooleanProp(Node.IS_CONSTANT_NAME)) {
        destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }
}","public void test693788() throws Throwable {
    Node node0 = new Node(64);
    NodeUtil.copyNameAnnotations(node0, node0);
    assertEquals(17, Node.TYPE_PROP);
}","/**
 * Copy any annotations that follow a named value.
 * @param source
 * @param destination
 */"
"public static Node newFunctionNode(String name, List<Node> params, Node body, int lineno, int charno) {
    Node parameterParen = new Node(Token.LP, lineno, charno);
    for (Node param : params) {
        parameterParen.addChildToBack(param);
    }
    Node function = new Node(Token.FUNCTION, lineno, charno);
    function.addChildrenToBack(Node.newString(Token.NAME, name, lineno, charno));
    function.addChildToBack(parameterParen);
    function.addChildToBack(body);
    return function;
}","public void test694789() throws Throwable {
    Node node0 = Node.newString(100, ""2"");
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    linkedList0.addLast(node0);
    // Undeclared exception!
    try {
        NodeUtil.newFunctionNode(""2"", linkedList0, node0, 10, 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Creates function name(params_0, ..., params_n) { body }.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test695790() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""!1.J"", 118, 118);
    assertEquals(483446, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test695791() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""!1.J"", 118, 118);
    assertEquals(33, node0.getType());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test695792() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""!1.J"", 118, 118);
    assertTrue(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getType() {
    return type;
}","public void test696793() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""B&?r/.gcJFr+')AJ"", 800, (-959));
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(33, node0.getType());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test696794() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""B&?r/.gcJFr+')AJ"", 800, (-959));
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertTrue(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test696795() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""B&?r/.gcJFr+')AJ"", 800, (-959));
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals((-1), node1.getSourcePosition());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test696796() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""B&?r/.gcJFr+')AJ"", 800, (-959));
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertFalse(node1.hasChildren());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test696797() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""B&?r/.gcJFr+')AJ"", 800, (-959));
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals((-1), node0.getLineno());
}",""
"public static Node getRootOfQualifiedName(Node qName) {
    for (Node current = qName; true; current = current.getFirstChild()) {
        int type = current.getType();
        if (type == Token.NAME || type == Token.THIS) {
            return current;
        }
        Preconditions.checkState(type == Token.GETPROP);
    }
}","public void test697798() throws Throwable {
    Node node0 = new Node(82, 103, 103);
    // Undeclared exception!
    try {
        NodeUtil.getRootOfQualifiedName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Gets the root node of a qualified name. Must be either NAME or THIS.
 */"
"static Node newName(CodingConvention convention, String name, Node basisNode) {
    Node nameNode = Node.newString(Token.NAME, name);
    if (convention.isConstantKey(name)) {
        nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }
    nameNode.copyInformationFrom(basisNode);
    return nameNode;
}","public void test698799() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    // Undeclared exception!
    try {
        NodeUtil.newName(googleCodingConvention0, ""ERROR_FUNCTION_TYPE"", (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Creates a new node representing an *existing* name, copying over the source
 * location information from the basis node.
 *
 * @param name The name for the new NAME node.
 * @param basisNode The node that represents the name as currently found in
 *     the AST.
 *
 * @return The node created.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test699800() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName("".prototype"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test700801() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""Kpiw"");
    assertTrue(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test701802() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""true"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test702803() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".toV[|/Lse9bBNi|2"", 33, 160);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(135328, node0.getSourcePosition());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test702804() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, "".toV[|/Lse9bBNi|2"", 33, 160);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertTrue(node0.hasChildren());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test703805() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""eX'`"", 2805, 2805);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(11492085, node0.getSourcePosition());
}",""
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test703806() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""eX'`"", 2805, 2805);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test704807() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"static Node newVarNode(String name, Node value) {
    Node nodeName = Node.newString(Token.NAME, name);
    if (value != null) {
        Preconditions.checkState(value.getNext() == null);
        nodeName.addChildToBack(value);
        nodeName.copyInformationFrom(value);
    }
    Node var = new Node(Token.VAR, nodeName).copyInformationFrom(nodeName);
    return var;
}","public void test705808() throws Throwable {
    Node node0 = new Node(2119);
    Node node1 = Node.newNumber((-467.49), (-2), 15);
    Node node2 = new Node(54, node0, node1, node0, 405, 2);
    // Undeclared exception!
    try {
        NodeUtil.newVarNode(""il2XA_c+TPIY+"", node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Create a VAR node containing the given name and initial value expression.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test706809() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""1bARjaVIE"", 85, 93);
    int int0 = NodeUtil.getNameReferenceCount(node0, ""#cc[3bQ"");
    assertEquals(348253, node0.getSourcePosition());
}",""
"static int getNameReferenceCount(Node node, String name) {
    return getCount(node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());
}","public void test706810() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""1bARjaVIE"", 85, 93);
    int int0 = NodeUtil.getNameReferenceCount(node0, ""#cc[3bQ"");
    assertEquals(0, int0);
}","/**
 * Finds the number of times a simple name is referenced within the node tree.
 */"
"static boolean containsType(Node node, int type) {
    return containsType(node, type, Predicates.<Node>alwaysTrue());
}","public void test707811() throws Throwable {
    Node node0 = new Node(113, (-2175), 967);
    boolean boolean0 = NodeUtil.containsType(node0, 113);
    assertTrue(boolean0);
}","/**
 * @return true if n or any of its children are of the specified type
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test709814() throws Throwable {
    Node node0 = new Node(26);
    Node node1 = NodeUtil.newVarNode(""Z1<{#GlM"", node0);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
    assertEquals(0, node0.getChildCount());
}",""
"static boolean valueCheck(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return valueCheck(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return valueCheck(n.getFirstChild(), p) && valueCheck(n.getLastChild(), p);
        case Token.HOOK:
            return valueCheck(n.getFirstChild().getNext(), p) && valueCheck(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test710815() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""CGUL||Nl*k$5%z)h"");
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
    assertTrue(boolean0);
}","/**
 * Apply the supplied predicate against the potential
 * all possible result of the expression.
 */"
"static boolean containsFunction(Node n) {
    return containsType(n, Token.FUNCTION);
}","public void test713818() throws Throwable {
    Node node0 = Node.newString(""valueOf"", 1536, 1536);
    Node node1 = NodeUtil.newVarNode(""valueOf"", node0);
    boolean boolean0 = NodeUtil.containsFunction(node1);
    assertFalse(boolean0);
}","/**
 * Determines if the given node contains a function statement or function
 * expression.
 */"
"public int getType() {
    return type;
}","public void test713819() throws Throwable {
    Node node0 = Node.newString(""valueOf"", 1536, 1536);
    Node node1 = NodeUtil.newVarNode(""valueOf"", node0);
    boolean boolean0 = NodeUtil.containsFunction(node1);
    assertEquals(118, node1.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test713820() throws Throwable {
    Node node0 = Node.newString(""valueOf"", 1536, 1536);
    Node node1 = NodeUtil.newVarNode(""valueOf"", node0);
    boolean boolean0 = NodeUtil.containsFunction(node1);
    assertEquals(1536, node1.getLineno());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test713821() throws Throwable {
    Node node0 = Node.newString(""valueOf"", 1536, 1536);
    Node node1 = NodeUtil.newVarNode(""valueOf"", node0);
    boolean boolean0 = NodeUtil.containsFunction(node1);
    assertFalse(node0.hasChildren());
}",""
"static boolean isNameReferenced(Node node, String name) {
    return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());
}","public void test714822() throws Throwable {
    Node node0 = new Node((-1084));
    Node node1 = NodeUtil.newVarNode(""split"", node0);
    Node node2 = new Node(4096, node1);
    boolean boolean0 = NodeUtil.isNameReferenced(node2, ""split"");
    assertTrue(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test714823() throws Throwable {
    Node node0 = new Node((-1084));
    Node node1 = NodeUtil.newVarNode(""split"", node0);
    Node node2 = new Node(4096, node1);
    boolean boolean0 = NodeUtil.isNameReferenced(node2, ""split"");
    assertEquals(0, node0.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test714824() throws Throwable {
    Node node0 = new Node((-1084));
    Node node1 = NodeUtil.newVarNode(""split"", node0);
    Node node2 = new Node(4096, node1);
    boolean boolean0 = NodeUtil.isNameReferenced(node2, ""split"");
    assertEquals(118, node1.getType());
}",""
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test715825() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test716826() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, predicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static boolean hasFinally(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getChildCount() == 3;
}","public void test717827() throws Throwable {
    Node node0 = new Node(78);
    // Undeclared exception!
    try {
        NodeUtil.hasFinally(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether a TRY node has a finally block.
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getFirstChild().getNext();
}","public void test718828() throws Throwable {
    Node node0 = new Node(115);
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getFirstChild().getNext();
}","public void test719829() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test720830() throws Throwable {
    Node node0 = new Node(87);
    // Undeclared exception!
    try {
        NodeUtil.hasCatchHandler(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test721831() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""CGUL||Nl*k$5%z)h"");
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"public static Node getFunctionParameters(Node fnNode) {
    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]
    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
    return fnNode.getFirstChild().getNext();
}","public void test722832() throws Throwable {
    Node node0 = new Node((-5619));
    // Undeclared exception!
    try {
        NodeUtil.getFunctionParameters(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @param fnNode The function.
 * @return The Node containing the Function parameters.
 */"
"public int getType() {
    return type;
}","public void test723833() throws Throwable {
    Node node0 = new Node(1545, 1545, 1545);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""vWZ"", stack0, node0, (-1418), 89);
    assertEquals(105, node1.getType());
}",""
"public int getType() {
    return type;
}","public void test723834() throws Throwable {
    Node node0 = new Node(1545, 1545, 1545);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""vWZ"", stack0, node0, (-1418), 89);
    Node node2 = NodeUtil.getFunctionParameters(node1);
    assertEquals(83, node2.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test723835() throws Throwable {
    Node node0 = new Node(1545, 1545, 1545);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""vWZ"", stack0, node0, (-1418), 89);
    Node node2 = NodeUtil.getFunctionParameters(node1);
    assertEquals((-1), node1.getCharno());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test723836() throws Throwable {
    Node node0 = new Node(1545, 1545, 1545);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""vWZ"", stack0, node0, (-1418), 89);
    Node node2 = NodeUtil.getFunctionParameters(node1);
    assertFalse(node2.hasChildren());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test723837() throws Throwable {
    Node node0 = new Node(1545, 1545, 1545);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""vWZ"", stack0, node0, (-1418), 89);
    Node node2 = NodeUtil.getFunctionParameters(node1);
    assertEquals((-1), node2.getCharno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test724838() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""substr"", ""substr"");
    assertEquals(4096, node0.getSourcePosition());
}",""
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test725839() throws Throwable {
    Node node0 = new Node(74);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"public int getImplementedInterfaceCount() {
    if (info == null || info.implementedInterfaces == null) {
        return 0;
    }
    return info.implementedInterfaces.size();
}","public void test726840() throws Throwable {
    Node node0 = new Node(74);
    node0.addSuppression(""Kci"");
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
}","/**
 * Gets the number of interfaces specified by the {@code @implements}
 * annotation.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test727841() throws Throwable {
    Node node0 = new Node(41);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""ze{EzS+}"", stack0, node0, 38, 4095);
    assertEquals(3, node1.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test727842() throws Throwable {
    Node node0 = new Node(41);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""ze{EzS+}"", stack0, node0, 38, 4095);
    assertEquals(159743, node1.getSourcePosition());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test727843() throws Throwable {
    Node node0 = new Node(41);
    Stack<Node> stack0 = new Stack<Node>();
    Node node1 = NodeUtil.newFunctionNode(""ze{EzS+}"", stack0, node0, 38, 4095);
    NodeUtil.getInfoForNameNode(node0);
    assertFalse(node0.hasChildren());
}",""
"public int getType() {
    return type;
}","public void test728844() throws Throwable {
    Node node0 = Node.newString(""0*U"", 94, 94);
    Node node1 = NodeUtil.newVarNode(""0*U"", node0);
    assertEquals(118, node1.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test728845() throws Throwable {
    Node node0 = Node.newString(""0*U"", 94, 94);
    Node node1 = NodeUtil.newVarNode(""0*U"", node0);
    assertEquals(94, node1.getCharno());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test728846() throws Throwable {
    Node node0 = Node.newString(""0*U"", 94, 94);
    Node node1 = NodeUtil.newVarNode(""0*U"", node0);
    NodeUtil.getInfoForNameNode(node0);
    assertFalse(node0.hasChildren());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test728847() throws Throwable {
    Node node0 = Node.newString(""0*U"", 94, 94);
    Node node1 = NodeUtil.newVarNode(""0*U"", node0);
    NodeUtil.getInfoForNameNode(node0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public static JSDocInfo getFunctionJSDocInfo(Node n) {
    Preconditions.checkState(n.getType() == Token.FUNCTION);
    JSDocInfo fnInfo = n.getJSDocInfo();
    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {
        // Look for the info on other nodes.
        Node parent = n.getParent();
        if (parent.getType() == Token.ASSIGN) {
            // on ASSIGNs
            fnInfo = parent.getJSDocInfo();
        } else if (parent.getType() == Token.NAME) {
            // on var NAME = function() { ... };
            fnInfo = parent.getParent().getJSDocInfo();
        }
    }
    return fnInfo;
}","public void test729848() throws Throwable {
    Node node0 = new Node((-640));
    // Undeclared exception!
    try {
        NodeUtil.getFunctionJSDocInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Get the JSDocInfo for a function.
 */"
"public static JSDocInfo getFunctionJSDocInfo(Node n) {
    Preconditions.checkState(n.getType() == Token.FUNCTION);
    JSDocInfo fnInfo = n.getJSDocInfo();
    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {
        // Look for the info on other nodes.
        Node parent = n.getParent();
        if (parent.getType() == Token.ASSIGN) {
            // on ASSIGNs
            fnInfo = parent.getJSDocInfo();
        } else if (parent.getType() == Token.NAME) {
            // on var NAME = function() { ... };
            fnInfo = parent.getParent().getJSDocInfo();
        }
    }
    return fnInfo;
}","public void test730849() throws Throwable {
    Node node0 = new Node(105);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionJSDocInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Get the JSDocInfo for a function.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test731850() throws Throwable {
    Node node0 = new Node(105);
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""this."", list0, node0, 48, 4);
    assertEquals(3, node1.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test731851() throws Throwable {
    Node node0 = new Node(105);
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""this."", list0, node0, 48, 4);
    assertEquals(196612, node1.getSourcePosition());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test731852() throws Throwable {
    Node node0 = new Node(105);
    AstParallelizer astParallelizer0 = AstParallelizer.createNewFunctionLevelAstParallelizer(node0, false);
    List<Node> list0 = astParallelizer0.split();
    Node node1 = NodeUtil.newFunctionNode(""this."", list0, node0, 48, 4);
    NodeUtil.getFunctionJSDocInfo(node0);
    assertEquals(0, node0.getChildCount());
}",""
"public static String getSourceName(Node n) {
    String sourceName = null;
    while (sourceName == null && n != null) {
        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
        n = n.getParent();
    }
    return sourceName;
}","public void test732853() throws Throwable {
    Node node0 = new Node(2108);
    String string0 = NodeUtil.getSourceName(node0);
    assertNull(string0);
}","/**
 * @param n The node.
 * @return The source name property on the node or its ancestors.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test733854() throws Throwable {
    Node node0 = new Node(31, 31, 31);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test734855() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties"", (-1342), (-1342));
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"public int getType() {
    return type;
}","public void test734856() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessExternProperties"", (-1342), (-1342));
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertEquals(33, node0.getType());
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test735857() throws Throwable {
    Node node0 = new Node(34);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETPROP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test736858() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test737859() throws Throwable {
    Node node0 = new Node(36);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETELEM
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test738860() throws Throwable {
    Node node0 = new Node(42);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test739861() throws Throwable {
    Node node0 = new Node(45);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test740862() throws Throwable {
    Node node0 = new Node(48, 48, 48);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeBINDNAME 48
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test741863() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test742864() throws Throwable {
    Node node0 = new Node(53, 27591, 27591);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLOCAL_LOAD 27591
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test743865() throws Throwable {
    Node node0 = new Node(54, 54, 54);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGETVAR 54
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test744866() throws Throwable {
    Node node0 = new Node((byte) 57, 133, 133);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_INIT_KEYS 133
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test745867() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test746868() throws Throwable {
    Node node0 = new Node(64);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test747869() throws Throwable {
    Node node0 = new Node(65);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGET_REF
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test748870() throws Throwable {
    Node node0 = new Node(67, 67, 67);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEL_REF 67
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test749871() throws Throwable {
    Node node0 = new Node(73);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_MEMBER
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test750872() throws Throwable {
    Node node0 = new Node(74, 74, 74);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_MEMBER 74
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test751873() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSEMI 78
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test752874() throws Throwable {
    Node node0 = new Node(81);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLC
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test753875() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test754876() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test755877() throws Throwable {
    Node node0 = new Node(87);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test756878() throws Throwable {
    Node node0 = new Node(88);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test757879() throws Throwable {
    Node node0 = new Node(89);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test758880() throws Throwable {
    Node node0 = Node.newString(90, ""test"", 109, 109);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test759881() throws Throwable {
    Node node0 = new Node(91);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test760882() throws Throwable {
    Node node0 = Node.newString(93, ""3EF|WB+c#<&"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test761883() throws Throwable {
    Node node0 = new Node(94, 94, 94);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test762884() throws Throwable {
    Node node0 = new Node(95, 95, 425);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test763885() throws Throwable {
    Node node0 = new Node(96, 74, 96);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test764886() throws Throwable {
    Node node0 = new Node(97);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test765887() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test766888() throws Throwable {
    Node node0 = new Node(99);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCOLON
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test767889() throws Throwable {
    Node node0 = new Node(101, 118, 1227);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test768890() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test769891() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test770892() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test771893() throws Throwable {
    Node node0 = new Node(100, 100, 100);
    Node node1 = new Node(47);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test772894() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""\naent:"", 803, 803);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test772895() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""\naent:"", 803, 803);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
    assertEquals(3289891, node0.getSourcePosition());
}",""
"static Node getArgumentForCallOrNew(Node call, int index) {
    Preconditions.checkState(isCallOrNew(call));
    return getNthSibling(call.getFirstChild().getNext(), index);
}","public void test773896() throws Throwable {
    Node node0 = Node.newNumber(8233.0);
    Node node1 = new Node(41);
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node1;
    Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
    Node node3 = NodeUtil.getArgumentForCallOrNew(node2, 12);
    assertNull(node3);
}","/**
 * Given the new or call, this returns the nth
 * argument of the call or null if no such argument exists.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test773897() throws Throwable {
    Node node0 = Node.newNumber(8233.0);
    Node node1 = new Node(41);
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node1;
    Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
    Node node3 = NodeUtil.getArgumentForCallOrNew(node2, 12);
    assertEquals(2, node2.getChildCount());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test773898() throws Throwable {
    Node node0 = Node.newNumber(8233.0);
    Node node1 = new Node(41);
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node1;
    Node node2 = NodeUtil.newCallNode(node0, nodeArray0);
    Node node3 = NodeUtil.getArgumentForCallOrNew(node2, 12);
    assertTrue(node2.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
