{
  "test1114" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnStatementsAsLastResort(@Nullable Node functionBlock)",
    "methodName" : "inferReturnStatementsAsLastResort",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(\"\", charset0);\n    compiler0.compile(jSSourceFile1, jSSourceFile0, compilerOptions0);\n    Node node0 = compiler0.parseTestCode(\"// Input %num%\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, (String) null, (Scope) null);\n    functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);\n}",
    "testName" : "test1114"
  },
  "test2125" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2125() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"yeq\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"yeq\", compiler0, node0, \"yeq\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    Node node1 = new Node(42, 13, 15);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node1);\n}",
    "testName" : "test2125"
  },
  "test1215" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnStatementsAsLastResort(@Nullable Node functionBlock)",
    "methodName" : "inferReturnStatementsAsLastResort",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1215() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"!f^*Hk)N@gccgYO?]\");\n    JSSourceFile jSSourceFile1 = JSSourceFile.fromCode(\"!f^*Hk)N@gccgYO?]\", (String) null);\n    compiler0.compile(jSSourceFile1, jSSourceFile0, compilerOptions0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, (String) null, (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);\n    FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder1.inferReturnStatementsAsLastResort(node0);\n}",
    "testName" : "test1215"
  },
  "test2226" : {
    "methodSignature" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info)",
    "methodName" : "inferParameterTypes",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2226() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);\n}",
    "testName" : "test2226"
  },
  "test1013" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnStatementsAsLastResort(@Nullable Node functionBlock)",
    "methodName" : "inferReturnStatementsAsLastResort",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1013() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    Node node0 = compiler0.parseTestCode(\"\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, (String) null, (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);\n}",
    "testName" : "test1013"
  },
  "test2024" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2024() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"g=g.typedef\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"g=g.typedef\", compiler0, node0, \"g=g.typedef\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);\n}",
    "testName" : "test2024"
  },
  "test3036" : {
    "methodSignature" : "static boolean isFunctionTypeDeclaration(JSDocInfo info)",
    "methodName" : "isFunctionTypeDeclaration",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3036() throws Throwable {\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);\n}",
    "testName" : "test3036"
  },
  "test011" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"rsT*.f:u}P7j\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"rsT*.f:u}P7j\", compiler0, node0, \"rsT*.f:u}P7j\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);\n}",
    "testName" : "test011"
  },
  "test034" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_THIS_TYPE_NON_OBJECT\", \"JSC_THIS_TYPE_NON_OBJECT\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_THIS_TYPE_NON_OBJECT\", compiler0, node0, \"JSC_THIS_TYPE_NON_OBJECT\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    FunctionType functionType1 = functionTypeBuilder1.buildAndRegister();\n    functionType1.hasCachedValues();\n}",
    "testName" : "test034"
  },
  "test1518" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1518() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    functionTypeBuilder0.inferInheritance(jSDocInfo0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test1518"
  },
  "test1619" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1619() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\\\"h\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\\\"h\", compiler0, node0, \"\\\"h\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);\n}",
    "testName" : "test1619"
  },
  "test1316" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnStatementsAsLastResort(@Nullable Node functionBlock)",
    "methodName" : "inferReturnStatementsAsLastResort",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1316() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);\n    Node node0 = compiler0.parseSyntheticCode(\"&}(_mPH[8]wQ9>YZVE*\", \"0f?*Hk)N@gccgYO?]\");\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(\"\", charset0);\n    compiler0.compile(jSSourceFile1, jSSourceFile0, compilerOptions0);\n    node0.addChildToBack(node0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, (String) null, (Scope) null);\n    // Undeclared exception!\n    functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);\n}",
    "testName" : "test1316"
  },
  "test2327" : {
    "methodSignature" : "FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent, @Nullable JSDocInfo info)",
    "methodName" : "inferParameterTypes",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2327() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);\n}",
    "testName" : "test2327"
  },
  "test2429" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2429() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"2\", \"2\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"2\", compiler0, node0, \"2\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionType0.hasCachedValues();\n}",
    "testName" : "test2429"
  },
  "test1417" : {
    "methodSignature" : "FunctionTypeBuilder inferInheritance(@Nullable JSDocInfo info)",
    "methodName" : "inferInheritance",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1417() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);\n}",
    "testName" : "test1417"
  },
  "test2428" : {
    "methodSignature" : "public boolean isReturnTypeInferred()",
    "methodName" : "isReturnTypeInferred",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2428() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"2\", \"2\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"2\", compiler0, node0, \"2\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionType0.isReturnTypeInferred();\n}",
    "testName" : "test2428"
  },
  "test046" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSType[] jSTypeArray0 = new JSType[4];\n    JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;\n    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);\n    jSTypeArray0[0] = (JSType) objectType0;\n    jSTypeArray0[1] = (JSType) objectType0;\n    EnumType enumType0 = jSTypeRegistry0.createEnumType(\"Not declared as a constructor\", jSTypeArray0[0]);\n    EnumElementType enumElementType0 = enumType0.getElementsType();\n    FunctionType functionType0 = enumElementType0.getConstructor();\n    jSTypeArray0[2] = (JSType) functionType0;\n    jSTypeArray0[3] = (JSType) enumElementType0;\n    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"Named type with empty name component\", compiler0, node0, \"Not declared as a constructor\", (Scope) null);\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test046"
  },
  "test068" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_INVLID_MARKER_UAGE\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_INVLID_MARKER_UAGE\", compiler0, node0, \"JSC_INVLID_MARKER_UAGE\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    functionType0.hasCachedValues();\n}",
    "testName" : "test068"
  },
  "test069" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_INVLID_MARKER_UAGE\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_INVLID_MARKER_UAGE\", compiler0, node0, \"JSC_INVLID_MARKER_UAGE\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSType[] jSTypeArray0 = new JSType[1];\n    jSTypeArray0[0] = (JSType) functionType0;\n    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);\n    functionTypeBuilder1.inferFromOverriddenFunction(functionType0, node1);\n    compiler0.getWarningCount();\n}",
    "testName" : "test069"
  },
  "test2632" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2632() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_THIS_TYPE_NON_OBJECT\", \"JSC_THIS_TYPE_NON_OBJECT\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_THIS_TYPE_NON_OBJECT\", compiler0, node0, \"JSC_THIS_TYPE_NON_OBJECT\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    JSType[] jSTypeArray0 = new JSType[3];\n    jSTypeArray0[0] = (JSType) functionType0;\n    jSTypeArray0[1] = (JSType) functionType0;\n    jSTypeArray0[2] = (JSType) functionType0;\n    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);\n    functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2632"
  },
  "test1720" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1720() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"prefix must start with one of: \");\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();\n    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();\n    Scope scope0 = new Scope(node0, objectType0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, \"Not declared as a type name\", scope0);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, objectType0);\n}",
    "testName" : "test1720"
  },
  "test2733" : {
    "methodSignature" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
    "methodName" : "inferTemplateTypeName",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2733() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);\n}",
    "testName" : "test2733"
  },
  "test2430" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2430() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"2\", \"2\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"2\", compiler0, node0, \"2\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSType[] jSTypeArray0 = new JSType[1];\n    jSTypeArray0[0] = (JSType) functionType0;\n    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);\n    functionTypeBuilder1.inferParameterTypes(node1, (JSDocInfo) null);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2430"
  },
  "test2531" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_THIS_TYPE_NON_OBJECT\", \"JSC_THIS_TYPE_NON_OBJECT\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_THIS_TYPE_NON_OBJECT\", compiler0, node0, \"JSC_THIS_TYPE_NON_OBJECT\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    JSType[] jSTypeArray0 = new JSType[3];\n    jSTypeArray0[0] = (JSType) functionType0;\n    jSTypeArray0[1] = (JSType) functionType0;\n    jSTypeArray0[2] = (JSType) functionType0;\n    Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);\n    functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);\n    functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2531"
  },
  "test000" : {
    "methodSignature" : "FunctionTypeBuilder setSourceNode(@Nullable Node sourceNode)",
    "methodName" : "setSourceNode",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"gA+h-s/yF&[<t/N_@\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"gA+h-s/yF&[<t/N_@\", compiler0, node0, \"gA+h-s/yF&[<t/N_@\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public boolean isReturnTypeInferred()",
    "methodName" : "isReturnTypeInferred",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();\n    functionTypeBuilder1.inferFromOverriddenFunction(functionType0, (Node) null);\n    functionType0.isReturnTypeInferred();\n}",
    "testName" : "test022"
  },
  "test0912" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnStatementsAsLastResort(@Nullable Node functionBlock)",
    "methodName" : "inferReturnStatementsAsLastResort",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0912() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"gooLg.typedwef\", \"gooLg.typedwef\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"gooLg.typedwef\", compiler0, node0, \"gooLg.typedwef\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort((Node) null);\n}",
    "testName" : "test0912"
  },
  "test023" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);\n    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();\n    functionTypeBuilder1.inferFromOverriddenFunction(functionType0, (Node) null);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test023"
  },
  "test0710" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
    "methodName" : "inferReturnType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0710() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);\n}",
    "testName" : "test0710"
  },
  "test1821" : {
    "methodSignature" : "public boolean isReturnTypeInferred()",
    "methodName" : "isReturnTypeInferred",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"rsT*.f:u}P7j\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"rsT*.f:u}P7j\", compiler0, node0, \"rsT*.f:u}P7j\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);\n    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();\n    functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);\n    functionType0.isReturnTypeInferred();\n}",
    "testName" : "test1821"
  },
  "test2834" : {
    "methodSignature" : "FunctionTypeBuilder inferTemplateTypeName(@Nullable JSDocInfo info)",
    "methodName" : "inferTemplateTypeName",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2834() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"prefix must start with one of: \");\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();\n    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();\n    Scope scope0 = new Scope(node0, objectType0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, \"Not declared as a type name\", scope0);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);\n}",
    "testName" : "test2834"
  },
  "test1822" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1822() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"rsT*.f:u}P7j\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"rsT*.f:u}P7j\", compiler0, node0, \"rsT*.f:u}P7j\", (Scope) null);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);\n    FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();\n    functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test1822"
  },
  "test0811" : {
    "methodSignature" : "FunctionTypeBuilder inferReturnType(@Nullable JSDocInfo info)",
    "methodName" : "inferReturnType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0811() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"0\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"0\", compiler0, node0, \"0\", (Scope) null);\n    JSDocInfo jSDocInfo0 = new JSDocInfo();\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);\n}",
    "testName" : "test0811"
  },
  "test2935" : {
    "methodSignature" : "FunctionType buildAndRegister()",
    "methodName" : "buildAndRegister",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2935() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Cy9eq]\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"Cy9eq]\", compiler0, node0, \"Cy9eq]\", (Scope) null);\n    functionTypeBuilder0.buildAndRegister();\n}",
    "testName" : "test2935"
  },
  "test1923" : {
    "methodSignature" : "FunctionTypeBuilder inferThisType(JSDocInfo info, @Nullable Node owner)",
    "methodName" : "inferThisType",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1923() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"XD+veW*l#=w[qQ\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"XD+veW*l#=w[qQ\", compiler0, node0, \"XD+veW*l#=w[qQ\", (Scope) null);\n    functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);\n}",
    "testName" : "test1923"
  },
  "test035" : {
    "methodSignature" : "public int getMaxArguments()",
    "methodName" : "getMaxArguments",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"JSC_THIS_TYPE_NON_OBJECT\", \"JSC_THIS_TYPE_NON_OBJECT\");\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"JSC_THIS_TYPE_NON_OBJECT\", compiler0, node0, \"JSC_THIS_TYPE_NON_OBJECT\", (Scope) null);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);\n    FunctionType functionType1 = functionTypeBuilder1.buildAndRegister();\n    functionType1.getMaxArguments();\n}",
    "testName" : "test035"
  },
  "test057" : {
    "methodSignature" : "FunctionTypeBuilder inferFromOverriddenFunction(@Nullable FunctionType oldType, @Nullable Node paramsParent)",
    "methodName" : "inferFromOverriddenFunction",
    "className" : "com.google.javascript.jscomp.FunctionTypeBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"prefix must start with one of: \");\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);\n    Node node2 = new Node(0, node0, node1);\n    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();\n    Scope scope0 = new Scope(node1, objectType0);\n    FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(\"\", compiler0, node0, \"Not declared as a type name\", scope0);\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (Node) null);\n    functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node2);\n}",
    "testName" : "test057"
  }
}