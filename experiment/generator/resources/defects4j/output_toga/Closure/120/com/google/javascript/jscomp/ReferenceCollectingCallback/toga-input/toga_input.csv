focal_method,test_prefix,docstring
"public String getIdName() {
    return id;
}","public void test011() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""H~NO3k)]2"");
    CompilerInput compilerInput0 = new CompilerInput(syntheticAst0);
    ReferenceCollectingCallback.Reference referenceCollectingCallback_Reference0 = ReferenceCollectingCallback.Reference.createRefForTest(compilerInput0);
    InputId inputId0 = referenceCollectingCallback_Reference0.getInputId();
    assertEquals(""H~NO3k)]2"", inputId0.getIdName());
}",""
"@Override
public void hotSwapScript(Node scriptRoot, Node originalRoot) {
    NodeTraversal.traverse(compiler, scriptRoot, this);
}","public void test1313() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    Node node0 = new Node(4);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.hotSwapScript(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Same as process but only runs on a part of AST associated to one script.
 */"
"@Override
public Scope getScope(Var var) {
    return var.scope;
}","public void test1414() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.getScope((Scope.Var) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.ReferenceCollectingCallback"", e);
    }
}",""
"@Override
public Iterable<Var> getAllSymbols() {
    return referenceMap.keySet();
}","public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    Iterable<Scope.Var> iterable0 = referenceCollectingCallback0.getAllSymbols();
    assertNotNull(iterable0);
}","/**
 * Gets the variables that were referenced in this callback.
 */"
"@Override
public ReferenceCollection getReferences(Var v) {
    return referenceMap.get(v);
}","public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
    ReferenceCollectingCallback.ReferenceCollection referenceCollectingCallback_ReferenceCollection0 = referenceCollectingCallback0.getReferences((Scope.Var) null);
    assertNull(referenceCollectingCallback_ReferenceCollection0);
}","/**
 * Gets the reference collection for the given variable.
 */"
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), this);
}","public void test1717() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.process((Node) null, (Node) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Convenience method for running this pass over a tree with this
 * class as a callback.
 */"
"@Override
public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.isName()) {
        Var v;
        if (n.getString().equals(""arguments"")) {
            v = t.getScope().getArgumentsVar();
        } else {
            v = t.getScope().getVar(n.getString());
        }
        if (v != null && varFilter.apply(v)) {
            addReference(v, new Reference(n, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test1919() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
    Node node0 = new Node(119);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit((NodeTraversal) null, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"@Override
public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test2020() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    Node node0 = Node.newString(115, "":~]b"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"@Override
public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.isName()) {
        Var v;
        if (n.getString().equals(""arguments"")) {
            v = t.getScope().getArgumentsVar();
        } else {
            v = t.getScope().getVar(n.getString());
        }
        if (v != null && varFilter.apply(v)) {
            addReference(v, new Reference(n, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test2121() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    Node node0 = new Node(77);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, (ScopeCreator) null);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"@Override
public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test2222() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    Predicate<Scope.Var> predicate0 = (Predicate<Scope.Var>) mock(Predicate.class, new ViolatedAssumptionAnswer());
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0, predicate0);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0, syntacticScopeCreator0);
    Node node0 = Node.newString(98, ""arguments"");
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"@Override
public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.isName()) {
        Var v;
        if (n.getString().equals(""arguments"")) {
            v = t.getScope().getArgumentsVar();
        } else {
            v = t.getScope().getVar(n.getString());
        }
        if (v != null && varFilter.apply(v)) {
            addReference(v, new Reference(n, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test2323() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    Node node0 = new Node(101);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"@Override
public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.isName()) {
        Var v;
        if (n.getString().equals(""arguments"")) {
            v = t.getScope().getArgumentsVar();
        } else {
            v = t.getScope().getVar(n.getString());
        }
        if (v != null && varFilter.apply(v)) {
            addReference(v, new Reference(n, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test2424() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
    Node node0 = new Node(119);
    Node node1 = new Node(108);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit((NodeTraversal) null, node0, node1);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"@Override
public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.isName()) {
        Var v;
        if (n.getString().equals(""arguments"")) {
            v = t.getScope().getArgumentsVar();
        } else {
            v = t.getScope().getVar(n.getString());
        }
        if (v != null && varFilter.apply(v)) {
            addReference(v, new Reference(n, t, blockStack.peek()));
        }
    }
    if (isBlockBoundary(n, parent)) {
        blockStack.pop();
    }
}","public void test2525() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    Node node0 = Node.newString(113, """", 113, 113);
    // Undeclared exception!
    try {
        referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayDeque"", e);
    }
}","/**
 * For each node, update the block stack and reference collection
 * as appropriate.
 */"
"@Override
public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {
    // If node is a new basic block, put on basic block stack
    if (isBlockBoundary(n, parent)) {
        blockStack.push(new BasicBlock(blockStack.peek(), n));
    }
    return true;
}","public void test2626() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);
    Node node0 = Node.newString(114, "":~]b"");
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    boolean boolean0 = referenceCollectingCallback0.shouldTraverse(nodeTraversal0, node0, node0);
    assertTrue(boolean0);
}","/**
 * Updates block stack.
 */"
"public boolean isCatch() {
    return this.getType() == Token.CATCH;
}","public void test2727() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, (ReferenceCollectingCallback.Behavior) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);
    Node node0 = new Node(74);
    referenceCollectingCallback0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.isCatch());
}",""
