{
  "test1212" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    linkedList0.addFirst(\"Expected module wrapperCto have <name>:<wrapper> format: \");\n    AbstractCommandLineRunner.createJsModules(linkedList0, linkedList0);\n}",
    "testName" : "test1212"
  },
  "test2324" : {
    "methodSignature" : "String expandManifest(JSModule forModule)",
    "methodName" : "expandManifest",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2324() throws Throwable {\n    String string0 = \"@?Rci3\\\\uD;yo#tLR's\";\n    JSModule jSModule0 = new JSModule(string0);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = string0;\n    stringArray0[1] = \"required \\\"{0\\\" namesace not provided yet\";\n    stringArray0[2] = \"required \\\"{0\\\" namesace not provided yet\";\n    stringArray0[3] = string0;\n    stringArray0[4] = \"required \\\"{0\\\" namesace not provided yet\";\n    stringArray0[5] = \"required \\\"{0\\\" namesace not provided yet\";\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    String string1 = commandLineRunner0.expandManifest(jSModule0);\n}",
    "testName" : "test2324"
  },
  "test1313" : {
    "methodSignature" : "static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException",
    "methodName" : "parseModuleWrappers",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    AbstractCommandLineRunner.parseModuleWrappers((List<String>) null, jSModuleArray0);\n}",
    "testName" : "test1313"
  },
  "test2425" : {
    "methodSignature" : "static void createDefineReplacements(List<String> definitions, CompilerOptions options)",
    "methodName" : "createDefineReplacements",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;\n    AbstractCommandLineRunner.createDefineReplacements(list0, (CompilerOptions) null);\n}",
    "testName" : "test2425"
  },
  "test1010" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    linkedList0.addLast(\"Expected module wrapperCto have <name>:<wrapper> fdrmat: \");\n    AbstractCommandLineRunner.createJsModules(linkedList0, (List<String>) null);\n}",
    "testName" : "test1010"
  },
  "test2122" : {
    "methodSignature" : "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException",
    "methodName" : "processResults",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Logger logger0 = Logger.getLogger(\"\");\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JSModule[] jSModuleArray0 = new JSModule[3];\n    int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test2122"
  },
  "test1111" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;\n    AbstractCommandLineRunner.createJsModules(list0, list0);\n}",
    "testName" : "test1111"
  },
  "test2223" : {
    "methodSignature" : "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException",
    "methodName" : "processResults",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    String[] stringArray0 = new String[0];\n    Logger logger0 = Logger.getAnonymousLogger();\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Result result0 = compiler0.getResult();\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    commandLineRunner0.processResults(result0, (JSModule[]) null, compilerOptions0);\n}",
    "testName" : "test2223"
  },
  "test011" : {
    "methodSignature" : "static void createDefineReplacements(List<String> definitions, CompilerOptions options)",
    "methodName" : "createDefineReplacements",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();\n    JSModule jSModule0 = new JSModule(\"\");\n    List<String> list0 = jSModule0.getProvides();\n    AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public static void main(String[] args)",
    "methodName" : "main",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner.main(stringArray0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    linkedList0.addLast(\"flFa76rE:'%%\");\n    AbstractCommandLineRunner.createJsModules(linkedList0, linkedList0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "void exit(RunTimeStats runTimeStats, Throwable error)",
    "methodName" : "exit",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    AbstractCommandLineRunner.RunTimeStats abstractCommandLineRunner_RunTimeStats0 = commandLineRunner0.new RunTimeStats();\n    commandLineRunner0.exit(abstractCommandLineRunner_RunTimeStats0, (Throwable) null);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    AbstractCommandLineRunner.createJsModules(linkedList0, linkedList0);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException",
    "methodName" : "parseModuleWrappers",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    LinkedList<String> linkedList0 = new LinkedList<String>();\n    linkedList0.addLast(\"Expected module wrapperCto have <name>:<wrapper> fdrmat: \");\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    AbstractCommandLineRunner.parseModuleWrappers(linkedList0, jSModuleArray0);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException",
    "methodName" : "parseModuleWrappers",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException",
    "methodName" : "processResults",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"^2[L9\";\n    stringArray0[1] = \"\";\n    stringArray0[2] = \"lWwOf%hEJ=N7]!\";\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Logger logger0 = Logger.getAnonymousLogger();\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Result result0 = compiler0.getResult();\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException",
    "methodName" : "processResults",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Logger logger0 = Logger.getAnonymousLogger();\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Result result0 = compiler0.getResult();\n    JSModule[] jSModuleArray0 = new JSModule[1];\n    commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test1515"
  },
  "test000" : {
    "methodSignature" : "protected Compiler createCompiler()",
    "methodName" : "createCompiler",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Compiler compiler0 = commandLineRunner0.createCompiler();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "final protected A getCompiler()",
    "methodName" : "getCompiler",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Compiler compiler0 = commandLineRunner0.getCompiler();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "final protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException",
    "methodName" : "setRunOptions",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    commandLineRunner0.setRunOptions(compilerOptions0);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException",
    "methodName" : "createJsModules",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    AbstractCommandLineRunner.createJsModules((List<String>) null, (List<String>) null);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "static void writeOutput(Appendable out, Compiler compiler, String code, String wrapper, String codePlaceholder) throws IOException",
    "methodName" : "writeOutput",
    "className" : "com.google.javascript.jscomp.AbstractCommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    PipedWriter pipedWriter0 = new PipedWriter();\n    Compiler compiler0 = new Compiler();\n    AbstractCommandLineRunner.writeOutput(pipedWriter0, compiler0, \"/dev/null\", \"N\", \"/dev/null\");\n}",
    "testName" : "test1818"
  }
}