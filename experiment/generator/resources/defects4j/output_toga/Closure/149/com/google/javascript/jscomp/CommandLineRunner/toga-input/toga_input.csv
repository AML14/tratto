focal_method,test_prefix,docstring
"public static void main(String[] args) {
    CommandLineRunner runner = new CommandLineRunner(args);
    if (runner.shouldRunCompiler()) {
        runner.run();
    } else {
        System.exit(-1);
    }
}","public void test00() throws Throwable {
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
    } catch (System.SystemExitException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.System"", e);
    }
}","/**
 * Runs the Compiler. Exits cleanly in the event of an error.
 */"
"public boolean shouldRunCompiler() {
    return this.isConfigValid;
}","public void test11() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    commandLineRunner0.createCompiler();
    assertTrue(commandLineRunner0.shouldRunCompiler());
}","/**
 * @return Whether the configuration is valid.
 */"
"public boolean shouldRunCompiler() {
    return this.isConfigValid;
}","public void test22() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);
    assertTrue(commandLineRunner0.shouldRunCompiler());
}","/**
 * @return Whether the configuration is valid.
 */"
"public static void main(String[] args) {
    CommandLineRunner runner = new CommandLineRunner(args);
    if (runner.shouldRunCompiler()) {
        runner.run();
    } else {
        System.exit(-1);
    }
}","public void test33() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""AZm[miAtF$["";
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: System.SystemExitException"");
    } catch (System.SystemExitException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.System"", e);
    }
}","/**
 * Runs the Compiler. Exits cleanly in the event of an error.
 */"
"public static void main(String[] args) {
    CommandLineRunner runner = new CommandLineRunner(args);
    if (runner.shouldRunCompiler()) {
        runner.run();
    } else {
        System.exit(-1);
    }
}","public void test44() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""--A="";
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No match found
        //
        verifyException(""java.util.regex.Matcher"", e);
    }
}","/**
 * Runs the Compiler. Exits cleanly in the event of an error.
 */"
"@Override
protected CompilerOptions createOptions() {
    CompilerOptions options = new CompilerOptions();
    options.setCodingConvention(new ClosureCodingConvention());
    CompilationLevel level = flags.compilation_level;
    level.setOptionsForCompilationLevel(options);
    if (flags.debug) {
        level.setDebugOptionsForCompilationLevel(options);
    }
    WarningLevel wLevel = flags.warning_level;
    wLevel.setOptionsForWarningLevel(options);
    for (FormattingOption formattingOption : flags.formatting) {
        formattingOption.applyToOptions(options);
    }
    options.closurePass = flags.process_closure_primitives;
    initOptionsFromFlags(options);
    return options;
}","public void test55() throws Throwable {
    String[] stringArray0 = new String[0];
    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
    assertFalse(compilerOptions0.generatePseudoNames);
}",""
