focal_method,test_prefix,docstring
"public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options) {
    return compile(new JSSourceFile[] { extern }, modules, options);
}","public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
    JSModule[] jSModuleArray0 = new JSModule[2];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public String toSource(final JSModule module) {
    return runInCompilerThread(new Callable<String>() {

        public String call() throws Exception {
            List<CompilerInput> inputs = module.getInputs();
            int numInputs = inputs.size();
            if (numInputs == 0) {
                return """";
            }
            CodeBuilder cb = new CodeBuilder();
            for (int i = 0; i < numInputs; i++) {
                Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                if (scriptNode == null) {
                    throw new IllegalArgumentException(""Bad module: "" + module.getName());
                }
                toSource(cb, i, scriptNode);
            }
            return cb.toString();
        }
    });
}","public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""reduce"");
    // Undeclared exception!
    try {
        compiler0.toSource(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Converts the parse tree for a module back to js code.
 */"
"public String[] toSourceArray() {
    return runInCompilerThread(new Callable<String[]>() {

        public String[] call() throws Exception {
            Tracer tracer = newTracer(""toSourceArray"");
            try {
                int numInputs = inputs.size();
                String[] sources = new String[numInputs];
                CodeBuilder cb = new CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            } finally {
                stopTracer(tracer, ""toSourceArray"");
            }
        }
    });
}","public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Converts the parse tree for each input back to js code.
 */"
"//------------------------------------------------------------------------
// Convert back to source code
//------------------------------------------------------------------------
/**
 * Converts the main parse tree back to js code.
 */
public String toSource() {
    return runInCompilerThread(new Callable<String>() {

        public String call() throws Exception {
            Tracer tracer = newTracer(""toSource"");
            try {
                CodeBuilder cb = new CodeBuilder();
                if (jsRoot != null) {
                    int i = 0;
                    for (Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                        toSource(cb, i++, scriptNode);
                    }
                }
                return cb.toString();
            } finally {
                stopTracer(tracer, ""toSource"");
            }
        }
    });
}","public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public String[] toSourceArray(final JSModule module) {
    return runInCompilerThread(new Callable<String[]>() {

        public String[] call() throws Exception {
            List<CompilerInput> inputs = module.getInputs();
            int numInputs = inputs.size();
            if (numInputs == 0) {
                return new String[0];
            }
            String[] sources = new String[numInputs];
            CodeBuilder cb = new CodeBuilder();
            for (int i = 0; i < numInputs; i++) {
                Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                if (scriptNode == null) {
                    throw new IllegalArgumentException(""Bad module input: "" + inputs.get(i).getName());
                }
                cb.reset();
                toSource(cb, i, scriptNode);
                sources[i] = cb.toString();
            }
            return sources;
        }
    });
}","public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    // Undeclared exception!
    try {
        compiler0.toSourceArray(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Converts the parse tree for each input in a module back to js code.
 */"
"void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {
    logger.info(""Strip code"");
    startPass(""stripCode"");
    StripCode r = new StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
    process(r);
    endPass();
}","public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.aliasableStrings, compilerOptions0.stripTypes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Strips code for smaller compiled code. This is useful for removing debug
 * statements to prevent leaking them publicly.
 */"
"public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options) {
    initModules(Lists.<JSSourceFile>newArrayList(externs), Lists.<JSModule>newArrayList(modules), options);
}","public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule[] jSModuleArray0 = new JSModule[1];
    // Undeclared exception!
    try {
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, (CompilerOptions) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Initializes the instance state needed for a compile job if the sources
 * are in modules.
 */"
"@VisibleForTesting
void resetUniqueNameId() {
    uniqueNameId = 0;
}","public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.resetUniqueNameId();
}","/**
 * Resets the unique name id counter
 */"
"//------------------------------------------------------------------------
// Optimizations
//------------------------------------------------------------------------
public void optimize() {
    // Ideally, this pass should be the first pass run, however:
    // 1) VariableReferenceCheck reports unexpected warnings if Normalize
    // is done first.
    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on
    // unmodified local names.
    normalize();
    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);
    if (options.devMode == DevMode.EVERY_PASS) {
        phaseOptimizer.setSanityCheck(sanityCheck);
    }
    phaseOptimizer.consume(getPassConfig().getOptimizations());
    phaseOptimizer.process(externsRoot, jsRoot);
    if (hasErrors()) {
        return;
    }
}","public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.startPass((String) null);
    // Undeclared exception!
    try {
        compiler0.optimize();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"@Override
String toSource(Node n) {
    initCompilerOptionsIfTesting();
    return toSource(n, null);
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(2892, """");
    // Undeclared exception!
    try {
        compiler0.toSource(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 2892
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Generates JavaScript source code for an AST, doesn't generate source
 * map info.
 */"
"@Override
CssRenamingMap getCssRenamingMap() {
    return options.cssRenamingMap;
}","public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
boolean hasRegExpGlobalReferences() {
    return hasRegExpGlobalReferences;
}","public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",""
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test1313() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""1hQ=s\""wXj][Vj0F"", ""1hQ=s\""wXj][Vj0F"");
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public void setState(IntermediateState state) {
    externsRoot = state.externsRoot;
    jsRoot = state.jsRoot;
    externs = state.externs;
    inputs = state.inputs;
    modules = state.modules;
    passes = createPassConfigInternal();
    getPassConfig().setIntermediateState(state.passConfigState);
    typeRegistry = state.typeRegistry;
    normalized = state.normalized;
}","public void test1414() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
    compiler0.setState(compiler_IntermediateState0);
}","/**
 * Sets the internal state to the capture given.  Note that this assumes that
 * the input files are already set up.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""SdLNj"");
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public void disableThreads() {
    useThreads = false;
}","public void test1717() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.disableThreads();
}","/**
 * Disable threads. This is for clients that run on AppEngine and
 * don't have threads.
 */"
"@Override
ScopeCreator getScopeCreator() {
    return getPassConfig().getScopeCreator();
}","public void test1818() throws Throwable {
    Compiler compiler0 = new Compiler();
    ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
    assertNull(scopeCreator0);
}",""
"@Override
List<CompilerInput> getInputsInOrder() {
    return Collections.<CompilerInput>unmodifiableList(inputs);
}","public void test1919() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getInputsInOrder();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",""
"public void rebuildInputsFromModules() {
    inputs = getAllInputsFromModules(modules);
    initInputsByNameMap();
}","public void test2020() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Rebuilds the internal list of inputs by iterating over all modules.
 * This is necessary if inputs have been added to or removed from a module
 * after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call.
 */"
"boolean precheck() {
    return true;
}","public void test2121() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.precheck();
    assertTrue(boolean0);
}","/**
 * Carry out any special checks or procedures that need to be done before
 * proceeding with rest of the compilation process.
 *
 * @return true, to continue with compilation
 */"
"ControlFlowGraph<Node> computeCFG() {
    logger.info(""Computing Control Flow Graph"");
    Tracer tracer = newTracer(""computeCFG"");
    ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);
    process(cfa);
    stopTracer(tracer, ""computeCFG"");
    return cfa.getCfg();
}","public void test2222() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Control Flow Analysis.
 */"
"@Override
boolean isNormalized() {
    return normalized;
}","public void test2323() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.isNormalized();
    assertFalse(boolean0);
}",""
"VariableMap getPropertyMap() {
    return getPassConfig().getIntermediateState().propertyMap;
}","public void test2424() throws Throwable {
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",""
"@Override
Node parseSyntheticCode(String js) {
    CompilerInput input = new CompilerInput(JSSourceFile.fromCode("" [synthetic] "", js));
    inputsByName.put(input.getName(), input);
    return input.getAstRoot(this);
}","public void test2525() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode(""#dHNj"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public void processDefines() {
    (new DefaultPassConfig(options)).processDefines.create(this).process(externsRoot, jsRoot);
}","public void test2626() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}","/**
 * Reprocesses the current defines over the AST.  This is used by GwtCompiler
 * to generate N outputs for different targets from the same (checked) AST.
 * For each target, we apply the target-specific defines by calling
 * {@code processDefines} and then {@code optimize} to optimize the AST
 * specifically for that target.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test2727() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.skipAllPasses = true;
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    compiler0.optimize();
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"@Override
void setCssRenamingMap(CssRenamingMap map) {
    options.cssRenamingMap = map;
}","public void test2828() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test2929() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Gets the number of warnings.
 */"
"VariableMap getVariableMap() {
    return getPassConfig().getIntermediateState().variableMap;
}","public void test3030() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",""
"FunctionInformationMap getFunctionalInformationMap() {
    return functionInformationMap;
}","public void test3131() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",""
"public void parse() {
    parseInputs();
}","public void test3232() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parse();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
Supplier<String> getUniqueNameIdSupplier() {
    final Compiler self = this;
    return new Supplier<String>() {

        public String get() {
            return String.valueOf(self.nextUniqueNameId());
        }
    };
}","public void test3333() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",""
"void recordFunctionInformation() {
    logger.info(""Recording function information"");
    startPass(""recordFunctionInformation"");
    RecordFunctionInformation recordFunctionInfoPass = new RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
    process(recordFunctionInfoPass);
    functionInformationMap = recordFunctionInfoPass.getMap();
    endPass();
}","public void test3434() throws Throwable {
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"RecordFunctionInformation(Compiler compiler, FunctionNames functionNames) {
    this.compiler = compiler;
    this.moduleGraph = compiler.getModuleGraph();
    this.functionNames = functionNames;
    this.mapBuilder = FunctionInformationMap.newBuilder();
}","public void test3535() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionNames functionNames0 = new FunctionNames(compiler0);
    RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, functionNames0);
}","/**
 * Creates a record function information compiler pass.
 *
 * @param compiler       The JSCompiler
 * @param functionNames  Assigned function identifiers.
 */"
"public SourceMap getSourceMap() {
    return sourceMap;
}","public void test3636() throws Throwable {
    Logger logger0 = Logger.getGlobal();
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test3737() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public Node getRoot() {
    return externAndJsRoot;
}","public void test3838() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}","/**
 * Returns the root node of the AST, which includes both externs and source.
 */"
"@VisibleForTesting
List<CompilerInput> getInputsForTesting() {
    return inputs;
}","public void test3939() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""ersion"");
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    List<CompilerInput> list0 = compiler0.getInputsForTesting();
    assertNull(list0);
}",""
"public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options) {
    return compile(new JSSourceFile[] { extern }, modules, options);
}","public void test4040() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
    JSModule[] jSModuleArray0 = new JSModule[2];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
void removeChangeHandler(CodeChangeHandler handler) {
    codeChangeHandlers.remove(handler);
}","public void test4141() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.removeChangeHandler((CodeChangeHandler) null);
}",""
"@Override
void setHasRegExpGlobalReferences(boolean references) {
    hasRegExpGlobalReferences = references;
}","public void test4242() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.setHasRegExpGlobalReferences(false);
}",""
"public JSError[] getMessages() {
    return getErrors();
}","public void test4343() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Returns an array constructed from errors + temporary warnings.
 */"
"@VisibleForTesting
List<CompilerInput> getExternsForTesting() {
    return externs;
}","public void test4444() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    List<CompilerInput> list0 = compiler0.getExternsForTesting();
    assertNull(list0);
}",""
"void removeTryCatchFinally() {
    logger.info(""Remove try/catch/finally"");
    startPass(""removeTryCatchFinally"");
    RemoveTryCatch r = new RemoveTryCatch(this);
    process(r);
    endPass();
}","public void test4545() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Removes try/catch/finally statements for easier debugging.
 */"
"@Override
public Scope getTopScope() {
    return getPassConfig().getTopScope();
}","public void test4646() throws Throwable {
    Compiler compiler0 = new Compiler();
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",""
"@Override
public boolean isIdeMode() {
    return options.ideMode;
}","public void test5252() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""[;Iu~}5wsqS8(L["");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    compiler0.initCompilerOptionsIfTesting();
    assertFalse(compiler0.isIdeMode());
}",""
"public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options) {
    return compile(extern, new JSSourceFile[] { input }, options);
}","public void test5353() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = ""wf)ALme{[.L*(@h$"";
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertFalse(result0.success);
}",""
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test5454() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();
    compiler0.compileModules(stack0, arrayList0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test5555() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    stack0.add(jSSourceFile0);
    stack0.add(jSSourceFile0);
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options) {
    // The compile method should only be called once.
    Preconditions.checkState(jsRoot == null);
    try {
        init(externs, inputs, options);
        if (hasErrors()) {
            return getResult();
        }
        return compile();
    } finally {
        Tracer t = newTracer(""generateReport"");
        errorManager.generateReport();
        stopTracer(t, ""generateReport"");
    }
}","public void test5656() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Compiles a list of inputs.
 */"
"public void toSource(final CodeBuilder cb, final int inputSeqNum, final Node root) {
    runInCompilerThread(new Callable<Void>() {

        public Void call() throws Exception {
            if (options.printInputDelimiter) {
                if ((cb.getLength() > 0) && !cb.endsWith(""\n"")) {
                    // Make sure that the label starts on a new line
                    cb.append(""\n"");
                }
                Preconditions.checkState(root.getType() == Token.SCRIPT);
                String delimiter = options.inputDelimiter;
                String sourceName = (String) root.getProp(Node.SOURCENAME_PROP);
                Preconditions.checkState(sourceName != null);
                Preconditions.checkState(!sourceName.isEmpty());
                delimiter = delimiter.replaceAll(""%name%"", sourceName).replaceAll(""%num%"", String.valueOf(inputSeqNum));
                cb.append(delimiter).append(""\n"");
            }
            if (root.getJSDocInfo() != null && root.getJSDocInfo().getLicense() != null) {
                cb.append(""/*\n"").append(root.getJSDocInfo().getLicense()).append(""*/\n"");
            }
            // If there is a valid source map, then indicate to it that the current
            // root node's mappings are offset by the given string builder buffer.
            if (options.sourceMapOutputPath != null) {
                sourceMap.setStartingPosition(cb.getLineIndex(), cb.getColumnIndex());
            }
            String code = toSource(root, sourceMap);
            if (!code.isEmpty()) {
                cb.append(code);
                if (!code.endsWith("";"")) {
                    cb.append("";"");
                }
            }
            return null;
        }
    });
}","public void test5757() throws Throwable {
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Compiler compiler0 = new Compiler((PrintStream) null);
    compiler0.initCompilerOptionsIfTesting();
    // Undeclared exception!
    try {
        compiler0.toSource(compiler_CodeBuilder0, 52, (Node) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Writes out js code from a root node. If printing input delimiters, this
 * method will attach a comment to the start of the text indicating which
 * input the output derived from. If there were any preserve annotations
 * within the root's source, they will also be printed in a block comment
 * at the beginning of the output.
 */"
"public void setPassConfig(PassConfig passes) {
    // Important to check for null because if setPassConfig(null) is
    // called before this.passes is set, getPassConfig() will create a
    // new PassConfig object and use that, which is probably not what
    // the client wanted since he or she probably meant to use their
    // own PassConfig object.
    Preconditions.checkNotNull(passes);
    if (this.passes != null) {
        throw new IllegalStateException(""this.passes has already been assigned"");
    }
    this.passes = passes;
}","public void test5858() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.createPassConfigInternal();
    compiler0.setPassConfig(passConfig0);
}","/**
 * @param passes The PassConfig to use with this Compiler.
 * @throws NullPointerException if passes is null
 * @throws IllegalStateException if this.passes has already been assigned
 */"
"public void setPassConfig(PassConfig passes) {
    // Important to check for null because if setPassConfig(null) is
    // called before this.passes is set, getPassConfig() will create a
    // new PassConfig object and use that, which is probably not what
    // the client wanted since he or she probably meant to use their
    // own PassConfig object.
    Preconditions.checkNotNull(passes);
    if (this.passes != null) {
        throw new IllegalStateException(""this.passes has already been assigned"");
    }
    this.passes = passes;
}","public void test5959() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * @param passes The PassConfig to use with this Compiler.
 * @throws NullPointerException if passes is null
 * @throws IllegalStateException if this.passes has already been assigned
 */"
"public void check() {
    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);
    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);
    if (options.devMode == DevMode.EVERY_PASS) {
        phaseOptimizer.setSanityCheck(sanityCheck);
    }
    phaseOptimizer.consume(getPassConfig().getChecks());
    phaseOptimizer.process(externsRoot, jsRoot);
    if (hasErrors()) {
        return;
    }
    // TODO(nicksantos): clean this up. The flow here is too hard to follow.
    if (options.nameAnonymousFunctionsOnly) {
        return;
    }
    if (options.removeTryCatchFinally) {
        removeTryCatchFinally();
    }
    if (!options.stripTypes.isEmpty() || !options.stripNameSuffixes.isEmpty() || !options.stripTypePrefixes.isEmpty() || !options.stripNamePrefixes.isEmpty()) {
        stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);
    }
    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
}","public void test6060() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("""");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.check();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"void endPass() {
    Preconditions.checkState(currentTracer != null, ""Tracer should not be null at the end of a pass."");
    stopTracer(currentTracer, currentPassName);
    String passToCheck = currentPassName;
    currentPassName = null;
    currentTracer = null;
    maybeSanityCheck();
}","public void test6161() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Marks the end of a pass.
 */"
"public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options) {
    return compile(extern, new JSSourceFile[] { input }, options);
}","public void test6262() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
boolean areNodesEqualForInlining(Node n1, Node n2) {
    if (options.ambiguateProperties || options.disambiguateProperties) {
        // The type based optimizations require that type information is preserved
        // during other optimizations.
        return n1.checkTreeTypeAwareEqualsSilent(n2);
    } else {
        return n1.checkTreeEqualsSilent(n2);
    }
}","public void test6363() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    // Undeclared exception!
    try {
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
public CompilerInput newExternInput(String name) {
    if (inputsByName.containsKey(name)) {
        throw new IllegalArgumentException(""Conflicting externs name: "" + name);
    }
    SourceAst ast = new SyntheticAst(name);
    CompilerInput input = new CompilerInput(ast, name, true);
    inputsByName.put(name, input);
    externsRoot.addChildToFront(ast.getAstRoot(this));
    return input;
}","public void test6464() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    compiler0.newExternInput((String) null);
    // Undeclared exception!
    try {
        compiler0.newExternInput((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name: null
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"void addIncrementalSourceAst(JsAst ast) {
    String sourceName = ast.getSourceFile().getName();
    Preconditions.checkState(getInput(sourceName) == null, ""Duplicate input of name "" + sourceName);
    inputsByName.put(sourceName, new CompilerInput(ast));
}","public void test6565() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add a source input dynamically. Intended for incremental compilation.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test6666() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    SourceFile sourceFile0 = SourceFile.fromFile("""");
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"@Override
public ReverseAbstractInterpreter getReverseAbstractInterpreter() {
    if (abstractInterpreter == null) {
        ChainableReverseAbstractInterpreter interpreter = new SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
        if (options.closurePass) {
            interpreter = new ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
        }
        abstractInterpreter = interpreter;
    }
    return abstractInterpreter;
}","public void test6767() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
    assertSame(reverseAbstractInterpreter1, reverseAbstractInterpreter0);
}",""
"@Override
TypeValidator getTypeValidator() {
    if (typeValidator == null) {
        typeValidator = new TypeValidator(this);
    }
    return typeValidator;
}","public void test6868() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, checkLevel0, checkLevel0);
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    assertNotNull(typeValidator0);
}",""
"//------------------------------------------------------------------------
// Parsing
//------------------------------------------------------------------------
/**
 * Parses the externs and main inputs.
 *
 * @return A synthetic root node whose two children are the externs root
 *     and the main root
 */
Node parseInputs() {
    boolean devMode = options.devMode != DevMode.OFF;
    // If old roots exist (we are parsing a second time), detach each of the
    // individual file parse trees.
    if (externsRoot != null) {
        externsRoot.detachChildren();
    }
    if (jsRoot != null) {
        jsRoot.detachChildren();
    }
    // Parse main js sources.
    jsRoot = new Node(Token.BLOCK);
    jsRoot.setIsSyntheticBlock(true);
    if (options.tracer.isOn()) {
        tracker = new PerformanceTracker(jsRoot, options.tracer == TracerMode.ALL);
        addChangeHandler(tracker.getCodeChangeHandler());
    }
    Tracer tracer = newTracer(""parseInputs"");
    try {
        // Parse externs sources.
        externsRoot = new Node(Token.BLOCK);
        externsRoot.setIsSyntheticBlock(true);
        for (CompilerInput input : externs) {
            Node n = input.getAstRoot(this);
            if (hasErrors()) {
                return null;
            }
            externsRoot.addChildToBack(n);
        }
        // Check if the sources need to be re-ordered.
        if (options.manageClosureDependencies) {
            for (CompilerInput input : inputs) {
                input.setCompiler(this);
                // Forward-declare all the provided types, so that they
                // are not flagged even if they are dropped from the process.
                for (String provide : input.getProvides()) {
                    getTypeRegistry().forwardDeclareType(provide);
                }
            }
            try {
                inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);
            } catch (CircularDependencyException e) {
                report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                return null;
            }
        }
        // Check if inputs need to be rebuilt from modules.
        boolean staleInputs = false;
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            if (hasErrors()) {
                return null;
            }
            // Inputs can have a null AST during initial parse.
            if (n == null) {
                continue;
            }
            if (n.getJSDocInfo() != null) {
                JSDocInfo info = n.getJSDocInfo();
                if (info.isExterns()) {
                    // If the input file is explicitly marked as an externs file, then
                    // assume the programmer made a mistake and throw it into
                    // the externs pile anyways.
                    externsRoot.addChildToBack(n);
                    input.setIsExtern(true);
                    input.getModule().remove(input);
                    externs.add(input);
                    staleInputs = true;
                } else if (info.isNoCompile()) {
                    input.getModule().remove(input);
                    staleInputs = true;
                }
            }
        }
        if (staleInputs) {
            fillEmptyModules(modules);
            rebuildInputsFromModules();
        }
        // Build the AST.
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            if (devMode) {
                runSanityCheck();
                if (hasErrors()) {
                    return null;
                }
            }
            if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {
                // Annotate the nodes in the tree with information from the
                // input file. This information is used to construct the SourceMap.
                SourceInformationAnnotator sia = new SourceInformationAnnotator(input.getName(), options.devMode != DevMode.OFF);
                NodeTraversal.traverse(this, n, sia);
            }
            jsRoot.addChildToBack(n);
        }
        externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        return externAndJsRoot;
    } finally {
        stopTracer(tracer, ""parseInputs"");
    }
}","public void test6969() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNotNull(node0);
}",""
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test6970() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test7071() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    assertEquals(2, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"//------------------------------------------------------------------------
// Parsing
//------------------------------------------------------------------------
/**
 * Parses the externs and main inputs.
 *
 * @return A synthetic root node whose two children are the externs root
 *     and the main root
 */
Node parseInputs() {
    boolean devMode = options.devMode != DevMode.OFF;
    // If old roots exist (we are parsing a second time), detach each of the
    // individual file parse trees.
    if (externsRoot != null) {
        externsRoot.detachChildren();
    }
    if (jsRoot != null) {
        jsRoot.detachChildren();
    }
    // Parse main js sources.
    jsRoot = new Node(Token.BLOCK);
    jsRoot.setIsSyntheticBlock(true);
    if (options.tracer.isOn()) {
        tracker = new PerformanceTracker(jsRoot, options.tracer == TracerMode.ALL);
        addChangeHandler(tracker.getCodeChangeHandler());
    }
    Tracer tracer = newTracer(""parseInputs"");
    try {
        // Parse externs sources.
        externsRoot = new Node(Token.BLOCK);
        externsRoot.setIsSyntheticBlock(true);
        for (CompilerInput input : externs) {
            Node n = input.getAstRoot(this);
            if (hasErrors()) {
                return null;
            }
            externsRoot.addChildToBack(n);
        }
        // Check if the sources need to be re-ordered.
        if (options.manageClosureDependencies) {
            for (CompilerInput input : inputs) {
                input.setCompiler(this);
                // Forward-declare all the provided types, so that they
                // are not flagged even if they are dropped from the process.
                for (String provide : input.getProvides()) {
                    getTypeRegistry().forwardDeclareType(provide);
                }
            }
            try {
                inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(inputs);
            } catch (CircularDependencyException e) {
                report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                return null;
            }
        }
        // Check if inputs need to be rebuilt from modules.
        boolean staleInputs = false;
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            if (hasErrors()) {
                return null;
            }
            // Inputs can have a null AST during initial parse.
            if (n == null) {
                continue;
            }
            if (n.getJSDocInfo() != null) {
                JSDocInfo info = n.getJSDocInfo();
                if (info.isExterns()) {
                    // If the input file is explicitly marked as an externs file, then
                    // assume the programmer made a mistake and throw it into
                    // the externs pile anyways.
                    externsRoot.addChildToBack(n);
                    input.setIsExtern(true);
                    input.getModule().remove(input);
                    externs.add(input);
                    staleInputs = true;
                } else if (info.isNoCompile()) {
                    input.getModule().remove(input);
                    staleInputs = true;
                }
            }
        }
        if (staleInputs) {
            fillEmptyModules(modules);
            rebuildInputsFromModules();
        }
        // Build the AST.
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            if (devMode) {
                runSanityCheck();
                if (hasErrors()) {
                    return null;
                }
            }
            if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {
                // Annotate the nodes in the tree with information from the
                // input file. This information is used to construct the SourceMap.
                SourceInformationAnnotator sia = new SourceInformationAnnotator(input.getName(), options.devMode != DevMode.OFF);
                NodeTraversal.traverse(this, n, sia);
            }
            jsRoot.addChildToBack(n);
        }
        externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        return externAndJsRoot;
    } finally {
        stopTracer(tracer, ""parseInputs"");
    }
}","public void test7172() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNull(node0);
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test7273() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseTestCode(""JSC_INTERFACE_METHOD_OVERRIDE"");
    assertTrue(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test7778() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.initModules(arrayList0, stack0, compilerOptions0);
    compiler0.optimize();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"boolean isInliningForbidden() {
    return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC || options.propertyRenaming == PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
}","public void test7879() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""// Input %num%"");
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",""
"@Override
public void reportCodeChange() {
    for (CodeChangeHandler handler : codeChangeHandlers) {
        handler.reportChange();
    }
}","public void test7980() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.reportCodeChange();
}","/**
 * All passes should call reportCodeChange() when they alter
 * the JS tree structure. This is verified by CompilerTestCase.
 * This allows us to optimize to a fixed point.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test8081() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Vector<JSType> vector0 = new Vector<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
    String[] stringArray0 = new String[3];
    JSError jSError0 = nodeTraversal0.makeError(node0, compilerOptions0.checkProvides, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"@Override
public CheckLevel getErrorLevel(JSError error) {
    Preconditions.checkNotNull(options);
    WarningsGuard guards = options.getWarningsGuard();
    if (guards == null) {
        return error.level;
    } else {
        return guards.level(error);
    }
}","public void test8182() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    compiler0.initCompilerOptionsIfTesting();
    Node node0 = Node.newNumber(Double.NaN, 2204, (-2171));
    String[] stringArray0 = new String[7];
    JSError jSError0 = JSError.make(""K"", node0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    CheckLevel checkLevel0 = compiler0.getErrorLevel(jSError0);
    assertEquals(CheckLevel.ERROR, checkLevel0);
}",""
"@Override
void throwInternalError(String message, Exception cause) {
    String finalMessage = ""INTERNAL COMPILER ERROR.\n"" + ""Please report this problem.\n"" + message;
    RuntimeException e = new RuntimeException(finalMessage, cause);
    if (cause != null) {
        e.setStackTrace(cause.getStackTrace());
    }
    throw e;
}","public void test8283() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""ir_&+/W3"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // ir_&+/W3
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Report an internal error.
 */"
"public String getSourceLine(String sourceName, int lineNumber) {
    if (lineNumber < 1) {
        return null;
    }
    SourceFile input = getSourceFileByName(sourceName);
    if (input != null) {
        return input.getLine(lineNumber);
    }
    return null;
}","public void test8384() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    String string0 = compiler0.getSourceLine("""", 10);
    assertNull(string0);
}",""
"public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options) {
    return compile(extern, new JSSourceFile[] { input }, options);
}","public void test8485() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""goog.inherits"", ""+L6s`H"");
    JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(""pQQFI0kZ.y_v8zH 77"", (Charset) null);
    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);
    assertFalse(result0.success);
}",""
"public Region getSourceRegion(String sourceName, int lineNumber) {
    if (lineNumber < 1) {
        return null;
    }
    SourceFile input = getSourceFileByName(sourceName);
    if (input != null) {
        return input.getRegion(lineNumber);
    }
    return null;
}","public void test8586() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion((String) null, (-42));
    assertNull(region0);
}",""
"public Region getSourceRegion(String sourceName, int lineNumber) {
    if (lineNumber < 1) {
        return null;
    }
    SourceFile input = getSourceFileByName(sourceName);
    if (input != null) {
        return input.getRegion(lineNumber);
    }
    return null;
}","public void test8687() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Region region0 = compiler0.getSourceRegion(""com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop"", 6);
    assertNull(region0);
}",""
"public Region getSourceRegion(String sourceName, int lineNumber) {
    if (lineNumber < 1) {
        return null;
    }
    SourceFile input = getSourceFileByName(sourceName);
    if (input != null) {
        return input.getRegion(lineNumber);
    }
    return null;
}","public void test8788() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Region region0 = compiler0.getSourceRegion(""[[singleton]]"", 32);
    assertNull(region0);
}",""
"//------------------------------------------------------------------------
// Package-private helpers
//------------------------------------------------------------------------
@Override
Node getNodeForCodeInsertion(JSModule module) {
    if (module == null) {
        if (inputs.isEmpty()) {
            throw new IllegalStateException(""No inputs"");
        }
        return inputs.get(0).getAstRoot(this);
    }
    List<CompilerInput> moduleInputs = module.getInputs();
    if (moduleInputs.size() > 0) {
        return moduleInputs.get(0).getAstRoot(this);
    }
    throw new IllegalStateException(""Root module has no inputs"");
}","public void test8889() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"//------------------------------------------------------------------------
// Package-private helpers
//------------------------------------------------------------------------
@Override
Node getNodeForCodeInsertion(JSModule module) {
    if (module == null) {
        if (inputs.isEmpty()) {
            throw new IllegalStateException(""No inputs"");
        }
        return inputs.get(0).getAstRoot(this);
    }
    List<CompilerInput> moduleInputs = module.getInputs();
    if (moduleInputs.size() > 0) {
        return moduleInputs.get(0).getAstRoot(this);
    }
    throw new IllegalStateException(""Root module has no inputs"");
}","public void test8990() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(32, Node.MEMBER_TYPE_PROP);
}",""
"//------------------------------------------------------------------------
// Package-private helpers
//------------------------------------------------------------------------
@Override
Node getNodeForCodeInsertion(JSModule module) {
    if (module == null) {
        if (inputs.isEmpty()) {
            throw new IllegalStateException(""No inputs"");
        }
        return inputs.get(0).getAstRoot(this);
    }
    List<CompilerInput> moduleInputs = module.getInputs();
    if (moduleInputs.size() > 0) {
        return moduleInputs.get(0).getAstRoot(this);
    }
    throw new IllegalStateException(""Root module has no inputs"");
}","public void test9091() throws Throwable {
    Compiler compiler0 = new Compiler();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.initModules(arrayList0, stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"//------------------------------------------------------------------------
// Package-private helpers
//------------------------------------------------------------------------
@Override
Node getNodeForCodeInsertion(JSModule module) {
    if (module == null) {
        if (inputs.isEmpty()) {
            throw new IllegalStateException(""No inputs"");
        }
        return inputs.get(0).getAstRoot(this);
    }
    List<CompilerInput> moduleInputs = module.getInputs();
    if (moduleInputs.size() > 0) {
        return moduleInputs.get(0).getAstRoot(this);
    }
    throw new IllegalStateException(""Root module has no inputs"");
}","public void test9192() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""// Input %num%"", (String) null);
    jSModule0.add(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public String getAstDotGraph() throws IOException {
    if (jsRoot != null) {
        ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);
        cfa.process(null, jsRoot);
        return DotFormatter.toDot(jsRoot, cfa.getCfg());
    } else {
        return """";
    }
}","public void test9293() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}","/**
 * Gets the DOT graph of the AST generated at the end of compilation.
 */"
"public String getAstDotGraph() throws IOException {
    if (jsRoot != null) {
        ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);
        cfa.process(null, jsRoot);
        return DotFormatter.toDot(jsRoot, cfa.getCfg());
    } else {
        return """";
    }
}","public void test9394() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertEquals(""digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\""BLOCK\""];\n  node1 [label=\""SCRIPT\""];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> node1 [label=\""SYN_BLOCK\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> node1 [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n}\n"", string0);
}","/**
 * Gets the DOT graph of the AST generated at the end of compilation.
 */"
"int getWarningCount();","public void test9495() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0, errorManager0.getWarningCount());
}","/**
 * Gets the number of reported warnings.
 */"
"int getWarningCount();","public void test9596() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0, errorManager0.getWarningCount());
}","/**
 * Gets the number of reported warnings.
 */"
