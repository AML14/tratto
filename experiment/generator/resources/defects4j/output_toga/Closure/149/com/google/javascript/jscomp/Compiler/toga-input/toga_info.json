{
  "test1212" : {
    "methodSignature" : "boolean hasRegExpGlobalReferences()",
    "methodName" : "hasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n}",
    "testName" : "test1212"
  },
  "test4646" : {
    "methodSignature" : "public Scope getTopScope()",
    "methodName" : "getTopScope",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4646() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Scope scope0 = compiler0.getTopScope();\n}",
    "testName" : "test4646"
  },
  "test3434" : {
    "methodSignature" : "void recordFunctionInformation()",
    "methodName" : "recordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    compiler0.recordFunctionInformation();\n}",
    "testName" : "test3434"
  },
  "test6868" : {
    "methodSignature" : "TypeValidator getTypeValidator()",
    "methodName" : "getTypeValidator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6868() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null, checkLevel0, checkLevel0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n}",
    "testName" : "test6868"
  },
  "test5656" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5656() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n}",
    "testName" : "test5656"
  },
  "test7879" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7879() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test7879"
  },
  "test2424" : {
    "methodSignature" : "VariableMap getPropertyMap()",
    "methodName" : "getPropertyMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    VariableMap variableMap0 = compiler0.getPropertyMap();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "String toSource(Node n)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Node.newString(2892, \"\");\n    compiler0.toSource(node0);\n}",
    "testName" : "test1010"
  },
  "test4444" : {
    "methodSignature" : "List<CompilerInput> getExternsForTesting()",
    "methodName" : "getExternsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4444() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    List<CompilerInput> list0 = compiler0.getExternsForTesting();\n}",
    "testName" : "test4444"
  },
  "test8889" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8889() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule((String) null);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test8889"
  },
  "test3232" : {
    "methodSignature" : "public void parse()",
    "methodName" : "parse",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parse();\n}",
    "testName" : "test3232"
  },
  "test6666" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6666() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    SourceFile sourceFile0 = SourceFile.fromFile(\"\");\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.hasErrors();\n}",
    "testName" : "test6666"
  },
  "test5454" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();\n    compiler0.compileModules(stack0, arrayList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test5454"
  },
  "test2222" : {
    "methodSignature" : "ControlFlowGraph<Node> computeCFG()",
    "methodName" : "computeCFG",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.computeCFG();\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "public String toSource()",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource();\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "void resetUniqueNameId()",
    "methodName" : "resetUniqueNameId",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.resetUniqueNameId();\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test1616"
  },
  "test3838" : {
    "methodSignature" : "public Node getRoot()",
    "methodName" : "getRoot",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.getRoot();\n}",
    "testName" : "test3838"
  },
  "test2828" : {
    "methodSignature" : "void setCssRenamingMap(CssRenamingMap map)",
    "methodName" : "setCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setCssRenamingMap((CssRenamingMap) null);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public void setState(IntermediateState state)",
    "methodName" : "setState",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    compiler0.setState(compiler_IntermediateState0);\n}",
    "testName" : "test1414"
  },
  "test3636" : {
    "methodSignature" : "public SourceMap getSourceMap()",
    "methodName" : "getSourceMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    Logger logger0 = Logger.getGlobal();\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    SourceMap sourceMap0 = compiler0.getSourceMap();\n}",
    "testName" : "test3636"
  },
  "test5858" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.createPassConfigInternal();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "public void processDefines()",
    "methodName" : "processDefines",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.processDefines();\n}",
    "testName" : "test2626"
  },
  "test6060" : {
    "methodSignature" : "public void check()",
    "methodName" : "check",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.check();\n}",
    "testName" : "test6060"
  },
  "test8283" : {
    "methodSignature" : "void throwInternalError(String message, Exception cause)",
    "methodName" : "throwInternalError",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8283() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.throwInternalError(\"ir_&+/W3\", (Exception) null);\n}",
    "testName" : "test8283"
  },
  "test9495" : {
    "methodSignature" : "int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9495() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    errorManager0.getWarningCount();\n}",
    "testName" : "test9495"
  },
  "test7071" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7071() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.getErrorCount();\n}",
    "testName" : "test7071"
  },
  "test8081" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8081() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Vector<JSType> vector0 = new Vector<JSType>();\n    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);\n    String[] stringArray0 = new String[3];\n    JSError jSError0 = nodeTraversal0.makeError(node0, compilerOptions0.checkProvides, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);\n    compiler0.report(jSError0);\n    compiler0.hasErrors();\n}",
    "testName" : "test8081"
  },
  "test4242" : {
    "methodSignature" : "void setHasRegExpGlobalReferences(boolean references)",
    "methodName" : "setHasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4242() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setHasRegExpGlobalReferences(false);\n}",
    "testName" : "test4242"
  },
  "test8687" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8687() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Region region0 = compiler0.getSourceRegion(\"com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop\", 6);\n}",
    "testName" : "test8687"
  },
  "test3030" : {
    "methodSignature" : "VariableMap getVariableMap()",
    "methodName" : "getVariableMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getVariableMap();\n}",
    "testName" : "test3030"
  },
  "test6464" : {
    "methodSignature" : "public CompilerInput newExternInput(String name)",
    "methodName" : "newExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6464() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.newExternInput((String) null);\n    compiler0.newExternInput((String) null);\n}",
    "testName" : "test6464"
  },
  "test9091" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9091() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    compiler0.initModules(arrayList0, stack0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test9091"
  },
  "test5252" : {
    "methodSignature" : "public boolean isIdeMode()",
    "methodName" : "isIdeMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"[;Iu~}5wsqS8(L[\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    compiler0.initCompilerOptionsIfTesting();\n    compiler0.isIdeMode();\n}",
    "testName" : "test5252"
  },
  "test2020" : {
    "methodSignature" : "public void rebuildInputsFromModules()",
    "methodName" : "rebuildInputsFromModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.rebuildInputsFromModules();\n}",
    "testName" : "test2020"
  },
  "test4040" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4040() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);\n    JSModule[] jSModuleArray0 = new JSModule[2];\n    compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test4040"
  },
  "test6262" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6262() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.ALL;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n}",
    "testName" : "test6262"
  },
  "test8485" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8485() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"goog.inherits\", \"+L6s`H\");\n    JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(\"pQQFI0kZ.y_v8zH 77\", (Charset) null);\n    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile1, compilerOptions0);\n}",
    "testName" : "test8485"
  },
  "test9293" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9293() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test9293"
  },
  "test7273" : {
    "methodSignature" : "public boolean hasOneChild()",
    "methodName" : "hasOneChild",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7273() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseTestCode(\"JSC_INTERFACE_METHOD_OVERRIDE\");\n    node0.hasOneChild();\n}",
    "testName" : "test7273"
  },
  "test022" : {
    "methodSignature" : "public String[] toSourceArray()",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray();\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule[] jSModuleArray0 = new JSModule[1];\n    compiler0.init((JSSourceFile[]) null, jSModuleArray0, (CompilerOptions) null);\n}",
    "testName" : "test066"
  },
  "test1818" : {
    "methodSignature" : "ScopeCreator getScopeCreator()",
    "methodName" : "getScopeCreator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ScopeCreator scopeCreator0 = compiler0.getScopeCreator();\n}",
    "testName" : "test1818"
  },
  "test5757" : {
    "methodSignature" : "public void toSource(final CodeBuilder cb, final int inputSeqNum, final Node root)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    compiler0.initCompilerOptionsIfTesting();\n    compiler0.toSource(compiler_CodeBuilder0, 52, (Node) null);\n}",
    "testName" : "test5757"
  },
  "test2323" : {
    "methodSignature" : "boolean isNormalized()",
    "methodName" : "isNormalized",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.isNormalized();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"1hQ=s\\\"wXj][Vj0F\", \"1hQ=s\\\"wXj][Vj0F\");\n    compiler0.hasErrors();\n}",
    "testName" : "test1313"
  },
  "test4545" : {
    "methodSignature" : "void removeTryCatchFinally()",
    "methodName" : "removeTryCatchFinally",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4545() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.removeTryCatchFinally();\n}",
    "testName" : "test4545"
  },
  "test3535" : {
    "methodSignature" : "RecordFunctionInformation(Compiler compiler, FunctionNames functionNames)",
    "methodName" : "RecordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3535() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    FunctionNames functionNames0 = new FunctionNames(compiler0);\n    RecordFunctionInformation recordFunctionInformation0 = new RecordFunctionInformation(compiler0, functionNames0);\n}",
    "testName" : "test3535"
  },
  "test6767" : {
    "methodSignature" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
    "methodName" : "getReverseAbstractInterpreter",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6767() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();\n}",
    "testName" : "test6767"
  },
  "test5555" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    stack0.add(jSSourceFile0);\n    stack0.add(jSSourceFile0);\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.init((List<JSSourceFile>) stack0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test5555"
  },
  "test7778" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7778() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    compiler0.initModules(arrayList0, stack0, compilerOptions0);\n    compiler0.optimize();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test7778"
  },
  "test2121" : {
    "methodSignature" : "boolean precheck()",
    "methodName" : "precheck",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.precheck();\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "CssRenamingMap getCssRenamingMap()",
    "methodName" : "getCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getCssRenamingMap();\n}",
    "testName" : "test1111"
  },
  "test4343" : {
    "methodSignature" : "public JSError[] getMessages()",
    "methodName" : "getMessages",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4343() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getMessages();\n}",
    "testName" : "test4343"
  },
  "test8788" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8788() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Region region0 = compiler0.getSourceRegion(\"[[singleton]]\", 32);\n}",
    "testName" : "test8788"
  },
  "test3333" : {
    "methodSignature" : "Supplier<String> getUniqueNameIdSupplier()",
    "methodName" : "getUniqueNameIdSupplier",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n}",
    "testName" : "test3333"
  },
  "test6565" : {
    "methodSignature" : "void addIncrementalSourceAst(JsAst ast)",
    "methodName" : "addIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6565() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test6565"
  },
  "test011" : {
    "methodSignature" : "public String toSource(final JSModule module)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"reduce\");\n    compiler0.toSource(jSModule0);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.stripCode(compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypes, compilerOptions0.aliasableStrings, compilerOptions0.stripTypes);\n}",
    "testName" : "test055"
  },
  "test2727" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.skipAllPasses = true;\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    compiler0.optimize();\n    compiler0.hasErrors();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public void disableThreads()",
    "methodName" : "disableThreads",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.disableThreads();\n}",
    "testName" : "test1717"
  },
  "test3939" : {
    "methodSignature" : "List<CompilerInput> getInputsForTesting()",
    "methodName" : "getInputsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"ersion\");\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    List<CompilerInput> list0 = compiler0.getInputsForTesting();\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.getPassConfig();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test5959"
  },
  "test2525" : {
    "methodSignature" : "Node parseSyntheticCode(String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"#dHNj\");\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"SdLNj\");\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test1515"
  },
  "test3737" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test3737"
  },
  "test6969" : {
    "methodSignature" : "Node parseInputs()",
    "methodName" : "parseInputs",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6969() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n}",
    "testName" : "test6969"
  },
  "test7172" : {
    "methodSignature" : "Node parseInputs()",
    "methodName" : "parseInputs",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7172() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n}",
    "testName" : "test7172"
  },
  "test8182" : {
    "methodSignature" : "public CheckLevel getErrorLevel(JSError error)",
    "methodName" : "getErrorLevel",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8182() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    compiler0.initCompilerOptionsIfTesting();\n    Node node0 = Node.newNumber(Double.NaN, 2204, (-2171));\n    String[] stringArray0 = new String[7];\n    JSError jSError0 = JSError.make(\"K\", node0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);\n    CheckLevel checkLevel0 = compiler0.getErrorLevel(jSError0);\n}",
    "testName" : "test8182"
  },
  "test9596" : {
    "methodSignature" : "int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9596() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    errorManager0.getWarningCount();\n}",
    "testName" : "test9596"
  },
  "test5353" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSSourceFile input, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5353() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"wf)ALme{[.L*(@h$\";\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n}",
    "testName" : "test5353"
  },
  "test4141" : {
    "methodSignature" : "void removeChangeHandler(CodeChangeHandler handler)",
    "methodName" : "removeChangeHandler",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.removeChangeHandler((CodeChangeHandler) null);\n}",
    "testName" : "test4141"
  },
  "test6363" : {
    "methodSignature" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
    "methodName" : "areNodesEqualForInlining",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6363() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    compiler0.areNodesEqualForInlining((Node) null, (Node) null);\n}",
    "testName" : "test6363"
  },
  "test8586" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8586() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Region region0 = compiler0.getSourceRegion((String) null, (-42));\n}",
    "testName" : "test8586"
  },
  "test3131" : {
    "methodSignature" : "FunctionInformationMap getFunctionalInformationMap()",
    "methodName" : "getFunctionalInformationMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();\n}",
    "testName" : "test3131"
  },
  "test9192" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9192() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule((String) null);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"// Input %num%\", (String) null);\n    jSModule0.add(jSSourceFile0);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test9192"
  },
  "test6161" : {
    "methodSignature" : "void endPass()",
    "methodName" : "endPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.endPass();\n}",
    "testName" : "test6161"
  },
  "test8384" : {
    "methodSignature" : "public String getSourceLine(String sourceName, int lineNumber)",
    "methodName" : "getSourceLine",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8384() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    String string0 = compiler0.getSourceLine(\"\", 10);\n}",
    "testName" : "test8384"
  },
  "test9394" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test9394() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test9394"
  },
  "test000" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);\n    JSModule[] jSModuleArray0 = new JSModule[2];\n    compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public String[] toSourceArray(final JSModule module)",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule((String) null);\n    compiler0.toSourceArray(jSModule0);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public void optimize()",
    "methodName" : "optimize",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"// Input %num%\");\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.startPass((String) null);\n    compiler0.optimize();\n}",
    "testName" : "test088"
  },
  "test2929" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getWarningCount();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "List<CompilerInput> getInputsInOrder()",
    "methodName" : "getInputsInOrder",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getInputsInOrder();\n}",
    "testName" : "test1919"
  },
  "test6970" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6970() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    compiler0.hasErrors();\n}",
    "testName" : "test6970"
  },
  "test7980" : {
    "methodSignature" : "public void reportCodeChange()",
    "methodName" : "reportCodeChange",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7980() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.reportCodeChange();\n}",
    "testName" : "test7980"
  },
  "test8990" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8990() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test8990"
  }
}