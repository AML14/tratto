{
  "test0761" : {
    "methodSignature" : "public void setProcessObjectPropertyString(boolean process)",
    "methodName" : "setProcessObjectPropertyString",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0761() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setProcessObjectPropertyString(false);\n}",
    "testName" : "test0761"
  },
  "test34320" : {
    "methodSignature" : "boolean disables(DiagnosticGroup type)",
    "methodName" : "disables",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test34320() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticType diagnosticType0 = PeepholeFoldConstants.DIVIDE_BY_0_ERROR;\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[1];\n    diagnosticTypeArray0[0] = diagnosticType0;\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);\n    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.checkMissingReturn);\n    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);\n    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);\n}",
    "testName" : "test34320"
  },
  "test0982" : {
    "methodSignature" : "public void setChainCalls(boolean value)",
    "methodName" : "setChainCalls",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0982() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setChainCalls(true);\n}",
    "testName" : "test0982"
  },
  "test35331" : {
    "methodSignature" : "public void addWarningsGuard(WarningsGuard guard)",
    "methodName" : "addWarningsGuard",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test35331() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    String[] stringArray0 = new String[0];\n    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);\n    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);\n    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);\n}",
    "testName" : "test35331"
  },
  "test29275" : {
    "methodSignature" : "boolean enables(DiagnosticGroup type)",
    "methodName" : "enables",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test29275() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);\n    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);\n}",
    "testName" : "test29275"
  },
  "test0220" : {
    "methodSignature" : "public void setNameAnonymousFunctionsOnly(boolean value)",
    "methodName" : "setNameAnonymousFunctionsOnly",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0220() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setNameAnonymousFunctionsOnly(false);\n}",
    "testName" : "test0220"
  },
  "test0440" : {
    "methodSignature" : "public void setSummaryDetailLevel(int summaryDetailLevel)",
    "methodName" : "setSummaryDetailLevel",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0440() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setSummaryDetailLevel(45);\n}",
    "testName" : "test0440"
  },
  "test27255" : {
    "methodSignature" : "public Map<String, Node> getDefineReplacements()",
    "methodName" : "getDefineReplacements",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test27255() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setDefineToBooleanLiteral(\"DblH#\", true);\n    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();\n}",
    "testName" : "test27255"
  },
  "test28264" : {
    "methodSignature" : "public Map<String, Node> getDefineReplacements()",
    "methodName" : "getDefineReplacements",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test28264() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setDefineToNumberLiteral(\"FAST\", 45);\n    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();\n}",
    "testName" : "test28264"
  },
  "test26244" : {
    "methodSignature" : "public Map<String, Node> getDefineReplacements()",
    "methodName" : "getDefineReplacements",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test26244() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setDefineToDoubleLiteral(\"\", 45);\n    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();\n}",
    "testName" : "test26244"
  },
  "test25234" : {
    "methodSignature" : "public void setWarningLevel(DiagnosticGroup type, CheckLevel level)",
    "methodName" : "setWarningLevel",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test25234() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];\n    DiagnosticType diagnosticType0 = TypeCheck.BIT_OPERATION;\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);\n    compilerOptions0.setWarningLevel(diagnosticGroup0, diagnosticType0.level);\n}",
    "testName" : "test25234"
  },
  "test18163" : {
    "methodSignature" : "public void skipAllCompilerPasses()",
    "methodName" : "skipAllCompilerPasses",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test18163() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.skipAllCompilerPasses();\n}",
    "testName" : "test18163"
  },
  "test20183" : {
    "methodSignature" : "public void setCollapsePropertiesOnExternTypes(boolean collapse)",
    "methodName" : "setCollapsePropertiesOnExternTypes",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20183() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setCollapsePropertiesOnExternTypes(false);\n}",
    "testName" : "test20183"
  },
  "test33309" : {
    "methodSignature" : "boolean disables(DiagnosticGroup type)",
    "methodName" : "disables",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33309() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticType diagnosticType0 = ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR;\n    DiagnosticGroup diagnosticGroup0 = DiagnosticGroup.forType(diagnosticType0);\n    String[] stringArray0 = new String[3];\n    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(stringArray0);\n    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);\n    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);\n}",
    "testName" : "test33309"
  },
  "test21193" : {
    "methodSignature" : "public void setManageClosureDependencies(boolean newVal)",
    "methodName" : "setManageClosureDependencies",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21193() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setManageClosureDependencies(false);\n}",
    "testName" : "test21193"
  },
  "test19173" : {
    "methodSignature" : "public void disableRuntimeTypeCheck()",
    "methodName" : "disableRuntimeTypeCheck",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19173() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.disableRuntimeTypeCheck();\n}",
    "testName" : "test19173"
  },
  "test1193" : {
    "methodSignature" : "public void setRewriteNewDateGoogNow(boolean rewrite)",
    "methodName" : "setRewriteNewDateGoogNow",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1193() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setRewriteNewDateGoogNow(false);\n}",
    "testName" : "test1193"
  },
  "test16144" : {
    "methodSignature" : "public Object clone() throws CloneNotSupportedException",
    "methodName" : "clone",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test16144() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CompilerOptions compilerOptions1 = (CompilerOptions) compilerOptions0.clone();\n}",
    "testName" : "test16144"
  },
  "test14124" : {
    "methodSignature" : "public void setIdGenerators(Set<String> idGenerators)",
    "methodName" : "setIdGenerators",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test14124() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setIdGenerators(compilerOptions0.stripNameSuffixes);\n}",
    "testName" : "test14124"
  },
  "test13113" : {
    "methodSignature" : "public Map<String, Node> getDefineReplacements()",
    "methodName" : "getDefineReplacements",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test13113() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setDefineToStringLiteral(\" f\", \"5g,eCF\");\n    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();\n}",
    "testName" : "test13113"
  },
  "test17155" : {
    "methodSignature" : "public Map<String, Node> getDefineReplacements()",
    "methodName" : "getDefineReplacements",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17155() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setDefineToBooleanLiteral(\"// Input %num%\", false);\n    Map<String, Node> map0 = compilerOptions0.getDefineReplacements();\n}",
    "testName" : "test17155"
  },
  "test32298" : {
    "methodSignature" : "boolean disables(DiagnosticGroup type)",
    "methodName" : "disables",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test32298() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);\n    boolean boolean0 = compilerOptions0.disables(diagnosticGroup0);\n}",
    "testName" : "test32298"
  },
  "test1092" : {
    "methodSignature" : "public boolean isExternExportsEnabled()",
    "methodName" : "isExternExportsEnabled",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1092() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.enableExternExports(true);\n    compilerOptions0.isExternExportsEnabled();\n}",
    "testName" : "test1092"
  },
  "test15134" : {
    "methodSignature" : "public void enableRuntimeTypeCheck(String logFunction)",
    "methodName" : "enableRuntimeTypeCheck",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test15134() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.enableRuntimeTypeCheck(\"\");\n}",
    "testName" : "test15134"
  },
  "test0651" : {
    "methodSignature" : "public void setLooseTypes(boolean looseTypes)",
    "methodName" : "setLooseTypes",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0651() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setLooseTypes(true);\n}",
    "testName" : "test0651"
  },
  "test0871" : {
    "methodSignature" : "public boolean isExternExportsEnabled()",
    "methodName" : "isExternExportsEnabled",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0871() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    boolean boolean0 = compilerOptions0.isExternExportsEnabled();\n}",
    "testName" : "test0871"
  },
  "test12103" : {
    "methodSignature" : "public void setCodingConvention(CodingConvention codingConvention)",
    "methodName" : "setCodingConvention",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test12103() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setCodingConvention((CodingConvention) null);\n}",
    "testName" : "test12103"
  },
  "test0110" : {
    "methodSignature" : "WarningsGuard getWarningsGuard()",
    "methodName" : "getWarningsGuard",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0110() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.getWarningsGuard();\n}",
    "testName" : "test0110"
  },
  "test0330" : {
    "methodSignature" : "public void setReplaceStringsConfiguration(String placeholderToken, List<String> functionDescriptors)",
    "methodName" : "setReplaceStringsConfiguration",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0330() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;\n    compilerOptions0.setReplaceStringsConfiguration(\"com.google.common.base.CharMatcher$10\", list0);\n}",
    "testName" : "test0330"
  },
  "test0550" : {
    "methodSignature" : "public boolean shouldColorizeErrorOutput()",
    "methodName" : "shouldColorizeErrorOutput",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0550() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setColorizeErrorOutput(true);\n    compilerOptions0.shouldColorizeErrorOutput();\n}",
    "testName" : "test0550"
  },
  "test000" : {
    "methodSignature" : "public void setRemoveAbstractMethods(boolean remove)",
    "methodName" : "setRemoveAbstractMethods",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setRemoveAbstractMethods(true);\n}",
    "testName" : "test000"
  },
  "test22203" : {
    "methodSignature" : "public boolean shouldColorizeErrorOutput()",
    "methodName" : "shouldColorizeErrorOutput",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22203() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    boolean boolean0 = compilerOptions0.shouldColorizeErrorOutput();\n}",
    "testName" : "test22203"
  },
  "test24224" : {
    "methodSignature" : "public void setRenamingPolicy(VariableRenamingPolicy newVariablePolicy, PropertyRenamingPolicy newPropertyPolicy)",
    "methodName" : "setRenamingPolicy",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test24224() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setRenamingPolicy(compilerOptions0.variableRenaming, compilerOptions0.propertyRenaming);\n}",
    "testName" : "test24224"
  },
  "test23214" : {
    "methodSignature" : "public CodingConvention getCodingConvention()",
    "methodName" : "getCodingConvention",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test23214() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.getCodingConvention();\n}",
    "testName" : "test23214"
  },
  "test30286" : {
    "methodSignature" : "boolean enables(DiagnosticGroup type)",
    "methodName" : "enables",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test30286() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[2];\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(diagnosticTypeArray0);\n    ShowByPathWarningsGuard showByPathWarningsGuard0 = new ShowByPathWarningsGuard(\"4thij4z(P1nbP}ph\");\n    compilerOptions0.addWarningsGuard(showByPathWarningsGuard0);\n    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);\n}",
    "testName" : "test30286"
  },
  "test31297" : {
    "methodSignature" : "boolean enables(DiagnosticGroup type)",
    "methodName" : "enables",
    "className" : "com.google.javascript.jscomp.CompilerOptions",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test31297() throws Throwable {\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    DiagnosticGroup[] diagnosticGroupArray0 = new DiagnosticGroup[3];\n    DiagnosticGroup diagnosticGroup0 = TypeCheck.ALL_DIAGNOSTICS;\n    diagnosticGroupArray0[0] = diagnosticGroup0;\n    DiagnosticType diagnosticType0 = CreateSyntheticBlocks.UNMATCHED_END_MARKER;\n    diagnosticType0.format(diagnosticGroupArray0);\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[5];\n    DiagnosticType diagnosticType1 = TypeCheck.INEXISTENT_PROPERTY;\n    diagnosticTypeArray0[2] = diagnosticType1;\n    DiagnosticGroup diagnosticGroup1 = new DiagnosticGroup(diagnosticTypeArray0);\n    DiagnosticGroupWarningsGuard diagnosticGroupWarningsGuard0 = new DiagnosticGroupWarningsGuard(diagnosticGroup0, compilerOptions0.brokenClosureRequiresLevel);\n    compilerOptions0.addWarningsGuard(diagnosticGroupWarningsGuard0);\n    boolean boolean0 = compilerOptions0.enables(diagnosticGroup0);\n}",
    "testName" : "test31297"
  }
}