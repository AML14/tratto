project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}"");
    CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, true);
    collapseProperties0.process(node0, node0);
    assertEquals(31, Node.INCRDECR_PROP);
}",0,
project,0,test11,"public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}"");
    CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, true, true);
    collapseProperties0.process(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test22,"public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}"");
    CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, false);
    collapseProperties0.process(node0, node0);
    assertEquals((-3), Node.LOCAL_BLOCK_PROP);
}",0,
project,0,test33,"public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""function SCompiler_get(JSCompiler_get_name) { return function() {return this[JSCompiler_get_name]}}"");
    Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, ""function SCompiler_get(JSCompiler_get_name) { return function() {return this[JSCompiler_get_name]}}"", ""function SCompiler_get(JSCompiler_get_name) { return function() {return this[JSCompiler_get_name]}}"");
    node0.addChildToFront(node1);
    CollapseProperties collapseProperties0 = new CollapseProperties(compiler0, false, false);
    collapseProperties0.process(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
