focal_method,test_prefix,docstring
"public void process(Node externs, Node root) {
    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {
        addInvalidatingType(mis.typeA);
        addInvalidatingType(mis.typeB);
    }
    StaticScope<T> scope = typeSystem.getRootScope();
    NodeTraversal.traverse(compiler, externs, new FindExternProperties());
    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());
    renameProperties();
}","public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback"", ""com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback"");
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    disambiguateProperties0.process(node0, node0);
    disambiguateProperties0.process(node0, node0);
    assertEquals(13, Node.CASES_PROP);
}",""
"public void process(Node externs, Node root) {
    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {
        addInvalidatingType(mis.typeA);
        addInvalidatingType(mis.typeB);
    }
    StaticScope<T> scope = typeSystem.getRootScope();
    NodeTraversal.traverse(compiler, externs, new FindExternProperties());
    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());
    renameProperties();
}","public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
    // Undeclared exception!
    try {
        disambiguateProperties0.process((Node) null, (Node) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"T getTypeWithProperty(String field, T type) {
    return typeSystem.getTypeWithProperty(field, type);
}","public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
    ConcreteType concreteType0 = ConcreteType.ALL;
    ConcreteType[] concreteTypeArray0 = new ConcreteType[9];
    concreteTypeArray0[1] = concreteType0;
    ConcreteType.ConcreteUnionType concreteType_ConcreteUnionType0 = new ConcreteType.ConcreteUnionType(concreteTypeArray0);
    // Undeclared exception!
    try {
        disambiguateProperties0.getTypeWithProperty(""TightenTypes pass appears to be stuck in an infinite loop."", concreteType_ConcreteUnionType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DisambiguateProperties$ConcreteTypeSystem"", e);
    }
}","/**
 * Public for testing.
 */"
"public void process(Node externs, Node root) {
    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {
        addInvalidatingType(mis.typeA);
        addInvalidatingType(mis.typeB);
    }
    StaticScope<T> scope = typeSystem.getRootScope();
    NodeTraversal.traverse(compiler, externs, new FindExternProperties());
    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());
    renameProperties();
}","public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.gogle.javascrirt.jscomp.DisambiguateProperties$AbstractSopingCallback"", ""com.gogle.javascrirt.jscomp.DisambiguateProperties$AbstractSopingCallback"");
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    Node node1 = Node.newNumber((double) 11);
    disambiguateProperties0.process(node1, node0);
    assertEquals(4, Node.DESCENDANTS_FLAG);
}",""
"public void process(Node externs, Node root) {
    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {
        addInvalidatingType(mis.typeA);
        addInvalidatingType(mis.typeB);
    }
    StaticScope<T> scope = typeSystem.getRootScope();
    NodeTraversal.traverse(compiler, externs, new FindExternProperties());
    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());
    renameProperties();
}","public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(""TightenTypes pass appears to be stuck in an infinite loop."");
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    Node node1 = new Node(64, node0, (-1), 39);
    // Undeclared exception!
    try {
        disambiguateProperties0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"public void process(Node externs, Node root) {
    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {
        addInvalidatingType(mis.typeA);
        addInvalidatingType(mis.typeB);
    }
    StaticScope<T> scope = typeSystem.getRootScope();
    NodeTraversal.traverse(compiler, externs, new FindExternProperties());
    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());
    renameProperties();
}","public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(64);
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    disambiguateProperties0.process(node0, node0);
    assertEquals(2, Node.ATTRIBUTE_FLAG);
}",""
"public void process(Node externs, Node root) {
    for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {
        addInvalidatingType(mis.typeA);
        addInvalidatingType(mis.typeB);
    }
    StaticScope<T> scope = typeSystem.getRootScope();
    NodeTraversal.traverse(compiler, externs, new FindExternProperties());
    NodeTraversal.traverse(compiler, root, new FindRenameableProperties());
    renameProperties();
}","public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""TightenTypes pass appears to be stuck in an infinite loop."");
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    Node node1 = new Node(64, node0, 25, 39);
    // Undeclared exception!
    try {
        disambiguateProperties0.process(node0, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"Multimap<String, Collection<T>> getRenamedTypesForTesting() {
    Multimap<String, Collection<T>> ret = HashMultimap.create();
    for (Map.Entry<String, Property> entry : properties.entrySet()) {
        Property prop = entry.getValue();
        if (!prop.skipRenaming) {
            for (Collection<T> c : prop.getTypes().allEquivalenceClasses()) {
                if (!c.isEmpty() && !prop.typesToSkip.contains(c.iterator().next())) {
                    ret.put(entry.getKey(), c);
                }
            }
        }
    }
    return ret;
}","public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback"", ""com.google.javascript.jscomp.DisambiguateProperties$AbstractScopingCallback"");
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    disambiguateProperties0.process(node0, node0);
    Multimap<String, Collection<JSType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();
    assertNotNull(multimap0);
}","/**
 * Returns a map from field name to types for which it will be renamed.
 */"
"T getTypeWithProperty(String field, T type) {
    return typeSystem.getTypeWithProperty(field, type);
}","public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(objectType0);
    JSType jSType1 = disambiguateProperties0.getTypeWithProperty("" instances of "", jSType0);
    assertNull(jSType1);
}","/**
 * Public for testing.
 */"
"T getTypeWithProperty(String field, T type) {
    return typeSystem.getTypeWithProperty(field, type);
}","public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""com.google.common.base.Suppliers$ExpiringMemoizingSupplier"", ""prototype"", 2266, 480);
    EnumType enumType0 = jSTypeRegistry0.createEnumType(""Not declared as a type name"", namedType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    JSType jSType0 = enumElementType0.findPropertyType(""=~!{Lx-=2GZ"");
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""g3[X/&5T#mv"", (Node) null, (Node) null, jSType0);
    BooleanType booleanType0 = mock(BooleanType.class, new ViolatedAssumptionAnswer());
    doReturn(functionType0, enumType0).when(booleanType0).autoboxesTo();
    Visitor<BooleanType> visitor0 = (Visitor<BooleanType>) mock(Visitor.class, new ViolatedAssumptionAnswer());
    doReturn(booleanType0).when(visitor0).caseFunctionType(any(com.google.javascript.rhino.jstype.FunctionType.class));
    BooleanType booleanType1 = functionType0.visit(visitor0);
    JSType jSType1 = disambiguateProperties0.getTypeWithProperty(""=~!{Lx-=2GZ"", booleanType1);
    assertNull(jSType1);
}","/**
 * Public for testing.
 */"
"T getTypeWithProperty(String field, T type) {
    return typeSystem.getTypeWithProperty(field, type);
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""TightenTypes pass appears to be stuck in an infinite loop."", ""TightenTypes pass appears to be stuck in an infinite loop."", 28, 1);
    JSType jSType0 = disambiguateProperties0.getTypeWithProperty(""prototype"", namedType0);
    assertNull(jSType0);
}","/**
 * Public for testing.
 */"
"public boolean isStringValueType() {
    return false;
}","public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0);
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""TightenTypes pass appears to be stuck in an infinite loop."", ""TightenTypes pass appears to be stuck in an infinite loop."", 18, 44);
    NamedType namedType1 = (NamedType) disambiguateProperties0.getTypeWithProperty(""Not declared as a type name"", namedType0);
    assertFalse(namedType1.isStringValueType());
}",""
"T getTypeWithProperty(String field, T type) {
    return typeSystem.getTypeWithProperty(field, type);
}","public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
    ConcreteType.ConcreteInstanceType concreteType_ConcreteInstanceType0 = new ConcreteType.ConcreteInstanceType(tightenTypes0, objectType0);
    ConcreteType concreteType0 = disambiguateProperties0.getTypeWithProperty(""DisambiguateProperties$AbstractScoingCallback"", concreteType_ConcreteInstanceType0);
    assertNull(concreteType0);
}","/**
 * Public for testing.
 */"
"T getTypeWithProperty(String field, T type) {
    return typeSystem.getTypeWithProperty(field, type);
}","public void test1313() throws Throwable {
    Compiler compiler0 = new Compiler();
    ConcreteType concreteType0 = ConcreteType.NONE;
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
    ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty(""TightenTypes pass appears to be stuck in an infinite loop."", concreteType0);
    assertNotNull(concreteType1);
}","/**
 * Public for testing.
 */"
"T getTypeWithProperty(String field, T type) {
    return typeSystem.getTypeWithProperty(field, type);
}","public void test1414() throws Throwable {
    Compiler compiler0 = new Compiler();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0);
    ConcreteType concreteType0 = ConcreteType.ALL;
    ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty(""TightenTypes pass appears to be stuck in an infinite loop."", concreteType0);
    assertNull(concreteType1);
}","/**
 * Public for testing.
 */"
