focal_method,test_prefix,docstring
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    // Code with hidden side-effect code is common, for example
    // accessing ""el.offsetWidth"" forces a reflow in browsers, to allow this
    // will still allowing local dead code removal in general,
    // protect the ""side-effect free"" code in the source.
    //
    if (protectSideEffectFreeCode) {
        protectSideEffects();
    }
}","public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
    Node node0 = compiler0.parseTestCode(""pfiltO"");
    Node node1 = new Node(85, node0);
    Node node2 = new Node(85, node1);
    // Undeclared exception!
    try {
        checkSideEffects0.process(node0, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
public void hotSwapScript(Node scriptRoot, Node originalRoot) {
    NodeTraversal.traverse(compiler, scriptRoot, this);
}","public void test011() throws Throwable {
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects((AbstractCompiler) null, checkLevel0, true);
    // Undeclared exception!
    try {
        checkSideEffects0.hotSwapScript((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeTraversal"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    // Code with hidden side-effect code is common, for example
    // accessing ""el.offsetWidth"" forces a reflow in browsers, to allow this
    // will still allowing local dead code removal in general,
    // protect the ""side-effect free"" code in the source.
    //
    if (protectSideEffectFreeCode) {
        protectSideEffects();
    }
}","public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
    Node node0 = compiler0.parseTestCode("";oHN"");
    // Undeclared exception!
    try {
        checkSideEffects0.process(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public boolean isHook() {
    return this.getType() == Token.HOOK;
}","public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(2918, 2918, 2918);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
    Node node1 = new Node(42, node0);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0, syntacticScopeCreator0);
    Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
    node2.addSuppression(""D*~Xd80Ivxq2zL`G"");
    checkSideEffects0.visit(nodeTraversal0, node2, node1);
    assertFalse(node1.isHook());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(2918, 2918, 2918);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    Node node1 = new Node(37, node0, node0, node0, node0, 85, 49);
    Node node2 = new Node(85, node1);
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkSideEffects0);
    checkSideEffects0.visit(nodeTraversal0, node0, node2);
    assertEquals(0, node0.getChildCount());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""tVl=OSGtw,MX"", ""com.google.javascrip.jsomp.SourceKle"");
    checkSideEffects0.process(node0, node0);
    assertEquals(0, node0.getCharno());
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    // Code with hidden side-effect code is common, for example
    // accessing ""el.offsetWidth"" forces a reflow in browsers, to allow this
    // will still allowing local dead code removal in general,
    // protect the ""side-effect free"" code in the source.
    //
    if (protectSideEffectFreeCode) {
        protectSideEffects();
    }
}","public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
    Node node0 = Node.newString(""b\""K:FjrPe>~m}Ffe]K2"", 85, 85);
    Node node1 = new Node(85, node0);
    Node node2 = new Node(125, node1);
    // Undeclared exception!
    try {
        checkSideEffects0.process(node1, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public boolean isIn() {
    return this.getType() == Token.IN;
}","public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node((-3043));
    CheckLevel checkLevel0 = CheckLevel.WARNING;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
    Node node1 = new Node(85, node0);
    Node node2 = new Node(54, node1);
    checkSideEffects0.process(node2, node1);
    assertFalse(node1.isIn());
}",""
"public boolean isIn() {
    return this.getType() == Token.IN;
}","public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, compilerOptions0.checkUnreachableCode, false);
    Node node0 = compiler0.parseInputs();
    checkSideEffects0.process(node0, node0);
    assertFalse(node0.isIn());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, false);
    Node node0 = Node.newNumber((double) 115);
    Node node1 = new Node(115, node0);
    checkSideEffects0.process(node0, node1);
    assertEquals((-1), node0.getCharno());
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    // Code with hidden side-effect code is common, for example
    // accessing ""el.offsetWidth"" forces a reflow in browsers, to allow this
    // will still allowing local dead code removal in general,
    // protect the ""side-effect free"" code in the source.
    //
    if (protectSideEffectFreeCode) {
        protectSideEffects();
    }
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.WARNING;
    CheckSideEffects checkSideEffects0 = new CheckSideEffects(compiler0, checkLevel0, true);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""v83UJNj&CNdS"", ""v83UJNj&CNdS"");
    // Undeclared exception!
    try {
        checkSideEffects0.process(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public boolean isOr() {
    return this.getType() == Token.OR;
}","public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(2918, 2918, 2918);
    Node node1 = new Node(37, node0, node0, node0, node0, 1, 49);
    CheckSideEffects.StripProtection checkSideEffects_StripProtection0 = new CheckSideEffects.StripProtection(compiler0);
    checkSideEffects_StripProtection0.process(node1, node1);
    assertFalse(node1.isOr());
}",""
