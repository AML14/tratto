{
  "test3435" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3435() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test3435"
  },
  "test6869" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6869() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"Creating extern file for exports\", (Charset) null);\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parse();\n    compiler0.getErrorCount();\n}",
    "testName" : "test6869"
  },
  "test1213" : {
    "methodSignature" : "CssRenamingMap getCssRenamingMap()",
    "methodName" : "getCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getCssRenamingMap();\n}",
    "testName" : "test1213"
  },
  "test4647" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4647() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"value\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    compiler0.initCompilerOptionsIfTesting();\n    compiler0.getErrorCount();\n}",
    "testName" : "test4647"
  },
  "test2425" : {
    "methodSignature" : "public void optimize()",
    "methodName" : "optimize",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.optimize();\n}",
    "testName" : "test2425"
  },
  "test7879" : {
    "methodSignature" : "void throwInternalError(String message, Exception cause)",
    "methodName" : "throwInternalError",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7879() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.throwInternalError(\"Duplicate input: {0}\", (Exception) null);\n}",
    "testName" : "test7879"
  },
  "test5657" : {
    "methodSignature" : "public void check()",
    "methodName" : "check",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5657() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.check();\n}",
    "testName" : "test5657"
  },
  "test1010" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"r@tfHZG; $d6\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    JSSourceFile[] jSSourceFileArray1 = new JSSourceFile[2];\n    jSSourceFileArray1[0] = jSSourceFile0;\n    jSSourceFileArray1[1] = jSSourceFile0;\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray1, compilerOptions0);\n    compiler0.parse();\n    compiler0.getErrorCount();\n}",
    "testName" : "test1010"
  },
  "test3233" : {
    "methodSignature" : "String toSource(Node n)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3233() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource((Node) null);\n}",
    "testName" : "test3233"
  },
  "test6667" : {
    "methodSignature" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
    "methodName" : "getReverseAbstractInterpreter",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6667() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();\n}",
    "testName" : "test6667"
  },
  "test8889" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8889() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test8889"
  },
  "test1011" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"r@tfHZG; $d6\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    JSSourceFile[] jSSourceFileArray1 = new JSSourceFile[2];\n    jSSourceFileArray1[0] = jSSourceFile0;\n    jSSourceFileArray1[1] = jSSourceFile0;\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray1, compilerOptions0);\n    compiler0.parse();\n    compiler0.hasErrors();\n}",
    "testName" : "test1011"
  },
  "test2223" : {
    "methodSignature" : "Node parseSyntheticCode(String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode((String) null);\n}",
    "testName" : "test2223"
  },
  "test7677" : {
    "methodSignature" : "public int getCharno()",
    "methodName" : "getCharno",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7677() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"com.google.common.collect.Iterators$3\");\n    Node node0 = compiler0.parseTestCode(\"com.google.common.collect.Iterators$3\");\n    node0.getCharno();\n}",
    "testName" : "test7677"
  },
  "test5455" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5455() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.createPassConfigInternal();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test5455"
  },
  "test033" : {
    "methodSignature" : "public String toSource()",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource();\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypePrefixes);\n}",
    "testName" : "test077"
  },
  "test3839" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3839() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"r@t<HZG;!$d6\", \"}s\");\n    compiler0.compile(jSSourceFile0, (JSModule[]) null, (CompilerOptions) null);\n}",
    "testName" : "test3839"
  },
  "test1617" : {
    "methodSignature" : "ScopeCreator getScopeCreator()",
    "methodName" : "getScopeCreator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    ScopeCreator scopeCreator0 = compiler0.getScopeCreator();\n}",
    "testName" : "test1617"
  },
  "test2829" : {
    "methodSignature" : "VariableMap getVariableMap()",
    "methodName" : "getVariableMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2829() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getVariableMap();\n}",
    "testName" : "test2829"
  },
  "test3637" : {
    "methodSignature" : "void removeChangeHandler(CodeChangeHandler handler)",
    "methodName" : "removeChangeHandler",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3637() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();\n    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);\n}",
    "testName" : "test3637"
  },
  "test1415" : {
    "methodSignature" : "public void setState(IntermediateState state)",
    "methodName" : "setState",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    compiler0.setState(compiler_IntermediateState0);\n}",
    "testName" : "test1415"
  },
  "test4849" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4849() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test4849"
  },
  "test2627" : {
    "methodSignature" : "void setCssRenamingMap(CssRenamingMap map)",
    "methodName" : "setCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setCssRenamingMap((CssRenamingMap) null);\n}",
    "testName" : "test2627"
  },
  "test5859" : {
    "methodSignature" : "void endPass()",
    "methodName" : "endPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5859() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.endPass();\n}",
    "testName" : "test5859"
  },
  "test8283" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8283() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    doReturn((String) null).when(sourceFile_Generator0).getCode();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);\n    jSSourceFileArray0[0] = jSSourceFile0;\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getSourceRegion((String) null, 7);\n}",
    "testName" : "test8283"
  },
  "test6061" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6061() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;\n    compilerOptions0.tracer = compilerOptions_TracerMode0;\n    Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n}",
    "testName" : "test6061"
  },
  "test8081" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8081() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Region region0 = compiler0.getSourceRegion(\"/Users/elliottzackrone/IdeaProjects/defects4jprefix/Recording function information/Recording function information\", (-1645));\n}",
    "testName" : "test8081"
  },
  "test3031" : {
    "methodSignature" : "Supplier<String> getUniqueNameIdSupplier()",
    "methodName" : "getUniqueNameIdSupplier",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3031() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n}",
    "testName" : "test3031"
  },
  "test6465" : {
    "methodSignature" : "void addIncrementalSourceAst(JsAst ast)",
    "methodName" : "addIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6465() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"u?>t]k\", \"'?0l.vA$cU?Vki&K\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test6465"
  },
  "test8687" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8687() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule((String) null);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"n\");\n    jSModule0.addFirst(jSSourceFile0);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test8687"
  },
  "test2021" : {
    "methodSignature" : "boolean isNormalized()",
    "methodName" : "isNormalized",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.isNormalized();\n}",
    "testName" : "test2021"
  },
  "test7475" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7475() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    PropertyRenamingPolicy propertyRenamingPolicy0 = PropertyRenamingPolicy.HEURISTIC;\n    compilerOptions0.propertyRenaming = propertyRenamingPolicy0;\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test7475"
  },
  "test5253" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5253() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSModule jSModule0 = new JSModule((String) null);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"]!eUC4{EZ4o\", (String) null);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    CompilerInput compilerInput0 = new CompilerInput(jsAst0);\n    jSModule0.addFirst(compilerInput0);\n    JSModule[] jSModuleArray0 = new JSModule[1];\n    jSModuleArray0[0] = jSModule0;\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test5253"
  },
  "test8485" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8485() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"\", (Charset) null);\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n    compiler0.getErrorCount();\n}",
    "testName" : "test8485"
  },
  "test4041" : {
    "methodSignature" : "public Scope getTopScope()",
    "methodName" : "getTopScope",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4041() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Scope scope0 = compiler0.getTopScope();\n}",
    "testName" : "test4041"
  },
  "test6263" : {
    "methodSignature" : "public boolean isExtern()",
    "methodName" : "isExtern",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6263() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    CompilerInput compilerInput0 = compiler0.newExternInput((String) null);\n    compilerInput0.isExtern();\n}",
    "testName" : "test6263"
  },
  "test5051" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5051() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSModule jSModule0 = new JSModule((String) null);\n    JSModule[] jSModuleArray0 = new JSModule[1];\n    jSModuleArray0[0] = jSModule0;\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test5051"
  },
  "test022" : {
    "methodSignature" : "public String[] toSourceArray()",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray();\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public void normalize()",
    "methodName" : "normalize",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.normalize();\n}",
    "testName" : "test066"
  },
  "test1819" : {
    "methodSignature" : "boolean precheck()",
    "methodName" : "precheck",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.precheck();\n}",
    "testName" : "test1819"
  },
  "test2324" : {
    "methodSignature" : "public void processDefines()",
    "methodName" : "processDefines",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2324() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.processDefines();\n}",
    "testName" : "test2324"
  },
  "test5758" : {
    "methodSignature" : "void startPass(String passName)",
    "methodName" : "startPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5758() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    compiler0.startPass((String) null);\n    compiler0.startPass((String) null);\n}",
    "testName" : "test5758"
  },
  "test3536" : {
    "methodSignature" : "public Node getRoot()",
    "methodName" : "getRoot",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3536() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.getRoot();\n}",
    "testName" : "test3536"
  },
  "test6768" : {
    "methodSignature" : "public boolean isIdeMode()",
    "methodName" : "isIdeMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6768() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.parse();\n    compiler0.isIdeMode();\n}",
    "testName" : "test6768"
  },
  "test1314" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"7}\", \"7}\");\n    compiler0.getErrorCount();\n}",
    "testName" : "test1314"
  },
  "test4546" : {
    "methodSignature" : "SymbolTable acquireSymbolTable()",
    "methodName" : "acquireSymbolTable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4546() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.acquireSymbolTable();\n    compiler0.acquireSymbolTable();\n}",
    "testName" : "test4546"
  },
  "test2122" : {
    "methodSignature" : "VariableMap getPropertyMap()",
    "methodName" : "getPropertyMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getPropertyMap();\n}",
    "testName" : "test2122"
  },
  "test7778" : {
    "methodSignature" : "public boolean isIdeMode()",
    "methodName" : "isIdeMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7778() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    JSError jSError0 = JSError.make((String) null, (-1305), (-1305), compilerOptions0.checkMethods, compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);\n    compiler0.report(jSError0);\n    compiler0.isIdeMode();\n}",
    "testName" : "test7778"
  },
  "test5556" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5556() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.getPassConfig();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test5556"
  },
  "test3334" : {
    "methodSignature" : "public SourceMap getSourceMap()",
    "methodName" : "getSourceMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3334() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SourceMap sourceMap0 = compiler0.getSourceMap();\n}",
    "testName" : "test3334"
  },
  "test6566" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6566() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    SourceFile sourceFile0 = SourceFile.fromCode((String) null, \"\");\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test6566"
  },
  "test8788" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8788() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test8788"
  },
  "test011" : {
    "methodSignature" : "public String toSource(final JSModule module)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"ul2>|E*M!Z&&\");\n    compiler0.toSource(jSModule0);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public String[] toSourceArray(final JSModule module)",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"b`(r|;PI\");\n    compiler0.toSourceArray(jSModule0);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "void resetUniqueNameId()",
    "methodName" : "resetUniqueNameId",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.resetUniqueNameId();\n}",
    "testName" : "test099"
  },
  "test2728" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getWarningCount();\n}",
    "testName" : "test2728"
  },
  "test1718" : {
    "methodSignature" : "public void rebuildInputsFromModules()",
    "methodName" : "rebuildInputsFromModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.rebuildInputsFromModules();\n}",
    "testName" : "test1718"
  },
  "test2526" : {
    "methodSignature" : "CheckAccessControls(AbstractCompiler compiler)",
    "methodName" : "CheckAccessControls",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);\n}",
    "testName" : "test2526"
  },
  "test3738" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3738() throws Throwable {\n    Logger logger0 = Tracer.logger;\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test3738"
  },
  "test1516" : {
    "methodSignature" : "public void disableThreads()",
    "methodName" : "disableThreads",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.disableThreads();\n}",
    "testName" : "test1516"
  },
  "test4748" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4748() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"M,a8X>)j8\";\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"Creating extern file for exports\", (Charset) null);\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test4748"
  },
  "test8182" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8182() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    Region region0 = compiler0.getSourceRegion(\"\", 301);\n}",
    "testName" : "test8182"
  },
  "test7576" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7576() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test7576"
  },
  "test5354" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5354() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test5354"
  },
  "test3132" : {
    "methodSignature" : "void recordFunctionInformation()",
    "methodName" : "recordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3132() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.recordFunctionInformation();\n}",
    "testName" : "test3132"
  },
  "test8586" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8586() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test8586"
  },
  "test6364" : {
    "methodSignature" : "public CompilerInput newExternInput(String name)",
    "methodName" : "newExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6364() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[4];\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"// Input %num%\", (String) null);\n    jSSourceFileArray0[0] = jSSourceFile0;\n    JSSourceFile jSSourceFile1 = JSSourceFile.fromCode((String) null, (String) null);\n    jSSourceFileArray0[1] = jSSourceFile1;\n    jSSourceFileArray0[2] = jSSourceFile0;\n    jSSourceFileArray0[3] = jSSourceFileArray0[2];\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.newExternInput((String) null);\n}",
    "testName" : "test6364"
  },
  "test5152" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5152() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"u?>t]k\");\n    JSModule jSModule0 = new JSModule(\"u?>t]k\");\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"\", \"_?.u)>y!P&@MZ\");\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    CompilerInput compilerInput0 = new CompilerInput(jsAst0);\n    jSModule0.addFirst(compilerInput0);\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    jSSourceFileArray0[2] = jSSourceFile0;\n    jSSourceFileArray0[3] = jSSourceFile0;\n    jSSourceFileArray0[4] = jSSourceFile0;\n    JSModule[] jSModuleArray0 = new JSModule[7];\n    jSModuleArray0[0] = jSModule0;\n    jSModuleArray0[1] = jSModule0;\n    jSModuleArray0[2] = jSModule0;\n    jSModuleArray0[3] = jSModule0;\n    jSModuleArray0[4] = jSModule0;\n    jSModuleArray0[5] = jSModule0;\n    jSModuleArray0[6] = jSModule0;\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test5152"
  },
  "test8384" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8384() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule((String) null);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test8384"
  },
  "test6162" : {
    "methodSignature" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
    "methodName" : "areNodesEqualForInlining",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6162() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.common.collect.Iterators$3\");\n    boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);\n}",
    "testName" : "test6162"
  },
  "test3940" : {
    "methodSignature" : "public JSError[] getMessages()",
    "methodName" : "getMessages",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3940() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getMessages();\n}",
    "testName" : "test3940"
  },
  "test2930" : {
    "methodSignature" : "FunctionInformationMap getFunctionalInformationMap()",
    "methodName" : "getFunctionalInformationMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2930() throws Throwable {\n    Compiler compiler0 = new Compiler((PrintStream) null);\n    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();\n}",
    "testName" : "test2930"
  },
  "test4950" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4950() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"u?>t]k\");\n    JSModule jSModule0 = new JSModule(\"u?>t]k\");\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"\", \"_?.u)>y!P&@MZ\");\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    CompilerInput compilerInput0 = new CompilerInput(jsAst0);\n    jSModule0.addFirst(compilerInput0);\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];\n    JSModule[] jSModuleArray0 = new JSModule[7];\n    jSModuleArray0[0] = jSModule0;\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test4950"
  },
  "test5960" : {
    "methodSignature" : "public void parse()",
    "methodName" : "parse",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5960() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.reportCodeChange();\n    compiler0.getErrorManager();\n    compiler0.parse();\n}",
    "testName" : "test5960"
  },
  "test000" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public void toSource(final CodeBuilder cb, final int inputSeqNum, final Node root)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();\n    Node node0 = new Node((-53));\n    compiler0.toSource(compiler_CodeBuilder0, (-53), node0);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "void setNormalized()",
    "methodName" : "setNormalized",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setNormalized();\n}",
    "testName" : "test088"
  },
  "test1920" : {
    "methodSignature" : "ControlFlowGraph<Node> computeCFG()",
    "methodName" : "computeCFG",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.computeCFG();\n}",
    "testName" : "test1920"
  },
  "test7980" : {
    "methodSignature" : "public Result compile(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7980() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    compilerOptions0.ideMode = true;\n    Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n}",
    "testName" : "test7980"
  },
  "test8990" : {
    "methodSignature" : "int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8990() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.initCompilerOptionsIfTesting();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    errorManager0.getWarningCount();\n}",
    "testName" : "test8990"
  }
}