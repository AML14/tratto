project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""ul2>|E*M!Z&&"");
    // Undeclared exception!
    try {
        compiler0.toSource(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Node node0 = new Node((-53));
    // Undeclared exception!
    try {
        compiler0.toSource(compiler_CodeBuilder0, (-53), node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""b`(r|;PI"");
    // Undeclared exception!
    try {
        compiler0.toSourceArray(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.normalize();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.stripCode(compilerOptions0.aliasableStrings, compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripTypePrefixes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test088,"public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.setNormalized();
}",0,
project,0,test099,"public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.resetUniqueNameId();
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""r@tfHZG; $d6"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    JSSourceFile[] jSSourceFileArray1 = new JSSourceFile[2];
    jSSourceFileArray1[0] = jSSourceFile0;
    jSSourceFileArray1[1] = jSSourceFile0;
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray1, compilerOptions0);
    compiler0.parse();
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test1011,"public void test1011() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""r@tfHZG; $d6"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    JSSourceFile[] jSSourceFileArray1 = new JSSourceFile[2];
    jSSourceFileArray1[0] = jSSourceFile0;
    jSSourceFileArray1[1] = jSSourceFile0;
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray1, compilerOptions0);
    compiler0.parse();
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test1213,"public void test1213() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test1314,"public void test1314() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""7}"", ""7}"");
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(1, compiler0.getErrorCount())"
project,0,test1415,"public void test1415() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
    compiler0.setState(compiler_IntermediateState0);
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.disableThreads();
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    ScopeCreator scopeCreator0 = compiler0.getScopeCreator();
    assertNull(scopeCreator0);
}",0,assertNotNull(scopeCreator0)
project,0,test1718,"public void test1718() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.precheck();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1920,"public void test1920() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.isNormalized();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2122,"public void test2122() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2324,"public void test2324() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.optimize();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
}",0,
project,0,test2627,"public void test2627() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",0,assertNotNull(variableMap0)
project,0,test2930,"public void test2930() throws Throwable {
    Compiler compiler0 = new Compiler((PrintStream) null);
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",0,assertNotNull(supplier0)
project,0,test3132,"public void test3132() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3233,"public void test3233() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource((Node) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Cannot build without root node being specified
        //
        verifyException(""com.google.javascript.jscomp.CodePrinter$Builder"", e);
    }
}",0,
project,0,test3334,"public void test3334() throws Throwable {
    Compiler compiler0 = new Compiler();
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",0,assertNotNull(sourceMap0)
project,0,test3435,"public void test3435() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3536,"public void test3536() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",0,assertNotNull(node0)
project,0,test3637,"public void test3637() throws Throwable {
    Compiler compiler0 = new Compiler();
    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
}",0,
project,0,test3738,"public void test3738() throws Throwable {
    Logger logger0 = Tracer.logger;
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    assertEquals(0, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test3839,"public void test3839() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""r@t<HZG;!$d6"", ""}s"");
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, (JSModule[]) null, (CompilerOptions) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test3940,"public void test3940() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test4041,"public void test4041() throws Throwable {
    Compiler compiler0 = new Compiler();
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",0,assertNotNull(scope0)
project,0,test4546,"public void test4546() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.acquireSymbolTable();
    // Undeclared exception!
    try {
        compiler0.acquireSymbolTable();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // SymbolTable already acquired
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test4647,"public void test4647() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""value"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    compiler0.initCompilerOptionsIfTesting();
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test4748,"public void test4748() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = ""M,a8X>)j8"";
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""Creating extern file for exports"", (Charset) null);
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test4849,"public void test4849() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    JSModule[] jSModuleArray0 = new JSModule[0];
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",0,assertTrue(compiler0.hasErrors())
project,0,test4950,"public void test4950() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?>t]k"");
    JSModule jSModule0 = new JSModule(""u?>t]k"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", ""_?.u)>y!P&@MZ"");
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    CompilerInput compilerInput0 = new CompilerInput(jsAst0);
    jSModule0.addFirst(compilerInput0);
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    JSModule[] jSModuleArray0 = new JSModule[7];
    jSModuleArray0[0] = jSModule0;
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.JsAst"", e);
    }
}",0,
project,0,test5051,"public void test5051() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSModule jSModule0 = new JSModule((String) null);
    JSModule[] jSModuleArray0 = new JSModule[1];
    jSModuleArray0[0] = jSModule0;
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}",0,assertFalse(compiler0.hasErrors())
project,0,test5152,"public void test5152() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""u?>t]k"");
    JSModule jSModule0 = new JSModule(""u?>t]k"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", ""_?.u)>y!P&@MZ"");
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    CompilerInput compilerInput0 = new CompilerInput(jsAst0);
    jSModule0.addFirst(compilerInput0);
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[5];
    jSSourceFileArray0[0] = jSSourceFile0;
    jSSourceFileArray0[1] = jSSourceFile0;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFile0;
    jSSourceFileArray0[4] = jSSourceFile0;
    JSModule[] jSModuleArray0 = new JSModule[7];
    jSModuleArray0[0] = jSModule0;
    jSModuleArray0[1] = jSModule0;
    jSModuleArray0[2] = jSModule0;
    jSModuleArray0[3] = jSModule0;
    jSModuleArray0[4] = jSModule0;
    jSModuleArray0[5] = jSModule0;
    jSModuleArray0[6] = jSModule0;
    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
    assertEquals(3, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test5253,"public void test5253() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSModule jSModule0 = new JSModule((String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""]!eUC4{EZ4o"", (String) null);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    CompilerInput compilerInput0 = new CompilerInput(jsAst0);
    jSModule0.addFirst(compilerInput0);
    JSModule[] jSModuleArray0 = new JSModule[1];
    jSModuleArray0[0] = jSModule0;
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: FAILED ASSERTION
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5354,"public void test5354() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    JSModule[] jSModuleArray0 = new JSModule[0];
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5455,"public void test5455() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.createPassConfigInternal();
    compiler0.setPassConfig(passConfig0);
}",0,
project,0,test5556,"public void test5556() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test5657,"public void test5657() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.check();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5758,"public void test5758() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    compiler0.startPass((String) null);
    // Undeclared exception!
    try {
        compiler0.startPass((String) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test5859,"public void test5859() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test5960,"public void test5960() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.reportCodeChange();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.parse();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6061,"public void test6061() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    CompilerOptions.TracerMode compilerOptions_TracerMode0 = CompilerOptions.TracerMode.FAST;
    compilerOptions0.tracer = compilerOptions_TracerMode0;
    Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertTrue(result0.success);
}",0,
project,0,test6162,"public void test6162() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.common.collect.Iterators$3"");
    boolean boolean0 = compiler0.areNodesEqualForInlining(node0, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test6263,"public void test6263() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    CompilerInput compilerInput0 = compiler0.newExternInput((String) null);
    assertTrue(compilerInput0.isExtern());
}",0,assertTrue(compilerInput0.isExtern())
project,0,test6364,"public void test6364() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[4];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""// Input %num%"", (String) null);
    jSSourceFileArray0[0] = jSSourceFile0;
    JSSourceFile jSSourceFile1 = JSSourceFile.fromCode((String) null, (String) null);
    jSSourceFileArray0[1] = jSSourceFile1;
    jSSourceFileArray0[2] = jSSourceFile0;
    jSSourceFileArray0[3] = jSSourceFileArray0[2];
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.newExternInput((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name: null
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",0,
project,0,test6465,"public void test6465() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""u?>t]k"", ""'?0l.vA$cU?Vki&K"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name u?>t]k
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test6566,"public void test6566() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    SourceFile sourceFile0 = SourceFile.fromCode((String) null, """");
    JsAst jsAst0 = new JsAst(sourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test6667,"public void test6667() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter1 = compiler0.getReverseAbstractInterpreter();
    assertSame(reverseAbstractInterpreter1, reverseAbstractInterpreter0);
}",0,
project,0,test6768,"public void test6768() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    compiler0.parse();
    assertFalse(compiler0.isIdeMode());
}",0,assertTrue(compiler0.isIdeMode())
project,0,test6869,"public void test6869() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""Creating extern file for exports"", (Charset) null);
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parse();
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test7475,"public void test7475() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    PropertyRenamingPolicy propertyRenamingPolicy0 = PropertyRenamingPolicy.HEURISTIC;
    compilerOptions0.propertyRenaming = propertyRenamingPolicy0;
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertTrue(boolean0);
}",0,
project,0,test7576,"public void test7576() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test7677,"public void test7677() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""com.google.common.collect.Iterators$3"");
    Node node0 = compiler0.parseTestCode(""com.google.common.collect.Iterators$3"");
    assertEquals(0, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test7778,"public void test7778() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    JSError jSError0 = JSError.make((String) null, (-1305), (-1305), compilerOptions0.checkMethods, compiler0.OPTIMIZE_LOOP_ERROR, (String[]) null);
    compiler0.report(jSError0);
    assertFalse(compiler0.isIdeMode());
}",0,
project,0,test7879,"public void test7879() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""Duplicate input: {0}"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Duplicate input: {0}
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test7980,"public void test7980() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    compilerOptions0.ideMode = true;
    Result result0 = compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertTrue(result0.success);
}",0,
project,0,test8081,"public void test8081() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion(""/Users/elliottzackrone/IdeaProjects/defects4jprefix/Recording function information/Recording function information"", (-1645));
    assertNull(region0);
}",0,
project,0,test8182,"public void test8182() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    Region region0 = compiler0.getSourceRegion("""", 301);
    assertNull(region0);
}",0,assertNotNull(region0)
project,0,test8283,"public void test8283() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(sourceFile_Generator0).getCode();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator((String) null, sourceFile_Generator0);
    jSSourceFileArray0[0] = jSSourceFile0;
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getSourceRegion((String) null, 7);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.SourceFile"", e);
    }
}",0,
project,0,test8384,"public void test8384() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8485,"public void test8485() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("""", (Charset) null);
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    jSSourceFileArray0[0] = jSSourceFile0;
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(2, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test8586,"public void test8586() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8687,"public void test8687() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule((String) null);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""n"");
    jSModule0.addFirst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",1,
project,0,test8788,"public void test8788() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}",0,
project,0,test8889,"public void test8889() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertEquals(""digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\""BLOCK\""];\n  node0 -> RETURN [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n}\n"", string0);
}",0,
project,0,test8990,"public void test8990() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.initCompilerOptionsIfTesting();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertEquals(0, errorManager0.getWarningCount());
}",0,"assertEquals(0, errorManager0.getWarningCount())"
