project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, jSType0);
    JSType jSType1 = modificationVisitor0.caseParameterizedType(parameterizedType0);
    assertFalse(jSType1.isEnumElementType());
}",0,
project,0,test011,"public void test011() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) noObjectType0, jSType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType1 = unionType0.collapseUnion();
    JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(jSType1);
    assertNotNull(jSType_TypePair0);
}",0,assertNotNull(jSType_TypePair0)
project,0,test033,"public void test033() throws Throwable {
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    AllType allType0 = new AllType((JSTypeRegistry) null);
    arrayDeque0.add(allType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, arrayDeque0);
    boolean boolean0 = unionType0.matchesNumberContext();
    assertFalse(boolean0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
    boolean boolean0 = unionType0.matchesInt32Context();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test055,"public void test055() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unionType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) unionType0, (JSType) noResolvedType0, (JSType) noResolvedType0);
    UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
    boolean boolean0 = unionType1.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test066,"public void test066() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<VoidType> immutableList0 = ImmutableList.of(voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0);
    ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
    boolean boolean0 = unionType0.matchesObjectContext();
    assertFalse(boolean0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    boolean boolean0 = jSType0.matchesObjectContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test088,"public void test088() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) nullType0, (JSType) nullType0, (JSType) nullType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.findPropertyType(""Not declared as a type name"");
    assertNull(jSType0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    JSType jSType1 = jSType0.findPropertyType(""Not declared as a type name"");
    assertFalse(jSType1.isConstructor());
}",0,assertFalse(jSType1.isConstructor())
project,0,test1010,"public void test1010() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    StringType stringType0 = new StringType(jSTypeRegistry0);
    arrayDeque0.add(stringType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    JSType jSType0 = unionType0.findPropertyType(""Named type with empty name component"");
    assertNull(jSType0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""eM&"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.findPropertyType(""Not declared as a constructor"");
    assertFalse(jSType0.isParameterizedType());
}",0,assertFalse(jSType0.isParameterizedType())
project,0,test1212,"public void test1212() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<VoidType> immutableList0 = ImmutableList.of(voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0);
    ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
    NoType noType0 = (NoType) unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
    boolean boolean0 = unionType0.canAssignTo(noType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test1213,"public void test1213() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<VoidType> immutableList0 = ImmutableList.of(voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0);
    ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
    NoType noType0 = (NoType) unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
    boolean boolean0 = unionType0.canAssignTo(noType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1314,"public void test1314() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""eM&"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    boolean boolean0 = unionType0.canAssignTo(templateType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1415,"public void test1415() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    boolean boolean0 = unionType0.canBeCalled();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1516,"public void test1516() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    boolean boolean0 = jSType0.canBeCalled();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1617,"public void test1617() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    JSType jSType1 = jSType0.restrictByNotNullOrUndefined();
    assertFalse(jSType1.isParameterizedType());
}",0,assertFalse(jSType1.isParameterizedType())
project,0,test1718,"public void test1718() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    jSType0.testForEquality(noResolvedType0);
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    jSType0.testForEquality(noObjectType0);
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    boolean boolean0 = jSType0.isNullable();
    assertFalse(boolean0);
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    boolean boolean0 = jSType0.isNullable();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2122,"public void test2122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""eM&"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.getLeastSupertype(templateType0);
    assertFalse(jSType0.isNullType());
}",0,
project,0,test2223,"public void test2223() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<VoidType> immutableList0 = ImmutableList.of(voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0, voidType0);
    ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Collection<? extends JSType>) immutableList0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
    boolean boolean0 = unionType0.isStruct();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2324,"public void test2324() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    boolean boolean0 = jSType0.isDict();
    assertFalse(boolean0);
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    Stack<JSType> stack0 = new Stack<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, stack0);
    JSType jSType0 = unionType0.getLeastSupertype(unionType0);
    assertFalse(jSType0.isStringValueType());
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    JSType jSType1 = jSType0.collapseUnion();
    JSType jSType2 = jSType0.getLeastSupertype(jSType1);
    assertEquals(0, JSType.NOT_ENUMDECL);
}",0,
project,0,test2627,"public void test2627() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "","");
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(voidType0);
    JSType jSType0 = unionType0.getLeastSupertype(jSType_TypePair0.typeB);
    assertSame(jSType0, unionType0);
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    StringType stringType0 = new StringType(jSTypeRegistry0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    JSType jSType0 = unionType0.meet(stringType0);
    assertFalse(jSType0.isFunctionType());
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnionType unionType0 = (UnionType) jSTypeRegistry0.createOptionalType(noResolvedType0);
    NoResolvedType noResolvedType1 = (NoResolvedType) unionType0.meet(noResolvedType0);
    assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
}",0,
project,0,test2930,"public void test2930() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    UnionType unionType0 = (UnionType) jSTypeRegistry0.createOptionalType(noObjectType0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) numberType0, (JSType) numberType0, (JSType) unionType0, (JSType) unionType0, (JSType) unionType0, (JSType) numberType0, (JSType) noObjectType0);
    UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
    UnionType unionType2 = (UnionType) unionType0.meet(unionType1);
    assertTrue(unionType2.equals((Object) unionType0));
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    StringType stringType0 = new StringType(jSTypeRegistry0);
    arrayDeque0.add(stringType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    JSType jSType0 = unionType0.autobox();
    NoType noType0 = (NoType) unionType0.meet(jSType0);
    assertFalse(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test3132,"public void test3132() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    JSType jSType0 = unionType0.meet(unionType0);
    assertTrue(jSType0.canBeCalled());
}",1,
project,0,test3533,"public void test3533() throws Throwable {
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
    boolean boolean0 = unionType0.hasProperty(""Not declared as a type name"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3634,"public void test3634() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    boolean boolean0 = jSType0.hasProperty(""Named type with empty name component"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3735,"public void test3735() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    boolean boolean0 = jSType0.isObject();
    assertFalse(boolean0);
}",0,
project,0,test3836,"public void test3836() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnionType unionType0 = (UnionType) jSTypeRegistry0.createOptionalType(noResolvedType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = unionType0.contains(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test3837,"public void test3837() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnionType unionType0 = (UnionType) jSTypeRegistry0.createOptionalType(noResolvedType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    boolean boolean0 = unionType0.contains(errorFunctionType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3938,"public void test3938() throws Throwable {
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
    boolean boolean0 = unionType0.contains(stringType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4039,"public void test4039() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnionType unionType0 = (UnionType) jSTypeRegistry0.createOptionalType(noResolvedType0);
    VoidType voidType0 = (VoidType) unionType0.getRestrictedUnion(noResolvedType0);
    assertTrue(voidType0.matchesStringContext());
}",0,assertTrue(voidType0.matchesStringContext())
project,0,test4140,"public void test4140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""eM&"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.getRestrictedUnion(templateType0);
    assertTrue(jSType0.isTemplateType());
}",0,assertFalse(jSType0.isTemplateType())
project,0,test4241,"public void test4241() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    String string0 = jSType0.toAnnotationString();
    assertEquals(""(?|undefined)"", string0);
}",0,
project,0,test4342,"public void test4342() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    boolean boolean0 = unionType0.isSubtype(templateType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test4443,"public void test4443() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    JSType jSType1 = allType0.getGreatestSubtype(jSType0);
    assertFalse(jSType1.isInterface());
}",0,assertFalse(jSType1.isInterface())
project,0,test4544,"public void test4544() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    boolean boolean0 = jSType0.isNumber();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4645,"public void test4645() throws Throwable {
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
    BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
    assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
}",0,
project,0,test4746,"public void test4746() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    BooleanLiteralSet booleanLiteralSet0 = jSType0.getPossibleToBooleanOutcomes();
    assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet0);
}",0,assertNotNull(booleanLiteralSet0)
project,0,test4847,"public void test4847() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    StringType stringType0 = new StringType(jSTypeRegistry0);
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    arrayDeque0.add(stringType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(stringType0);
    assertNotNull(jSType_TypePair0);
}",0,assertNotNull(jSType_TypePair0)
project,0,test4948,"public void test4948() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderEquality(noResolvedType0);
    assertNotNull(jSType_TypePair0);
}",0,assertNotNull(jSType_TypePair0)
project,0,test5049,"public void test5049() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(jSType0);
    assertNotNull(jSType_TypePair0);
}",0,assertNotNull(jSType_TypePair0)
project,0,test5150,"public void test5150() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Not declared as a constructor"", 1, 0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) namedType0, (JSType) namedType0, (JSType) namedType0, (JSType) namedType0, (JSType) namedType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
    assertTrue(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test5151,"public void test5151() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Not declared as a constructor"", 1, 0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noResolvedType0, (JSType) noResolvedType0, (JSType) namedType0, (JSType) namedType0, (JSType) namedType0, (JSType) namedType0, (JSType) namedType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
    assertTrue(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test5252,"public void test5252() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    UnionType unionType0 = (UnionType) jSTypeRegistry0.createOptionalType(noResolvedType0);
    unionType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
    assertTrue(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test5353,"public void test5353() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) unionType0;
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, jSTypeArray0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, functionType0, unionType0);
    arrayDeque0.add(parameterizedType0);
    UnionType unionType1 = new UnionType(jSTypeRegistry0, arrayDeque0);
    // Undeclared exception!
    try {
        unionType1.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    String string0 = jSType0.toDebugHashCodeString();
    assertEquals(""{(function (this:me, {10}): me,{12})}"", string0);
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    boolean boolean0 = unionType0.setValidator((Predicate<JSType>) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test5656,"public void test5656() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noResolvedType0);
    // Undeclared exception!
    try {
        jSType0.setValidator((Predicate<JSType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    ArrayDeque<JSType> arrayDeque0 = new ArrayDeque<JSType>();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, arrayDeque0);
    JSType jSType0 = unionType0.collapseUnion();
    assertNull(jSType0);
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""eM&"");
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType0 = unionType0.collapseUnion();
    assertFalse(jSType0.isFunctionType());
}",0,assertTrue(jSType0.isFunctionType())
project,0,test5959,"public void test5959() throws Throwable {
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
    // Undeclared exception!
    try {
        unionType0.collapseUnion();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalType(noObjectType0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType0, (JSType) noObjectType0, jSType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    JSType jSType1 = unionType0.collapseUnion();
    assertFalse(jSType1.isConstructor());
}",0,assertFalse(jSType1.isConstructor())
project,0,test6161,"public void test6161() throws Throwable {
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) stringType0, (JSType) stringType0, (JSType) stringType0);
    UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
    unionType0.matchConstraint(stringType0);
    assertFalse(unionType0.isConstructor());
}",0,assertTrue(unionType0.isConstructor())
project,0,test6262,"public void test6262() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    UnionType unionType0 = (UnionType) jSTypeRegistry0.createOptionalType(noObjectType0);
    boolean boolean0 = unionType0.hasAnyTemplateInternal();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test6363,"public void test6363() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) templateType0, (JSType) templateType0);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    boolean boolean0 = unionType0.hasAnyTemplateInternal();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
