project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isNoType());
}",0,assertTrue(allType0.isNoType())
project,0,test0001,"public void test0001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isNoObjectType());
}",0,assertTrue(allType0.isNoObjectType())
project,0,test0002,"public void test0002() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(allType0);
    assertFalse(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test0003,"public void test0003() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(allType0);
    assertFalse(noResolvedType0.isAllType());
}",0,assertTrue(noResolvedType0.isAllType())
project,0,test0004,"public void test0004() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isNoResolvedType());
}",0,assertTrue(allType0.isNoResolvedType())
project,0,test0005,"public void test0005() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(allType0);
    assertFalse(allType0.isResolved());
}",0,assertTrue(allType0.isResolved())
project,0,test0016,"public void test0016() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    boolean boolean0 = jSType0.isStringValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test0017,"public void test0017() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    boolean boolean0 = jSType0.isStringValueType();
    assertFalse(jSType0.isAllType());
}",0,
project,0,test0018,"public void test0018() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    boolean boolean0 = jSType0.isStringValueType();
    assertFalse(jSType0.isNoType());
}",0,assertTrue(jSType0.isNoType())
project,0,test0019,"public void test0019() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    boolean boolean0 = jSType0.isStringValueType();
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test00110,"public void test00110() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    boolean boolean0 = jSType0.isStringValueType();
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test00111,"public void test00111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    boolean boolean0 = jSType0.isStringValueType();
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test00212,"public void test00212() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isBooleanObjectType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test00213,"public void test00213() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isBooleanObjectType();
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test00214,"public void test00214() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isBooleanObjectType();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test00215,"public void test00215() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isBooleanObjectType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test00216,"public void test00216() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isBooleanObjectType();
    assertFalse(boolean0);
}",0,
project,0,test00217,"public void test00217() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isBooleanObjectType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test00318,"public void test00318() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, ""m(xW=htH0m>*Au"");
    enumElementType0.findPropertyType(""1PMq1"");
    assertFalse(enumElementType0.isAllType());
}",0,assertTrue(enumElementType0.isAllType())
project,0,test00319,"public void test00319() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, ""m(xW=htH0m>*Au"");
    enumElementType0.findPropertyType(""1PMq1"");
    assertFalse(enumElementType0.isNoType());
}",0,assertTrue(enumElementType0.isNoType())
project,0,test00320,"public void test00320() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, ""m(xW=htH0m>*Au"");
    enumElementType0.findPropertyType(""1PMq1"");
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test00321,"public void test00321() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, ""m(xW=htH0m>*Au"");
    enumElementType0.findPropertyType(""1PMq1"");
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test00322,"public void test00322() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, ""m(xW=htH0m>*Au"");
    enumElementType0.findPropertyType(""1PMq1"");
    assertFalse(enumElementType0.isNoResolvedType());
}",0,assertTrue(enumElementType0.isNoResolvedType())
project,0,test00423,"public void test00423() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test00424,"public void test00424() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test00425,"public void test00425() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test00426,"public void test00426() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test00427,"public void test00427() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getJSDocInfo();
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test00528,"public void test00528() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    String string0 = booleanType0.toDebugHashCodeString();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test00529,"public void test00529() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    String string0 = booleanType0.toDebugHashCodeString();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test00530,"public void test00530() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    String string0 = booleanType0.toDebugHashCodeString();
    assertEquals(""{270}"", string0);
}",0,
project,0,test00531,"public void test00531() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    String string0 = booleanType0.toDebugHashCodeString();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test00632,"public void test00632() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isRegexpType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test00633,"public void test00633() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isRegexpType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test00634,"public void test00634() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isRegexpType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test00635,"public void test00635() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isRegexpType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test00636,"public void test00636() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isRegexpType();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test00637,"public void test00637() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isRegexpType();
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test00738,"public void test00738() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.collapseUnion();
    assertFalse(jSType0.isAllType());
}",0,
project,0,test00739,"public void test00739() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.collapseUnion();
    assertFalse(jSType0.isNoType());
}",0,assertTrue(jSType0.isNoType())
project,0,test00740,"public void test00740() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.collapseUnion();
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test00741,"public void test00741() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.collapseUnion();
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test00742,"public void test00742() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.collapseUnion();
    assertFalse(jSType0.isResolved());
}",0,assertFalse(jSType0.isResolved())
project,0,test00843,"public void test00843() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isString();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test00844,"public void test00844() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isString();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test00845,"public void test00845() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isString();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test00846,"public void test00846() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isString();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test00847,"public void test00847() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isString();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test00948,"public void test00948() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDateType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test00949,"public void test00949() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDateType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test00950,"public void test00950() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDateType();
    assertFalse(booleanType0.isNoType());
}",0,assertTrue(booleanType0.isNoType())
project,0,test00951,"public void test00951() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDateType();
    assertFalse(booleanType0.isResolved());
}",0,
project,0,test00952,"public void test00952() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDateType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test00953,"public void test00953() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDateType();
    assertFalse(booleanType0.isAllType());
}",0,assertTrue(booleanType0.isAllType())
project,0,test01054,"public void test01054() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    jSType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertFalse(noResolvedType0.hasCachedValues())
project,0,test01055,"public void test01055() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(numberType0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    jSType0.getTypesUnderShallowInequality(jSType_TypePair0.typeB);
    assertFalse(numberType0.isVoidType());
}",0,assertTrue(numberType0.isVoidType())
project,0,test01156,"public void test01156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    String string0 = enumElementType0.toAnnotationString();
    assertEquals(""Not declared as a constructor"", string0);
}",0,
project,0,test01157,"public void test01157() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    String string0 = enumElementType0.toAnnotationString();
    assertFalse(enumElementType0.isNoResolvedType());
}",0,assertTrue(enumElementType0.isNoResolvedType())
project,0,test01158,"public void test01158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    String string0 = enumElementType0.toAnnotationString();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test01159,"public void test01159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    String string0 = enumElementType0.toAnnotationString();
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test01160,"public void test01160() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    String string0 = enumElementType0.toAnnotationString();
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test01261,"public void test01261() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStringObjectType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test01262,"public void test01262() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStringObjectType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test01263,"public void test01263() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStringObjectType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test01264,"public void test01264() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStringObjectType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test01365,"public void test01365() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    Node node0 = Node.newString(3657, "" YH81V3Xc?D"", 0, 0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test01366,"public void test01366() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    Node node0 = Node.newString(3657, "" YH81V3Xc?D"", 0, 0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test01367,"public void test01367() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    Node node0 = Node.newString(3657, "" YH81V3Xc?D"", 0, 0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01368,"public void test01368() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autoboxesTo();
    Node node0 = Node.newString(3657, "" YH81V3Xc?D"", 0, 0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
    boolean boolean0 = arrowType0.matchesObjectContext();
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test01469,"public void test01469() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNumberObjectType();
    assertFalse(booleanType0.isResolved());
}",0,
project,0,test01470,"public void test01470() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNumberObjectType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test01471,"public void test01471() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNumberObjectType();
    assertFalse(boolean0);
}",0,
project,0,test01472,"public void test01472() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNumberObjectType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test01573,"public void test01573() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
    assertFalse(parameterizedType0.isEnumElementType());
}",0,assertFalse(parameterizedType0.isEnumElementType())
project,0,test01574,"public void test01574() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
    JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
    assertTrue(parameterizedType1.isEnumElementType());
}",0,assertFalse(parameterizedType1.isEnumElementType())
project,0,test01575,"public void test01575() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
    JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test01576,"public void test01576() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
    JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test01577,"public void test01577() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
    JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test01578,"public void test01578() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    EnumElementType enumElementType0 = enumType0.getElementsType();
    ParameterizedType parameterizedType1 = new ParameterizedType(jSTypeRegistry0, enumElementType0, parameterizedType0);
    JSType jSType0 = parameterizedType1.getGreatestSubtype(parameterizedType0);
    assertFalse(parameterizedType1.equals((Object) parameterizedType0));
}",0,
project,0,test01679,"public void test01679() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Node node0 = Node.newNumber((-1242.8477), 3, 5080);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, ""Not declared as a constructor"");
    JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
    boolean boolean0 = arrowType0.matchesStringContext();
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test01680,"public void test01680() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Node node0 = Node.newNumber((-1242.8477), 3, 5080);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, ""Not declared as a constructor"");
    JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
    boolean boolean0 = arrowType0.matchesStringContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01681,"public void test01681() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Node node0 = Node.newNumber((-1242.8477), 3, 5080);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, ""Not declared as a constructor"");
    JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
    boolean boolean0 = arrowType0.matchesStringContext();
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test01682,"public void test01682() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Node node0 = Node.newNumber((-1242.8477), 3, 5080);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(noObjectType0, ""Not declared as a constructor"");
    JSType jSType1 = jSTypeRegistry0.createDefaultObjectUnion(jSType0);
    ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType1);
    boolean boolean0 = arrowType0.matchesStringContext();
    assertFalse(arrowType0.isResolved());
}",0,
project,0,test01783,"public void test01783() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNullable();
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test01784,"public void test01784() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    boolean boolean0 = jSType_TypePair0.typeB.isNullable();
    assertTrue(boolean0);
}",0,
project,0,test01885,"public void test01885() throws Throwable {
    StringType stringType0 = new StringType((JSTypeRegistry) null);
    stringType0.unboxesTo();
    assertFalse(stringType0.isResolved());
}",0,assertTrue(stringType0.isResolved())
project,0,test01986,"public void test01986() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNominalConstructor();
    assertFalse(booleanType0.isConstructor());
}",0,assertFalse(booleanType0.isConstructor())
project,0,test01987,"public void test01987() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNominalConstructor();
    assertFalse(booleanType0.isResolved());
}",0,assertFalse(booleanType0.isResolved())
project,0,test01988,"public void test01988() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNominalConstructor();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test01989,"public void test01989() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNominalConstructor();
    assertFalse(booleanType0.isInterface());
}",0,assertFalse(booleanType0.isInterface())
project,0,test01990,"public void test01990() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNominalConstructor();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test01991,"public void test01991() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isNominalConstructor();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test02092,"public void test02092() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test02093,"public void test02093() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test02094,"public void test02094() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test02095,"public void test02095() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isArrayType();
    assertFalse(boolean0);
}",0,
project,0,test02196,"public void test02196() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    // Undeclared exception!
    try {
        booleanType0.setValidator((Predicate<JSType>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType"", e);
    }
}",0,
project,0,test02297,"public void test02297() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isBooleanValueType();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test02298,"public void test02298() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isBooleanValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test02399,"public void test02399() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canBeCalled();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test023100,"public void test023100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canBeCalled();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test023101,"public void test023101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canBeCalled();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test023102,"public void test023102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canBeCalled();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test024103,"public void test024103() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    arrowType0.getDisplayName();
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test024104,"public void test024104() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    arrowType0.getDisplayName();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test024105,"public void test024105() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    arrowType0.getDisplayName();
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test024106,"public void test024106() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    arrowType0.getDisplayName();
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test025107,"public void test025107() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.isNumber();
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test026108,"public void test026108() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Not declared as a type name"", 1, 0);
    boolean boolean0 = namedType0.isOrdinaryFunction();
    assertFalse(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test026109,"public void test026109() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Not declared as a type name"", 1, 0);
    boolean boolean0 = namedType0.isOrdinaryFunction();
    assertFalse(namedType0.isNoObjectType());
}",0,assertTrue(namedType0.isNoObjectType())
project,0,test026110,"public void test026110() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Not declared as a type name"", 1, 0);
    boolean boolean0 = namedType0.isOrdinaryFunction();
    assertFalse(namedType0.isNoResolvedType());
}",0,assertTrue(namedType0.isNoResolvedType())
project,0,test026111,"public void test026111() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Not declared as a type name"", 1, 0);
    boolean boolean0 = namedType0.isOrdinaryFunction();
    assertFalse(boolean0);
}",0,
project,0,test027112,"public void test027112() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ObjectType objectType0 = noResolvedType0.dereference();
    assertFalse(objectType0.isResolved());
}",0,assertTrue(objectType0.isResolved())
project,0,test028113,"public void test028113() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.isNamedType();
    assertFalse(instanceObjectType0.isNoResolvedType());
}",0,assertTrue(instanceObjectType0.isNoResolvedType())
project,0,test028114,"public void test028114() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.isNamedType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test028115,"public void test028115() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.isNamedType();
    assertFalse(instanceObjectType0.isNoObjectType());
}",0,assertTrue(instanceObjectType0.isNoObjectType())
project,0,test028116,"public void test028116() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.isNamedType();
    assertFalse(instanceObjectType0.isResolved());
}",0,assertTrue(instanceObjectType0.isResolved())
project,0,test029117,"public void test029117() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    booleanType0.matchConstraint(enumType0);
    assertFalse(enumType0.isNoResolvedType());
}",0,assertTrue(enumType0.isNoResolvedType())
project,0,test029118,"public void test029118() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    booleanType0.matchConstraint(enumType0);
    assertFalse(enumType0.isResolved());
}",0,assertTrue(enumType0.isResolved())
project,0,test029119,"public void test029119() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    booleanType0.matchConstraint(enumType0);
    assertFalse(enumType0.isNoObjectType());
}",0,assertTrue(enumType0.isNoObjectType())
project,0,test029120,"public void test029120() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    booleanType0.matchConstraint(enumType0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test030121,"public void test030121() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.matchesInt32Context();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test030122,"public void test030122() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.matchesInt32Context();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test030123,"public void test030123() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.matchesInt32Context();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test031124,"public void test031124() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.hasProperty(""'"");
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test031125,"public void test031125() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.hasProperty(""'"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test031126,"public void test031126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.hasProperty(""'"");
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test031127,"public void test031127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.hasProperty(""'"");
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test032128,"public void test032128() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isInstanceType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test032129,"public void test032129() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isInstanceType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test032130,"public void test032130() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isInstanceType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test032131,"public void test032131() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isInstanceType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test033132,"public void test033132() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test033133,"public void test033133() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test033134,"public void test033134() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test033135,"public void test033135() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test033136,"public void test033136() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.isCheckedUnknownType();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test034137,"public void test034137() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isTheObjectType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test034138,"public void test034138() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isTheObjectType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test034139,"public void test034139() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isTheObjectType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test034140,"public void test034140() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isTheObjectType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test035141,"public void test035141() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesUint32Context();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test035142,"public void test035142() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesUint32Context();
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test035143,"public void test035143() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesUint32Context();
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test035144,"public void test035144() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesUint32Context();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test035145,"public void test035145() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.matchesUint32Context();
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test036146,"public void test036146() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isEnumType();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test036147,"public void test036147() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isEnumType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test037148,"public void test037148() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 0, 1);
    boolean boolean0 = namedType0.isInvariant(booleanType0);
    assertFalse(namedType0.isNoResolvedType());
}",0,assertTrue(namedType0.isNoResolvedType())
project,0,test037149,"public void test037149() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 0, 1);
    boolean boolean0 = namedType0.isInvariant(booleanType0);
    assertFalse(namedType0.isNoObjectType());
}",0,assertTrue(namedType0.isNoObjectType())
project,0,test037150,"public void test037150() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 0, 1);
    boolean boolean0 = namedType0.isInvariant(booleanType0);
    assertFalse(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test037151,"public void test037151() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 0, 1);
    boolean boolean0 = namedType0.isInvariant(booleanType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test038152,"public void test038152() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isNumberValueType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test038153,"public void test038153() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isNumberValueType();
    assertFalse(voidType0.isNoObjectType());
}",0,assertTrue(voidType0.isNoObjectType())
project,0,test038154,"public void test038154() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isNumberValueType();
    assertFalse(voidType0.isNoResolvedType());
}",0,assertTrue(voidType0.isNoResolvedType())
project,0,test038155,"public void test038155() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    boolean boolean0 = voidType0.isNumberValueType();
    assertFalse(voidType0.isResolved());
}",0,assertTrue(voidType0.isResolved())
project,0,test039156,"public void test039156() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    instanceObjectType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertFalse(errorFunctionType0.hasCachedValues())
project,0,test039157,"public void test039157() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    instanceObjectType0.forceResolve(simpleErrorReporter0, errorFunctionType0);
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test040158,"public void test040158() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.clearResolved();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test040159,"public void test040159() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.clearResolved();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test040160,"public void test040160() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.clearResolved();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test041161,"public void test041161() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isFunctionPrototypeType();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test041162,"public void test041162() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isFunctionPrototypeType();
    assertFalse(boolean0);
}",0,assertFalse(boolean0)
project,0,test041163,"public void test041163() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isFunctionPrototypeType();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test041164,"public void test041164() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isFunctionPrototypeType();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test042165,"public void test042165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    String string0 = jSType0.toString();
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test042166,"public void test042166() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    String string0 = jSType0.toString();
    assertEquals(""(boolean|null)"", string0);
}",0,
project,0,test042167,"public void test042167() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    String string0 = jSType0.toString();
    assertFalse(jSType0.isResolved());
}",0,
project,0,test042168,"public void test042168() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    String string0 = jSType0.toString();
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test043169,"public void test043169() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasDisplayName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test043170,"public void test043170() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.hasDisplayName();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test044171,"public void test044171() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test044172,"public void test044172() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(boolean0);
}",0,
project,0,test044173,"public void test044173() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test044174,"public void test044174() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test044175,"public void test044175() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, """");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test045176,"public void test045176() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,
project,0,test045177,"public void test045177() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test045178,"public void test045178() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test045179,"public void test045179() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test045180,"public void test045180() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.hasDisplayName();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test046181,"public void test046181() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""q^:[[>,}BYm<8"", noType0, false);
    JSType[] jSTypeArray0 = new JSType[4];
    jSTypeArray0[0] = (JSType) noType0;
    jSTypeArray0[1] = (JSType) prototypeObjectType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) prototypeObjectType0, jSTypeArray0);
    JSType jSType0 = JSType.getLeastSupertype((JSType) functionType0, jSTypeArray0[0]);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""Not declared as a constructor"");
    jSTypeArray0[1].getGreatestSubtype(enumElementType0);
    assertTrue(prototypeObjectType0.hasCachedValues());
}",0,
project,0,test047182,"public void test047182() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
    assertFalse(errorFunctionType1.isResolved());
}",0,assertTrue(errorFunctionType1.isResolved())
project,0,test047183,"public void test047183() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test047184,"public void test047184() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
    assertFalse(errorFunctionType1.isNoResolvedType());
}",0,assertTrue(errorFunctionType1.isNoResolvedType())
project,0,test047185,"public void test047185() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
    assertFalse(errorFunctionType1.equals((Object) errorFunctionType0));
}",0,
project,0,test047186,"public void test047186() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
    assertFalse(errorFunctionType1.isNoObjectType());
}",0,assertTrue(errorFunctionType1.isNoObjectType())
project,0,test048187,"public void test048187() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStruct();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test048188,"public void test048188() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStruct();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test048189,"public void test048189() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStruct();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test048190,"public void test048190() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isStruct();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test049191,"public void test049191() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.isStruct();
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test049192,"public void test049192() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.isStruct();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test049193,"public void test049193() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.isStruct();
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test049194,"public void test049194() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.isStruct();
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test050195,"public void test050195() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    boolean boolean0 = enumElementType0.isStruct();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,
project,0,test050196,"public void test050196() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    boolean boolean0 = enumElementType0.isStruct();
    assertFalse(enumElementType0.isNoResolvedType());
}",0,assertTrue(enumElementType0.isNoResolvedType())
project,0,test050197,"public void test050197() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    boolean boolean0 = enumElementType0.isStruct();
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test050198,"public void test050198() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    boolean boolean0 = enumElementType0.isStruct();
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test050199,"public void test050199() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""2vhARH(dUDsX%go&`"");
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) errorFunctionType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    boolean boolean0 = enumElementType0.isStruct();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test051200,"public void test051200() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDict();
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test051201,"public void test051201() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDict();
    assertFalse(boolean0);
}",0,
project,0,test051202,"public void test051202() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDict();
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test051203,"public void test051203() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.isDict();
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test052204,"public void test052204() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    boolean boolean0 = instanceObjectType0.isDict();
    assertTrue(noObjectType0.hasCachedValues());
}",0,
project,0,test052205,"public void test052205() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    boolean boolean0 = instanceObjectType0.isDict();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test053206,"public void test053206() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isDict();
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test053207,"public void test053207() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isDict();
    assertFalse(boolean0);
}",0,
project,0,test054208,"public void test054208() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.setDict();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    boolean boolean0 = instanceObjectType0.isDict();
    assertFalse(instanceObjectType0.isResolved());
}",0,assertTrue(instanceObjectType0.isResolved())
project,0,test054209,"public void test054209() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.setDict();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    boolean boolean0 = instanceObjectType0.isDict();
    assertFalse(instanceObjectType0.isNoObjectType());
}",0,assertTrue(instanceObjectType0.isNoObjectType())
project,0,test054210,"public void test054210() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.setDict();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    boolean boolean0 = instanceObjectType0.isDict();
    assertTrue(boolean0);
}",0,
project,0,test054211,"public void test054211() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.setDict();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0, false);
    boolean boolean0 = instanceObjectType0.isDict();
    assertFalse(instanceObjectType0.isNoResolvedType());
}",0,assertTrue(instanceObjectType0.isNoResolvedType())
project,0,test055212,"public void test055212() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isGlobalThisType();
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test055213,"public void test055213() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isGlobalThisType();
    assertFalse(numberType0.isNoObjectType());
}",0,assertTrue(numberType0.isNoObjectType())
project,0,test055214,"public void test055214() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isGlobalThisType();
    assertFalse(numberType0.isNoResolvedType());
}",0,assertTrue(numberType0.isNoResolvedType())
project,0,test055215,"public void test055215() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    boolean boolean0 = numberType0.isGlobalThisType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test056216,"public void test056216() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
    assertFalse(functionType0.isResolved());
}",0,assertTrue(functionType0.isResolved())
project,0,test056217,"public void test056217() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
    assertFalse(functionType0.isNoObjectType());
}",0,assertTrue(functionType0.isNoObjectType())
project,0,test056218,"public void test056218() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
    assertFalse(functionType0.isNoResolvedType());
}",0,assertTrue(functionType0.isNoResolvedType())
project,0,test056219,"public void test056219() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
    assertTrue(functionType0.isFunctionType());
}",0,assertTrue(functionType0.isFunctionType())
project,0,test056220,"public void test056220() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) errorFunctionType0);
    assertNotNull(functionType0);
}",0,assertNotNull(functionType0)
project,0,test057221,"public void test057221() throws Throwable {
    FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
    assertNull(functionType0);
}",0,
project,0,test058222,"public void test058222() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, booleanType0);
    parameterizedType0.getGreatestSubtype(booleanType0);
    assertTrue(recordType0.hasCachedValues());
}",0,assertFalse(recordType0.hasCachedValues())
project,0,test058223,"public void test058223() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, true);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, booleanType0);
    parameterizedType0.getGreatestSubtype(booleanType0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test059224,"public void test059224() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", (String) null, (-967), 40);
    boolean boolean0 = namedType0.isParameterizedType();
    assertFalse(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test059225,"public void test059225() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", (String) null, (-967), 40);
    boolean boolean0 = namedType0.isParameterizedType();
    assertFalse(namedType0.isNoObjectType());
}",0,assertTrue(namedType0.isNoObjectType())
project,0,test059226,"public void test059226() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", (String) null, (-967), 40);
    boolean boolean0 = namedType0.isParameterizedType();
    assertFalse(namedType0.isNoResolvedType());
}",0,assertTrue(namedType0.isNoResolvedType())
project,0,test059227,"public void test059227() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", (String) null, (-967), 40);
    boolean boolean0 = namedType0.isParameterizedType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test060228,"public void test060228() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = parameterizedType0.isParameterizedType();
    assertFalse(enumType0.isNoObjectType());
}",0,assertTrue(enumType0.isNoObjectType())
project,0,test060229,"public void test060229() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = parameterizedType0.isParameterizedType();
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test060230,"public void test060230() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = parameterizedType0.isParameterizedType();
    assertFalse(enumType0.isNoResolvedType());
}",0,assertTrue(enumType0.isNoResolvedType())
project,0,test060231,"public void test060231() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = parameterizedType0.isParameterizedType();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test061232,"public void test061232() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.toMaybeParameterizedType((JSType) noResolvedType0);
    assertFalse(noResolvedType0.isResolved());
}",0,assertTrue(noResolvedType0.isResolved())
project,0,test062233,"public void test062233() throws Throwable {
    ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
    assertNull(parameterizedType0);
}",0,assertNotNull(parameterizedType0)
project,0,test063234,"public void test063234() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test063235,"public void test063235() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
    assertTrue(templateType0.isTemplateType());
}",0,assertTrue(templateType0.isTemplateType())
project,0,test064236,"public void test064236() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    JSType.toMaybeTemplateType((JSType) enumElementType0);
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test064237,"public void test064237() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    JSType.toMaybeTemplateType((JSType) enumElementType0);
    assertFalse(enumElementType0.isNoResolvedType());
}",0,assertTrue(enumElementType0.isNoResolvedType())
project,0,test064238,"public void test064238() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    JSType.toMaybeTemplateType((JSType) enumElementType0);
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test064239,"public void test064239() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, ""Not declared as a constructor"", "".Rt+28OS e]&~w1L"", (-2520), 51);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, ""B XP(`)J|"");
    JSType.toMaybeTemplateType((JSType) enumElementType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test065240,"public void test065240() throws Throwable {
    JSType[] jSTypeArray0 = new JSType[4];
    TemplateType templateType0 = JSType.toMaybeTemplateType(jSTypeArray0[0]);
    assertNull(templateType0);
}",0,assertNotNull(templateType0)
project,0,test066241,"public void test066241() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test066242,"public void test066242() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test066243,"public void test066243() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(noObjectType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test067244,"public void test067244() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNominalConstructor();
    assertFalse(noResolvedType0.isResolved());
}",0,
project,0,test067245,"public void test067245() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    boolean boolean0 = noResolvedType0.isNominalConstructor();
    assertFalse(boolean0);
}",0,
project,0,test068246,"public void test068246() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""<nQ?:rv"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isResolved());
}",0,assertTrue(functionType0.isResolved())
project,0,test068247,"public void test068247() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""<nQ?:rv"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isNoObjectType());
}",0,assertTrue(functionType0.isNoObjectType())
project,0,test068248,"public void test068248() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""<nQ?:rv"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(functionType0.isNoResolvedType());
}",0,assertTrue(functionType0.isNoResolvedType())
project,0,test068249,"public void test068249() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""<nQ?:rv"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertFalse(boolean0);
}",0,
project,0,test068250,"public void test068250() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""<nQ?:rv"", (Node) null);
    boolean boolean0 = functionType0.isNominalConstructor();
    assertTrue(functionType0.isFunctionType());
}",0,assertTrue(functionType0.isFunctionType())
project,0,test069251,"public void test069251() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType[] jSTypeArray0 = new JSType[7];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    errorFunctionType0.setSource(node0);
    boolean boolean0 = errorFunctionType0.isNominalConstructor();
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test069252,"public void test069252() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType[] jSTypeArray0 = new JSType[7];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    errorFunctionType0.setSource(node0);
    boolean boolean0 = errorFunctionType0.isNominalConstructor();
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test069253,"public void test069253() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType[] jSTypeArray0 = new JSType[7];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    errorFunctionType0.setSource(node0);
    boolean boolean0 = errorFunctionType0.isNominalConstructor();
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test069254,"public void test069254() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType[] jSTypeArray0 = new JSType[7];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    errorFunctionType0.setSource(node0);
    boolean boolean0 = errorFunctionType0.isNominalConstructor();
    assertFalse(errorFunctionType0.isNoResolvedType());
}",0,assertTrue(errorFunctionType0.isNoResolvedType())
project,0,test069255,"public void test069255() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    JSType[] jSTypeArray0 = new JSType[7];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    errorFunctionType0.setSource(node0);
    boolean boolean0 = errorFunctionType0.isNominalConstructor();
    assertTrue(boolean0);
}",0,
project,0,test070256,"public void test070256() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 1, 1);
    boolean boolean0 = namedType0.differsFrom(booleanType0);
    assertFalse(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test070257,"public void test070257() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 1, 1);
    boolean boolean0 = namedType0.differsFrom(booleanType0);
    assertFalse(namedType0.isNoResolvedType());
}",0,assertTrue(namedType0.isNoResolvedType())
project,0,test070258,"public void test070258() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 1, 1);
    boolean boolean0 = namedType0.differsFrom(booleanType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test070259,"public void test070259() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 1, 1);
    boolean boolean0 = namedType0.differsFrom(booleanType0);
    assertFalse(namedType0.isNoObjectType());
}",0,assertTrue(namedType0.isNoObjectType())
project,0,test071260,"public void test071260() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.differsFrom(namedType0);
    assertFalse(arrowType0.isResolved());
}",0,assertTrue(arrowType0.isResolved())
project,0,test071261,"public void test071261() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.differsFrom(namedType0);
    assertFalse(arrowType0.isNoObjectType());
}",0,assertTrue(arrowType0.isNoObjectType())
project,0,test071262,"public void test071262() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.differsFrom(namedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test071263,"public void test071263() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.differsFrom(namedType0);
    assertTrue(errorFunctionType0.isFunctionType());
}",0,
project,0,test071264,"public void test071264() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.differsFrom(namedType0);
    assertFalse(arrowType0.isNoResolvedType());
}",0,assertTrue(arrowType0.isNoResolvedType())
project,0,test072265,"public void test072265() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
    boolean boolean0 = namedType0.differsFrom(jSType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test072266,"public void test072266() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
    boolean boolean0 = namedType0.differsFrom(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test072267,"public void test072267() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
    boolean boolean0 = namedType0.differsFrom(jSType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test072268,"public void test072268() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Not declared as a type name"", 0, 1);
    JSType jSType0 = booleanType0.getGreatestSubtype(namedType0);
    boolean boolean0 = namedType0.differsFrom(jSType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test073269,"public void test073269() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 1, 1);
    UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
    boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test073270,"public void test073270() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 1, 1);
    UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
    boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
    assertFalse(unknownType0.isNoObjectType());
}",0,assertTrue(unknownType0.isNoObjectType())
project,0,test073271,"public void test073271() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 1, 1);
    UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
    boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
    assertFalse(unknownType0.isNoResolvedType());
}",0,assertTrue(unknownType0.isNoResolvedType())
project,0,test073272,"public void test073272() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Unknown class name"", 1, 1);
    UnknownType unknownType0 = (UnknownType) numberType0.getGreatestSubtype(namedType0);
    boolean boolean0 = unknownType0.isImplicitPrototype(namedType0);
    assertFalse(unknownType0.isResolved());
}",0,assertTrue(unknownType0.isResolved())
project,0,test074273,"public void test074273() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, templateType0);
    JSType jSType0 = templateType0.getGreatestSubtype(parameterizedType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test074274,"public void test074274() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, templateType0);
    JSType jSType0 = templateType0.getGreatestSubtype(parameterizedType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test074275,"public void test074275() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = new TemplateType(jSTypeRegistry0, ""Unknown class name"");
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, templateType0, templateType0);
    JSType jSType0 = templateType0.getGreatestSubtype(parameterizedType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test075276,"public void test075276() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
    JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
    assertFalse(jSType1.isNoResolvedType());
}",0,assertTrue(jSType1.isNoResolvedType())
project,0,test075277,"public void test075277() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
    JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
    assertTrue(jSType0.isUnionType());
}",0,assertTrue(jSType0.isUnionType())
project,0,test075278,"public void test075278() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
    JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
    assertFalse(jSType1.isResolved());
}",0,assertFalse(jSType1.isResolved())
project,0,test075279,"public void test075279() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(enumElementType0);
    JSType jSType1 = jSType0.getGreatestSubtype(booleanType0);
    assertFalse(jSType1.isNoObjectType());
}",0,assertTrue(jSType1.isNoObjectType())
project,0,test076280,"public void test076280() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    JSType jSType1 = jSType0.getLeastSupertype(jSType_TypePair0.typeB);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test076281,"public void test076281() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    JSType jSType1 = jSType0.getLeastSupertype(jSType_TypePair0.typeB);
    assertSame(jSType0, jSType1);
}",0,
project,0,test077282,"public void test077282() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, recordType0);
    proxyObjectType0.getTypesUnderShallowEquality(recordType0);
    assertTrue(recordType0.hasCachedValues());
}",0,assertFalse(recordType0.hasCachedValues())
project,0,test077283,"public void test077283() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, recordType0);
    proxyObjectType0.getTypesUnderShallowEquality(recordType0);
    assertFalse(recordType0.isNoResolvedType());
}",0,assertTrue(recordType0.isNoResolvedType())
project,0,test079284,"public void test079284() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, booleanType0);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.differsFrom(parameterizedType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test079285,"public void test079285() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a type name"");
    ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, booleanType0);
    ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
    boolean boolean0 = arrowType0.differsFrom(parameterizedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test080286,"public void test080286() throws Throwable {
    boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test081287,"public void test081287() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
    assertFalse(booleanType0.isResolved());
}",0,
project,0,test081288,"public void test081288() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test081289,"public void test081289() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test081290,"public void test081290() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, (JSType) null);
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test082291,"public void test082291() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test082292,"public void test082292() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test082293,"public void test082293() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test082294,"public void test082294() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = JSType.isEquivalent(booleanType0, booleanType0);
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test083295,"public void test083295() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test083296,"public void test083296() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test083297,"public void test083297() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test083298,"public void test083298() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.equals(simpleErrorReporter0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test084299,"public void test084299() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    booleanType0.equals(numberType0);
    assertFalse(numberType0.isNoObjectType());
}",0,assertTrue(numberType0.isNoObjectType())
project,0,test084300,"public void test084300() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    booleanType0.equals(numberType0);
    assertFalse(numberType0.isResolved());
}",0,assertTrue(numberType0.isResolved())
project,0,test084301,"public void test084301() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    booleanType0.equals(numberType0);
    assertFalse(numberType0.isNoResolvedType());
}",0,assertTrue(numberType0.isNoResolvedType())
project,0,test084302,"public void test084302() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    booleanType0.equals(numberType0);
    assertFalse(booleanType0.isResolved());
}",0,
project,0,test085303,"public void test085303() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.findPropertyType("""");
    assertFalse(booleanType0.isNoObjectType());
}",0,assertTrue(booleanType0.isNoObjectType())
project,0,test085304,"public void test085304() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.findPropertyType("""");
    assertFalse(booleanType0.isResolved());
}",0,
project,0,test085305,"public void test085305() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.findPropertyType("""");
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test086306,"public void test086306() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.canAssignTo(numberType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test086307,"public void test086307() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.canAssignTo(numberType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test086308,"public void test086308() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.canAssignTo(numberType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test086309,"public void test086309() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.canAssignTo(numberType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test087310,"public void test087310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    boolean boolean0 = enumElementType0.canAssignTo(booleanType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test087311,"public void test087311() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    boolean boolean0 = enumElementType0.canAssignTo(booleanType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test088312,"public void test088312() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autobox();
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test088313,"public void test088313() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autobox();
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test088314,"public void test088314() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.autobox();
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test089315,"public void test089315() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
    noResolvedType0.getTypesUnderEquality(instanceObjectType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test090316,"public void test090316() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    NoType noType0 = (NoType) nullType0.restrictByNotNullOrUndefined();
    booleanType0.testForEqualityHelper(allType0, noType0);
    assertTrue(noType0.hasCachedValues());
}",0,assertFalse(noType0.hasCachedValues())
project,0,test090317,"public void test090317() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    AllType allType0 = new AllType(jSTypeRegistry0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    NoType noType0 = (NoType) nullType0.restrictByNotNullOrUndefined();
    booleanType0.testForEqualityHelper(allType0, noType0);
    assertFalse(booleanType0.isResolved());
}",0,assertTrue(booleanType0.isResolved())
project,0,test091318,"public void test091318() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test091319,"public void test091319() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
    assertTrue(errorFunctionType0.isFunctionType());
}",0,
project,0,test092320,"public void test092320() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(booleanType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test093321,"public void test093321() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Unknown class name"");
    NoType noType0 = new NoType(jSTypeRegistry0);
    enumElementType0.getTypesUnderInequality(noType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test094322,"public void test094322() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    noObjectType0.getTypesUnderEquality(numberType0);
    assertTrue(noObjectType0.hasCachedValues());
}",0,
project,0,test095323,"public void test095323() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.canTestForEqualityWith(booleanType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test095324,"public void test095324() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    boolean boolean0 = errorFunctionType0.canTestForEqualityWith(booleanType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test096325,"public void test096325() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test096326,"public void test096326() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Named type with empty name component"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    instanceObjectType0.getTypesUnderEquality(errorFunctionType0);
    assertFalse(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test097327,"public void test097327() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""q^:[[>,}BYm<8"", noType0, false);
    JSType[] jSTypeArray0 = new JSType[4];
    jSTypeArray0[2] = (JSType) prototypeObjectType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) prototypeObjectType0, jSTypeArray0);
    boolean boolean0 = functionType0.canTestForEqualityWith(jSTypeArray0[2]);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test097328,"public void test097328() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, ""q^:[[>,}BYm<8"", noType0, false);
    JSType[] jSTypeArray0 = new JSType[4];
    jSTypeArray0[2] = (JSType) prototypeObjectType0;
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) prototypeObjectType0, jSTypeArray0);
    boolean boolean0 = functionType0.canTestForEqualityWith(jSTypeArray0[2]);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test098329,"public void test098329() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""Named type with empty name component"");
    enumElementType0.getTypesUnderInequality(jSType0);
    assertTrue(enumElementType0.hasCachedValues());
}",0,assertTrue(enumElementType0.hasCachedValues())
project,0,test099330,"public void test099330() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
    boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test099331,"public void test099331() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
    boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
    assertTrue(jSType0.isUnionType());
}",0,
project,0,test099332,"public void test099332() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
    boolean boolean0 = booleanType0.canTestForEqualityWith(jSType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test100333,"public void test100333() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(errorFunctionType0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test100334,"public void test100334() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(errorFunctionType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test101335,"public void test101335() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noType0);
    assertTrue(noType0.hasCachedValues());
}",0,
project,0,test101336,"public void test101336() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NoType noType0 = new NoType(jSTypeRegistry0);
    boolean boolean0 = booleanType0.canTestForShallowEqualityWith(noType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test102337,"public void test102337() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(booleanType0);
    assertTrue(noObjectType0.hasCachedValues());
}",0,assertTrue(noObjectType0.hasCachedValues())
project,0,test102338,"public void test102338() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test103339,"public void test103339() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
    assertFalse(enumType0.isNoResolvedType());
}",0,assertTrue(enumType0.isNoResolvedType())
project,0,test103340,"public void test103340() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test103341,"public void test103341() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
    assertFalse(enumType0.isNoObjectType());
}",0,assertTrue(enumType0.isNoObjectType())
project,0,test103342,"public void test103342() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(parameterizedType0);
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test104343,"public void test104343() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"");
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, booleanType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test104344,"public void test104344() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"");
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, booleanType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(enumType0.isResolved());
}",0,assertTrue(enumType0.isResolved())
project,0,test104345,"public void test104345() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"");
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, booleanType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(enumType0.isNoResolvedType());
}",0,assertTrue(enumType0.isNoResolvedType())
project,0,test104346,"public void test104346() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(""Not declared as a type name"");
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Unknown class name"", node0, booleanType0);
    boolean boolean0 = enumType0.canTestForShallowEqualityWith(booleanType0);
    assertFalse(enumType0.isNoObjectType());
}",0,assertTrue(enumType0.isNoObjectType())
project,0,test105347,"public void test105347() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getLeastSupertype(noResolvedType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,
project,0,test105348,"public void test105348() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    booleanType0.getLeastSupertype(noResolvedType0);
    assertFalse(booleanType0.isNoResolvedType());
}",0,assertTrue(booleanType0.isNoResolvedType())
project,0,test106349,"public void test106349() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
    JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
    assertSame(jSType1, jSType0);
}",0,
project,0,test106350,"public void test106350() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
    JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
    assertFalse(jSType1.isResolved());
}",0,assertTrue(jSType1.isResolved())
project,0,test106351,"public void test106351() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
    JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
    assertFalse(jSType1.isNoObjectType());
}",0,assertTrue(jSType1.isNoObjectType())
project,0,test106352,"public void test106352() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
    JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
    assertFalse(jSType1.isNoResolvedType());
}",0,assertTrue(jSType1.isNoResolvedType())
project,0,test107353,"public void test107353() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
    assertFalse(errorFunctionType0.isNoObjectType());
}",0,assertTrue(errorFunctionType0.isNoObjectType())
project,0,test107354,"public void test107354() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
    assertTrue(jSType0.isUnionType());
}",0,assertTrue(jSType0.isUnionType())
project,0,test107355,"public void test107355() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
    assertFalse(jSType1.isResolved());
}",0,assertTrue(jSType1.isResolved())
project,0,test107356,"public void test107356() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
    assertFalse(jSType1.isNoResolvedType());
}",0,assertTrue(jSType1.isNoResolvedType())
project,0,test107357,"public void test107357() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    JSType jSType1 = errorFunctionType0.getGreatestSubtype(jSType0);
    assertTrue(errorFunctionType0.isFunctionType());
}",0,assertTrue(errorFunctionType0.isFunctionType())
project,0,test108358,"public void test108358() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
    assertTrue(recordType0.isRecordType());
}",0,assertTrue(recordType0.isRecordType())
project,0,test108359,"public void test108359() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
    assertFalse(recordType0.isNoObjectType());
}",0,assertTrue(recordType0.isNoObjectType())
project,0,test108360,"public void test108360() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test108361,"public void test108361() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = booleanType0.getGreatestSubtype(recordType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test109362,"public void test109362() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""?2u$d&Z2pxUfhK+YA"");
    Node node0 = Node.newNumber(4480.551518101, 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", node0, booleanType0);
    EnumElementType enumElementType1 = enumType0.getElementsType();
    enumElementType1.getTypesUnderShallowEquality(enumElementType0);
    assertTrue(enumElementType1.isEnumElementType());
}",0,assertTrue(enumElementType1.isEnumElementType())
project,0,test109363,"public void test109363() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""?2u$d&Z2pxUfhK+YA"");
    Node node0 = Node.newNumber(4480.551518101, 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", node0, booleanType0);
    EnumElementType enumElementType1 = enumType0.getElementsType();
    enumElementType1.getTypesUnderShallowEquality(enumElementType0);
    assertFalse(enumElementType1.isNoObjectType());
}",0,assertTrue(enumElementType1.isNoObjectType())
project,0,test109364,"public void test109364() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""?2u$d&Z2pxUfhK+YA"");
    Node node0 = Node.newNumber(4480.551518101, 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", node0, booleanType0);
    EnumElementType enumElementType1 = enumType0.getElementsType();
    enumElementType1.getTypesUnderShallowEquality(enumElementType0);
    assertFalse(enumElementType1.isResolved());
}",0,assertTrue(enumElementType1.isResolved())
project,0,test109365,"public void test109365() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, ""?2u$d&Z2pxUfhK+YA"");
    Node node0 = Node.newNumber(4480.551518101, 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Named type with empty name component"", node0, booleanType0);
    EnumElementType enumElementType1 = enumType0.getElementsType();
    enumElementType1.getTypesUnderShallowEquality(enumElementType0);
    assertFalse(enumElementType1.isNoResolvedType());
}",0,assertTrue(enumElementType1.isNoResolvedType())
project,0,test110366,"public void test110366() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newString(""Invalid padding: %s"");
    AllType allType0 = new AllType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, ""B XP(`)J|"");
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Invalid padding: %s"", node0, jSType0);
    JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
    assertFalse(enumType0.isNoObjectType());
}",0,assertTrue(enumType0.isNoObjectType())
project,0,test110367,"public void test110367() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newString(""Invalid padding: %s"");
    AllType allType0 = new AllType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, ""B XP(`)J|"");
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Invalid padding: %s"", node0, jSType0);
    JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
    assertFalse(jSType1.isResolved());
}",0,
project,0,test110368,"public void test110368() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newString(""Invalid padding: %s"");
    AllType allType0 = new AllType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, ""B XP(`)J|"");
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Invalid padding: %s"", node0, jSType0);
    JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
    assertTrue(enumElementType0.isEnumElementType());
}",0,assertTrue(enumElementType0.isEnumElementType())
project,0,test110369,"public void test110369() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newString(""Invalid padding: %s"");
    AllType allType0 = new AllType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, ""B XP(`)J|"");
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Invalid padding: %s"", node0, jSType0);
    JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
    assertNotSame(jSType1, enumElementType0);
}",1,
project,0,test110370,"public void test110370() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = Node.newString(""Invalid padding: %s"");
    AllType allType0 = new AllType(jSTypeRegistry0);
    ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, allType0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, proxyObjectType0, ""B XP(`)J|"");
    JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(enumElementType0);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Invalid padding: %s"", node0, jSType0);
    JSType jSType1 = enumType0.getGreatestSubtype(enumElementType0);
    assertFalse(enumType0.isNoResolvedType());
}",0,assertTrue(enumType0.isNoResolvedType())
project,0,test111371,"public void test111371() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noResolvedType0, noResolvedType0);
    JSType jSType0 = parameterizedType0.getGreatestSubtype(noResolvedType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test112372,"public void test112372() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 0, 0);
    JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
    assertFalse(jSType0.isResolved());
}",0,
project,0,test112373,"public void test112373() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 0, 0);
    JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
    assertTrue(jSType0.isUnionType());
}",0,assertTrue(jSType0.isUnionType())
project,0,test112374,"public void test112374() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 0, 0);
    JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test112375,"public void test112375() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Unknown class name"", ""Named type with empty name component"", 0, 0);
    JSType jSType0 = namedType0.getLeastSupertype(booleanType0);
    assertFalse(namedType0.isNoResolvedType());
}",0,assertTrue(namedType0.isNoResolvedType())
project,0,test113376,"public void test113376() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test113377,"public void test113377() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(false);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test114378,"public void test114378() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""#xnsWtwRK T{3bd0.{"", ""#xnsWtwRK T{3bd0.{"", (-1700), (-1700));
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeB, jSType_TypePair0.typeB);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
    assertTrue(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test114379,"public void test114379() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""#xnsWtwRK T{3bd0.{"", ""#xnsWtwRK T{3bd0.{"", (-1700), (-1700));
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, noResolvedType0);
    JSType.TypePair jSType_TypePair0 = noResolvedType0.getTypesUnderShallowInequality(jSType0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeB, jSType_TypePair0.typeB);
    UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
    unionType0.getRestrictedTypeGivenToBooleanOutcome(true);
    assertFalse(unionType0.isResolved());
}",0,assertTrue(unionType0.isResolved())
project,0,test115380,"public void test115380() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test115381,"public void test115381() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test115382,"public void test115382() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = booleanType0.getRestrictedTypeGivenToBooleanOutcome(true);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test116383,"public void test116383() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(booleanType0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    noResolvedType0.getTypesUnderEquality(jSType0);
    assertTrue(noResolvedType0.hasCachedValues());
}",0,assertTrue(noResolvedType0.hasCachedValues())
project,0,test117384,"public void test117384() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    instanceObjectType0.getTypesUnderEquality(booleanType0);
    assertTrue(instanceObjectType0.hasCachedValues());
}",0,
project,0,test118385,"public void test118385() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noObjectType0, noObjectType0);
    noObjectType0.getTypesUnderEquality(parameterizedType0);
    assertTrue(noObjectType0.hasCachedValues());
}",0,assertTrue(noObjectType0.hasCachedValues())
project,0,test119386,"public void test119386() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, ""Not declared as a constructor"");
    enumElementType0.getTypesUnderInequality(nullType0);
    assertFalse(enumElementType0.isNoObjectType());
}",0,assertTrue(enumElementType0.isNoObjectType())
project,0,test119387,"public void test119387() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, ""Not declared as a constructor"");
    enumElementType0.getTypesUnderInequality(nullType0);
    assertFalse(enumElementType0.hasCachedValues());
}",0,assertFalse(enumElementType0.hasCachedValues())
project,0,test119388,"public void test119388() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, ""Not declared as a constructor"");
    enumElementType0.getTypesUnderInequality(nullType0);
    assertFalse(enumElementType0.isNoResolvedType());
}",0,assertTrue(enumElementType0.isNoResolvedType())
project,0,test119389,"public void test119389() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, nullType0, ""Not declared as a constructor"");
    enumElementType0.getTypesUnderInequality(nullType0);
    assertFalse(enumElementType0.isResolved());
}",0,assertTrue(enumElementType0.isResolved())
project,0,test120390,"public void test120390() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isNoResolvedType());
}",0,assertTrue(jSType0.isNoResolvedType())
project,0,test120391,"public void test120391() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isResolved());
}",0,assertTrue(jSType0.isResolved())
project,0,test120392,"public void test120392() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertTrue(jSType0.isUnionType());
}",0,assertTrue(jSType0.isUnionType())
project,0,test120393,"public void test120393() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(jSType0.isNoObjectType());
}",0,assertTrue(jSType0.isNoObjectType())
project,0,test120394,"public void test120394() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    VoidType voidType0 = new VoidType(jSTypeRegistry0);
    JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
    voidType0.getTypesUnderShallowInequality(jSType0);
    assertFalse(voidType0.isResolved());
}",0,
project,0,test121395,"public void test121395() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Named type with empty name component"", 1, 0);
    boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
    assertFalse(namedType0.isNoObjectType());
}",0,assertTrue(namedType0.isNoObjectType())
project,0,test121396,"public void test121396() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Named type with empty name component"", 1, 0);
    boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test121397,"public void test121397() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Named type with empty name component"", 1, 0);
    boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
    assertFalse(namedType0.isNoResolvedType());
}",0,assertTrue(namedType0.isNoResolvedType())
project,0,test121398,"public void test121398() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Not declared as a type name"", ""Named type with empty name component"", 1, 0);
    boolean boolean0 = JSType.isSubtypeHelper(namedType0, namedType0);
    assertFalse(namedType0.isResolved());
}",0,assertTrue(namedType0.isResolved())
project,0,test122399,"public void test122399() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    enumType0.defineInferredProperty(""Not declared as a constructor"", booleanType0, node0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    assertFalse(parameterizedType0.isResolved());
}",0,assertTrue(parameterizedType0.isResolved())
project,0,test122400,"public void test122400() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 1);
    EnumType enumType0 = new EnumType(jSTypeRegistry0, ""Not declared as a constructor"", node0, booleanType0);
    enumType0.defineInferredProperty(""Not declared as a constructor"", booleanType0, node0);
    ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, enumType0, enumType0);
    enumType0.resolveInternal(simpleErrorReporter0, parameterizedType0);
    assertTrue(enumType0.isResolved());
}",0,assertTrue(enumType0.isResolved())
project,0,test123401,"public void test123401() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    errorFunctionType0.setResolvedTypeInternal((JSType) null);
    errorFunctionType0.resolve(simpleErrorReporter0, errorFunctionType0);
    assertTrue(errorFunctionType0.isResolved());
}",0,assertTrue(errorFunctionType0.isResolved())
project,0,test124402,"public void test124402() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSType jSType0 = JSType.safeResolve((JSType) null, simpleErrorReporter0, (StaticScope<JSType>) null);
    assertNull(jSType0);
}",0,assertNotNull(jSType0)
