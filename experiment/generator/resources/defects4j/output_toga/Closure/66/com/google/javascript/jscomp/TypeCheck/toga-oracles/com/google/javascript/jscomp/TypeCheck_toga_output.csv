project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode("""");
    Node node1 = new Node(35, node0, node0, node0, node0, 3, 40);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(37, Node.OPT_ARG_NAME);
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(15);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test0022,"public void test0022() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.DefaultPassConfig$58"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node1 = new Node(8, node0, node0, node0, node0, 34, 44);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test0023,"public void test0023() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.DefaultPassConfig$58"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node1 = new Node(8, node0, node0, node0, node0, 34, 44);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test0034,"public void test0034() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""isExtensible"");
    CodingConvention codingConvention0 = compiler0.getCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node1 = new Node(7, node0, node0, node0, node0, 19, 31);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.process(node0, node1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0045,"public void test0045() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""Yh8hV"");
    Node node1 = new Node(16, node0, node0, node0, node0, (-103), 17);
    Scope scope0 = typeCheck0.processForTesting((Node) null, node0);
    assertEquals(32, scope0.getVarCount());
}",0,"assertEquals(0, scope0.getVarCount())"
project,0,test0056,"public void test0056() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""isExtensible"");
    CodingConvention codingConvention0 = compiler0.getCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node1 = new Node(7, node0, node0, node0, node0, 19, 31);
    typeCheck0.processForTesting(node0, node0);
    // Undeclared exception!
    try {
        typeCheck0.process(node1, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test0067,"public void test0067() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""isExtensible"");
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, defaultCodingConvention0);
    CheckLevel checkLevel0 = CheckLevel.WARNING;
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, (Scope) null, typedScopeCreator0, checkLevel0, checkLevel0);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting((Node) null, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test0078,"public void test0078() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = Node.newString(""L>0"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    Scope scope0 = new Scope(node0, compiler0);
    defaultPassConfig0.topScope = scope0;
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test0089,"public void test0089() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(115, 115, 101);
    // Undeclared exception!
    try {
        typeCheck0.processForTesting(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test00910,"public void test00910() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = Node.newNumber((double) 86, 86, 86);
    Node node1 = new Node(86, node0);
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    typeCheck0.visit((NodeTraversal) null, node1, node0);
    assertEquals(50, Node.FREE_CALL);
}",0,
project,0,test01011,"public void test01011() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.shouldTraverse(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test01112,"public void test01112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(118, 1504, 118);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, node0.getSideEffectFlags());
}",0,"assertEquals(0, node0.getSideEffectFlags())"
project,0,test01213,"public void test01213() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""dgZ}V/8&v4"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(27, Node.SPECIALCALL_PROP);
}",0,
project,0,test01314,"public void test01314() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(132, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test01415,"public void test01415() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    boolean boolean0 = typeCheck0.shouldTraverse(nodeTraversal0, node1, node0);
    assertTrue(boolean0);
}",0,
project,0,test01516,"public void test01516() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(""// Input %num%"", (-1083), (-1083));
    Node node1 = new Node(4, node0, node0, node0, node0, 19, 37);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
}",0,
project,0,test01617,"public void test01617() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node((-2160), (-81), (-81));
    Node node1 = new Node(5, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test01618,"public void test01618() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node((-2160), (-81), (-81));
    Node node1 = new Node(5, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01719,"public void test01719() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]K!dKpWB."");
    Node node1 = new Node(6, node0, node0, node0, node0, 12, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test01720,"public void test01720() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]K!dKpWB."");
    Node node1 = new Node(6, node0, node0, node0, node0, 12, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01821,"public void test01821() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!d-pJC."");
    Node node1 = new Node(7);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01822,"public void test01822() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!d-pJC."");
    Node node1 = new Node(7);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test01923,"public void test01923() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(8, 8, 131);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test01924,"public void test01924() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(8, 8, 131);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test02025,"public void test02025() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""is|xtenfible"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node1 = new Node(2, node0, node0, node0, node0, 4, 21);
    typeCheck0.processForTesting(node0, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test02026,"public void test02026() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""is|xtenfible"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node1 = new Node(2, node0, node0, node0, node0, 4, 21);
    typeCheck0.processForTesting(node0, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test02127,"public void test02127() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!d-p?C."");
    Node node1 = new Node(10, node0, node0, node0, node0, 16, 30);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02128,"public void test02128() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!d-p?C."");
    Node node1 = new Node(10, node0, node0, node0, node0, 16, 30);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test02129,"public void test02129() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!d-p?C."");
    Node node1 = new Node(10, node0, node0, node0, node0, 16, 30);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test02230,"public void test02230() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""JSC_BAD_TYPE_FOR_BIT_OPERATION"");
    Node node1 = new Node(11, node0, node0, node0, node0, 1, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02231,"public void test02231() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""JSC_BAD_TYPE_FOR_BIT_OPERATION"");
    Node node1 = new Node(11, node0, node0, node0, node0, 1, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test02232,"public void test02232() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""JSC_BAD_TYPE_FOR_BIT_OPERATION"");
    Node node1 = new Node(11, node0, node0, node0, node0, 1, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test02333,"public void test02333() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
    Node node1 = new Node(12, node0, node0, 28, 2);
    typeCheck0.visit((NodeTraversal) null, node1, node1);
    assertEquals(1, Node.DECR_FLAG);
}",0,
project,0,test02535,"public void test02535() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(14, node0, node0, node0, node0, 19, 13);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(14, Node.DEFAULT_PROP);
}",0,
project,0,test02636,"public void test02636() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""initializing variable"");
    Node node1 = new Node(16, node0, node0, node0, node0, 48, 2);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(43, Node.IS_CONSTANT_NAME);
}",0,
project,0,test02737,"public void test02737() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""l<D:}q9k"");
    Node node1 = new Node(17, node0, node0, node0, node0, 4095, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
}",0,
project,0,test02838,"public void test02838() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";<j766]x!dKp1C"");
    Node node1 = new Node(18, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test02839,"public void test02839() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";<j766]x!dKp1C"");
    Node node1 = new Node(18, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02940,"public void test02940() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""ikitializn* variable"");
    Node node1 = new Node(19, node0, node0, node0, node0, 4, 42);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test02941,"public void test02941() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""ikitializn* variable"");
    Node node1 = new Node(19, node0, node0, node0, node0, 4, 42);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test03042,"public void test03042() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""initalizing variable"");
    Node node1 = new Node(20, node0);
    typeCheck0.visit((NodeTraversal) null, node1, node1);
    assertEquals(5, Node.FUNCTION_PROP);
}",0,
project,0,test03143,"public void test03143() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""SKxUNihd)if)DS/Jw"");
    Node node1 = new Node(21, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, nodeTraversal0.getLineNumber());
}",0,"assertEquals(0, nodeTraversal0.getLineNumber())"
project,0,test03244,"public void test03244() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(22, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(2, Node.SPECIALCALL_WITH);
}",0,
project,0,test03345,"public void test03345() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";<j766]x!dKp1C"");
    Node node1 = new Node(23, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, Node.NON_SPECIALCALL);
}",0,
project,0,test03446,"public void test03446() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""e="");
    Node node1 = new Node(24, node0, node0, node0, node0, 1, 2);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals((-2), Node.OBJECT_IDS_PROP);
}",0,
project,0,test03547,"public void test03547() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(27, 27, 27);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node1 = new Node(25, node0, node0, node0, 17, 4095);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test03548,"public void test03548() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(27, 27, 27);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node1 = new Node(25, node0, node0, node0, 17, 4095);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test03649,"public void test03649() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(3103);
    Node node1 = new Node(26, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, Node.LEFT);
}",0,
project,0,test03750,"public void test03750() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""initalizing variabe"");
    Node node1 = new Node(27, node0, node0, node0, node0, 42, 38);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(45, Node.IS_VAR_ARGS_PARAM);
}",0,
project,0,test03851,"public void test03851() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(28);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test03952,"public void test03952() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""*(;;V-m]x!d-p?C."");
    Node node1 = new Node(29, node0, node0, node0, node0, 12, 43);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
}",0,
project,0,test04053,"public void test04053() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""G;;-m]xudKp?C."");
    Node node1 = new Node(31, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test04154,"public void test04154() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(32, node0, node0, node0, node0, 35, 3);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(47, Node.IS_DISPATCHER);
}",0,
project,0,test04255,"public void test04255() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(34, node0, node0, node0, node0, 2600, 46);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test04256,"public void test04256() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(34, node0, node0, node0, node0, 2600, 46);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test04357,"public void test04357() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(132);
    Node node1 = new Node(36, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04458,"public void test04458() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""P"");
    Node node1 = new Node(37, node0, node0, node0, node0, 22, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test04559,"public void test04559() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = Node.newNumber((double) 130, 130, 130);
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    typeCheck0.visit((NodeTraversal) null, node0, node0);
    assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
}",0,
project,0,test04660,"public void test04660() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(76);
    Node node1 = new Node(41, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test04761,"public void test04761() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node0 = compiler0.parseSyntheticCode(""AzbYH/r,6vX^pvy"", ""AzbYH/r,6vX^pvy"");
    Node node1 = new Node(42, node0, node0, 28, 2);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test04862,"public void test04862() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(43, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(50, Node.LAST_PROP);
}",0,
project,0,test04963,"public void test04963() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(44, node0, node0, node0, node0, 22, 43);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test05064,"public void test05064() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""SKxUNihd)iDS/Jw"");
    Node node1 = new Node(45, node0, node0, 31, 12);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(24, Node.LASTUSE_PROP);
}",0,
project,0,test05165,"public void test05165() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(""// Input %num%"", (-1083), (-1083));
    Node node1 = new Node(46, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(30, Node.VAR_ARGS_NAME);
}",0,
project,0,test05266,"public void test05266() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""dgZ}V/8&v4"");
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node1 = new Node(47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test05367,"public void test05367() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(114, 114, 114);
    Node node1 = new Node(48);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test05468,"public void test05468() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""iMzF9n?<l]"");
    Node node1 = new Node(49, node0, node0, 6, (-3));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(46, Node.IS_NAMESPACE);
}",0,
project,0,test05569,"public void test05569() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(50);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05570,"public void test05570() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(50);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test05671,"public void test05671() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString(""JSC_INVALID_INTERFACE_MEMBER_DECLARATION"", 1, (-1083));
    Node node1 = new Node(51, node0, node0, node0, node0, 44, 3);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(35, Node.PARENTHESIZED_PROP);
}",0,
project,0,test05772,"public void test05772() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(52, 52, 52);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test05873,"public void test05873() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(53);
    compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test05874,"public void test05874() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(53);
    compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test05975,"public void test05975() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(54, 54, 54);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test05976,"public void test05976() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(54, 54, 54);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06077,"public void test06077() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node0 = Node.newString(""AzbYH/r,'vX^&@vy"");
    Node node1 = new Node(55, node0, node0, node0, 4, 8);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test06178,"public void test06178() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(101, 101, 101);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node1 = new Node(56, node0, node0, node0, node0, 10, 15);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test06179,"public void test06179() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(101, 101, 101);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node1 = new Node(56, node0, node0, node0, node0, 10, 15);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06280,"public void test06280() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(57);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06281,"public void test06281() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(57);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06382,"public void test06382() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(58);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06383,"public void test06383() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(58);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test06484,"public void test06484() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(59, 59, (-4229));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test06585,"public void test06585() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(60);
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    // Undeclared exception!
    try {
        typeCheck0.visit((NodeTraversal) null, node0, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test06686,"public void test06686() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(61, 61, 61);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06687,"public void test06687() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(61, 61, 61);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test06788,"public void test06788() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(62, node0, node0, node0, node0, 1, 3775);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test06789,"public void test06789() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString("""");
    Node node1 = new Node(62, node0, node0, node0, node0, 1, 3775);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test06890,"public void test06890() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node0 = compiler0.parseSyntheticCode(""AzbYH/r,'vX^&vy"", ""AzbYH/r,'vX^&vy"");
    Node node1 = new Node(63, node0, node0, node0, 131, 8);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test06991,"public void test06991() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(64, 64, 64);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(50, Node.LAST_PROP);
}",0,
project,0,test07092,"public void test07092() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node0 = compiler0.parseSyntheticCode(""AzbYH/r,6vX^pvy"", ""AzbYH/r,6vX^pvy"");
    Node node1 = Node.newString(65, ""msg.not.ctor"", 794, 44);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test07193,"public void test07193() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(66);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07194,"public void test07194() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(66);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test07295,"public void test07295() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(68, 32, (-1302));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test07396,"public void test07396() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(69, 90, 1540);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test07497,"public void test07497() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(70);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test07598,"public void test07598() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(71);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test07599,"public void test07599() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(71);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test076100,"public void test076100() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(72, 72, 72);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test076101,"public void test076101() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(72, 72, 72);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test077102,"public void test077102() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(73);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test077103,"public void test077103() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(73);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test078104,"public void test078104() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(74);
    Node node1 = compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test078105,"public void test078105() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(74);
    Node node1 = compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(1, compiler0.getWarningCount())"
project,0,test079106,"public void test079106() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(75, 75, 75);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test079107,"public void test079107() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(75, 75, 75);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test080108,"public void test080108() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(76);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test080109,"public void test080109() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(76);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test081110,"public void test081110() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(77);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.POST_FLAG);
}",0,
project,0,test082111,"public void test082111() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(78, 1504, 64);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test082112,"public void test082112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(78, 1504, 64);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test083113,"public void test083113() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(79, 76, 11);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test084114,"public void test084114() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(80, (-242), (-242));
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test084115,"public void test084115() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(80, (-242), (-242));
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test085116,"public void test085116() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(81);
    compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test085117,"public void test085117() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(81);
    compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test086118,"public void test086118() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(82, (-1826), 82);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test087119,"public void test087119() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(105);
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(15, Node.NO_SIDE_EFFECTS);
}",0,
project,0,test088120,"public void test088120() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(84);
    compiler0.parseTestCode(""1(?/,,sN+k>>g"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test088121,"public void test088121() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(84);
    compiler0.parseTestCode(""1(?/,,sN+k>>g"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test089122,"public void test089122() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""initalizing variable"");
    Node node1 = new Node(85, node0, node0, node0, node0, 2, 143);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(48, Node.DIRECTIVES);
}",0,
project,0,test090123,"public void test090123() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""qvPww)g|l`X<)"");
    Node node1 = new Node(87, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test090124,"public void test090124() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""qvPww)g|l`X<)"");
    Node node1 = new Node(87, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test091125,"public void test091125() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dK8Ap1C."");
    Node node1 = new Node(88, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(6, Node.TEMP_PROP);
}",0,
project,0,test092126,"public void test092126() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(90, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(33, Node.MEMBER_TYPE_PROP);
}",0,
project,0,test093127,"public void test093127() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""qvPww)g|l`X<)"");
    Node node1 = new Node(91, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(42, Node.SIDE_EFFECT_FLAGS);
}",0,
project,0,test094128,"public void test094128() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""l<D:}q9k"");
    Node node1 = new Node(92, node0, node0, 48, (-3351));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(10, Node.VARS_PROP);
}",0,
project,0,test095129,"public void test095129() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""l<D:}q9k"");
    Node node1 = new Node(93, node0, node0, 48, (-3351));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(30, Node.VAR_ARGS_NAME);
}",0,
project,0,test096130,"public void test096130() throws Throwable {
    Compiler compiler0 = new Compiler();
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckPropertyOrder checkPropertyOrder0 = new CheckPropertyOrder(compiler0, checkLevel0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkPropertyOrder0, syntacticScopeCreator0);
    Node node0 = compiler0.parseSyntheticCode(""AzbYH/r,6vX^pvy"", ""AzbYH/r,6vX^pvy"");
    Node node1 = new Node(94, node0, node0, node0, 5497, 123);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(32, Node.INCRDECR_PROP);
}",0,
project,0,test097131,"public void test097131() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""qvPww)g|l`X<)"");
    Node node1 = new Node(95, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, node1.getLineno());
}",0,
project,0,test098132,"public void test098132() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(96, 96, 96);
    StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test099133,"public void test099133() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(97, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(0, compiler0.getErrorCount());
}",0,
project,0,test099134,"public void test099134() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(97, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertFalse(compiler0.hasErrors());
}",1,
project,0,test100135,"public void test100135() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(98, 98, 98);
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    ConstCheck constCheck0 = new ConstCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, constCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(14, Node.DEFAULT_PROP);
}",0,
project,0,test101136,"public void test101136() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(99, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test101137,"public void test101137() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(99, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test102138,"public void test102138() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(100);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.hasChildren());
}",0,assertFalse(node0.hasChildren())
project,0,test103139,"public void test103139() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(101, 101, 101);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(101, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test104140,"public void test104140() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(102, 102, 102);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test105141,"public void test105141() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(103, 103, 103);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test106142,"public void test106142() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(104);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test106143,"public void test106143() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(104);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test107144,"public void test107144() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp?C."");
    Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test108145,"public void test108145() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(106, 1393, (-4229));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test109146,"public void test109146() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(107);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test109147,"public void test109147() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(107);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test110148,"public void test110148() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(108, 108, 39);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(31, Node.SKIP_INDEXES_PROP);
}",0,
project,0,test111149,"public void test111149() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(109, ""-soU+XaFv`CG]%"", 109, 992);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test111150,"public void test111150() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    Node node0 = Node.newString(109, ""-soU+XaFv`CG]%"", 109, 992);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test112151,"public void test112151() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(110);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(50, Node.LAST_PROP);
}",0,
project,0,test113152,"public void test113152() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""|t]/iV?+I7LVHE"");
    Node node1 = new Node(111, node0, node0, node0, node0, 50, 3);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test114153,"public void test114153() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(112, 112, 112);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, Node.TARGET_PROP);
}",0,
project,0,test115154,"public void test115154() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(113);
    compiler0.parseTestCode(""1(?/,,sN+k>>g"");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, Node.BOTH);
}",0,
project,0,test116155,"public void test116155() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(114, 114, 114);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.hasChildren());
}",0,
project,0,test117156,"public void test117156() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(115, 115, 101);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(46, Node.IS_NAMESPACE);
}",0,
project,0,test118157,"public void test118157() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(116, 116, 228);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(7, Node.LOCAL_PROP);
}",0,
project,0,test119158,"public void test119158() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.options;
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(117);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertFalse(node0.hasOneChild());
}",0,assertFalse(node0.hasOneChild())
project,0,test120159,"public void test120159() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(1667);
    Node node1 = new Node(119, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test121160,"public void test121160() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.options;
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(120);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
}",0,
project,0,test122161,"public void test122161() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(121);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test122162,"public void test122162() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(121);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test123163,"public void test123163() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(122, 122, (-1979));
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test124164,"public void test124164() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test124165,"public void test124165() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(123);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test125166,"public void test125166() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(124);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, Node.TARGET_PROP);
}",0,
project,0,test126167,"public void test126167() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node0 = new Node(126, (-1), 126);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(2, Node.ATTRIBUTE_FLAG);
}",0,
project,0,test127168,"public void test127168() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(128);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test127169,"public void test127169() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(128);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test128170,"public void test128170() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(129, 138, 90);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test129171,"public void test129171() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""<j766x!dp1C"");
    Node node1 = new Node(131, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test129172,"public void test129172() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""<j766x!dp1C"");
    Node node1 = new Node(131, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test130173,"public void test130173() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(133, 133, 133);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test131174,"public void test131174() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!0-p?C."");
    Node node1 = new Node(134, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test131175,"public void test131175() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!0-p?C."");
    Node node1 = new Node(134, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test132176,"public void test132176() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(135);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test132177,"public void test132177() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(135);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test133178,"public void test133178() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(136);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test133179,"public void test133179() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(136);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test134180,"public void test134180() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.options;
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(137);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test134181,"public void test134181() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.options;
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(137);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test135182,"public void test135182() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, (JSTypeRegistry) null);
    Node node0 = new Node(138, 149, 149);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test136183,"public void test136183() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(139);
    compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test136184,"public void test136184() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = new Node(139);
    compiler0.parseTestCode("""");
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test137185,"public void test137185() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(140);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test137186,"public void test137186() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(140);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test138187,"public void test138187() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(141, node0, node0, node0, node0, 16, 9);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test138188,"public void test138188() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(141, node0, node0, node0, node0, 16, 9);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test139189,"public void test139189() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(142, 1177, 1177);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test139190,"public void test139190() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(142, 1177, 1177);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test140191,"public void test140191() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(143);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test141192,"public void test141192() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(144, 2158, 90);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test142193,"public void test142193() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, syntacticScopeCreator0);
    Node node0 = compiler0.parseSyntheticCode(""AzbYH/r,6vX^pvy"", ""(FSSI!#Hg2/ m7#0wb~"");
    Node node1 = new Node(145, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(4, compiler0.getErrorCount());
}",0,
project,0,test143194,"public void test143194() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(146);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test144195,"public void test144195() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""initializing variable"");
    Node node1 = new Node(148, node0, node0, node0, node0, (-1249), 30);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(10, Node.VARS_PROP);
}",0,
project,0,test145196,"public void test145196() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(149);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test145197,"public void test145197() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(149);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test146198,"public void test146198() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(150);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test146199,"public void test146199() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(150);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test147200,"public void test147200() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(151);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 151
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",0,
project,0,test148201,"public void test148201() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(152);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(4095, Node.COLUMN_MASK);
}",0,
project,0,test149202,"public void test149202() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(153);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(4095, Node.COLUMN_MASK);
}",0,
project,0,test150203,"public void test150203() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = Node.newString(""L>0"");
    Node node1 = new Node(1, (-1896), 15);
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertTrue(compiler0.hasErrors());
}",1,
project,0,test150204,"public void test150204() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = Node.newString(""L>0"");
    Node node1 = new Node(1, (-1896), 15);
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,"assertEquals(0, compiler0.getErrorCount())"
project,0,test151205,"public void test151205() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = new Node(83);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.TypeCheck"", e);
    }
}",0,
project,0,test152206,"public void test152206() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""initalizing variabe"");
    Node node1 = new Node(27, node0, node0, node0, node0, 42, 38);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
    node0.setJSType(functionType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test152207,"public void test152207() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = compiler0.parseTestCode(""initalizing variabe"");
    Node node1 = new Node(27, node0, node0, node0, node0, 42, 38);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
    node0.setJSType(functionType0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test153208,"public void test153208() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = Node.newString(""l<D:}q9k"");
    Node node1 = new Node(17, node0, node0, node0, node0, 4095, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    assertEquals(47, Node.IS_DISPATCHER);
}",0,
project,0,test154209,"public void test154209() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = new Node(64, 64, 64);
    node0.addChildrenToFront(node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected node type: OBJECTLIT 64 : com.google.javascript.rhino.jstype.UnknownType@0000000161
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test155210,"public void test155210() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(67, 67, 67);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    TypeCheck typeCheck1 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
    typeCheck1.visit(nodeTraversal0, node0, node0);
    assertEquals(2, compiler0.getErrorCount());
}",0,
project,0,test155211,"public void test155211() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(67, 67, 67);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    TypeCheck typeCheck1 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
    typeCheck1.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test156212,"public void test156212() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;]-m]x!dKp1C."");
    Node node1 = new Node(105, node0, node0, node0, node0, 0, 45);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node1);
    assertFalse(boolean0);
}",0,
project,0,test157213,"public void test157213() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    Node node0 = new Node(120, 120, 120);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test158214,"public void test158214() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = compiler0.options;
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
    boolean boolean0 = typeCheck0.visitName((NodeTraversal) null, node0, node0);
    assertFalse(boolean0);
}",0,
project,0,test159215,"public void test159215() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(132);
    Node node1 = new Node(118, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node1, node1);
    assertFalse(boolean0);
}",0,
project,0,test160216,"public void test160216() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString("""", 33, 33);
    Node node1 = new Node(33, node0, node0, node0, node0, 113, 14);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node0, node1);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,"assertEquals(0, compiler0.getWarningCount())"
project,0,test161217,"public void test161217() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
    TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
    Node node0 = Node.newString("""", 33, 33);
    Node node1 = new Node(33, node0, node0, node0, node0, 115, 14);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node0);
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(defaultCodingConvention0, jSTypeRegistry0);
    TypeCheck typeCheck1 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    typeCheck1.visit(nodeTraversal0, node1, node1);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test162218,"public void test162218() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, (JSTypeRegistry) null);
    Node node0 = new Node(114, 114, 114);
    Node node1 = new Node(118, node0, node0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    // Undeclared exception!
    try {
        typeCheck0.visit(nodeTraversal0, node1, node1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // DO 114 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test163219,"public void test163219() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString(""P"");
    Node node1 = new Node(37, node0, node0, node0, node0, 22, 47);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
    typeCheck0.visit(nodeTraversal0, node1, node1);
    assertEquals(1, compiler0.getWarningCount());
}",0,
project,0,test164220,"public void test164220() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, (ReverseAbstractInterpreter) null, jSTypeRegistry0);
    Node node0 = Node.newString("";;V-m]x!d-p?C."");
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node1 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
    Node node2 = new Node(30, node1, node0, 33, 31);
    typeCheck0.visit((NodeTraversal) null, node2, node0);
    assertFalse(node0.isUnscopedQualifiedName());
}",0,assertFalse(node0.isUnscopedQualifiedName())
project,0,test165221,"public void test165221() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
    ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
    MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator((ScopeCreator) null);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, memoizedScopeCreator0);
    Node node0 = compiler0.parseSyntheticCode(""AzbYH/r,6vX^vy"", ""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(89, node0);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
    typeCheck0.visit(nodeTraversal0, node1, (Node) null);
    assertEquals((-3), Node.LOCAL_BLOCK_PROP);
}",0,
project,0,test166222,"public void test166222() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(127);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    node0.addSuppression("".?P;w=z9OEg1'rrz"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(1, compiler0.getErrorCount());
}",0,
project,0,test166223,"public void test166223() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    TypeCheck typeCheck0 = new TypeCheck(compiler0, reverseAbstractInterpreter0, jSTypeRegistry0);
    Node node0 = new Node(127);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0);
    node0.addSuppression("".?P;w=z9OEg1'rrz"");
    typeCheck0.visit(nodeTraversal0, node0, node0);
    assertEquals(0, compiler0.getWarningCount());
}",0,
project,0,test167224,"public void test167224() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
    PrepareAst.PrepareAnnotations prepareAst_PrepareAnnotations0 = new PrepareAst.PrepareAnnotations(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, prepareAst_PrepareAnnotations0, syntacticScopeCreator0);
    Node node0 = new Node(147, 147, 147);
    typeCheck0.visit(nodeTraversal0, node0, node0);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(0.0, double0, 0.01);
}",0,
project,0,test168225,"public void test168225() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, (JSTypeRegistry) null);
    double double0 = typeCheck0.getTypedPercent();
    assertEquals(0.0, double0, 0.01);
}",0,
