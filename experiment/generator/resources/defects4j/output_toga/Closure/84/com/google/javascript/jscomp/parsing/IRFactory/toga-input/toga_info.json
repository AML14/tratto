{
  "test3237" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3237() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ObjectLiteral objectLiteral0 = new ObjectLiteral(21, 2);\n    astRoot0.addChildrenToFront(objectLiteral0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    Config config0 = new Config(treeSet0, treeSet0, false, false);\n    Node node0 = IRFactory.transformTree(astRoot0, \"\", config0, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test3237"
  },
  "test4449" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4449() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Assignment assignment0 = new Assignment(18, astRoot0, astRoot0, 1);\n    astRoot0.addChildToBack(assignment0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \">5fR5((\", (Config) null, errorCollector0);\n}",
    "testName" : "test4449"
  },
  "test2226" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2226() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Token.CommentType token_CommentType0 = Token.CommentType.HTML;\n    Comment comment0 = new Comment(12, 2, token_CommentType0, \"T=Z\");\n    astRoot0.setJsDocNode(comment0);\n    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    Config config0 = new Config(treeSet0, treeSet0, true, true);\n    Node node0 = IRFactory.transformTree(astRoot0, \"T=Z\", config0, toolErrorReporter0);\n    node0.getType();\n}",
    "testName" : "test2226"
  },
  "test3035" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3035() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    LabeledStatement labeledStatement0 = new LabeledStatement(1, 13);\n    astRoot0.addChildToBack(labeledStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n}",
    "testName" : "test3035"
  },
  "test4247" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4247() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Assignment assignment0 = new Assignment(14, astRoot0, astRoot0, 1);\n    astRoot0.addChildrenToFront(assignment0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"`di5^Pb(X-dG|py\", (Config) null, errorCollector0);\n}",
    "testName" : "test4247"
  },
  "test1013" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1013() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    StringLiteral stringLiteral0 = new StringLiteral();\n    astRoot0.addChildrenToFront(stringLiteral0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \";1x.yKpWa1vFubqN9Of\", (Config) null, errorCollector0);\n}",
    "testName" : "test1013"
  },
  "test2024" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2024() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;\n    Comment comment0 = new Comment(11, 8, token_CommentType0, \"0Z2Xz9{HR\\\"49\");\n    astRoot0.addComment(comment0);\n    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    Set<String> set0 = locale0.getUnicodeLocaleAttributes();\n    Config config0 = new Config(set0, set0, false, true);\n    IRFactory.transformTree(astRoot0, \"\", config0, toolErrorReporter0);\n    Node node0 = IRFactory.transformTree(astRoot0, \"\", config0, toolErrorReporter0);\n    node0.getType();\n}",
    "testName" : "test2024"
  },
  "test1418" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1418() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    WithStatement withStatement0 = new WithStatement();\n    astRoot0.addChildToBack(withStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"ea\", (Config) null, errorCollector0);\n}",
    "testName" : "test1418"
  },
  "test034" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ElementGet elementGet0 = new ElementGet();\n    astRoot0.addChildToBack(elementGet0);\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    Config config0 = new Config(treeSet0, treeSet0, true, true);\n    IRFactory.transformTree(astRoot0, \"\", config0, (ErrorReporter) null);\n}",
    "testName" : "test034"
  },
  "test1216" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1216() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    SwitchCase switchCase0 = new SwitchCase();\n    ExpressionStatement expressionStatement0 = new ExpressionStatement(switchCase0);\n    astRoot0.addChildToBack(expressionStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"com.google.javascript.jscomp.parsing.IRFactory\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test1216"
  },
  "test3439" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3439() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ObjectLiteral objectLiteral0 = new ObjectLiteral(21, 2);\n    ObjectProperty objectProperty0 = new ObjectProperty();\n    objectLiteral0.addElement(objectProperty0);\n    astRoot0.addChildrenToFront(objectLiteral0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    Config config0 = new Config(treeSet0, treeSet0, false, true);\n    IRFactory.transformTree(astRoot0, \"com.google.javascript.jscomp.parsing.IRFactory$1\", config0, errorCollector0);\n}",
    "testName" : "test3439"
  },
  "test2429" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2429() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Scope scope0 = new Scope(2);\n    scope0.addChildrenToBack(astRoot0);\n    astRoot0.addChildToBack(scope0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"Catch clauses are not supported\", (Config) null, errorCollector0);\n}",
    "testName" : "test2429"
  },
  "test068" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    NumberLiteral numberLiteral0 = new NumberLiteral(1, 2);\n    astRoot0.addChildrenToFront(numberLiteral0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"N}jcm=nzW/+5D\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test068"
  },
  "test069" : {
    "methodSignature" : "public boolean hasOneChild()",
    "methodName" : "hasOneChild",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    NumberLiteral numberLiteral0 = new NumberLiteral(1, 2);\n    astRoot0.addChildrenToFront(numberLiteral0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"N}jcm=nzW/+5D\", (Config) null, errorCollector0);\n    node0.hasOneChild();\n}",
    "testName" : "test069"
  },
  "test4045" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4045() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Assignment assignment0 = new Assignment(18, astRoot0, astRoot0, 1);\n    assignment0.setOperator(10);\n    astRoot0.addChildrenToFront(assignment0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"}l?\", (Config) null, errorCollector0);\n}",
    "testName" : "test4045"
  },
  "test1620" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1620() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ForLoop forLoop0 = new ForLoop();\n    astRoot0.addChildrenToFront(forLoop0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n}",
    "testName" : "test1620"
  },
  "test2631" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ContinueStatement continueStatement0 = new ContinueStatement(154, 5);\n    astRoot0.addChildrenToFront(continueStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"msg.only.one.super\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test2631"
  },
  "test4853" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4853() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    RegExpLiteral regExpLiteral0 = new RegExpLiteral(1);\n    InfixExpression infixExpression0 = new InfixExpression(105, regExpLiteral0, astRoot0, 8);\n    astRoot0.addChildToBack(infixExpression0);\n    IRFactory.transformTree(astRoot0, \"Unsupported sytax;: \", (Config) null, errorCollector0);\n}",
    "testName" : "test4853"
  },
  "test3843" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3843() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    VariableDeclaration variableDeclaration0 = new VariableDeclaration(12, 0);\n    astRoot0.addChildToBack(variableDeclaration0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"I-eV3SF*(BQU-<[>\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test3843"
  },
  "test4651" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4651() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    VariableInitializer variableInitializer0 = new VariableInitializer(11, 9);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    InfixExpression infixExpression0 = new InfixExpression(23, variableInitializer0, variableInitializer0, 139);\n    astRoot0.addChildToBack(infixExpression0);\n    IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n}",
    "testName" : "test4651"
  },
  "test3641" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3641() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ReturnStatement returnStatement0 = new ReturnStatement(2, 155, astRoot0);\n    astRoot0.addChildToBack(returnStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n}",
    "testName" : "test3641"
  },
  "test023" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    DoLoop doLoop0 = new DoLoop(93, 54);\n    astRoot0.addChildToBack(doLoop0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"`n2i/\", (Config) null, errorCollector0);\n}",
    "testName" : "test023"
  },
  "test1822" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1822() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    XmlPropRef xmlPropRef0 = new XmlPropRef();\n    astRoot0.addChildrenToFront(xmlPropRef0);\n    IRFactory.transformTree(astRoot0, \"5\", (Config) null, errorCollector0);\n}",
    "testName" : "test1822"
  },
  "test2833" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2833() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Name name0 = new Name(14, 155, \"i!kB1E\");\n    FunctionNode functionNode0 = new FunctionNode(26, name0);\n    astRoot0.addChildToBack(functionNode0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n}",
    "testName" : "test2833"
  },
  "test0811" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0811() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ThrowStatement throwStatement0 = new ThrowStatement(0, astRoot0);\n    astRoot0.addChildrenToFront(throwStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);\n}",
    "testName" : "test0811"
  },
  "test057" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    WhileLoop whileLoop0 = new WhileLoop(4);\n    astRoot0.addChildToBack(whileLoop0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Locale locale0 = Locale.forLanguageTag(\"Tfl\");\n    Set<String> set0 = locale0.getUnicodeLocaleKeys();\n    Config config0 = new Config(set0, set0, false, false);\n    IRFactory.transformTree(astRoot0, \"[{Wsas\", config0, errorCollector0);\n}",
    "testName" : "test057"
  },
  "test1114" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1114() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Scope scope0 = new Scope(2);\n    astRoot0.addChildToBack(scope0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"Catch clauses are not supported\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test1114"
  },
  "test2125" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2125() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;\n    Comment comment0 = new Comment(26, 127, token_CommentType0, \"\");\n    astRoot0.addComment(comment0);\n    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);\n    Node node0 = IRFactory.transformTree(astRoot0, \"org.mozilla.classfile.ClassFileMethod\", (Config) null, toolErrorReporter0);\n    node0.getType();\n}",
    "testName" : "test2125"
  },
  "test1115" : {
    "methodSignature" : "public boolean hasChildren()",
    "methodName" : "hasChildren",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1115() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Scope scope0 = new Scope(2);\n    astRoot0.addChildToBack(scope0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"Catch clauses are not supported\", (Config) null, errorCollector0);\n    node0.hasChildren();\n}",
    "testName" : "test1115"
  },
  "test3338" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3338() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ObjectLiteral objectLiteral0 = new ObjectLiteral(21, 2);\n    ObjectProperty objectProperty0 = new ObjectProperty();\n    objectLiteral0.addElement(objectProperty0);\n    astRoot0.addChildrenToFront(objectLiteral0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    Config config0 = new Config(treeSet0, treeSet0, false, false);\n    IRFactory.transformTree(astRoot0, \"\", config0, errorCollector0);\n}",
    "testName" : "test3338"
  },
  "test4348" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4348() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    InfixExpression infixExpression0 = new InfixExpression(15, astRoot0, astRoot0, 10);\n    astRoot0.addChildToBack(infixExpression0);\n    IRFactory.transformTree(astRoot0, \"\\\"\\bCG~$OkX(^OoT\", (Config) null, errorCollector0);\n}",
    "testName" : "test4348"
  },
  "test3136" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3136() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    LabeledStatement labeledStatement0 = new LabeledStatement(16);\n    Label label0 = new Label(2);\n    labeledStatement0.addLabel(label0);\n    astRoot0.addChildToBack(labeledStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"+)~s\", (Config) null, errorCollector0);\n}",
    "testName" : "test3136"
  },
  "test4146" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4146() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    RegExpLiteral regExpLiteral0 = new RegExpLiteral(96);\n    InfixExpression infixExpression0 = new InfixExpression(12, regExpLiteral0, regExpLiteral0, 842);\n    astRoot0.addChildToBack(infixExpression0);\n    IRFactory.transformTree(astRoot0, \"Unsupported sytax;: \", (Config) null, errorCollector0);\n}",
    "testName" : "test4146"
  },
  "test012" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ObjectProperty objectProperty0 = new ObjectProperty();\n    astRoot0.addChildToBack(objectProperty0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n}",
    "testName" : "test012"
  },
  "test1519" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1519() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ForInLoop forInLoop0 = new ForInLoop(1, 9);\n    astRoot0.addChildToBack(forInLoop0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"0Oy`%d_\", (Config) null, errorCollector0);\n}",
    "testName" : "test1519"
  },
  "test2328" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2328() throws Throwable {\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    AstRoot astRoot0 = new AstRoot(15);\n    Node node0 = IRFactory.transformTree(astRoot0, \"() {\\n\\t[native code]\\n}\\n\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test2328"
  },
  "test2327" : {
    "methodSignature" : "public int getCharno()",
    "methodName" : "getCharno",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2327() throws Throwable {\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    AstRoot astRoot0 = new AstRoot(15);\n    Node node0 = IRFactory.transformTree(astRoot0, \"() {\\n\\t[native code]\\n}\\n\", (Config) null, errorCollector0);\n    node0.getCharno();\n}",
    "testName" : "test2327"
  },
  "test1317" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1317() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    PropertyGet propertyGet0 = new PropertyGet(4, 151);\n    astRoot0.addChildrenToFront(propertyGet0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"com.google.javascript.jscomp.parsing.IRFactory\", (Config) null, errorCollector0);\n}",
    "testName" : "test1317"
  },
  "test046" : {
    "methodSignature" : "public boolean hasChildren()",
    "methodName" : "hasChildren",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Block block0 = new Block();\n    astRoot0.addChildToBack(block0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"J;+,(%0{\", (Config) null, errorCollector0);\n    node0.hasChildren();\n}",
    "testName" : "test046"
  },
  "test4954" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4954() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    SwitchCase switchCase0 = new SwitchCase();\n    ExpressionStatement expressionStatement0 = new ExpressionStatement(switchCase0);\n    expressionStatement0.setHasResult();\n    astRoot0.addChildToBack(expressionStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"com.google.javascript.jscomp.parsing.IRFactory\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test4954"
  },
  "test3742" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3742() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    AstRoot astRoot1 = new AstRoot(3);\n    SwitchCase switchCase0 = new SwitchCase(23);\n    switchCase0.addStatement(astRoot1);\n    astRoot0.addChildToBack(switchCase0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \">[#JYDY_(9Cm5\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test3742"
  },
  "test1721" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ConditionalExpression conditionalExpression0 = new ConditionalExpression(1404, 214);\n    astRoot0.addChildrenToFront(conditionalExpression0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher\", (Config) null, errorCollector0);\n}",
    "testName" : "test1721"
  },
  "test4752" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4752() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    FunctionCall functionCall0 = new FunctionCall(2, 1);\n    astRoot0.addChildrenToFront(functionCall0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"S@OA0#\", (Config) null, errorCollector0);\n}",
    "testName" : "test4752"
  },
  "test3540" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3540() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ReturnStatement returnStatement0 = new ReturnStatement(23);\n    astRoot0.addChildToBack(returnStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test3540"
  },
  "test2530" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2530() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    BreakStatement breakStatement0 = new BreakStatement(23);\n    SwitchStatement switchStatement0 = new SwitchStatement();\n    switchStatement0.setExpression(breakStatement0);\n    astRoot0.addChildToBack(switchStatement0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"com.google.javascript.jscomp.mozilla.rhino.tools.resources.Messages\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test2530"
  },
  "test000" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    EmptyExpression emptyExpression0 = new EmptyExpression(16);\n    astRoot0.addChildrenToFront(emptyExpression0);\n    Node node0 = IRFactory.transformTree(astRoot0, \"com. oogle.javascript.rhino.testing.EmptyScope\", (Config) null, (ErrorReporter) null);\n    node0.getType();\n}",
    "testName" : "test000"
  },
  "test0912" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0912() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    NewExpression newExpression0 = new NewExpression(8);\n    astRoot0.addChildrenToFront(newExpression0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"\", (Config) null, errorCollector0);\n}",
    "testName" : "test0912"
  },
  "test001" : {
    "methodSignature" : "public boolean hasOneChild()",
    "methodName" : "hasOneChild",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    EmptyExpression emptyExpression0 = new EmptyExpression(16);\n    astRoot0.addChildrenToFront(emptyExpression0);\n    Node node0 = IRFactory.transformTree(astRoot0, \"com. oogle.javascript.rhino.testing.EmptyScope\", (Config) null, (ErrorReporter) null);\n    node0.hasOneChild();\n}",
    "testName" : "test001"
  },
  "test045" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    Block block0 = new Block();\n    astRoot0.addChildToBack(block0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    Node node0 = IRFactory.transformTree(astRoot0, \"J;+,(%0{\", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test045"
  },
  "test0710" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0710() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(1);\n    astRoot0.addChildrenToFront(parenthesizedExpression0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"com.google.javascript.jscomp.mozilla.rhino.Function\", (Config) null, errorCollector0);\n}",
    "testName" : "test0710"
  },
  "test3944" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3944() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    VariableDeclaration variableDeclaration0 = new VariableDeclaration(12, 0);\n    VariableInitializer variableInitializer0 = new VariableInitializer(24, 2);\n    variableDeclaration0.addVariable(variableInitializer0);\n    astRoot0.addChildToBack(variableDeclaration0);\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    IRFactory.transformTree(astRoot0, \"N8EXDyOBzG#s;bQ\", (Config) null, errorCollector0);\n}",
    "testName" : "test3944"
  },
  "test1923" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1923() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    RegExpLiteral regExpLiteral0 = new RegExpLiteral(8);\n    InfixExpression infixExpression0 = new InfixExpression(21, regExpLiteral0, regExpLiteral0, 1);\n    astRoot0.addChildToBack(infixExpression0);\n    regExpLiteral0.setValue(\"Unsupported sytax;: \");\n    Node node0 = IRFactory.transformTree(astRoot0, \"Unsupported sytax;: \", (Config) null, errorCollector0);\n    node0.getType();\n}",
    "testName" : "test1923"
  },
  "test2934" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2934() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    FunctionNode functionNode0 = new FunctionNode(189, (Name) null);\n    functionNode0.addParam(astRoot0);\n    astRoot0.addChildToBack(functionNode0);\n    ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);\n    IRFactory.transformTree(astRoot0, \"error reporter\", (Config) null, toolErrorReporter0);\n}",
    "testName" : "test2934"
  },
  "test4550" : {
    "methodSignature" : "public static Node transformTree(AstRoot node, String sourceString, Config config, ErrorReporter errorReporter)",
    "methodName" : "transformTree",
    "className" : "com.google.javascript.jscomp.parsing.IRFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4550() throws Throwable {\n    AstRoot astRoot0 = new AstRoot();\n    ErrorCollector errorCollector0 = new ErrorCollector();\n    RegExpLiteral regExpLiteral0 = new RegExpLiteral();\n    InfixExpression infixExpression0 = new InfixExpression(19, regExpLiteral0, astRoot0, (-102));\n    astRoot0.addChildToBack(infixExpression0);\n    IRFactory.transformTree(astRoot0, \"newChild had siblings in addChildBefore\", (Config) null, errorCollector0);\n}",
    "testName" : "test4550"
  }
}