focal_method,test_prefix,docstring
"void addJsString(String s) {
    String cached = ESCAPED_JS_STRINGS.get(s);
    if (cached == null) {
        cached = jsString(s);
        ESCAPED_JS_STRINGS.put(s, cached);
    }
    add(cached);
}","public void test000() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addJsString(""'7Xr]>,L_w6E3OVi"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}","/**
 * Outputs a js string, using the optimal (single/double) quote character
 */"
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test011() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""#AlDd]`]]>0,*C"");
    assertEquals(""/#AlDd]`]]\\>0,*C/"", string0);
}",""
"static String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null);
}","public void test022() throws Throwable {
    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(""kWNS7_IJdJf]>+r$"");
    assertEquals(""\""kWNS\\u007f7_IJdJf]>+r$\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"void addList(Node firstInList) {
    addList(firstInList, true, Context.OTHER);
}","public void test033() throws Throwable {
    Node node0 = Node.newNumber(2447.0253);
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"public void tagAsStrict() {
    add(""'use strict';"");
}","public void test044() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.tagAsStrict();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}","/**
 * Insert a ECMASCRIPT 5 strict annotation.
 */"
"void addCaseBody(Node caseBody) {
    cc.beginCaseBody();
    add(caseBody);
    cc.endCaseBody();
}","public void test055() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addCaseBody((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument) {
    addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);
}","public void test066() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    codeGenerator0.addList((Node) null, true);
}",""
"CodeGenerator(CodeConsumer consumer, Charset outputCharset) {
    cc = consumer;
    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {
        // If we want our default (pretending to be UTF-8, but escaping anything
        // outside of straight ASCII), then don't use the encoder, but
        // just special-case the code.  This keeps the normal path through
        // the code identical to how it's been for years.
        this.outputCharsetEncoder = null;
    } else {
        this.outputCharsetEncoder = outputCharset.newEncoder();
    }
}","public void test077() throws Throwable {
    Charset charset0 = Charset.forName(""default"");
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
}",""
"CodeGenerator(CodeConsumer consumer, Charset outputCharset) {
    cc = consumer;
    if (outputCharset == null || outputCharset == Charsets.US_ASCII) {
        // If we want our default (pretending to be UTF-8, but escaping anything
        // outside of straight ASCII), then don't use the encoder, but
        // just special-case the code.  This keeps the normal path through
        // the code identical to how it's been for years.
        this.outputCharsetEncoder = null;
    } else {
        this.outputCharsetEncoder = outputCharset.newEncoder();
    }
}","public void test088() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
}",""
"static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
        try {
            long l = Long.parseLong(s);
            if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                return l;
            }
        } catch (NumberFormatException e) {
            // The number was too long to parse. Fall through to NaN.
        }
    }
    return Double.NaN;
}","public void test099() throws Throwable {
    double double0 = CodeGenerator.getSimpleNumber(""0"");
    assertEquals(0.0, double0, 0.01);
}",""
"static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
        char c = s.charAt(index);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    return len > 0;
}","public void test1010() throws Throwable {
    boolean boolean0 = CodeGenerator.isSimpleNumber(""/RLj<!--"");
    assertFalse(boolean0);
}",""
"static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
        char c = s.charAt(index);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    return len > 0;
}","public void test1111() throws Throwable {
    boolean boolean0 = CodeGenerator.isSimpleNumber(""9lNGx+3>BTlv4B"");
    assertFalse(boolean0);
}",""
"static boolean isSimpleNumber(String s) {
    int len = s.length();
    for (int index = 0; index < len; index++) {
        char c = s.charAt(index);
        if (c < '0' || c > '9') {
            return false;
        }
    }
    return len > 0;
}","public void test1212() throws Throwable {
    boolean boolean0 = CodeGenerator.isSimpleNumber("""");
    assertFalse(boolean0);
}",""
"static double getSimpleNumber(String s) {
    if (isSimpleNumber(s)) {
        try {
            long l = Long.parseLong(s);
            if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                return l;
            }
        } catch (NumberFormatException e) {
            // The number was too long to parse. Fall through to NaN.
        }
    }
    return Double.NaN;
}","public void test1313() throws Throwable {
    double double0 = CodeGenerator.getSimpleNumber(""typeof"");
    assertEquals(Double.NaN, double0, 0.01);
}",""
"void addArrayList(Node firstInList) {
    boolean lastWasEmpty = false;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1);
        lastWasEmpty = n.getType() == Token.EMPTY;
    }
    if (lastWasEmpty) {
        cc.listSeparator();
    }
}","public void test1414() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        codeGenerator0.addArrayList(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 */"
"void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) {
    for (Node n = firstInList; n != null; n = n.getNext()) {
        boolean isFirst = n == firstInList;
        if (isFirst) {
            addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
        } else {
            cc.listSeparator();
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
        }
    }
}","public void test1515() throws Throwable {
    Node node0 = Node.newString(""a1f</scriptueg"");
    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, false, codeGenerator_Context0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) {
    for (Node n = firstInList; n != null; n = n.getNext()) {
        boolean isFirst = n == firstInList;
        if (isFirst) {
            addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
        } else {
            cc.listSeparator();
            addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
        }
    }
}","public void test1616() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    Node node0 = Node.newString(51, "".82?($G*r;|qOG"");
    CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
    // Undeclared exception!
    try {
        codeGenerator0.addList(node0, true, codeGenerator_Context0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addArrayList(Node firstInList) {
    boolean lastWasEmpty = false;
    for (Node n = firstInList; n != null; n = n.getNext()) {
        if (n != firstInList) {
            cc.listSeparator();
        }
        addExpr(n, 1);
        lastWasEmpty = n.getType() == Token.EMPTY;
    }
    if (lastWasEmpty) {
        cc.listSeparator();
    }
}","public void test1717() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    codeGenerator0.addArrayList((Node) null);
}","/**
 * This function adds a comma-separated list as is specified by an ARRAYLIT
 * node with the associated skipIndexes array.  This is a space optimization
 * since we avoid creating a whole Node object for each empty array literal
 * slot.
 * @param firstInList The first in the node list (chained through the next
 * property).
 */"
"void addAllSiblings(Node n) {
    for (Node c = n; c != null; c = c.getNext()) {
        add(c);
    }
}","public void test1818() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    codeGenerator0.addAllSiblings((Node) null);
}",""
"void addAllSiblings(Node n) {
    for (Node c = n; c != null; c = c.getNext()) {
        add(c);
    }
}","public void test1919() throws Throwable {
    Node node0 = Node.newString(""\""U<!--`7\"""");
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addAllSiblings(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}",""
"void addJsString(String s) {
    String cached = ESCAPED_JS_STRINGS.get(s);
    if (cached == null) {
        cached = jsString(s);
        ESCAPED_JS_STRINGS.put(s, cached);
    }
    add(cached);
}","public void test2020() throws Throwable {
    CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
    // Undeclared exception!
    try {
        codeGenerator0.addJsString(""O=^Q\""tn>("");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CodeGenerator"", e);
    }
}","/**
 * Outputs a js string, using the optimal (single/double) quote character
 */"
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2121() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000\u00A0\u180E\u202F"");
    assertEquals(""/\\t\\n\\u000b\\u000c\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\\u00a0\\u180e\\u202f/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2222() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""!--><!-"");
    assertEquals(""/!--\\><!-/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2323() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""q>I:1es(#F'>js"");
    assertEquals(""/q>I:1es(#F'>js/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2424() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""}Rb\""-6?->:ld&_"");
    assertEquals(""/}Rb\""-6?->:ld&_/"", string0);
}",""
"/* If the user doesn't want to specify an output charset encoder, assume
     they want Latin/ASCII characters only.
   */
static String regexpEscape(String s) {
    return regexpEscape(s, null);
}","public void test2525() throws Throwable {
    String string0 = CodeGenerator.regexpEscape(""\""u</script\"""");
    assertEquals(""/\""u<\\/script\""/"", string0);
}",""
"static String escapeToDoubleQuotedJsString(String s) {
    return strEscape(s, '""', ""\\\"""", ""\'"", ""\\\\"", null);
}","public void test2626() throws Throwable {
    String string0 = CodeGenerator.escapeToDoubleQuotedJsString(""<!--W tgyS"");
    assertEquals(""\""<\\!--W tgyS\"""", string0);
}","/**
 * Escapes the given string to a double quoted ("") JavaScript/JSON string
 */"
"static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) {
    return strEscape(s, '/', ""\"""", ""'"", ""\\"", outputCharsetEncoder);
}","public void test2727() throws Throwable {
    Charset charset0 = Charset.forName(""default"");
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    String string0 = CodeGenerator.regexpEscape(""\t\n\u000B} \u0085<!-~0\u00A0\u202F"", charsetEncoder0);
    assertEquals(""/\\t\\n\u000B} \\u0085<!-~0\\u00a0\\u202f/"", string0);
}","/**
 * Escapes regular expression
 */"
"static String identifierEscape(String s) {
    // First check if escaping is needed at all -- in most cases it isn't.
    if (NodeUtil.isLatin(s)) {
        return s;
    }
    // Now going through the string to escape non-latin characters if needed.
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        // Identifiers should always go to Latin1/ ASCII characters because
        // different browser's rules for valid identifier characters are
        // crazy.
        if (c > 0x1F && c < 0x7F) {
            sb.append(c);
        } else {
            appendHexJavaScriptRepresentation(sb, c);
        }
    }
    return sb.toString();
}","public void test2828() throws Throwable {
    String string0 = CodeGenerator.identifierEscape(""\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000\u00A0\u180E\u202F"");
    assertEquals(""\\u0009\\u000a\\u000b\\u000c\\u000d \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\\u00a0\\u180e\\u202f"", string0);
}",""
"static String identifierEscape(String s) {
    // First check if escaping is needed at all -- in most cases it isn't.
    if (NodeUtil.isLatin(s)) {
        return s;
    }
    // Now going through the string to escape non-latin characters if needed.
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        // Identifiers should always go to Latin1/ ASCII characters because
        // different browser's rules for valid identifier characters are
        // crazy.
        if (c > 0x1F && c < 0x7F) {
            sb.append(c);
        } else {
            appendHexJavaScriptRepresentation(sb, c);
        }
    }
    return sb.toString();
}","public void test2929() throws Throwable {
    String string0 = CodeGenerator.identifierEscape(""typeof"");
    assertEquals(""typeof"", string0);
}",""
