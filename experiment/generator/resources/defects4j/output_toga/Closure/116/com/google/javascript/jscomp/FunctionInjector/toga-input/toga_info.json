{
  "test1212" : {
    "methodSignature" : "public void setKnownConstants(Set<String> knownConstants)",
    "methodName" : "setKnownConstants",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    functionInjector0.setKnownConstants(hashSet0);\n    hashSet0.add(\"?x5F\");\n    functionInjector0.setKnownConstants(hashSet0);\n}",
    "testName" : "test1212"
  },
  "test1010" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    JSModule jSModule0 = new JSModule(\"3h`\");\n    Node node0 = Node.newString(\"3h`\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);\n    functionInjector0.inliningLowersCost(jSModule0, node0, immutableList0, compilerOptions0.stripNameSuffixes, true, false);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    JSModule jSModule0 = new JSModule(\"\");\n    Node node0 = Node.newString(\"\");\n    HashSet<FunctionInjector.Reference> hashSet0 = new HashSet<FunctionInjector.Reference>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    JSModule jSModule1 = new JSModule(\"\");\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule1, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);\n    hashSet0.addAll(immutableList0);\n    functionInjector0.inliningLowersCost(jSModule0, node0, hashSet0, compilerOptions0.aliasableStrings, true, false);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "void maybePrepareCall(Node callNode)",
    "methodName" : "maybePrepareCall",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    functionInjector0.maybePrepareCall((Node) null);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "Node parseSyntheticCode(String fileName, String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);\n    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);\n    compiler0.parseSyntheticCode(\"lastIndexOf\", \"lastIndexOf\");\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    JSModule jSModule0 = new JSModule(\"\");\n    Node node0 = Node.newString(\"\");\n    HashSet<FunctionInjector.Reference> hashSet0 = new HashSet<FunctionInjector.Reference>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);\n    hashSet0.addAll(immutableList0);\n    boolean boolean0 = functionInjector0.inliningLowersCost(jSModule0, node0, hashSet0, compilerOptions0.aliasableStrings, true, false);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, false);\n    LinkedListMultimap<String, Object> linkedListMultimap0 = LinkedListMultimap.create();\n    Set<String> set0 = linkedListMultimap0.keySet();\n    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, false, false);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    JSModule jSModule0 = new JSModule(\"\");\n    Node node0 = Node.newString(\"\");\n    HashSet<FunctionInjector.Reference> hashSet0 = new HashSet<FunctionInjector.Reference>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);\n    hashSet0.addAll(immutableList0);\n    functionInjector0.inliningLowersCost(jSModule0, node0, hashSet0, compilerOptions0.aliasableStrings, true, false);\n}",
    "testName" : "test099"
  },
  "test000" : {
    "methodSignature" : "Node parseSyntheticCode(String fileName, String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);\n    compiler0.parseSyntheticCode(\"eM6;%l)8fT\", \"$VALUES\");\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "Node parseSyntheticCode(String fileName, String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);\n    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);\n    compiler0.parseSyntheticCode(\"$VALUES\", \"$VALUES\");\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "Node parseSyntheticCode(String fileName, String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);\n    compiler0.parseSyntheticCode(\"eM6;%l)8fT\", \"$VALUES\");\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    ArrayDeque<FunctionInjector.Reference> arrayDeque0 = new ArrayDeque<FunctionInjector.Reference>();\n    boolean boolean0 = functionInjector0.inliningLowersCost((JSModule) null, (Node) null, arrayDeque0, (Set<String>) null, true, true);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "boolean inliningLowersCost(JSModule fnModule, Node fnNode, Collection<? extends Reference> refs, Set<String> namesToAlias, boolean isRemovable, boolean referencesThis)",
    "methodName" : "inliningLowersCost",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);\n    Set<String> set0 = gatherRawExports0.getExportedVariableNames();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);\n    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, set0, true, true);\n}",
    "testName" : "test088"
  }
}