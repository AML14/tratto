focal_method,test_prefix,docstring
"protected CommandLineRunner(String[] args, PrintStream out, PrintStream err) {
    super(out, err);
    initConfigFromFlags(args, err);
}","public void test00() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""P/*M@?%1k_0 TALCB"");
    CommandLineRunner commandLineRunner0 = null;
    try {
        commandLineRunner0 = new CommandLineRunner((String[]) null, mockPrintStream0, mockPrintStream0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CommandLineRunner"", e);
    }
}",""
"public static void main(String[] args) {
    CommandLineRunner runner = new CommandLineRunner(args);
    if (runner.shouldRunCompiler()) {
        runner.run();
    } else {
        System.exit(-1);
    }
}","public void test11() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""Unexpected Node subclass."";
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 * Runs the Compiler. Exits cleanly in the event of an error.
 */"
"public static void main(String[] args) {
    CommandLineRunner runner = new CommandLineRunner(args);
    if (runner.shouldRunCompiler()) {
        runner.run();
    } else {
        System.exit(-1);
    }
}","public void test22() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-A="";
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 * Runs the Compiler. Exits cleanly in the event of an error.
 */"
"public static void main(String[] args) {
    CommandLineRunner runner = new CommandLineRunner(args);
    if (runner.shouldRunCompiler()) {
        runner.run();
    } else {
        System.exit(-1);
    }
}","public void test33() throws Throwable {
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""--A="";
    // Undeclared exception!
    try {
        CommandLineRunner.main(stringArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No match found
        //
        verifyException(""java.util.regex.Matcher"", e);
    }
}","/**
 * Runs the Compiler. Exits cleanly in the event of an error.
 */"
"public static List<SourceFile> getDefaultExterns() throws IOException {
    InputStream input = CommandLineRunner.class.getResourceAsStream(""/externs.zip"");
    if (input == null) {
        // In some environments, the externs.zip is relative to this class.
        input = CommandLineRunner.class.getResourceAsStream(""externs.zip"");
    }
    Preconditions.checkNotNull(input);
    ZipInputStream zip = new ZipInputStream(input);
    Map<String, SourceFile> externsMap = Maps.newHashMap();
    for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null; ) {
        BufferedInputStream entryStream = new BufferedInputStream(ByteStreams.limit(zip, entry.getSize()));
        externsMap.put(entry.getName(), SourceFile.fromInputStream(// Give the files an odd prefix, so that they do not conflict
        // with the user's files.
        ""externs.zip//"" + entry.getName(), entryStream));
    }
    Preconditions.checkState(externsMap.keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)), ""Externs zip must match our hard-coded list of externs."");
    // Order matters, so the resources must be added to the result list
    // in the expected order.
    List<SourceFile> externs = Lists.newArrayList();
    for (String key : DEFAULT_EXTERNS_NAMES) {
        externs.add(externsMap.get(key));
    }
    return externs;
}","public void test44() throws Throwable {
    // Undeclared exception!
    try {
        CommandLineRunner.getDefaultExterns();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return a mutable list
 * @throws IOException
 */"
