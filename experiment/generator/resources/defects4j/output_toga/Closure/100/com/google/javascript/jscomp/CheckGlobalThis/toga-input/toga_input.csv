focal_method,test_prefix,docstring
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(42, ""}}`83}"", 42, 42);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) checkGlobalThis0);
    assertEquals(20, Node.FINALLY_PROP);
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node0 = Node.newString(105, ""com.google.javascript.jscomp.ChecklobalThis"", 30, 20);
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node0;
    Node node1 = new Node(118, nodeArray0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) checkGlobalThis0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node0 = Node.newString(105, ""com.google.javascript.jscomp.ChecklobalThis"", 30, 20);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) checkGlobalThis0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(42, ""}}`83}"", 42, 42);
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node1 = new Node(86, node0, node0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) checkGlobalThis0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}","/**
 * Traverses a node recursively.
 */"
"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.FUNCTION) {
        // Don't traverse functions that are constructors or have the @this
        // annotation.
        JSDocInfo jsDoc = getFunctionJsDocInfo(n);
        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {
            return false;
        }
        // Don't traverse functions unless they would normally
        // be able to have a @this annotation associated with them. e.g.,
        // var a = function() { }; // or
        // function a() {} // or
        // a.x = function() {};
    }
    if (parent != null && parent.getType() == Token.ASSIGN) {
        Node lhs = parent.getFirstChild();
        Node rhs = lhs.getNext();
        if (n == lhs) {
            // Always traverse the left side of the assignment. To handle
            // nested assignments properly (e.g., (a = this).property = c;),
            // assignLhsChild should not be overridden.
            if (assignLhsChild == null) {
                assignLhsChild = lhs;
            }
        } else {
            // Only traverse the right side if it's not an assignment to a prototype
            // property or subproperty.
            if (lhs.getType() == Token.GETPROP) {
                if (lhs.getLastChild().getString().equals(""prototype"")) {
                    return false;
                }
                String leftName = lhs.getQualifiedName();
                if (leftName != null && leftName.contains("".prototype."")) {
                    return false;
                }
            }
        }
    }
    return true;
}","public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("""", """");
    Node node1 = new Node(38, 0, 47);
    Node node2 = new Node(86, node0, node1);
    node2.removeChild(node0);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
    boolean boolean0 = checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node2);
    assertTrue(boolean0);
}","/**
 * Since this pass reports errors only when a global {@code this} keyword
 * is encountered, there is no reason to traverse non global contexts.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node0 = Node.newString(""1ZV{'a<pu@+:"");
    Node node1 = new Node(86, node0, node0);
    checkGlobalThis0.shouldTraverse((NodeTraversal) null, node0, node1);
    NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) checkGlobalThis0);
    assertEquals(1, Node.DECR_FLAG);
}","/**
 * Traverses a node recursively.
 */"
"public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.FUNCTION) {
        // Don't traverse functions that are constructors or have the @this
        // annotation.
        JSDocInfo jsDoc = getFunctionJsDocInfo(n);
        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {
            return false;
        }
        // Don't traverse functions unless they would normally
        // be able to have a @this annotation associated with them. e.g.,
        // var a = function() { }; // or
        // function a() {} // or
        // a.x = function() {};
    }
    if (parent != null && parent.getType() == Token.ASSIGN) {
        Node lhs = parent.getFirstChild();
        Node rhs = lhs.getNext();
        if (n == lhs) {
            // Always traverse the left side of the assignment. To handle
            // nested assignments properly (e.g., (a = this).property = c;),
            // assignLhsChild should not be overridden.
            if (assignLhsChild == null) {
                assignLhsChild = lhs;
            }
        } else {
            // Only traverse the right side if it's not an assignment to a prototype
            // property or subproperty.
            if (lhs.getType() == Token.GETPROP) {
                if (lhs.getLastChild().getString().equals(""prototype"")) {
                    return false;
                }
                String leftName = lhs.getQualifiedName();
                if (leftName != null && leftName.contains("".prototype."")) {
                    return false;
                }
            }
        }
    }
    return true;
}","public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode("""", """");
    Node node1 = new Node(38, 0, 47);
    Node node2 = new Node(86, node0, node1);
    node2.removeChild(node0);
    node1.setType(33);
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkGlobalThis0);
    // Undeclared exception!
    try {
        checkGlobalThis0.shouldTraverse(nodeTraversal0, node0, node2);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.CheckGlobalThis"", e);
    }
}","/**
 * Since this pass reports errors only when a global {@code this} keyword
 * is encountered, there is no reason to traverse non global contexts.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    Node node0 = compiler0.parseSyntheticCode(""0$VP62)*-GCdvh"", ""0$VP62)*-GCdvh"");
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node1 = Node.newString(105, ""0$VP62)*-GCdvh"", 30, 20);
    Node node2 = new Node(86, node0, node1);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node1, (NodeTraversal.Callback) checkGlobalThis0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test088() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node0 = Node.newString(105, ""com.google.javascript.jscomp.ChecklobalThis"", 30, 20);
    Node node1 = new Node(38, node0, node0);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node1.setJSDocInfo(jSDocInfo0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) checkGlobalThis0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test099() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node0 = Node.newString(105, ""com.google.javascript.jscomp.ChecklobalThis"", 30, 20);
    Node node1 = new Node(38, node0, node0);
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node1;
    Node node2 = new Node(50, nodeArray0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) checkGlobalThis0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Traverses a node recursively.
 */"
"public static void traverse(AbstractCompiler compiler, Node root, Callback cb) {
    NodeTraversal t = new NodeTraversal(compiler, cb);
    t.traverse(root);
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    CheckGlobalThis checkGlobalThis0 = new CheckGlobalThis(compiler0, checkLevel0);
    Node node0 = Node.newString(105, ""com.google.javascript.jscomp.ChecklobalThis"", 30, 20);
    Node node1 = new Node(38, node0, node0);
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node1;
    Node node2 = new Node(118, nodeArray0);
    // Undeclared exception!
    try {
        NodeTraversal.traverse((AbstractCompiler) compiler0, node2, (NodeTraversal.Callback) checkGlobalThis0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Traverses a node recursively.
 */"
