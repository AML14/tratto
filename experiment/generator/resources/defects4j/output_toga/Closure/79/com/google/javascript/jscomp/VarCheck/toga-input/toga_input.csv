focal_method,test_prefix,docstring
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"", ""function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"");
    node0.setType(14);
    Node node1 = new Node(41, node0, node0, node0, node0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    varCheck0.process(node0, node0);
    assertEquals(1, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"@Override
public void process(Node externs, Node root) {
    // Don't run externs-checking in sanity check mode. Normalization will
    // remove duplicate VAR declarations, which will make
    // externs look like they have assigns.
    if (!sanityCheck) {
        NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());
    }
    NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), this);
    for (String varName : varsToDeclareInExterns) {
        createSynthesizedExternVar(varName);
    }
}","public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"", ""function JSCompiler_returnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"");
    Node node1 = new Node(14, node0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    // Undeclared exception!
    try {
        varCheck0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    // Don't run externs-checking in sanity check mode. Normalization will
    // remove duplicate VAR declarations, which will make
    // externs look like they have assigns.
    if (!sanityCheck) {
        NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());
    }
    NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), this);
    for (String varName : varsToDeclareInExterns) {
        createSynthesizedExternVar(varName);
    }
}","public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""W"", ""W"");
    Node node1 = new Node(2, node0);
    VarCheck varCheck0 = new VarCheck(compiler0, true);
    // Undeclared exception!
    try {
        varCheck0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Unexpected variable W
        //   Node(NAME W):  [testcode] :1:0
        // [source unknown]
        //   Parent(EXPR_RESULT):  [testcode] :1:0
        // [source unknown]
        //
        verifyException(""com.google.javascript.jscomp.VarCheck"", e);
    }
}",""
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"", ""function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"");
    Node node1 = new Node(125, node0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    varCheck0.process(node0, node0);
    assertEquals(1, compiler0.getWarningCount());
}","/**
 * Gets the number of warnings.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test34() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"", ""function JSCompiler_reurnArg(JSCompiler_returnArg_value) {  return function() {return JSCompiler_returnArg_value}}"");
    Node node1 = new Node(125, node0);
    VarCheck varCheck0 = new VarCheck(compiler0);
    varCheck0.process(node0, node0);
    assertEquals(0, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"@Override
public void process(Node externs, Node root) {
    // Don't run externs-checking in sanity check mode. Normalization will
    // remove duplicate VAR declarations, which will make
    // externs look like they have assigns.
    if (!sanityCheck) {
        NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());
    }
    NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), this);
    for (String varName : varsToDeclareInExterns) {
        createSynthesizedExternVar(varName);
    }
}","public void test45() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.AstChangeProxy"", ""com.google.javascript.jscomp.AstChangeProxy"");
    VarCheck varCheck0 = new VarCheck(compiler0);
    // Undeclared exception!
    try {
        varCheck0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    // Don't run externs-checking in sanity check mode. Normalization will
    // remove duplicate VAR declarations, which will make
    // externs look like they have assigns.
    if (!sanityCheck) {
        NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());
    }
    NodeTraversal.traverseRoots(compiler, Lists.newArrayList(externs, root), this);
    for (String varName : varsToDeclareInExterns) {
        createSynthesizedExternVar(varName);
    }
}","public void test56() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""JSC_INVALID_FUNCTION_DECL"", ""JSC_INVALID_FUNCTION_DECL"");
    VarCheck varCheck0 = new VarCheck(compiler0);
    // Undeclared exception!
    try {
        varCheck0.process(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
