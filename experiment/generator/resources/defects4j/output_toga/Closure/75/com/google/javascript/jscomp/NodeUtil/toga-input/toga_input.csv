focal_method,test_prefix,docstring
"static boolean has(Node node, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    if (pred.apply(node)) {
        return true;
    }
    if (!traverseChildrenPred.apply(node)) {
        return false;
    }
    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
        if (has(c, pred, traverseChildrenPred)) {
            return true;
        }
    }
    return false;
}","public void test0011() throws Throwable {
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    Node node0 = Node.newNumber((double) 1021, 1021, 1021);
    boolean boolean0 = NodeUtil.has(node0, nodeUtil_MatchDeclaration0, nodeUtil_MatchDeclaration0);
    assertFalse(boolean0);
}","/**
 * @return Whether the predicate is true for the node or any of its children.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test0022() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(82, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test0023() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(38, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test0024() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(1905, node0.getLineno());
}",""
"static boolean containsFunction(Node n) {
    return containsType(n, Token.FUNCTION);
}","public void test0035() throws Throwable {
    Node node0 = new Node(58, 58, 58);
    boolean boolean0 = NodeUtil.containsFunction(node0);
    assertFalse(boolean0);
}","/**
 * Determines if the given node contains a function statement or function
 * expression.
 */"
"static Node getArgumentForCallOrNew(Node call, int index) {
    Preconditions.checkState(isCallOrNew(call));
    return getNthSibling(call.getFirstChild().getNext(), index);
}","public void test0046() throws Throwable {
    Node node0 = Node.newNumber(33.2116);
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForCallOrNew(node0, 0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the new or call, this returns the nth
 * argument of the call or null if no such argument exists.
 */"
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test0057() throws Throwable {
    Node node0 = Node.newString(21, ""mMxI/6~"", 21, 21);
    // Undeclared exception!
    try {
        NodeUtil.mayBeString(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean isSimpleFunctionObjectCall(Node callNode) {
    if (isFunctionObjectCall(callNode)) {
        if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME) {
            return true;
        }
    }
    return false;
}","public void test0068() throws Throwable {
    Node node0 = Node.newNumber((double) 114);
    boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.call(...)
 *    x['call'](...)
 * where x is a NAME node.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test0079() throws Throwable {
    Node node0 = new Node(87);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static String getPrototypePropertyName(Node qName) {
    String qNameStr = qName.getQualifiedName();
    int prototypeIdx = qNameStr.lastIndexOf("".prototype."");
    int memberIndex = prototypeIdx + "".prototype"".length() + 1;
    return qNameStr.substring(memberIndex);
}","public void test00810() throws Throwable {
    Node node0 = Node.newString(""QCP'=+2.zp,D3"");
    // Undeclared exception!
    try {
        NodeUtil.getPrototypePropertyName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The string property name part of a qualified prototype name.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test00911() throws Throwable {
    Node node0 = new Node(87);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test01012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean functionCallHasSideEffects(Node callNode) {
    return functionCallHasSideEffects(callNode, null);
}","public void test01113() throws Throwable {
    Node node0 = new Node(116, 116, 116);
    // Undeclared exception!
    try {
        NodeUtil.functionCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected CALL node, got BREAK
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"static Node newQualifiedNameNode(CodingConvention convention, String name, Node basisNode, String originalName) {
    Node node = newQualifiedNameNode(convention, name, -1, -1);
    setDebugInformation(node, basisNode, originalName);
    return node;
}","public void test01214() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    // Undeclared exception!
    try {
        NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""infinity"", (Node) null, ""q{&T!UNd()9gNj{I"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Creates a node representing a qualified name, copying over the source
 * location information from the basis node and assigning the given original
 * name to the node.
 *
 * @param name A qualified name (e.g. ""foo"" or ""foo.bar.baz"")
 * @param basisNode The node that represents the name as currently found in
 *     the AST.
 * @param originalName The original name of the item being represented by the
 *     NAME node. Used for debugging information.
 *
 * @return A NAME or GETPROP node
 */"
"static Node getArgumentForFunction(Node function, int index) {
    Preconditions.checkState(isFunction(function));
    return getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
}","public void test01315() throws Throwable {
    Node node0 = Node.newString(""N@L'Nfb6Q\""^"");
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForFunction(node0, 4095);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the function, this returns the nth
 * argument or null if no such parameter exists.
 */"
"public int getType() {
    return type;
}","public void test01416() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""cWK"", 561, 561);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""cWK"", node0, ""cWK"");
    assertEquals(38, node0.getType());
}",""
"static Node newName(CodingConvention convention, String name, Node basisNode, String originalName) {
    Node nameNode = newName(convention, name, basisNode);
    nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);
    return nameNode;
}","public void test01417() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""cWK"", 561, 561);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""cWK"", node0, ""cWK"");
    assertNotSame(node1, node0);
}","/**
 * Creates a new node representing an *existing* name, copying over the source
 * location information from the basis node and assigning the given original
 * name to the node.
 *
 * @param name The name for the new NAME node.
 * @param basisNode The node that represents the name as currently found in
 *     the AST.
 * @param originalName The original name of the item being represented by the
 *     NAME node. Used for debugging information.
 *
 * @return The node created.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test01418() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""cWK"", 561, 561);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""cWK"", node0, ""cWK"");
    assertEquals(561, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test01419() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""cWK"", 561, 561);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""cWK"", node0, ""cWK"");
    assertEquals(561, node1.getCharno());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test01420() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""cWK"", 561, 561);
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""cWK"", node0, ""cWK"");
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static boolean isVarArgsFunction(Node function) {
    Preconditions.checkArgument(isFunction(function));
    return isNameReferenced(function.getLastChild(), ""arguments"", new MatchNotFunction());
}","public void test01521() throws Throwable {
    Node node0 = new Node(120);
    // Undeclared exception!
    try {
        NodeUtil.isVarArgsFunction(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines if a function takes a variable number of arguments by
 * looking for references to the ""arguments"" var_args object.
 */"
"static int getNameReferenceCount(Node node, String name) {
    return getCount(node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());
}","public void test01622() throws Throwable {
    Node node0 = new Node(117);
    int int0 = NodeUtil.getNameReferenceCount(node0, (String) null);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a simple name is referenced within the node tree.
 */"
"static Node getFunctionBody(Node fn) {
    Preconditions.checkArgument(isFunction(fn));
    return fn.getLastChild();
}","public void test01723() throws Throwable {
    Node node0 = new Node(68);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionBody(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Return a BLOCK node for the given FUNCTION node.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test01824() throws Throwable {
    Node node0 = new Node(71);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeESCXMLATTR
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test01925() throws Throwable {
    Node node0 = new Node(147);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getType() {
    return type;
}","public void test01926() throws Throwable {
    Node node0 = new Node(147);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test02027() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""cW$"", ""cW$"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test02128() throws Throwable {
    Node node0 = Node.newString(129, ""`=(kWsmx.ih>"", 129, 110);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02229() throws Throwable {
    Node node0 = Node.newNumber(53.0);
    Node node1 = new Node(26, node0, 88, 29);
    NodeUtil.getImpureBooleanValue(node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02330() throws Throwable {
    Node node0 = Node.newString(63, ""lkj{"");
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02431() throws Throwable {
    Node node0 = new Node(64);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02532() throws Throwable {
    Node node0 = new Node(127);
    Node node1 = new Node(85, node0, node0, node0, node0);
    NodeUtil.getImpureBooleanValue(node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02633() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02734() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02835() throws Throwable {
    Node node0 = Node.newString(100, ""&"");
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02936() throws Throwable {
    Node node0 = Node.newString("".prototype"");
    node0.setType(101);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03037() throws Throwable {
    Node node0 = new Node(43);
    Node node1 = new Node(26, node0, 5, 18);
    PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
    Node node2 = peepholeFoldWithTypes0.optimizeSubtree(node1);
    NodeUtil.getPureBooleanValue(node2);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"public int getType() {
    return type;
}","public void test03138() throws Throwable {
    LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
    Logger logger0 = Logger.getLogger(""undefined"");
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""undefined"", 8233, 8233);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(38, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03139() throws Throwable {
    LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
    Logger logger0 = Logger.getLogger(""undefined"");
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""undefined"", 8233, 8233);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(8233, node0.getLineno());
}",""
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03240() throws Throwable {
    Node node0 = Node.newString(""~"");
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03341() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(41, nodeArray0);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03442() throws Throwable {
    Node node0 = new Node(44);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03543() throws Throwable {
    Node node0 = Node.newString(47, ""XMLHttpRequest"");
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test03644() throws Throwable {
    Node node0 = Node.newString(64, ""JtFtx\""S1!s6]cJ,ME"");
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03745() throws Throwable {
    Node node0 = Node.newNumber(2267.602563164143);
    Node node1 = new Node(122, node0, 27, (-2416));
    NodeUtil.getImpureBooleanValue(node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03846() throws Throwable {
    Node node0 = Node.newString("""", (-26), (-2653));
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03947() throws Throwable {
    Node node0 = Node.newNumber(0.0, 64, 182);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04048() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Undefined"", 35, 35);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(35, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test04049() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Undefined"", 35, 35);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(38, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04050() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""Undefined"", 35, 35);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(35, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04151() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 122, 1045);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(1045, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test04152() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 122, 1045);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(38, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04153() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 122, 1045);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(122, node0.getLineno());
}",""
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
        case Token.VOID:
            return TernaryValue.FALSE;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
    }
    return TernaryValue.UNKNOWN;
}","public void test04254() throws Throwable {
    Node node0 = new Node(63);
    Node node1 = Node.newString((-1860), ""o[C#=YX5bmht=15mZ"");
    node0.addChildToBack(node1);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test04355() throws Throwable {
    Node node0 = new Node(43);
    Node node1 = new Node(26, node0, 5, 18);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""true"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04457() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(119, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04458() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(119, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test04459() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(38, node0.getType());
}",""
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test04460() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    String string0 = NodeUtil.arrayToString(node1);
    assertNull(string0);
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test04461() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    String string0 = NodeUtil.arrayToString(node1);
    assertTrue(node0.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test04562() throws Throwable {
    Node node0 = Node.newNumber((-1829.131));
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""-1829.131"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test04663() throws Throwable {
    Node node0 = Node.newString(""yIqGgn+u-yP{)=6vt(:"");
    Node node1 = new Node(2, node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertNotNull(string0);
}",""
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test04765() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""false"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test04866() throws Throwable {
    Node node0 = new Node(59);
    Node node1 = new Node(44, node0, 4, 74);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""true"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test04967() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test05069() throws Throwable {
    Node node0 = Node.newNumber(2236.1222158928294);
    Node node1 = new Node(122, node0, 27, (-2416));
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""undefined"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test05170() throws Throwable {
    Node node0 = Node.newString(147, ""vL.rxg5N"");
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertNull(string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.NUMBER:
            return NodeUtil.getStringValue(key);
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test05271() throws Throwable {
    Node node0 = Node.newNumber((double) 30, 30, 30);
    String string0 = NodeUtil.getObjectLitKeyName(node0);
    assertEquals(""30"", string0);
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            double value = n.getDouble();
            long longValue = (long) value;
            // Return ""1"" instead of ""1.0""
            if (longValue == value) {
                return Long.toString(longValue);
            } else {
                return Double.toString(n.getDouble());
            }
        case Token.FALSE:
        case Token.TRUE:
        case Token.NULL:
            return Node.tokenToName(n.getType());
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test05372() throws Throwable {
    Node node0 = new Node(43);
    Node node1 = new Node(26, node0, 5, 18);
    node0.setType(8);
    String string0 = NodeUtil.getStringValue(node1);
    assertNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test05473() throws Throwable {
    Node node0 = Node.newNumber(2236.1222158928294);
    Node node1 = new Node(122, node0, 27, (-2416));
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals("""", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY) ? """" : getStringValue(n);
}","public void test05574() throws Throwable {
    Node node0 = Node.newString(124, ""+infinity"", 255, 46);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals("""", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05675() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    Node node1 = new Node(26, node0, 5, 18);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05776() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""R5,&X"", 72, 72);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05777() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""R5,&X"", 72, 72);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(72, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test05778() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""R5,&X"", 72, 72);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(38, node0.getType());
}",""
"public int getSideEffectFlags() {
    return getIntProp(SIDE_EFFECT_FLAGS);
}","public void test05779() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""R5,&X"", 72, 72);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0, node0.getSideEffectFlags());
}","/**
 * Returns the side effects flags for this node.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test05780() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""R5,&X"", 72, 72);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(72, node0.getCharno());
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05881() throws Throwable {
    Node node0 = Node.newNumber(53.0);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(53.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05982() throws Throwable {
    Node node0 = Node.newString(""0rs,+;cJMb"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNotNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06084() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(41, nodeArray0);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06185() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06286() throws Throwable {
    Node node0 = Node.newString(63, ""lkj{"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06387() throws Throwable {
    Node node0 = Node.newNumber(2236.1222158928294);
    Node node1 = new Node(122, node0, 27, (-2416));
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNotNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06489() throws Throwable {
    Node node0 = Node.newString(1861, ""printNameReferenceGraph"", 1861, 1861);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06590() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    Node node1 = new Node(26, node0, 5, 18);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(1.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getStringNumberValue(String rawJsString) {
    // vertical tab is not always whitespace
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test06691() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""+aIE"");
    assertNotNull(double0);
}",""
"static Double getStringNumberValue(String rawJsString) {
    // vertical tab is not always whitespace
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test06793() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""infinity"");
    assertNull(double0);
}",""
"static Double getStringNumberValue(String rawJsString) {
    // vertical tab is not always whitespace
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test06894() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""-infinity"");
    assertNull(double0);
}",""
"static Double getStringNumberValue(String rawJsString) {
    // vertical tab is not always whitespace
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test06995() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue("")\n"");
    assertEquals(Double.NaN, (double) double0, 0.01);
}",""
"static Double getStringNumberValue(String rawJsString) {
    // vertical tab is not always whitespace
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // FireFox and IE treat the ""Infinity"" differently. FireFox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test07097() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue("" {G=rUuEGD"");
    assertNotNull(double0);
}",""
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            return TernaryValue.TRUE;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test07199() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(9);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            return TernaryValue.TRUE;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test072100() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(11);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            return TernaryValue.TRUE;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test073101() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(12);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            return TernaryValue.TRUE;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test074102() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(13);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            return TernaryValue.TRUE;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test075103() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(8233);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            return TernaryValue.TRUE;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test076104() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(65279);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            return TernaryValue.TRUE;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test077105() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(8239);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test078106() throws Throwable {
    Node node0 = new Node(43);
    Node node1 = new Node(26, node0, 5, 18);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        case Token.NOT:
            return isImmutableValue(n.getFirstChild());
        case Token.VOID:
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test079107() throws Throwable {
    Node node0 = new Node(77);
    Node node1 = new Node(29, node0, node0, node0, 1, (-1));
    boolean boolean0 = NodeUtil.isImmutableValue(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if this is an immutable value.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test080108() throws Throwable {
    Node node0 = Node.newString(95, ""Kz+$"", 136, 136);
    Node node1 = Node.newNumber((double) 13, 42, 4);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test081109() throws Throwable {
    Node node0 = Node.newString(""destructuring assignment forbidden"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test082110() throws Throwable {
    Node node0 = Node.newString(41, "".prototype"");
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test083111() throws Throwable {
    Node node0 = new Node(44);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        case Token.NOT:
            return isImmutableValue(n.getFirstChild());
        case Token.VOID:
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test084112() throws Throwable {
    Node node0 = Node.newString(30, "".rhototype"", 30, (-1));
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.isImmutableValue(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if this is an immutable value.
 */"
"public int getType() {
    return type;
}","public void test085113() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 45, 2);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertEquals(38, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test085114() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 45, 2);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertEquals(2, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test085115() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 45, 2);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertEquals(45, node0.getLineno());
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test085116() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""NaN"", 45, 2);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test086117() throws Throwable {
    Node node0 = Node.newString(64, ""2&pYg?i];Q ]Crg`MP"");
    boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test087118() throws Throwable {
    Node node0 = Node.newString(""cWK"");
    node0.setType(105);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertFalse(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (child.getType() != Token.EMPTY && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test088119() throws Throwable {
    Node node0 = Node.newString(""o/RYYa}^W\""T;iVBo"");
    node0.setType(105);
    // Undeclared exception!
    try {
        NodeUtil.isLiteralValue(node0, true);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured vairables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test089120() throws Throwable {
    Node node0 = Node.newString(9, ""Y\""PSRTVh.rHLE"", 708, 9);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test090121() throws Throwable {
    Node node0 = Node.newString(""i6|I:I-.Ez_Jq"");
    Node node1 = new Node(10, node0, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test091122() throws Throwable {
    Node node0 = new Node(131);
    Node node1 = new Node(11, node0, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test092123() throws Throwable {
    Node node0 = Node.newString(""Unknown precedence for "");
    Node node1 = new Node(12, node0, node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test093124() throws Throwable {
    Node node0 = Node.newString(13, ""null symbol name"", 19, 132);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test094125() throws Throwable {
    Node node0 = Node.newString(""E"");
    Node node1 = new Node(15, node0, node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test095126() throws Throwable {
    Node node0 = Node.newString((-1058), """");
    Node node1 = new Node(16, node0, node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test096127() throws Throwable {
    Node node0 = new Node(17);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test097128() throws Throwable {
    Node node0 = new Node(19);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test098129() throws Throwable {
    Node node0 = Node.newString(20, "".prototype"");
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test099130() throws Throwable {
    Node node0 = new Node(50);
    Node node1 = new Node(21, node0, node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test100131() throws Throwable {
    Node node0 = Node.newString(22, "".prototype"", 22, (-22));
    Locale locale0 = Locale.KOREA;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, set0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test101132() throws Throwable {
    Node node0 = new Node(23);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test102133() throws Throwable {
    Node node0 = Node.newString(24, "".prototype"", 24, (-39));
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test103134() throws Throwable {
    Node node0 = Node.newString("">jC"");
    Node node1 = new Node(25, node0, node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test104135() throws Throwable {
    Node node0 = new Node(43);
    Node node1 = new Node(26, node0, 5, 18);
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, hashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test105136() throws Throwable {
    Node node0 = Node.newString(""24ac/Ln"");
    node0.setType(27);
    HashSet<String> hashSet0 = new HashSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test106137() throws Throwable {
    Node node0 = Node.newString(""i/j$mPXo"");
    Node node1 = new Node(29, node0, node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test107138() throws Throwable {
    Node node0 = Node.newString(30, ""// In7ut %num%"", 30, 30);
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test108139() throws Throwable {
    Node node0 = Node.newString(31, ""com.google.javascript.rhino.jstype.NumberType"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test109140() throws Throwable {
    Node node0 = Node.newString(32, ""`(kWsmx.ih>"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test110141() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(30, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test110142() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(33, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test110143() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(24, node0.getLineno());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test110144() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test110145() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test111146() throws Throwable {
    Node node0 = Node.newString(""[zMVAP0;eSQ5`$G"");
    Node node1 = new Node(34, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test112147() throws Throwable {
    Node node0 = Node.newString(35, ""Xr$E"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test113148() throws Throwable {
    Node node0 = Node.newString(37, ""(au"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test114149() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(55, node0.getCharno());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test114150() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test114151() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(55, node0.getLineno());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test114152() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertFalse(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test115153() throws Throwable {
    Node node0 = Node.newNumber((double) 13, 42, 4);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test116154() throws Throwable {
    Node node0 = Node.newString(38, ""`(kWsmx.ih>"");
    Node node1 = new Node(41, node0, node0, node0, node0, 0, 44);
    Compiler compiler0 = new Compiler();
    InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
    Set<String> set0 = inlineSimpleMethods0.externMethods;
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, set0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test117155() throws Throwable {
    Node node0 = Node.newString(116, ""lprototype"", 116, 116);
    node0.setType(42);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test118156() throws Throwable {
    Node node0 = Node.newString(44, ""ei/l;;+!"", 59, 28);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test119157() throws Throwable {
    Node node0 = Node.newString(45, "".prototype"", 45, (-1422));
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test120158() throws Throwable {
    Node node0 = Node.newString(46, ""WtK"", 3, 1);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test121159() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""_3Db2~s"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(55, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test121160() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""_3Db2~s"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertEquals(55, node0.getLineno());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Uniary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test121161() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""_3Db2~s"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test122162() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""$F/)3x.Q&HRB.Pj\"""");
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertTrue(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean isEmptyBlock(Node block) {
    if (block.getType() != Token.BLOCK) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (n.getType() != Token.EMPTY) {
            return false;
        }
    }
    return true;
}","public void test123163() throws Throwable {
    Node node0 = Node.newString(118, ""Shift amount out of bounds: {0}"", 118, 118);
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test124164() throws Throwable {
    Node node0 = Node.newString(9, "" does not have a condition."", 2421, 2421);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test125165() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(10);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test126166() throws Throwable {
    Node node0 = new Node(11);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test127167() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperator(Node n) {
    return isSimpleOperatorType(n.getType());
}","public void test128168() throws Throwable {
    Node node0 = Node.newString(14, ""`=(kWsmx.ih>"");
    boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    assertTrue(boolean0);
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test129169() throws Throwable {
    Node node0 = Node.newString(""E"");
    Node node1 = new Node(15, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test130170() throws Throwable {
    Node node0 = new Node(16);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test131171() throws Throwable {
    Node node0 = new Node(17, 17, 17);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test132172() throws Throwable {
    Node node0 = new Node(18);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test133173() throws Throwable {
    Node node0 = new Node(19, 19, 19);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test134174() throws Throwable {
    Node node0 = Node.newString(20, ""// In7ut %num%"", 20, 20);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test135175() throws Throwable {
    Node node0 = Node.newString(21, "".prototype"", 21, 1858);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test136176() throws Throwable {
    Node node0 = Node.newString(22, "".prototype"", 22, 22);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test137177() throws Throwable {
    Node node0 = new Node(23);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test138178() throws Throwable {
    Node node0 = Node.newString(24, "".prototype"", 24, 24);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test139179() throws Throwable {
    Node node0 = new Node(25);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperator(Node n) {
    return isSimpleOperatorType(n.getType());
}","public void test140180() throws Throwable {
    Node node0 = new Node(26, 26, 26);
    boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    assertTrue(boolean0);
}",""
"static boolean isSimpleOperator(Node n) {
    return isSimpleOperatorType(n.getType());
}","public void test141181() throws Throwable {
    Node node0 = Node.newString(""o/RYYa}^W\""T;iVBo"");
    node0.setType(27);
    boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    assertTrue(boolean0);
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test142182() throws Throwable {
    Node node0 = new Node(28);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test143183() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""cW$"", ""cW$"");
    Node node1 = new Node(29, node0, 47, 19);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test144184() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test145185() throws Throwable {
    Node node0 = new Node(31, 15, 38);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test146186() throws Throwable {
    Node node0 = new Node(32, 32, 32);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test147187() throws Throwable {
    Node node0 = new Node(33);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test148188() throws Throwable {
    Node node0 = Node.newString(""[zMVP0;eSQ5`$G"");
    Node node1 = new Node(34, node0);
    Node node2 = node1.cloneTree();
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node2);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test149189() throws Throwable {
    Node node0 = Node.newString(110, ""\""WY4)j5430RgaVE"");
    Node node1 = new Node(35, node0, 38, 40);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test150190() throws Throwable {
    Node node0 = new Node(36);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test151191() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperator(Node n) {
    return isSimpleOperatorType(n.getType());
}","public void test152192() throws Throwable {
    Node node0 = Node.newString(38, ""`(kWsmx.ih>"", 38, 38);
    boolean boolean0 = NodeUtil.isSimpleOperator(node0);
    assertFalse(boolean0);
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test153193() throws Throwable {
    Node node0 = Node.newNumber(2228.2115593881085);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test154194() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test155195() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test156196() throws Throwable {
    Node node0 = Node.newString(45, ""||"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test157197() throws Throwable {
    Node node0 = new Node(46, 46, 46);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, (Predicate<Node>) null);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test158198() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test159199() throws Throwable {
    Node node0 = new Node(48);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test160200() throws Throwable {
    Node node0 = Node.newString(49, ""-infinity"", (-331), 33);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTHROW -infinity
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test161201() throws Throwable {
    Node node0 = new Node(50);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRETHROW
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test162202() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test163203() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(52);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test164204() throws Throwable {
    Node node0 = new Node(53, 53, 53);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLOCAL_LOAD 53
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test165205() throws Throwable {
    Node node0 = Node.newString(32, ""`(kWsmx.ih>"");
    node0.setType(54);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGETVAR `(kWsmx.ih>
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test166206() throws Throwable {
    Node node0 = new Node(55, 55, 55);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETVAR 55
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test167207() throws Throwable {
    Node node0 = new Node(56, 56, 56);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCATCH_SCOPE 56
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test168208() throws Throwable {
    Node node0 = new Node(57, 57, 57);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test169209() throws Throwable {
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    Node node0 = Node.newString(58, ""arguments"", 901, 1);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_INIT_VALUES arguments 901
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test170210() throws Throwable {
    Node node0 = new Node(59, 59, 59);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_NEXT 59
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test171211() throws Throwable {
    Node node0 = Node.newString(60, ""valueOf"");
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeENUM_ID valueOf
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test172212() throws Throwable {
    Node node0 = Node.newString(38, ""`=(kWsmx.ih>"", 38, 38);
    node0.setType(62);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRETURN_RESULT `=(kWsmx.ih> 38
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test173213() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test174214() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(64);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test175215() throws Throwable {
    Node node0 = Node.newString(65, ""clear"", 591, 591);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeGET_REF clear 591
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test176216() throws Throwable {
    Node node0 = new Node(66);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSET_REF
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test177217() throws Throwable {
    Node node0 = new Node(67, 67, 67);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDEL_REF 67
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test178218() throws Throwable {
    Node node0 = new Node(68);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_CALL
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test179219() throws Throwable {
    Node node0 = new Node(69);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_SPECIAL
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test180220() throws Throwable {
    Node node0 = new Node(70);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test181221() throws Throwable {
    Node node0 = new Node(72, 72, 72);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeESCXMLTEXT 72
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test182222() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_MEMBER 73
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test183223() throws Throwable {
    Node node0 = new Node(74);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test184224() throws Throwable {
    Node node0 = new Node(75, 75, 4);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test185225() throws Throwable {
    Node node0 = new Node(76);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test186226() throws Throwable {
    Node node0 = new Node(77);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTRY
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test187227() throws Throwable {
    Node node0 = new Node(78);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSEMI
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test188228() throws Throwable {
    Node node0 = new Node(79);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test189229() throws Throwable {
    Node node0 = new Node(80);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test190230() throws Throwable {
    Node node0 = new Node(81);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLC
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test191231() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(82);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test192232() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test193233() throws Throwable {
    Node node0 = new Node(84);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRP
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test194234() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(85, nodeArray0, 85, 85);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test195235() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test196236() throws Throwable {
    Node node0 = new Node(88);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test197237() throws Throwable {
    Node node0 = new Node(89);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test198238() throws Throwable {
    Node node0 = new Node(90);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test199239() throws Throwable {
    Node node0 = Node.newString(92, ""r"", 129, (-1768));
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test200240() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test201241() throws Throwable {
    Node node0 = new Node(97);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test202242() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test203243() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test204244() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test205245() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test206246() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test207247() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test208248() throws Throwable {
    Node node0 = Node.newString(104, ""=[+:#h<Z"", (-28), 73);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeDOT =[+:#h<Z
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test209249() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test210250() throws Throwable {
    Node node0 = new Node(106);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test211251() throws Throwable {
    Node node0 = new Node(107, 107, 107);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test212252() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test213253() throws Throwable {
    Node node0 = new Node(109);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test214254() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSWITCH 110
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test215255() throws Throwable {
    Node node0 = new Node(111, 111, 111);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test216256() throws Throwable {
    Node node0 = new Node(112, 112, 112);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test217257() throws Throwable {
    Node node0 = new Node(116, 116, 116);
    node0.setType(113);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test218258() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test219259() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test220260() throws Throwable {
    Node node0 = new Node(116);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test221261() throws Throwable {
    Node node0 = Node.newString(116, ""EeE fy|<WA"", 116, 116);
    Node node1 = NodeUtil.newVarNode(""EeE fy|<WA"", node0);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeVAR 116
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test222262() throws Throwable {
    Node node0 = Node.newString(119, ""// In7ut %num%"", 119, (-1621));
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeWITH // In7ut %num%
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test223263() throws Throwable {
    Node node0 = new Node(120, 120, 2);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test224264() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test225265() throws Throwable {
    Node node0 = new Node(122);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test226266() throws Throwable {
    Node node0 = Node.newString(147, ""vL.rxg5N"");
    Node node1 = new Node(37, node0, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test227267() throws Throwable {
    Node node0 = new Node(38);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test228268() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test229269() throws Throwable {
    Node node0 = new Node(42, 120, 120);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test230270() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test231271() throws Throwable {
    Node node0 = Node.newString(""cWK"");
    node0.setType(44);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test232272() throws Throwable {
    Node node0 = Node.newString(38, ""`(kWsmx.ih>"");
    node0.setType(46);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test233273() throws Throwable {
    Node node0 = new Node(47, 47, 47);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test234274() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test235275() throws Throwable {
    Node node0 = new Node(50);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test236276() throws Throwable {
    Node node0 = new Node(51, 51, 51);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test237277() throws Throwable {
    Node node0 = new Node(53, 53, 53);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test238278() throws Throwable {
    Node node0 = Node.newString(32, ""`(kWsmx.ih>"");
    node0.setType(54);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test239279() throws Throwable {
    Node node0 = new Node(55);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test240280() throws Throwable {
    Node node0 = new Node(56);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test241281() throws Throwable {
    Node node0 = new Node(58, 58, 58);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test242282() throws Throwable {
    Node node0 = new Node(59, 59, 59);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test243283() throws Throwable {
    Node node0 = Node.newString(61, ""typeof"", 61, 61);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test244284() throws Throwable {
    Node node0 = new Node(62);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test245285() throws Throwable {
    Node node0 = new Node(65);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test246286() throws Throwable {
    Node node0 = new Node(66);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test247287() throws Throwable {
    Node node0 = new Node(68);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test248288() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test249289() throws Throwable {
    Node node0 = new Node(72);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test250290() throws Throwable {
    Node node0 = new Node(73, 73, 73);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test251291() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test252292() throws Throwable {
    Node node0 = new Node(78);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test253293() throws Throwable {
    Node node0 = new Node(81);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test254294() throws Throwable {
    Node node0 = new Node(98);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test255295() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test256296() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test257297() throws Throwable {
    Node node0 = new Node(104);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test258298() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test259299() throws Throwable {
    Node node0 = Node.newString(117, ""-"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static Node newVarNode(String name, Node value) {
    Node nodeName = Node.newString(Token.NAME, name);
    if (value != null) {
        Preconditions.checkState(value.getNext() == null);
        nodeName.addChildToBack(value);
        nodeName.copyInformationFrom(value);
    }
    Node var = new Node(Token.VAR, nodeName).copyInformationFrom(nodeName);
    return var;
}","public void test260300() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""com.google.javascript.jscomp.NodeUtil$MatchDeclaration"", (Node) null);
    assertNotNull(node0);
}","/**
 * Create a VAR node containing the given name and initial value expression.
 */"
"public int getType() {
    return type;
}","public void test260301() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""com.google.javascript.jscomp.NodeUtil$MatchDeclaration"", (Node) null);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertEquals(118, node0.getType());
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test260302() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""com.google.javascript.jscomp.NodeUtil$MatchDeclaration"", (Node) null);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test261303() throws Throwable {
    Node node0 = Node.newString(""mtFtx8\""S1!s2]cJ,ME"");
    node0.setType(119);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test262304() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = new Node(123, node0, 1, 2);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test263305() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test264306() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""@S[wSgH"");
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test265307() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test266308() throws Throwable {
    Node node0 = Node.newString(127, ""<<="", 127, 127);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test267309() throws Throwable {
    Node node0 = new Node(128);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test268310() throws Throwable {
    Node node0 = Node.newString(129, ""`=(kWsmx.ih>"", 129, 110);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test269311() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test270312() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    node0.addChildrenToFront(node0);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test271313() throws Throwable {
    Node node0 = Node.newString(""0IM#-?C 4"");
    node0.setType(105);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test272314() throws Throwable {
    Node node0 = Node.newString(1861, ""printNameReferenceGraph"", 3, 1861);
    node0.setType(105);
    Node node1 = new Node(2, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test273315() throws Throwable {
    Node node0 = new Node(30, 30, 119);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getType() {
    return type;
}","public void test274316() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = NodeUtil.newVarNode(""]ApjrARq!.N*!V06reO"", node0);
    assertEquals(118, node1.getType());
}",""
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test274317() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = NodeUtil.newVarNode(""]ApjrARq!.N*!V06reO"", node0);
    node1.setType(30);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test275318() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType[] jSTypeArray0 = new JSType[4];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    node0.setType(94);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test276319() throws Throwable {
    Node node0 = Node.newString((-1003), ""\"">$n-"", (-1003), (-1003));
    Node node1 = new Node(96, node0, node0, 84, 47);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test277320() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""<"");
    Compiler compiler0 = new Compiler((PrintStream) null);
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    Node node1 = new Node(91, node0, node0, node0, node0);
    node0.setType(12);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean constructorCallHasSideEffects(Node callNode) {
    return constructorCallHasSideEffects(callNode, null);
}","public void test278321() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    // Undeclared exception!
    try {
        NodeUtil.constructorCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NEW node, got SWITCH
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Do calls to this constructor have side effects?
 *
 * @param callNode - construtor call node
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler) {
    if (isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.DELPROP:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.CALL:
            return NodeUtil.functionCallHasSideEffects(n, compiler);
        case Token.NEW:
            return NodeUtil.constructorCallHasSideEffects(n, compiler);
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test279322() throws Throwable {
    Node node0 = Node.newString(30, "".prototype"", 30, 30);
    Compiler compiler0 = new Compiler();
    node0.addChildrenToFront(node0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    assertTrue(boolean0);
}",""
"static boolean callHasLocalResult(Node n) {
    Preconditions.checkState(n.getType() == Token.CALL);
    return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;
}","public void test280323() throws Throwable {
    Node node0 = new Node((-761), (-761), (-761));
    // Undeclared exception!
    try {
        NodeUtil.callHasLocalResult(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether the call has a local result.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test281324() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    Node node1 = new Node(37, node0, node0, 5, 34);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
    assertFalse(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean newHasLocalResult(Node n) {
    Preconditions.checkState(n.getType() == Token.NEW);
    return n.isOnlyModifiesThisCall();
}","public void test282325() throws Throwable {
    Node node0 = new Node(41);
    // Undeclared exception!
    try {
        NodeUtil.newHasLocalResult(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether the new has a local result.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test283326() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test284327() throws Throwable {
    Node node0 = Node.newString((-1003), ""\"">$n-"", (-1003), (-1003));
    Node node1 = new Node(96, node0, node0, 84, 47);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test285328() throws Throwable {
    Node node0 = new Node(37, 78, (-171));
    // Undeclared exception!
    try {
        NodeUtil.nodeTypeMayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test286329() throws Throwable {
    Node node0 = Node.newString(38, ""`=(kWsmx.ih>"", 38, 38);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler) {
    if (isAssignmentOp(n)) {
        return true;
    }
    switch(n.getType()) {
        case Token.DELPROP:
        case Token.DEC:
        case Token.INC:
        case Token.THROW:
            return true;
        case Token.CALL:
            return NodeUtil.functionCallHasSideEffects(n, compiler);
        case Token.NEW:
            return NodeUtil.constructorCallHasSideEffects(n, compiler);
        case Token.NAME:
            // A variable definition.
            return n.hasChildren();
        default:
            return false;
    }
}","public void test287330() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
    MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0, compiler0);
    assertTrue(boolean0);
}",""
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test288331() throws Throwable {
    Node node0 = Node.newString(102, ""Shift amount out of bounds: {0}"", 102, 102);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test289332() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test290333() throws Throwable {
    Node node0 = Node.newString(30, "".prototype"", 30, 30);
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test291334() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertEquals(24, node0.getLineno());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test291335() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test291336() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test291337() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertEquals(30, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test291338() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""./<"", 24, 30);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertEquals(33, node0.getType());
}",""
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test292339() throws Throwable {
    Node node0 = Node.newString(35, ""Xr$E"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test293340() throws Throwable {
    Node node0 = Node.newString(37, ""(au"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test294341() throws Throwable {
    Node node0 = Node.newString(1858, ""printNameReferenceGraph"", 11, 1858);
    node0.setType(105);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(20);
    // Undeclared exception!
    try {
        NodeUtil.canBeSideEffected(node0, linkedHashSet0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test295342() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""_3Db2~s"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertEquals(55, node0.getLineno());
}",""
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test295343() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""_3Db2~s"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test295344() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_3Db2~s"", 55, 55);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""_3Db2~s"");
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, linkedHashSet0);
    assertEquals(55, node0.getCharno());
}",""
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test296345() throws Throwable {
    Node node0 = new Node(125);
    Node node1 = new Node((-1845939769), node0, node0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, linkedHashSet0);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test297346() throws Throwable {
    int int0 = NodeUtil.precedence(9);
    assertEquals(5, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test298347() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for try (type 77)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test299348() throws Throwable {
    int int0 = NodeUtil.precedence(10);
    assertEquals(6, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test300349() throws Throwable {
    int int0 = NodeUtil.precedence(11);
    assertEquals(7, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test301350() throws Throwable {
    int int0 = NodeUtil.precedence(12);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test302351() throws Throwable {
    int int0 = NodeUtil.precedence(13);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test303352() throws Throwable {
    int int0 = NodeUtil.precedence(14);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test304353() throws Throwable {
    int int0 = NodeUtil.precedence(15);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test305354() throws Throwable {
    int int0 = NodeUtil.precedence(16);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test306355() throws Throwable {
    int int0 = NodeUtil.precedence(17);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test307356() throws Throwable {
    int int0 = NodeUtil.precedence(18);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test308357() throws Throwable {
    int int0 = NodeUtil.precedence(19);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test309358() throws Throwable {
    int int0 = NodeUtil.precedence(20);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test310359() throws Throwable {
    int int0 = NodeUtil.precedence(21);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test311360() throws Throwable {
    int int0 = NodeUtil.precedence(22);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test312361() throws Throwable {
    int int0 = NodeUtil.precedence(23);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test313362() throws Throwable {
    int int0 = NodeUtil.precedence(24);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test314363() throws Throwable {
    int int0 = NodeUtil.precedence(25);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test315364() throws Throwable {
    int int0 = NodeUtil.precedence(26);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test316365() throws Throwable {
    int int0 = NodeUtil.precedence(27);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test317366() throws Throwable {
    int int0 = NodeUtil.precedence(28);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test318367() throws Throwable {
    int int0 = NodeUtil.precedence(29);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test319368() throws Throwable {
    int int0 = NodeUtil.precedence(30);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test320369() throws Throwable {
    int int0 = NodeUtil.precedence(31);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test321370() throws Throwable {
    int int0 = NodeUtil.precedence(32);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test322371() throws Throwable {
    int int0 = NodeUtil.precedence(33);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test323372() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(34);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setprop (type 34)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test324373() throws Throwable {
    int int0 = NodeUtil.precedence(35);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test325374() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(36);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setelem (type 36)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test326375() throws Throwable {
    int int0 = NodeUtil.precedence(37);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test327376() throws Throwable {
    int int0 = NodeUtil.precedence(38);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test328377() throws Throwable {
    int int0 = NodeUtil.precedence(39);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test329378() throws Throwable {
    int int0 = NodeUtil.precedence(40);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test330379() throws Throwable {
    int int0 = NodeUtil.precedence(41);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test331380() throws Throwable {
    int int0 = NodeUtil.precedence(42);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test332381() throws Throwable {
    int int0 = NodeUtil.precedence(43);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test333382() throws Throwable {
    int int0 = NodeUtil.precedence(44);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test334383() throws Throwable {
    int int0 = NodeUtil.precedence(45);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test335384() throws Throwable {
    int int0 = NodeUtil.precedence(46);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test336385() throws Throwable {
    int int0 = NodeUtil.precedence(47);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test337386() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for bindname (type 48)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test338387() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for throw (type 49)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test339388() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(50);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=50> (type 50)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test340389() throws Throwable {
    int int0 = NodeUtil.precedence(51);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test341390() throws Throwable {
    int int0 = NodeUtil.precedence(52);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test342391() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=53> (type 53)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test343392() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for setvar (type 55)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test344393() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=56> (type 56)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test345394() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(57);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=57> (type 57)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test346395() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(58);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=58> (type 58)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test347396() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(59);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=59> (type 59)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test348397() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(60);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=60> (type 60)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test349398() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(61);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for thisfn (type 61)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test350399() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(62);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=62> (type 62)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test351400() throws Throwable {
    int int0 = NodeUtil.precedence(63);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test352401() throws Throwable {
    int int0 = NodeUtil.precedence(64);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test353402() throws Throwable {
    int int0 = NodeUtil.precedence(65);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test354403() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(66);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=66> (type 66)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test355404() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(67);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=67> (type 67)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test356405() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(68);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=68> (type 68)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test357406() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(69);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for ref_special (type 69)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test358407() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(70);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=70> (type 70)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test359408() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(72);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=72> (type 72)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test360409() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=73> (type 73)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test361410() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(74);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=74> (type 74)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test362411() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(75);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=75> (type 75)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test363412() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(76);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for <unknown=76> (type 76)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test364413() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for semi (type 78)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test365414() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lb (type 79)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test366415() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(80);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rb (type 80)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test367416() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for lc (type 81)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test368417() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rc (type 82)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test369418() throws Throwable {
    int int0 = NodeUtil.precedence(83);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test370419() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(84);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for rp (type 84)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test371420() throws Throwable {
    int int0 = NodeUtil.precedence(85);
    assertEquals(0, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test372421() throws Throwable {
    int int0 = NodeUtil.precedence(86);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test373422() throws Throwable {
    int int0 = NodeUtil.precedence(87);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test374423() throws Throwable {
    int int0 = NodeUtil.precedence(88);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test375424() throws Throwable {
    int int0 = NodeUtil.precedence(89);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test376425() throws Throwable {
    int int0 = NodeUtil.precedence(90);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test377426() throws Throwable {
    int int0 = NodeUtil.precedence(91);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test378427() throws Throwable {
    int int0 = NodeUtil.precedence(92);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test379428() throws Throwable {
    int int0 = NodeUtil.precedence(93);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test380429() throws Throwable {
    int int0 = NodeUtil.precedence(94);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test381430() throws Throwable {
    int int0 = NodeUtil.precedence(95);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test382431() throws Throwable {
    int int0 = NodeUtil.precedence(96);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test383432() throws Throwable {
    int int0 = NodeUtil.precedence(97);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test384433() throws Throwable {
    int int0 = NodeUtil.precedence(98);
    assertEquals(2, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test385434() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(99);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for colon (type 99)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test386435() throws Throwable {
    int int0 = NodeUtil.precedence(100);
    assertEquals(3, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test387436() throws Throwable {
    int int0 = NodeUtil.precedence(101);
    assertEquals(4, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test388437() throws Throwable {
    int int0 = NodeUtil.precedence(102);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test389438() throws Throwable {
    int int0 = NodeUtil.precedence(103);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test390439() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(104);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for dot (type 104)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test391440() throws Throwable {
    int int0 = NodeUtil.precedence(105);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test392441() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(106);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for export (type 106)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test393442() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(107);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for import (type 107)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test394443() throws Throwable {
    int int0 = NodeUtil.precedence(108);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test395444() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for else (type 109)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test396445() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for switch (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test397446() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for case (type 111)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test398447() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for default (type 112)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test399448() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for while (type 113)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test400449() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for do (type 114)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test401450() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for for (type 115)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test402451() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for break (type 116)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test403452() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for continue (type 117)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test404453() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for var (type 118)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test405454() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for with (type 119)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test406455() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for catch (type 120)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test407456() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for finally (type 121)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test408457() throws Throwable {
    int int0 = NodeUtil.precedence(122);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test409458() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(123);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for reserved (type 123)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test410459() throws Throwable {
    int int0 = NodeUtil.precedence(124);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.ARRAYLIT:
        case Token.CALL:
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GET_REF:
        case Token.IF:
        case Token.LP:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Node.tokenToName(type) + "" (type "" + type + "")"");
    }
}","public void test411460() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(2);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for enterwith (type 2)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"public int getType() {
    return type;
}","public void test412461() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertEquals(38, node0.getType());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test412462() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertTrue(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test412463() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertEquals(82, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test412464() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertEquals(1905, node0.getLineno());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test413465() throws Throwable {
    Node node0 = Node.newString(86, ""Expected NEW node, got "", 86, 86);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test414466() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test415467() throws Throwable {
    Node node0 = new Node(101);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test416468() throws Throwable {
    Node node0 = new Node(40, 40, 40);
    Node node1 = new Node(40, node0, node0, node0, 5, 20);
    node1.setType(100);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test417469() throws Throwable {
    Node node0 = Node.newNumber(2266.3499624084);
    Node node1 = new Node(40, node0, node0, node0, 5, 20);
    node1.setType(100);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test418470() throws Throwable {
    Node node0 = Node.newString(9, ""7lsI-p5P"");
    boolean boolean0 = NodeUtil.isNumericResult(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test419471() throws Throwable {
    Node node0 = new Node(10);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test420472() throws Throwable {
    Node node0 = new Node(11);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test421473() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertEquals(119, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test421474() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertEquals(119, node0.getCharno());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test421475() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test421476() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""d_z#t:)("", 119, 119);
    Node node1 = new Node(18, node0, 26, 78);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertEquals(0, node0.getChildCount());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test422477() throws Throwable {
    Node node0 = new Node(110);
    Node node1 = new Node(20, node0, 17, 32);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test423478() throws Throwable {
    Node node0 = Node.newString(22, "".prototype"", 22, 2364);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test424479() throws Throwable {
    Node node0 = new Node(23);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static int getCount(Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    int total = 0;
    if (pred.apply(n)) {
        total++;
    }
    if (traverseChildrenPred.apply(n)) {
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            total += getCount(c, pred, traverseChildrenPred);
        }
    }
    return total;
}","public void test425480() throws Throwable {
    Node node0 = Node.newString(24, "".prototype"", 24, (-22));
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    int int0 = NodeUtil.getCount(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
    assertEquals(1, int0);
}","/**
 * @return The number of times the the predicate is true for the node
 * or any of its children.
 */"
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test426481() throws Throwable {
    Node node0 = Node.newString(""JSR"");
    Node node1 = new Node(25, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test427482() throws Throwable {
    Node node0 = Node.newString(""o/RYYa}^W\""T;iVBo"");
    node0.setType(27);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test428483() throws Throwable {
    Node node0 = new Node(28);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isNumericResult(Node n) {
    return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
}","public void test429484() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    boolean boolean0 = NodeUtil.isNumericResult(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the result of node evaluation is always a number
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test430485() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test432487() throws Throwable {
    Node node0 = new Node(12);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test433488() throws Throwable {
    Node node0 = Node.newString(13, ""mMxI/6~"", 44, 14);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test434489() throws Throwable {
    Node node0 = Node.newString(14, ""`=(kWsmx.ih>"");
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test435490() throws Throwable {
    Node node0 = Node.newString(""}"");
    Node node1 = new Node(15, node0, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test436491() throws Throwable {
    Node node0 = new Node(16);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test437492() throws Throwable {
    Node node0 = Node.newString(17, "".prototype"", 17, (-22));
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test438493() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    Node node1 = new Node(18, node0, node0, 14, 11);
    boolean boolean0 = NodeUtil.isBooleanResult(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test439494() throws Throwable {
    Node node0 = new Node(19);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test440495() throws Throwable {
    Node node0 = Node.newString(21, ""mMxI/6~"", 21, 21);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test441496() throws Throwable {
    Node node0 = Node.newString(22, "".prototype"", 22, (-22));
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test442497() throws Throwable {
    Node node0 = Node.newString(24, ""Cg&Q)|$osE"", 6, 41);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test443498() throws Throwable {
    Node node0 = new Node(60, 60, 60);
    Node node1 = new Node(26, node0, 5, 18);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertTrue(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test444499() throws Throwable {
    Node node0 = Node.newString(""o/RYYa}^W\""T;iVBo"");
    node0.setType(27);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test445500() throws Throwable {
    Node node0 = Node.newString("""");
    node0.setType(28);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test446501() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test447502() throws Throwable {
    Node node0 = new Node(31);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test448503() throws Throwable {
    Node node0 = Node.newString(32, ""`(kWsmx.ih>"");
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test449504() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.CombinedCompilerPass"", (-2739), 3283);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test449505() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.CombinedCompilerPass"", (-2739), 3283);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertEquals(33, node0.getType());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test449506() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""com.google.javascript.jscomp.CombinedCompilerPass"", (-2739), 3283);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test450507() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test451508() throws Throwable {
    Node node0 = new Node(35);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeString(Node n, boolean recurse) {
    if (recurse) {
        return valueCheck(n, MAY_BE_STRING_PREDICATE);
    } else {
        return mayBeStringHelper(n);
    }
}","public void test452509() throws Throwable {
    Node node0 = Node.newString(""MQj1T|O4U${BD"");
    node0.setType(36);
    boolean boolean0 = NodeUtil.mayBeString(node0, true);
    assertTrue(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test453510() throws Throwable {
    Node node0 = Node.newString(37, ""={9P>"", 2752, 37);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test454511() throws Throwable {
    Node node0 = Node.newNumber((double) 3);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test455512() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test456513() throws Throwable {
    Node node0 = Node.newString(124, ""SETNAME"", 124, 124);
    node0.setType(42);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test457514() throws Throwable {
    Node node0 = new Node(43);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test458515() throws Throwable {
    Node node0 = Node.newString(44, ""n"");
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return valueCheck(n, BOOLEAN_RESULT_PREDICATE);
}","public void test459516() throws Throwable {
    Node node0 = Node.newString(45, ""||"");
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static int getNodeTypeReferenceCount(Node node, int type, Predicate<Node> traverseChildrenPred) {
    return getCount(node, new MatchNodeType(type), traverseChildrenPred);
}","public void test460517() throws Throwable {
    Node node0 = Node.newString((-5), ""`(kWsmx.ih>"", (-5), (-5));
    node0.setType(46);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 1, nodeUtil_MayBeStringResultPredicate0);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test461518() throws Throwable {
    Node node0 = new Node(47, (-4203), 122);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test462519() throws Throwable {
    Node node0 = new Node(48);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test463520() throws Throwable {
    Node node0 = Node.newString(""arg:ments"");
    Node node1 = new Node(49, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertTrue(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test464521() throws Throwable {
    Node node0 = Node.newString(50, "".prhototype"", 50, (-1));
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queryies
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test465522() throws Throwable {
    Node node0 = new Node(51, 51, 51);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeString(Node n, boolean recurse) {
    if (recurse) {
        return valueCheck(n, MAY_BE_STRING_PREDICATE);
    } else {
        return mayBeStringHelper(n);
    }
}","public void test466523() throws Throwable {
    Node node0 = Node.newString(116, "".protoype"", 116, 116);
    boolean boolean0 = NodeUtil.mayBeString(node0, false);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !isNull(n);
}","public void test467524() throws Throwable {
    Node node0 = new Node(4117);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test468525() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(9);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test469526() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(0);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test470527() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(10);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test471528() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(11);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test472529() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test473530() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(100);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test474531() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(101);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test475532() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(9);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test476533() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(99);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test477534() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(10);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test478535() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(11);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test479536() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test480537() throws Throwable {
    Node node0 = Node.newString(87, ""*BXZ$_P~B"", 87, 103);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(9, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test481538() throws Throwable {
    Node node0 = Node.newString(92, ""r"", 129, (-1768));
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(20, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test482539() throws Throwable {
    Node node0 = new Node(88);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(10, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test483540() throws Throwable {
    Node node0 = Node.newString(91, "">>="", 91, 91);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(19, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test484541() throws Throwable {
    Node node0 = Node.newString(95, ""ZE1($cb"", 95, 95);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(23, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test485542() throws Throwable {
    Node node0 = new Node(96);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(24, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test486543() throws Throwable {
    Node node0 = Node.newString(97, ""tr m uX)a"", 81, 81);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(25, int0);
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assiment op"");
}","public void test487544() throws Throwable {
    Node node0 = new Node(33, 114, 114);
    // Undeclared exception!
    try {
        NodeUtil.getOpFromAssignmentOp(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not an assiment op
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test488545() throws Throwable {
    Node node0 = new Node(96);
    boolean boolean0 = NodeUtil.isExpressionNode(node0);
    assertFalse(boolean0);
}",""
"static boolean isExpressionNode(Node n) {
    return n.getType() == Token.EXPR_RESULT;
}","public void test489546() throws Throwable {
    Node node0 = Node.newNumber(3325.28302, 79, 79);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExpressionNode(node1);
    assertTrue(boolean0);
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test490547() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.protobuf.DescriptorProtos$EnumOptions$Builder"", (-798), (-798));
    boolean boolean0 = NodeUtil.isGet(node0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static boolean isGet(Node n) {
    return n.getType() == Token.GETPROP || n.getType() == Token.GETELEM;
}","public void test490548() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.protobuf.DescriptorProtos$EnumOptions$Builder"", (-798), (-798));
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(boolean0);
}","/**
 * Is this a GETPROP or GETELEM node?
 */"
"static boolean isGet(Node n) {
    return n.getType() == Token.GETPROP || n.getType() == Token.GETELEM;
}","public void test491549() throws Throwable {
    Node node0 = Node.newString(35, ""`=(kWsmx.ih>"", 35, 35);
    boolean boolean0 = NodeUtil.isGet(node0);
    assertTrue(boolean0);
}","/**
 * Is this a GETPROP or GETELEM node?
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test492550() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", 49, 49);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(49, node0.getCharno());
}",""
"static Node getPrototypeClassName(Node qName) {
    Node cur = qName;
    while (isGetProp(cur)) {
        if (cur.getLastChild().getString().equals(""prototype"")) {
            return cur.getFirstChild();
        } else {
            cur = cur.getFirstChild();
        }
    }
    return null;
}","public void test492551() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", 49, 49);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertNotNull(node1);
}","/**
 * @return The class name part of a qualified prototype name.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test492552() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", 49, 49);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(49, node1.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test492553() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", 49, 49);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(49, node0.getLineno());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test492554() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "".prototype"", 49, 49);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertTrue(node1.isUnscopedQualifiedName());
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"public int getType() {
    return type;
}","public void test493555() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""arguments"", 126, 126);
    Node node1 = new Node(10, node0, 15, 49);
    assertEquals(38, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test493556() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""arguments"", 126, 126);
    Node node1 = new Node(10, node0, 15, 49);
    NodeUtil.getAssignedValue(node0);
    assertEquals(126, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test493557() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""arguments"", 126, 126);
    Node node1 = new Node(10, node0, 15, 49);
    NodeUtil.getAssignedValue(node0);
    assertEquals(126, node0.getLineno());
}",""
"static boolean isVar(Node n) {
    return n.getType() == Token.VAR;
}","public void test494558() throws Throwable {
    Node node0 = Node.newString(107, ""-infinity"");
    Node node1 = NodeUtil.newVarNode(""-infinity"", node0);
    boolean boolean0 = NodeUtil.isVar(node1);
    assertTrue(boolean0);
}","/**
 * Is this a VAR node?
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test494559() throws Throwable {
    Node node0 = Node.newString(107, ""-infinity"");
    Node node1 = NodeUtil.newVarNode(""-infinity"", node0);
    boolean boolean0 = NodeUtil.isVar(node1);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static boolean isString(Node n) {
    return n.getType() == Token.STRING;
}","public void test495560() throws Throwable {
    Node node0 = new Node(125);
    boolean boolean0 = NodeUtil.isString(node0);
    assertFalse(boolean0);
}","/**
 * Is this a STRING node?
 */"
"static boolean isString(Node n) {
    return n.getType() == Token.STRING;
}","public void test496561() throws Throwable {
    Node node0 = Node.newString(""LuLFEhR6BsM\""?Xp_["", 120, 120);
    boolean boolean0 = NodeUtil.isString(node0);
    assertTrue(boolean0);
}","/**
 * Is this a STRING node?
 */"
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test497562() throws Throwable {
    Node node0 = Node.newString(1861, ""printNameReferenceGraph"", 3, 1861);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"public int getType() {
    return type;
}","public void test498563() throws Throwable {
    Node node0 = Node.newString(""GbXvf]Ri"");
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test498564() throws Throwable {
    Node node0 = Node.newString(""GbXvf]Ri"");
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node1);
    assertFalse(boolean0);
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test499565() throws Throwable {
    Node node0 = Node.newNumber(Double.NaN);
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"public int getType() {
    return type;
}","public void test500566() throws Throwable {
    Node node0 = new Node(63);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertEquals(130, node1.getType());
}",""
"static boolean isExprCall(Node n) {
    return n.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.CALL;
}","public void test500567() throws Throwable {
    Node node0 = new Node(63);
    Node node1 = NodeUtil.newExpr(node0);
    boolean boolean0 = NodeUtil.isExprCall(node1);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"static boolean isForIn(Node n) {
    return n.getType() == Token.FOR && n.getChildCount() == 3;
}","public void test501568() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"static boolean isForIn(Node n) {
    return n.getType() == Token.FOR && n.getChildCount() == 3;
}","public void test502569() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"static boolean isLoopStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
            return true;
        default:
            return false;
    }
}","public void test503570() throws Throwable {
    Node node0 = new Node(116, 116, 116);
    node0.setType(113);
    boolean boolean0 = NodeUtil.isLoopStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, or WHILE node.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test504571() throws Throwable {
    Node node0 = Node.newString(9, "" does not have a condition."", 2421, 2421);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test505572() throws Throwable {
    Node node0 = Node.newString(114, ""arguments"", 114, 114);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static boolean isWithinLoop(Node n) {
    for (Node parent : n.getAncestors()) {
        if (NodeUtil.isLoopStructure(parent)) {
            return true;
        }
        if (NodeUtil.isFunction(parent)) {
            break;
        }
    }
    return false;
}","public void test506573() throws Throwable {
    Node node0 = Node.newString(""&"");
    Node node1 = new Node(35, node0);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the specified node has a loop parent that
 * is within the current scope.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test507574() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test508575() throws Throwable {
    Node node0 = new Node(101);
    // Undeclared exception!
    try {
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test509576() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test510577() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test511578() throws Throwable {
    Node node0 = Node.newString(""4g8V*pqCRo#lVA2L"");
    Node node1 = new Node(112, node0);
    boolean boolean0 = NodeUtil.isControlStructure(node1);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test512579() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test513580() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    node0.setType(114);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test514581() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test515582() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test516583() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT:
            return true;
        default:
            return false;
    }
}","public void test517584() throws Throwable {
    Node node0 = new Node(126, 126, 126);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test518585() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test519586() throws Throwable {
    Node node0 = new Node(110);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test520587() throws Throwable {
    Node node0 = new Node(111, 111, 111);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test521588() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test522589() throws Throwable {
    Node node0 = new Node(114, 114, 114);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test523590() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test524591() throws Throwable {
    Node node0 = new Node(119, 1715, 1715);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test525592() throws Throwable {
    Node node0 = new Node(120, 120, 120);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test526593() throws Throwable {
    Node node0 = Node.newString(126, ""s->k"", 126, 126);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test527594() throws Throwable {
    Node node0 = new Node(108);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test528595() throws Throwable {
    Node node0 = new Node(113);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test529596() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // SWITCH 110 does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test530597() throws Throwable {
    Node node0 = new Node(111);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test531598() throws Throwable {
    Node node0 = Node.newString(112, ""Infinity"", 1304, 2638);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // DEFAULT Infinity 1304 does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"Node tryFoldDo(Node n) {
    Preconditions.checkArgument(n.getType() == Token.DO);
    Node cond = NodeUtil.getConditionExpression(n);
    if (NodeUtil.getImpureBooleanValue(cond) != TernaryValue.FALSE) {
        return n;
    }
    // TODO(johnlenz): The do-while can be turned into a label with
    // named breaks and the label optimized away (maybe).
    if (hasBreakOrContinue(n)) {
        return n;
    }
    Preconditions.checkState(NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));
    Node block = n.removeFirstChild();
    Node parent = n.getParent();
    parent.replaceChild(n, block);
    if (mayHaveSideEffects(cond)) {
        Node condStatement = new Node(Token.EXPR_RESULT, cond.detachFromParent()).copyInformationFrom(cond);
        parent.addChildAfter(condStatement, block);
    }
    reportCodeChange();
    return n;
}","public void test532599() throws Throwable {
    Node node0 = new Node(114);
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    // Undeclared exception!
    try {
        peepholeRemoveDeadCode0.tryFoldDo(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Removes DOs that always evaluate to false. This leaves the
 * statements that were in the loop in a BLOCK node.
 * The block will be removed in a later pass, if possible.
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test533600() throws Throwable {
    Node node0 = new Node(92);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // ASSIGN_URSH does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static boolean isStatementParent(Node parent) {
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test534601() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""SrRQ#WK,l"", ""SrRQ#WK,l"");
    boolean boolean0 = NodeUtil.isStatementParent(node0);
    assertTrue(boolean0);
}",""
"static boolean isStatementParent(Node parent) {
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test535602() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""AoY6}G/.6agZAuepOd"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    SyntheticAst syntheticAst0 = new SyntheticAst(""AoY6}G/.6agZAuepOd"");
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    Node node1 = new Node(126, node0, node0, node0, node0, 676, 9);
    boolean boolean0 = NodeUtil.isStatementParent(node1);
    assertTrue(boolean0);
}",""
"static boolean isStatementParent(Node parent) {
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test536603() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""|"");
    Compiler compiler0 = new Compiler();
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    boolean boolean0 = NodeUtil.isStatementParent(node0);
    assertTrue(boolean0);
}",""
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise only its children can be removed.
            node.detachChildren();
        }
    } else if (node.getType() == Token.CATCH) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test537604() throws Throwable {
    Node node0 = new Node(111);
    NodeUtil.newVarNode(""E fy|<WA"", node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static boolean isSwitchCase(Node n) {
    return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;
}","public void test538605() throws Throwable {
    Node node0 = Node.newString(""4g8V*pqCRo#lVA2L"");
    Node node1 = new Node(112, node0);
    boolean boolean0 = NodeUtil.isSwitchCase(node1);
    assertTrue(boolean0);
}","/**
 * Whether the node is part of a switch statement.
 */"
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test539606() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(41, nodeArray0);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test540607() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_f73jDb2~s"", 37, 37);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(37, node0.getLineno());
}",""
"static boolean isReferenceName(Node n) {
    return isName(n) && !n.getString().isEmpty();
}","public void test540608() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_f73jDb2~s"", 37, 37);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test540609() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_f73jDb2~s"", 37, 37);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertEquals(37, node0.getCharno());
}",""
"static boolean isLabelName(Node n) {
    return (n != null && n.getType() == Token.LABEL_NAME);
}","public void test541610() throws Throwable {
    boolean boolean0 = NodeUtil.isLabelName((Node) null);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static boolean isLabelName(Node n) {
    return (n != null && n.getType() == Token.LABEL_NAME);
}","public void test542611() throws Throwable {
    Node node0 = Node.newString(61, ""typeof"", 61, 61);
    boolean boolean0 = NodeUtil.isLabelName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is a label name.
 */"
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise only its children can be removed.
            node.detachChildren();
        }
    } else if (node.getType() == Token.CATCH) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test543612() throws Throwable {
    Node node0 = new Node(120, 120, 120);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test544613() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""(au"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "">]Nb"", ""JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER TYPE"");
    Node node1 = new Node(37, node0, 19, 2);
    NodeUtil.removeChild(node1, node0);
    assertEquals(1, node1.getChildCount());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test544614() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""(au"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "">]Nb"", ""JSC_EXPORTED_FUNCTION_UNKNOWN_PARAMETER TYPE"");
    Node node1 = new Node(37, node0, 19, 2);
    NodeUtil.removeChild(node1, node0);
    assertTrue(node1.hasChildren());
}",""
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise only its children can be removed.
            node.detachChildren();
        }
    } else if (node.getType() == Token.CATCH) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test545615() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""cW$"", ""cW$"");
    NodeUtil.newVarNode(""Cq!(l$VY\u0001{"", node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise only its children can be removed.
            node.detachChildren();
        }
    } else if (node.getType() == Token.CATCH) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test546616() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = NodeUtil.newVarNode(""com.google.javascript.jscomp.AmbiguateProperties$ProcessProperties"", node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise only its children can be removed.
            node.detachChildren();
        }
    } else if (node.getType() == Token.CATCH) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test547617() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    Node node1 = new Node(37, node0, node0, 5, 34);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: TRY 77 of TRY 77
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise only its children can be removed.
            node.detachChildren();
        }
    } else if (node.getType() == Token.CATCH) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.getType() == Token.BLOCK) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.getType() == Token.VAR) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.getType() == Token.LABEL && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, new Node(Token.EMPTY));
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test548618() throws Throwable {
    Node node0 = new Node(126);
    NodeUtil.newVarNode("", totalGets="", node0);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: LABEL of LABEL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void maybeAddFinally(Node tryNode) {
    Preconditions.checkState(tryNode.getType() == Token.TRY);
    if (!NodeUtil.hasFinally(tryNode)) {
        tryNode.addChildrenToBack(new Node(Token.BLOCK).copyInformationFrom(tryNode));
    }
}","public void test549619() throws Throwable {
    Node node0 = Node.newString(""~"");
    // Undeclared exception!
    try {
        NodeUtil.maybeAddFinally(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add a finally block if one does not exist.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else {
        return false;
    }
}","public void test550620() throws Throwable {
    Node node0 = new Node(116, 116, 116);
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean tryMergeBlock(Node block) {
    Preconditions.checkState(block.getType() == Token.BLOCK);
    Node parent = block.getParent();
    // Try to remove the block if its parent is a block/script or if its
    // parent is label and it has exactly one child.
    if (isStatementBlock(parent)) {
        Node previous = block;
        while (block.hasChildren()) {
            Node child = block.removeFirstChild();
            parent.addChildAfter(child, previous);
            previous = child;
        }
        parent.removeChild(block);
        return true;
    } else {
        return false;
    }
}","public void test551621() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""$F/)3x.Q&HRB.Pj\"""");
    // Undeclared exception!
    try {
        NodeUtil.tryMergeBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Merge a block with its parent block.
 * @return Whether the block was removed.
 */"
"static boolean isCallOrNew(Node node) {
    return NodeUtil.isCall(node) || NodeUtil.isNew(node);
}","public void test552622() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = NodeUtil.isCallOrNew(node0);
    assertTrue(boolean0);
}","/**
 * @param node A node
 * @return Whether the call is a NEW or CALL node.
 */"
"static boolean isCallOrNew(Node node) {
    return NodeUtil.isCall(node) || NodeUtil.isNew(node);
}","public void test553623() throws Throwable {
    Node node0 = Node.newString(30, "".prototype"", 30, (-22));
    boolean boolean0 = NodeUtil.isCallOrNew(node0);
    assertTrue(boolean0);
}","/**
 * @param node A node
 * @return Whether the call is a NEW or CALL node.
 */"
"static void redeclareVarsInsideBranch(Node branch) {
    Collection<Node> vars = getVarsDeclaredInBranch(branch);
    if (vars.isEmpty()) {
        return;
    }
    Node parent = getAddingRoot(branch);
    for (Node nameNode : vars) {
        Node var = new Node(Token.VAR, Node.newString(Token.NAME, nameNode.getString()).copyInformationFrom(nameNode)).copyInformationFrom(nameNode);
        copyNameAnnotations(nameNode, var.getFirstChild());
        parent.addChildToFront(var);
    }
}","public void test554624() throws Throwable {
    Node node0 = Node.newString(1861, ""printNameReferenceGraph"", 3, 1861);
    node0.setType(105);
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertEquals(4, Node.DESCENDANTS_FLAG);
}","/**
 * Given a node tree, finds all the VAR declarations in that tree that are
 * not in an inner scope. Then adds a new VAR node at the top of the current
 * scope that redeclares them, if necessary.
 */"
"static boolean isThis(Node node) {
    return node.getType() == Token.THIS;
}","public void test555625() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    boolean boolean0 = NodeUtil.isThis(node0);
    assertFalse(boolean0);
}","/**
 * Is this a THIS node?
 */"
"static boolean isArrayLiteral(Node node) {
    return node.getType() == Token.ARRAYLIT;
}","public void test556626() throws Throwable {
    Node node0 = Node.newString("".prototype"");
    boolean boolean0 = NodeUtil.isArrayLiteral(node0);
    assertFalse(boolean0);
}","/**
 * Is this an ARRAYLIT node
 */"
"static boolean isArrayLiteral(Node node) {
    return node.getType() == Token.ARRAYLIT;
}","public void test557627() throws Throwable {
    Node node0 = Node.newString(63, ""-Sh"");
    boolean boolean0 = NodeUtil.isArrayLiteral(node0);
    assertTrue(boolean0);
}","/**
 * Is this an ARRAYLIT node
 */"
"static boolean isHoistedFunctionDeclaration(Node n) {
    return isFunctionDeclaration(n) && (n.getParent().getType() == Token.SCRIPT || n.getParent().getParent().getType() == Token.FUNCTION);
}","public void test558628() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(41, nodeArray0);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a hoisted function declaration? A function declaration in the
 * scope root is hoisted to the top of the scope.
 * See {@link #isFunctionDeclaration}).
 */"
"static boolean isEmptyFunctionExpression(Node node) {
    return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());
}","public void test559629() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    assertFalse(boolean0);
}","/**
 * Determines if a node is a function expression that has an empty body.
 *
 * @param node a node
 * @return whether the given node is a function expression that is empty
 */"
"static boolean isObjectCallMethod(Node callNode, String methodName) {
    if (callNode.getType() == Token.CALL) {
        Node functionIndentifyingExpression = callNode.getFirstChild();
        if (isGet(functionIndentifyingExpression)) {
            Node last = functionIndentifyingExpression.getLastChild();
            if (last != null && last.getType() == Token.STRING) {
                String propName = last.getString();
                return (propName.equals(methodName));
            }
        }
    }
    return false;
}","public void test560630() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""(au"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "">]Nb"", "">]Nb"");
    Node node1 = new Node(37, node0, 19, 2);
    boolean boolean0 = NodeUtil.isObjectCallMethod(node1, "">]Nb"");
    assertFalse(boolean0);
}","/**
 * @return Whether node is a call to methodName.
 *    a.f(...)
 *    a['f'](...)
 */"
"static boolean isFunctionObjectCallOrApply(Node callNode) {
    return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);
}","public void test561631() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Undefined"", (-570), (-570));
    boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.apply(...)
 *    x['apply'](...)
 *  or
 *    x.call(...)
 *    x['call'](...)
 */"
"static boolean isLhs(Node n, Node parent) {
    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) || parent.getType() == Token.VAR;
}","public void test562632() throws Throwable {
    Node node0 = Node.newString(86, ""Expected NEW node, got "", 86, 86);
    boolean boolean0 = NodeUtil.isLhs(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"static boolean isLhs(Node n, Node parent) {
    return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) || parent.getType() == Token.VAR;
}","public void test563633() throws Throwable {
    Node node0 = Node.newString(110, ""-infinity"");
    Node node1 = NodeUtil.newVarNode(""-infinity"", node0);
    boolean boolean0 = NodeUtil.isLhs(node1, node1);
    assertTrue(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test563634() throws Throwable {
    Node node0 = Node.newString(110, ""-infinity"");
    Node node1 = NodeUtil.newVarNode(""-infinity"", node0);
    boolean boolean0 = NodeUtil.isLhs(node1, node1);
    assertFalse(node0.hasChildren());
}",""
"static boolean isObjectLitKey(Node node, Node parent) {
    switch(node.getType()) {
        case Token.NUMBER:
        case Token.STRING:
            return parent.getType() == Token.OBJECTLIT;
        case Token.GET:
        case Token.SET:
            return true;
    }
    return false;
}","public void test564635() throws Throwable {
    Node node0 = Node.newNumber(Double.NaN);
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal key
 * (e.g. key1 in {key1: value1, key2: value2}).
 *
 * @param node A node
 * @param parent The node's parent
 */"
"static Node parseAndNormalizeTestCode(AbstractCompiler compiler, String code, String prefix) {
    Node js = compiler.parseTestCode(code);
    NodeTraversal.traverse(compiler, js, new Normalize.NormalizeStatements(compiler, false));
    NodeTraversal.traverse(compiler, js, new MakeDeclaredNamesUnique());
    return js;
}","public void test565636() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""cW.$"", ""cW.$"");
    assertEquals(46, Node.IS_DISPATCHER);
}",""
"static boolean isConstantByConvention(CodingConvention convention, Node node, Node parent) {
    String name = node.getString();
    if (parent.getType() == Token.GETPROP && node == parent.getLastChild()) {
        return convention.isConstantKey(name);
    } else if (isObjectLitKey(node, parent)) {
        return convention.isConstantKey(name);
    } else {
        return convention.isConstant(name);
    }
}","public void test566637() throws Throwable {
    Node node0 = Node.newString(147, "".prototype"");
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    boolean boolean0 = NodeUtil.isConstantByConvention(closureCodingConvention0, node0, node0);
    assertFalse(boolean0);
}","/**
 * Whether the given name is constant by coding convention.
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.NUMBER:
            return NodeUtil.getStringValue(key);
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test567638() throws Throwable {
    Node node0 = Node.newString(148, ""vL.rxg5N"");
    String string0 = NodeUtil.getObjectLitKeyName(node0);
    assertEquals(""vL.rxg5N"", string0);
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.NUMBER:
            return NodeUtil.getStringValue(key);
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test568639() throws Throwable {
    Node node0 = Node.newString(""yIqGgn+u-yP{)=6vt(:"");
    String string0 = NodeUtil.getObjectLitKeyName(node0);
    assertEquals(""yIqGgn+u-yP{)=6vt(:"", string0);
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.NUMBER:
            return NodeUtil.getStringValue(key);
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test569640() throws Throwable {
    Node node0 = Node.newString(147, ""vL.rxg5N"");
    String string0 = NodeUtil.getObjectLitKeyName(node0);
    assertEquals(""vL.rxg5N"", string0);
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.NUMBER:
            return NodeUtil.getStringValue(key);
        case Token.STRING:
        case Token.GET:
        case Token.SET:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test570641() throws Throwable {
    Node node0 = new Node((-3931), (-3931), (-3931));
    // Undeclared exception!
    try {
        NodeUtil.getObjectLitKeyName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // -3931
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType) {
    if (valueType != null) {
        switch(key.getType()) {
            case Token.GET:
                // GET must always return a function type.
                if (valueType.isFunctionType()) {
                    FunctionType fntype = ((FunctionType) valueType);
                    valueType = fntype.getReturnType();
                } else {
                    return null;
                }
                break;
            case Token.SET:
                if (valueType.isFunctionType()) {
                    // SET must always return a function type.
                    FunctionType fntype = ((FunctionType) valueType);
                    Node param = fntype.getParametersNode().getFirstChild();
                    // SET function must always have one parameter.
                    valueType = param.getJSType();
                } else {
                    return null;
                }
                break;
        }
    }
    return valueType;
}","public void test571642() throws Throwable {
    Node node0 = Node.newString(""aJZF8Enuf"");
    JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
    assertNull(jSType0);
}","/**
 * @param key A OBJECTLIT key node.
 * @return The type expected when using the key.
 */"
"public boolean isOrdinaryFunction() {
    return false;
}","public void test572643() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_PROTOTYPE;
    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
    JSType jSType1 = jSTypeRegistry0.createNullableType(jSType0);
    JSType jSType2 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType1);
    assertFalse(jSType2.isOrdinaryFunction());
}","/**
 * Whether this type is a {@link FunctionType} that is an ordinary function or
 * a named type that points to such a type.
 */"
"static boolean isGetOrSetKey(Node node) {
    switch(node.getType()) {
        case Token.GET:
        case Token.SET:
            return true;
    }
    return false;
}","public void test573644() throws Throwable {
    Node node0 = Node.newString(147, ""vL.rxg5N"");
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether a node represents an object literal get or set key
 * (e.g. key1 in {get key1() {}, set key2(a){}).
 *
 * @param node A node
 */"
"static boolean isGetOrSetKey(Node node) {
    switch(node.getType()) {
        case Token.GET:
        case Token.SET:
            return true;
    }
    return false;
}","public void test574645() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal get or set key
 * (e.g. key1 in {get key1() {}, set key2(a){}).
 *
 * @param node A node
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test575646() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(9);
    assertEquals(""|"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test576647() throws Throwable {
    String string0 = NodeUtil.opToStr(33);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test577648() throws Throwable {
    String string0 = NodeUtil.opToStr(10);
    assertEquals(""^"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test578649() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(11);
    assertEquals(""&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test579650() throws Throwable {
    String string0 = NodeUtil.opToStr(12);
    assertEquals(""=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test580651() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(13);
    assertEquals(""!="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test581652() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(14);
    assertEquals(""<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test582653() throws Throwable {
    String string0 = NodeUtil.opToStr(15);
    assertEquals(""<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test583654() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(16);
    assertEquals("">"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test584655() throws Throwable {
    String string0 = NodeUtil.opToStr(17);
    assertEquals("">="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test585656() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(18);
    assertEquals(""<<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test586657() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(19);
    assertEquals("">>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test587658() throws Throwable {
    String string0 = NodeUtil.opToStr(20);
    assertEquals("">>>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test588659() throws Throwable {
    String string0 = NodeUtil.opToStr(21);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test589660() throws Throwable {
    String string0 = NodeUtil.opToStr(22);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test590661() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(23);
    assertEquals(""*"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test591662() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(24);
    assertEquals(""/"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test592663() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(25);
    assertEquals(""%"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test593664() throws Throwable {
    String string0 = NodeUtil.opToStr(26);
    assertEquals(""!"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test594665() throws Throwable {
    String string0 = NodeUtil.opToStr(27);
    assertEquals(""~"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test595666() throws Throwable {
    String string0 = NodeUtil.opToStr(28);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test596667() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(29);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test597668() throws Throwable {
    String string0 = NodeUtil.opToStr(30);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test598669() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(31);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 31: DELPROP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test599670() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(32);
    assertEquals(""typeof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test600671() throws Throwable {
    String string0 = NodeUtil.opToStr(34);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test601672() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(35);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 35: GETELEM
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test602673() throws Throwable {
    String string0 = NodeUtil.opToStr(36);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test603674() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(37);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 37: CALL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test604675() throws Throwable {
    String string0 = NodeUtil.opToStr(38);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test605676() throws Throwable {
    String string0 = NodeUtil.opToStr(39);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test606677() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(40);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 40: STRING
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test607678() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(41);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 41: NULL
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test608679() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(42);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 42: THIS
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test609680() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(43);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 43: FALSE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test610681() throws Throwable {
    String string0 = NodeUtil.opToStr(44);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test611682() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(45);
    assertEquals(""==="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test612683() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(46);
    assertEquals(""!=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test613684() throws Throwable {
    String string0 = NodeUtil.opToStr(47);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test614685() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 48: BINDNAME
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test615686() throws Throwable {
    String string0 = NodeUtil.opToStr(49);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test616687() throws Throwable {
    String string0 = NodeUtil.opToStr(50);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test617688() throws Throwable {
    String string0 = NodeUtil.opToStr(51);
    assertEquals(""in"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test618689() throws Throwable {
    String string0 = NodeUtil.opToStr(52);
    assertEquals(""instanceof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test619690() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(53);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 53: LOCAL_LOAD
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test620691() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(55);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 55: SETVAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test621692() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(56);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 56: CATCH_SCOPE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test622693() throws Throwable {
    String string0 = NodeUtil.opToStr(58);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test623694() throws Throwable {
    String string0 = NodeUtil.opToStr(59);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test624695() throws Throwable {
    String string0 = NodeUtil.opToStr(60);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test625696() throws Throwable {
    String string0 = NodeUtil.opToStr(61);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test626697() throws Throwable {
    String string0 = NodeUtil.opToStr(62);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test627698() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(63);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 63: ARRAYLIT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test628699() throws Throwable {
    String string0 = NodeUtil.opToStr(64);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test629700() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(65);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 65: GET_REF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test630701() throws Throwable {
    String string0 = NodeUtil.opToStr(66);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test631702() throws Throwable {
    String string0 = NodeUtil.opToStr(67);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test632703() throws Throwable {
    String string0 = NodeUtil.opToStr(68);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test633704() throws Throwable {
    String string0 = NodeUtil.opToStr(69);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test634705() throws Throwable {
    String string0 = NodeUtil.opToStr(70);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test635706() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(71);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 71: ESCXMLATTR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test636707() throws Throwable {
    String string0 = NodeUtil.opToStr(72);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test637708() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(73);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 73: REF_MEMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test638709() throws Throwable {
    String string0 = NodeUtil.opToStr(74);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test639710() throws Throwable {
    String string0 = NodeUtil.opToStr(75);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test640711() throws Throwable {
    String string0 = NodeUtil.opToStr(76);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test641712() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 77: TRY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test642713() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(78);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 78: SEMI
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test643714() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(79);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 79: LB
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test644715() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(80);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 80: RB
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test645716() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(81);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 81: LC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test646717() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(82);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 82: RC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test647718() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(83);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 83: LP
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test648719() throws Throwable {
    String string0 = NodeUtil.opToStr(84);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test649720() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(85);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 85: COMMA
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test650721() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(86);
    assertEquals(""="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test651722() throws Throwable {
    String string0 = NodeUtil.opToStr(87);
    assertEquals(""|="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test652723() throws Throwable {
    String string0 = NodeUtil.opToStr(88);
    assertEquals(""^="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test653724() throws Throwable {
    String string0 = NodeUtil.opToStr(89);
    assertEquals(""&="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test654725() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(90);
    assertEquals(""<<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test655726() throws Throwable {
    String string0 = NodeUtil.opToStr(91);
    assertEquals("">>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test656727() throws Throwable {
    String string0 = NodeUtil.opToStr(92);
    assertEquals("">>>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test657728() throws Throwable {
    String string0 = NodeUtil.opToStr(93);
    assertEquals(""+="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test658729() throws Throwable {
    String string0 = NodeUtil.opToStr(94);
    assertEquals(""-="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test659730() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(95);
    assertEquals(""*="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test660731() throws Throwable {
    String string0 = NodeUtil.opToStr(96);
    assertEquals(""/="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test661732() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(97);
    assertEquals(""%="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test662733() throws Throwable {
    String string0 = NodeUtil.opToStr(98);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test663734() throws Throwable {
    String string0 = NodeUtil.opToStr(99);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test664735() throws Throwable {
    String string0 = NodeUtil.opToStr(100);
    assertEquals(""||"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test665736() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(101);
    assertEquals(""&&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test666737() throws Throwable {
    String string0 = NodeUtil.opToStr(102);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test667738() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(103);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 103: DEC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test668739() throws Throwable {
    String string0 = NodeUtil.opToStr(104);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test669740() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(105);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 105: FUNCTION
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test670741() throws Throwable {
    String string0 = NodeUtil.opToStr(106);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test671742() throws Throwable {
    String string0 = NodeUtil.opToStr(107);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test672743() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(108);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 108: IF
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test673744() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(109);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 109: ELSE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test674745() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 110: SWITCH
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test675746() throws Throwable {
    String string0 = NodeUtil.opToStr(111);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test676747() throws Throwable {
    String string0 = NodeUtil.opToStr(112);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test677748() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 113: WHILE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test678749() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 114: DO
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test679750() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 115: FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test680751() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 116: BREAK
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test681752() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 117: CONTINUE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test682753() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 118: VAR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test683754() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 119: WITH
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test684755() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 120: CATCH
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test685756() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(121);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 121: FINALLY
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test686757() throws Throwable {
    String string0 = NodeUtil.opToStr(122);
    assertEquals(""void"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test687758() throws Throwable {
    String string0 = NodeUtil.opToStr(186);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static void redeclareVarsInsideBranch(Node branch) {
    Collection<Node> vars = getVarsDeclaredInBranch(branch);
    if (vars.isEmpty()) {
        return;
    }
    Node parent = getAddingRoot(branch);
    for (Node nameNode : vars) {
        Node var = new Node(Token.VAR, Node.newString(Token.NAME, nameNode.getString()).copyInformationFrom(nameNode)).copyInformationFrom(nameNode);
        copyNameAnnotations(nameNode, var.getFirstChild());
        parent.addChildToFront(var);
    }
}","public void test688759() throws Throwable {
    Node node0 = new Node(50);
    Node node1 = NodeUtil.newVarNode(""9"", node0);
    // Undeclared exception!
    try {
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Given a node tree, finds all the VAR declarations in that tree that are
 * not in an inner scope. Then adds a new VAR node at the top of the current
 * scope that redeclares them, if necessary.
 */"
"static void copyNameAnnotations(Node source, Node destination) {
    if (source.getBooleanProp(Node.IS_CONSTANT_NAME)) {
        destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }
}","public void test689760() throws Throwable {
    Node node0 = Node.newString(""mtFtx8\""S1!s2]cJ,ME"");
    NodeUtil.copyNameAnnotations(node0, node0);
    assertEquals(4095, Node.COLUMN_MASK);
}","/**
 * Copy any annotations that follow a named value.
 * @param source
 * @param destination
 */"
"public int getSideEffectFlags() {
    return getIntProp(SIDE_EFFECT_FLAGS);
}","public void test690761() throws Throwable {
    Node node0 = Node.newString(123, ""cL]"", 1837, 1837);
    node0.putIntProp(42, 116);
    NodeUtil.copyNameAnnotations(node0, node0);
    assertEquals(0, node0.getSideEffectFlags());
}","/**
 * Returns the side effects flags for this node.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test691762() throws Throwable {
    Node node0 = Node.newString(117, ""-"");
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node1 = NodeUtil.newFunctionNode(""LZg&dA'e J_@J"", linkedList0, node0, 0, 47);
    assertEquals(0, node1.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test691763() throws Throwable {
    Node node0 = Node.newString(117, ""-"");
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node1 = NodeUtil.newFunctionNode(""LZg&dA'e J_@J"", linkedList0, node0, 0, 47);
    assertEquals(47, node1.getCharno());
}",""
"public int getType() {
    return type;
}","public void test691764() throws Throwable {
    Node node0 = Node.newString(117, ""-"");
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node1 = NodeUtil.newFunctionNode(""LZg&dA'e J_@J"", linkedList0, node0, 0, 47);
    assertEquals(105, node1.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test691765() throws Throwable {
    Node node0 = Node.newString(117, ""-"");
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    Node node1 = NodeUtil.newFunctionNode(""LZg&dA'e J_@J"", linkedList0, node0, 0, 47);
    assertEquals(3, node1.getChildCount());
}",""
"public static Node newFunctionNode(String name, List<Node> params, Node body, int lineno, int charno) {
    Node parameterParen = new Node(Token.LP, lineno, charno);
    for (Node param : params) {
        parameterParen.addChildToBack(param);
    }
    Node function = new Node(Token.FUNCTION, lineno, charno);
    function.addChildrenToBack(Node.newString(Token.NAME, name, lineno, charno));
    function.addChildToBack(parameterParen);
    function.addChildToBack(body);
    return function;
}","public void test692766() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""arguments"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    linkedList0.add((Node) null);
    Node node0 = compiler0.parseTestCode(""arguments"");
    // Undeclared exception!
    try {
        NodeUtil.newFunctionNode(""iwnfinity"", linkedList0, node0, 48, 15);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Creates function name(params_0, ..., params_n) { body }.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test693767() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 113, 113);
    assertEquals(113, node0.getCharno());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test693768() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 113, 113);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getType() {
    return type;
}","public void test693769() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 113, 113);
    assertEquals(33, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test693770() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 113, 113);
    assertEquals(113, node0.getLineno());
}",""
"static Node getRootOfQualifiedName(Node qName) {
    for (Node current = qName; true; current = current.getFirstChild()) {
        int type = current.getType();
        if (type == Token.NAME || type == Token.THIS) {
            return current;
        }
        Preconditions.checkState(type == Token.GETPROP);
    }
}","public void test694771() throws Throwable {
    Node node0 = Node.newString(""4g8V*pqCRo#lVA2L"");
    // Undeclared exception!
    try {
        NodeUtil.getRootOfQualifiedName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Gets the root node of a qualified name. Must be either NAME or THIS.
 */"
"static Node getRootOfQualifiedName(Node qName) {
    for (Node current = qName; true; current = current.getFirstChild()) {
        int type = current.getType();
        if (type == Token.NAME || type == Token.THIS) {
            return current;
        }
        Preconditions.checkState(type == Token.GETPROP);
    }
}","public void test695772() throws Throwable {
    Node node0 = Node.newString(""4g8V*pqCRo#lVA2L"");
    node0.setType(42);
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(10, Node.VARS_PROP);
}","/**
 * Gets the root node of a qualified name. Must be either NAME or THIS.
 */"
"public int getType() {
    return type;
}","public void test696773() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.mozilla.rhino.ScriptableObject$Slot"", (-1300), (-1300));
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(33, node0.getType());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test696774() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.mozilla.rhino.ScriptableObject$Slot"", (-1300), (-1300));
    Node node1 = NodeUtil.getRootOfQualifiedName(node0);
    assertFalse(node1.hasChildren());
}",""
"public int getSideEffectFlags() {
    return getIntProp(SIDE_EFFECT_FLAGS);
}","public void test697775() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""RANGE_ERROR_FUNCTION_TYPE"", node0);
    assertEquals(0, node1.getSideEffectFlags());
}","/**
 * Returns the side effects flags for this node.
 */"
"public int getType() {
    return type;
}","public void test697776() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""RANGE_ERROR_FUNCTION_TYPE"", node0);
    assertEquals(38, node1.getType());
}",""
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test698777() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""`=(kWsmx.ih>"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test699778() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""search"");
    assertTrue(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"static boolean isValidPropertyName(String name) {
    return TokenStream.isJSIdentifier(name) && !TokenStream.isKeyword(name) && // no Unicode escaped characters - some browsers are less tolerant
    // of Unicode characters that might be valid according to the
    // language spec.
    // Note that by this point, unicode escapes have been converted
    // to UTF-16 characters, so we're only searching for character
    // values, not escapes.
    isLatin(name);
}","public void test700779() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""false"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test701780() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    NodeUtil.redeclareVarsInsideBranch(node1);
    assertEquals(1905, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test701781() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    NodeUtil.redeclareVarsInsideBranch(node1);
    assertEquals(38, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test701782() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    NodeUtil.redeclareVarsInsideBranch(node1);
    assertEquals(82, node0.getCharno());
}",""
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test702783() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_f73jDb2~s"", 37, 37);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test702784() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_f73jDb2~s"", 37, 37);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(37, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test702785() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""_f73jDb2~s"", 37, 37);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertEquals(37, node0.getLineno());
}",""
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test703786() throws Throwable {
    Node node0 = Node.newString(95, ""Kz+$"", 136, 136);
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}",""
"static Node getPrototypeClassName(Node qName) {
    Node cur = qName;
    while (isGetProp(cur)) {
        if (cur.getLastChild().getString().equals(""prototype"")) {
            return cur.getFirstChild();
        } else {
            cur = cur.getFirstChild();
        }
    }
    return null;
}","public void test704787() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$52"", 119, 21);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertNull(node1);
}","/**
 * @return The class name part of a qualified prototype name.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test704788() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$52"", 119, 21);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(119, node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test704789() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$52"", 119, 21);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(33, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test704790() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$52"", 119, 21);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(21, node0.getCharno());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test704791() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""com.google.javascript.jscomp.DefaultPassConfig$52"", 119, 21);
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(2, node0.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test705792() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    assertEquals(122, node0.getType());
}",""
"static Node newUndefinedNode(Node srcReferenceNode) {
    Node node = new Node(Token.VOID, Node.newNumber(0));
    if (srcReferenceNode != null) {
        node.copyInformationFromForTree(srcReferenceNode);
    }
    return node;
}","public void test705793() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    assertNotNull(node0);
}","/**
 * Create a node for an empty result expression:
 *   ""void 0""
 */"
"static boolean isNameReferenced(Node node, String name) {
    return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());
}","public void test706794() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""Undefined"", (-570), (-570));
    boolean boolean0 = NodeUtil.isNameReferenced(node0, "": "");
    assertFalse(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"static boolean isNameReferenced(Node node, String name) {
    return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());
}","public void test707795() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = NodeUtil.newVarNode("""", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, """");
    assertTrue(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test707796() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = NodeUtil.newVarNode("""", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, """");
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getType() {
    return type;
}","public void test707797() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Stack<JSType> stack0 = new Stack<JSType>();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) stack0);
    Node node1 = NodeUtil.newVarNode("""", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, """");
    assertEquals(118, node1.getType());
}",""
"static boolean containsCall(Node n) {
    return containsType(n, Token.CALL);
}","public void test708798() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""q"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "">]Nb"", "">]Nb"");
    Node node1 = new Node(37, node0, 19, 2);
    boolean boolean0 = NodeUtil.containsCall(node1);
    assertTrue(boolean0);
}","/**
 * Is this node or any of its children a CALL?
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test710801() throws Throwable {
    Node node0 = new Node(2375);
    Node node1 = NodeUtil.newVarNode(""[object Object]"", node0);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
    assertFalse(node0.hasChildren());
}",""
"static boolean valueCheck(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return valueCheck(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return valueCheck(n.getFirstChild(), p) && valueCheck(n.getLastChild(), p);
        case Token.HOOK:
            return valueCheck(n.getFirstChild().getNext(), p) && valueCheck(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test711802() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(41, nodeArray0);
    node0.addChildAfter(node0, node0);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.valueCheck(node0, nodeUtil_MatchShallowStatement0);
    assertFalse(boolean0);
}","/**
 * Apply the supplied predicate against the potential
 * all possible result of the expression.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test712803() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 21, 21);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertEquals(21, node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test712804() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 21, 21);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertEquals(21, node0.getCharno());
}",""
"static boolean referencesThis(Node n) {
    return containsType(n, Token.THIS, new MatchNotFunction());
}","public void test712805() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 21, 21);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the shallow scope contains references to 'this' keyword
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test712806() throws Throwable {
    DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(defaultCodingConvention0, ""$F/)3x.Q&HRB.Pj\"""", 21, 21);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertEquals(2, node0.getChildCount());
}",""
"static int getNodeTypeReferenceCount(Node node, int type, Predicate<Node> traverseChildrenPred) {
    return getCount(node, new MatchNodeType(type), traverseChildrenPred);
}","public void test713807() throws Throwable {
    Node node0 = new Node(63);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
    Node node1 = new Node(1, node0, node0, node0, node0);
    int int0 = NodeUtil.getNodeTypeReferenceCount(node1, 99, nodeUtil_MayBeStringResultPredicate0);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test714808() throws Throwable {
    Node node0 = Node.newString(19, ""=-FOs3%y"");
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static void visitPostOrder(Node node, Visitor vistor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, vistor, traverseChildrenPred);
        }
    }
    vistor.visit(node);
}","public void test715809() throws Throwable {
    Node node0 = Node.newString(110, ""\""WY4)j5430RgaVE"");
    Node node1 = new Node(35, node0, 38, 40);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, predicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Vistor.visit for each child matching
 * the predicate.
 */"
"static boolean hasFinally(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getChildCount() == 3;
}","public void test716810() throws Throwable {
    Node node0 = Node.newString(124, ""+infinity"", 255, 46);
    // Undeclared exception!
    try {
        NodeUtil.hasFinally(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether a TRY node has a finally block.
 */"
"static boolean hasFinally(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getChildCount() == 3;
}","public void test717811() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.hasFinally(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether a TRY node has a finally block.
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getFirstChild().getNext();
}","public void test718812() throws Throwable {
    Node node0 = new Node(19);
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.getType() == Token.TRY);
    return n.getFirstChild().getNext();
}","public void test719813() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test720814() throws Throwable {
    Node node0 = new Node(69, 69, 69);
    // Undeclared exception!
    try {
        NodeUtil.hasCatchHandler(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static boolean hasCatchHandler(Node n) {
    Preconditions.checkArgument(n.getType() == Token.BLOCK);
    return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
}","public void test721815() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""o/RYYv}^W\""T;iVBo"");
    boolean boolean0 = NodeUtil.hasCatchHandler(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether BLOCK (from a TRY node) contains a CATCH.
 * @see NodeUtil#getCatchBlock
 */"
"static Node getFnParameters(Node fnNode) {
    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]
    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
    return fnNode.getFirstChild().getNext();
}","public void test722816() throws Throwable {
    Node node0 = Node.newString(9, ""7lsI-p5P"");
    // Undeclared exception!
    try {
        NodeUtil.getFnParameters(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @param fnNode The function.
 * @return The Node containing the Function parameters.
 */"
"static Node getFnParameters(Node fnNode) {
    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]
    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
    return fnNode.getFirstChild().getNext();
}","public void test723817() throws Throwable {
    Node node0 = Node.newString(0, "".prototype"", 0, 1858);
    node0.setType(105);
    // Undeclared exception!
    try {
        NodeUtil.getFnParameters(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param fnNode The function.
 * @return The Node containing the Function parameters.
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test724818() throws Throwable {
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"public boolean isHidden() {
    return getFlag(MASK_HIDDEN);
}","public void test725819() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    JSDocInfo jSDocInfo1 = NodeUtil.getInfoForNameNode(node0);
    assertFalse(jSDocInfo1.isHidden());
}","/**
 * Returns whether the {@code @hidden} annotation is present on this
 * {@link JSDocInfo}.
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test726820() throws Throwable {
    Node node0 = Node.newString(100, ""-"");
    Node node1 = new Node(103, node0, 7, 42);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getInfoForNameNode(Node nameNode) {
    JSDocInfo info = null;
    Node parent = null;
    if (nameNode != null) {
        info = nameNode.getJSDocInfo();
        parent = nameNode.getParent();
    }
    if (info == null && parent != null && ((parent.getType() == Token.VAR && parent.hasOneChild()) || parent.getType() == Token.FUNCTION)) {
        info = parent.getJSDocInfo();
    }
    return info;
}","public void test727821() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
    assertNull(jSDocInfo0);
}","/**
 * @param nameNode A name node
 * @return The JSDocInfo for the name node
 */"
"static JSDocInfo getFunctionInfo(Node n) {
    Preconditions.checkState(n.getType() == Token.FUNCTION);
    JSDocInfo fnInfo = n.getJSDocInfo();
    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {
        // Look for the info on other nodes.
        Node parent = n.getParent();
        if (parent.getType() == Token.ASSIGN) {
            // on ASSIGNs
            fnInfo = parent.getJSDocInfo();
        } else if (parent.getType() == Token.NAME) {
            // on var NAME = function() { ... };
            fnInfo = parent.getParent().getJSDocInfo();
        }
    }
    return fnInfo;
}","public void test728822() throws Throwable {
    Node node0 = new Node(43);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Get the JSDocInfo for a function.
 */"
"static JSDocInfo getFunctionInfo(Node n) {
    Preconditions.checkState(n.getType() == Token.FUNCTION);
    JSDocInfo fnInfo = n.getJSDocInfo();
    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {
        // Look for the info on other nodes.
        Node parent = n.getParent();
        if (parent.getType() == Token.ASSIGN) {
            // on ASSIGNs
            fnInfo = parent.getJSDocInfo();
        } else if (parent.getType() == Token.NAME) {
            // on var NAME = function() { ... };
            fnInfo = parent.getParent().getJSDocInfo();
        }
    }
    return fnInfo;
}","public void test729823() throws Throwable {
    Node node0 = Node.newString(1861, ""printNameReferenceGraph"", 3, 1861);
    node0.setType(105);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionInfo(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Get the JSDocInfo for a function.
 */"
"public boolean isNoCompile() {
    return getFlag(MASK_NOCOMPILE);
}","public void test730824() throws Throwable {
    Node node0 = new Node(116);
    node0.setType(105);
    node0.addSuppression(""v<f6X59E"");
    JSDocInfo jSDocInfo0 = NodeUtil.getFunctionInfo(node0);
    assertFalse(jSDocInfo0.isNoCompile());
}","/**
 * Returns whether the {@code @nocompile} annotation is present on this
 * {@link JSDocInfo}.
 */"
"static JSDocInfo getFunctionInfo(Node n) {
    Preconditions.checkState(n.getType() == Token.FUNCTION);
    JSDocInfo fnInfo = n.getJSDocInfo();
    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {
        // Look for the info on other nodes.
        Node parent = n.getParent();
        if (parent.getType() == Token.ASSIGN) {
            // on ASSIGNs
            fnInfo = parent.getJSDocInfo();
        } else if (parent.getType() == Token.NAME) {
            // on var NAME = function() { ... };
            fnInfo = parent.getParent().getJSDocInfo();
        }
    }
    return fnInfo;
}","public void test731825() throws Throwable {
    Node node0 = Node.newString(1861, ""printNameReferenceGraph"", 3, 1861);
    node0.setType(105);
    Node node1 = new Node(2, node0);
    JSDocInfo jSDocInfo0 = NodeUtil.getFunctionInfo(node0);
    assertNull(jSDocInfo0);
}","/**
 * Get the JSDocInfo for a function.
 */"
"static String getSourceName(Node n) {
    String sourceName = null;
    while (sourceName == null && n != null) {
        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
        n = n.getParent();
    }
    return sourceName;
}","public void test732826() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""com.google.common.collect.Collections2"", ""arguments"");
    Node node0 = compiler0.parse(jSSourceFile0);
    String string0 = NodeUtil.getSourceName(node0);
    assertNotNull(string0);
}","/**
 * @param n The node.
 * @return The source name property on the node or its ancestors.
 */"
"static String getSourceName(Node n) {
    String sourceName = null;
    while (sourceName == null && n != null) {
        sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
        n = n.getParent();
    }
    return sourceName;
}","public void test733828() throws Throwable {
    Node node0 = new Node(74);
    String string0 = NodeUtil.getSourceName(node0);
    assertNull(string0);
}","/**
 * @param n The node.
 * @return The source name property on the node or its ancestors.
 */"
"public int getType() {
    return type;
}","public void test734829() throws Throwable {
    Node node0 = new Node(56, (-1655), (-1655));
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    assertEquals(37, node1.getType());
}",""
"static Node newCallNode(Node callTarget, Node... parameters) {
    boolean isFreeCall = isName(callTarget);
    Node call = new Node(Token.CALL, callTarget);
    call.putBooleanProp(Node.FREE_CALL, isFreeCall);
    for (Node parameter : parameters) {
        call.addChildToBack(parameter);
    }
    return call;
}","public void test735830() throws Throwable {
    LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
    Logger logger0 = Logger.getLogger(""undefined"");
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, logger0);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""undefined"", 8233, 8233);
    Node[] nodeArray0 = new Node[2];
    // Undeclared exception!
    try {
        NodeUtil.newCallNode(node0, nodeArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * A new CALL node with the ""FREE_CALL"" set based on call target.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test736831() throws Throwable {
    Node node0 = new Node(31, 15, 38);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test737832() throws Throwable {
    Node node0 = Node.newString(32, ""E fy|<WA"", 26, 4);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test738833() throws Throwable {
    Node node0 = new Node(33, 114, 114);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test739834() throws Throwable {
    Node node0 = Node.newString(34, "".prototype"");
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeSETPROP .prototype
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test740835() throws Throwable {
    Node node0 = Node.newString(""&"");
    Node node1 = new Node(35, node0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test741836() throws Throwable {
    Node node0 = Node.newString(124, ""SETNAME"", 124, 124);
    node0.setType(42);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test742837() throws Throwable {
    Node node0 = Node.newString(45, ""0tIM\""-?Cg4"", 3, 24);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test743838() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test744839() throws Throwable {
    Node node0 = Node.newString(48, ""valueOf"");
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeBINDNAME valueOf
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test745840() throws Throwable {
    Node node0 = new Node(51, 51, 51);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test746841() throws Throwable {
    Node node0 = Node.newString(61, "" d\""f`}jTA4"", 61, 10);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTHISFN  d\""f`}jTA4 61
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test747842() throws Throwable {
    Node node0 = Node.newString(63, ""NJwr,kkMNH':e"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test748843() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test749844() throws Throwable {
    Node node0 = new Node(74, 135, (-2699));
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_MEMBER
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test750845() throws Throwable {
    Node node0 = new Node(75, 75, 75);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NAME 75
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test751846() throws Throwable {
    Node node0 = new Node(76);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, sourceMap_DetailLevel0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeREF_NS_NAME
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test752847() throws Throwable {
    Node node0 = new Node(79, 100, 79);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeLB 100
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test753848() throws Throwable {
    Node node0 = new Node(80);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeRB
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test754849() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
    assertFalse(node0.hasChildren());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test754850() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
    assertEquals(82, node0.getCharno());
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test754851() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test754852() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""@}J<Mo$O/4}_"", 1905, 82);
    Node node1 = new Node(85, node0, 9, 712);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
    assertEquals(1905, node0.getLineno());
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test755853() throws Throwable {
    Node node0 = Node.newString(86, ""// In7ut %num%"", 86, 86);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test756854() throws Throwable {
    Node node0 = new Node(88);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test757855() throws Throwable {
    Node node0 = Node.newString(89, "" of "");
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test758856() throws Throwable {
    Node node0 = new Node(90, 121, 107);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test759857() throws Throwable {
    Node node0 = Node.newString(91, "">>="", 91, 91);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test760858() throws Throwable {
    Node node0 = new Node(92);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test761859() throws Throwable {
    Node node0 = new Node(93);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test762860() throws Throwable {
    Node node0 = new Node(94, 114, (-1655));
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test763861() throws Throwable {
    Node node0 = Node.newString(95, ""Kz+$"", 136, 136);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test764862() throws Throwable {
    Node node0 = new Node(96, 96, 96);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test765863() throws Throwable {
    Node node0 = Node.newString(97, ""tr m uX)a"", 81, 81);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test766864() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test767865() throws Throwable {
    Node node0 = new Node(99, 99, 99);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCOLON 99
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test768866() throws Throwable {
    Node node0 = new Node(100, 100, 100);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test769867() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""d_z#t:)("", 126, 119);
    Node node1 = new Node(101, node0, 16, 29);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertEquals(119, node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test769868() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""d_z#t:)("", 126, 119);
    Node node1 = new Node(101, node0, 16, 29);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertEquals(126, node0.getLineno());
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test769869() throws Throwable {
    Compiler compiler0 = new Compiler();
    ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention) compiler0.defaultCodingConvention;
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""d_z#t:)("", 126, 119);
    Node node1 = new Node(101, node0, 16, 29);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test770870() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test771871() throws Throwable {
    Node node0 = new Node(103);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test772872() throws Throwable {
    Node node0 = Node.newString(1861, ""printNameReferenceGraph"", 1861, 1861);
    node0.setType(105);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test773873() throws Throwable {
    Node node0 = Node.newString(147, ""vL.rxg5N"");
    Node node1 = new Node(37, node0, node0);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test774874() throws Throwable {
    Node node0 = new Node(30, 30, 30);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
