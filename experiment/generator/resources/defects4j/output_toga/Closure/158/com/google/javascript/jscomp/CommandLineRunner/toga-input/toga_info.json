{
  "test00" : {
    "methodSignature" : "public boolean shouldRunCompiler()",
    "methodName" : "shouldRunCompiler",
    "className" : "com.google.javascript.jscomp.CommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    commandLineRunner0.createCompiler();\n    commandLineRunner0.shouldRunCompiler();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public static void main(String[] args)",
    "methodName" : "main",
    "className" : "com.google.javascript.jscomp.CommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner.main(stringArray0);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public boolean shouldRunCompiler()",
    "methodName" : "shouldRunCompiler",
    "className" : "com.google.javascript.jscomp.CommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, (PrintStream) null, (PrintStream) null);\n    commandLineRunner0.shouldRunCompiler();\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public static void main(String[] args)",
    "methodName" : "main",
    "className" : "com.google.javascript.jscomp.CommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"L \";\n    CommandLineRunner.main(stringArray0);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "protected CommandLineRunner(String[] args)",
    "methodName" : "CommandLineRunner",
    "className" : "com.google.javascript.jscomp.CommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    String[] stringArray0 = new String[10];\n    stringArray0[0] = \"--A=\";\n    CommandLineRunner commandLineRunner0 = null;\n    commandLineRunner0 = new CommandLineRunner(stringArray0);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "protected CompilerOptions createOptions()",
    "methodName" : "createOptions",
    "className" : "com.google.javascript.jscomp.CommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "protected List<JSSourceFile> createExterns() throws FlagUsageException, IOException",
    "methodName" : "createExterns",
    "className" : "com.google.javascript.jscomp.CommandLineRunner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    String[] stringArray0 = new String[0];\n    CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);\n    Supplier<List<JSSourceFile>> supplier0 = (Supplier<List<JSSourceFile>>) mock(Supplier.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(supplier0).get();\n    Function<Integer, Boolean> function0 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());\n    commandLineRunner0.enableTestMode(supplier0, supplier0, (Supplier<List<JSModule>>) null, function0);\n    List<JSSourceFile> list0 = commandLineRunner0.createExterns();\n}",
    "testName" : "test66"
  }
}