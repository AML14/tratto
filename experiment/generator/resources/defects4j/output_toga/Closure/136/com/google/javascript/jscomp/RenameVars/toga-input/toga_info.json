{
  "test1010" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped((AbstractCompiler) null);\n    VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();\n    char[] charArray0 = new char[5];\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) null);\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(lightweightMessageFormatter0, (Logger) null);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);\n    InlineGetters inlineGetters0 = new InlineGetters((AbstractCompiler) null);\n    Set<String> set0 = inlineGetters0.externMethods;\n    RenameVars renameVars0 = new RenameVars(compiler0, \"DEFAULT\", false, false, true, variableMap0, charArray0, set0);\n    RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(\"com.google.javascript.jscomp.RenameVars$Assignment\", sourceFile_Generator0);\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);\n    renameVars_ProcessVars0.incCount(\"DEFAULT\", compilerInput0);\n    renameVars_ProcessVars0.incCount(\"e w`ow!|v=\\\"n95\", compilerInput0);\n    renameVars0.process(node0, node0);\n}",
    "testName" : "test1010"
  },
  "test000" : {
    "methodSignature" : "public int getChildCount()",
    "methodName" : "getChildCount",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    char[] charArray0 = new char[11];\n    NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);\n    VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();\n    RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, false, variableMap0, charArray0, compilerOptions0.aliasableStrings);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"\", (Charset) null);\n    RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);\n    renameVars_ProcessVars0.incCount(\"\", compilerInput0);\n    Node node0 = Node.newString(\"wT8-q64:02hn!B!%\");\n    Node node1 = compiler0.parseTestCode(\"Q<Uz^QD8\");\n    renameVars0.process(node0, node1);\n    renameVars0.process(node1, node1);\n    node1.getChildCount();\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "VariableMap getVariableMap()",
    "methodName" : "getVariableMap",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    char[] charArray0 = new char[40];\n    RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, charArray0, compilerOptions0.stripNamePrefixes);\n    VariableMap variableMap0 = renameVars0.getVariableMap();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "RenameVars(AbstractCompiler compiler, String prefix, boolean localRenamingOnly, boolean preserveAnonymousFunctionNames, boolean generatePseudoNames, VariableMap prevUsedRenameMap, @Nullable char[] reservedCharacters, @Nullable Set<String> reservedNames)",
    "methodName" : "RenameVars",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    char[] charArray0 = new char[13];\n    RenameVars renameVars0 = new RenameVars(compiler0, \"0tI\", false, false, false, (VariableMap) null, charArray0, (Set<String>) null);\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    char[] charArray0 = new char[30];\n    RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, charArray0, compilerOptions0.stripNamePrefixes);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSType[] jSTypeArray0 = new JSType[1];\n    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);\n    renameVars0.process(node0, node0);\n}",
    "testName" : "test044"
  },
  "test055" : {
    "methodSignature" : "public final int getEndLineno()",
    "methodName" : "getEndLineno",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    char[] charArray0 = new char[3];\n    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(\"\", (String) null, \"is_dispatcher\");\n    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);\n    RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, false, (VariableMap) null, charArray0, compilerOptions0.stripNameSuffixes);\n    ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) jsAst0.getAstRoot(compiler0);\n    renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);\n    scriptOrFnNode0.getEndLineno();\n}",
    "testName" : "test055"
  },
  "test066" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.options_;\n    char[] charArray0 = new char[6];\n    SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(\"\", (String) null, \"_R\");\n    JsAst jsAst0 = new JsAst(sourceFile_Preloaded0);\n    RenameVars renameVars0 = new RenameVars(compiler0, \"// Input %num%\", false, false, false, (VariableMap) null, charArray0, compilerOptions0.stripNameSuffixes);\n    Node node0 = jsAst0.getAstRoot(compiler0);\n    renameVars0.process(node0, node0);\n}",
    "testName" : "test066"
  },
  "test077" : {
    "methodSignature" : "public int getChildCount()",
    "methodName" : "getChildCount",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    char[] charArray0 = new char[11];\n    NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);\n    VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();\n    RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, false, variableMap0, charArray0, compilerOptions0.aliasableStrings);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"\", (Charset) null);\n    RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);\n    renameVars_ProcessVars0.incCount(\"\", compilerInput0);\n    renameVars_ProcessVars0.incCount(\"\", compilerInput0);\n    Node node0 = Node.newString(\"wT8-q64:02hn!B!%\");\n    Node node1 = compiler0.parseTestCode(\"Q<Uz^QD8\");\n    renameVars_ProcessVars0.incCount(\" =\", compilerInput0);\n    renameVars0.process(node1, node0);\n    node1.getChildCount();\n}",
    "testName" : "test077"
  },
  "test088" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    char[] charArray0 = new char[1];\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, false, (VariableMap) null, charArray0, compilerOptions0.stripTypePrefixes);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode((String) null, (String) null);\n    RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);\n    renameVars_ProcessVars0.incCount(\"\\uC911\\uAD6D\", compilerInput0);\n    Node node0 = compiler0.parseTestCode(\"\\uC911\\uAD6D\");\n    renameVars0.process(node0, node0);\n}",
    "testName" : "test088"
  },
  "test099" : {
    "methodSignature" : "public final String getSourceName()",
    "methodName" : "getSourceName",
    "className" : "com.google.javascript.jscomp.RenameVars",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();\n    char[] charArray0 = new char[4];\n    NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);\n    VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();\n    RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, variableMap0, charArray0, compilerOptions0.aliasableStrings);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"\", (Charset) null);\n    RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);\n    renameVars_ProcessVars0.incCount(\"L Ncgcm>eFoPL+&>o%Ew\", compilerInput0);\n    ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode) compiler0.parseTestCode(\"\");\n    renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);\n    scriptOrFnNode0.getSourceName();\n}",
    "testName" : "test099"
  }
}