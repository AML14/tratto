{
  "test00" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MethodCompilerPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    InlineGetters inlineGetters0 = new InlineGetters((AbstractCompiler) null);\n    inlineGetters0.process((Node) null, (Node) null);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MethodCompilerPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Node node0 = Node.newString(\"ZpO4AG}P3\");\n    Node node1 = new Node(64, node0);\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    Vector<JSType> vector0 = new Vector<JSType>();\n    Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);\n    node1.addChildAfter(node2, node0);\n    Node node3 = new Node(0, node1);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    MethodCheck methodCheck0 = new MethodCheck((AbstractCompiler) null, checkLevel0);\n    methodCheck0.process(node1, node1);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MethodCompilerPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"com.google.javvcript.rhinp.jstypeTS=bpleSlot\", \"com.google.javvcript.rhinp.jstypeTS=bpleSlot\");\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);\n    Node node1 = new Node(2, node0);\n    methodCheck0.process(node0, node1);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MethodCompilerPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Node node0 = new Node((-963));\n    Node node1 = new Node(45);\n    Node node2 = new Node(35, node0, node1, 19, 12);\n    Node node3 = new Node(12, node2);\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    MethodCheck methodCheck0 = new MethodCheck((AbstractCompiler) null, checkLevel0);\n    methodCheck0.process(node2, node0);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MethodCompilerPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    MethodCheck methodCheck0 = new MethodCheck(compiler0, checkLevel0);\n    Node node0 = compiler0.parseSyntheticCode(\"com.google.java=cript.jscomp.MethodCompilerPass$GatherSignatures\", \"com.google.java=cript.jscomp.MethodCompilerPass$GatherSignatures\");\n    Node node1 = new Node((-1719484454), node0);\n    methodCheck0.process(node0, node0);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.MethodCompilerPass",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    Node node0 = new Node(64);\n    Node node1 = new Node(64, node0);\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    Vector<JSType> vector0 = new Vector<JSType>();\n    Node node2 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);\n    node1.addChildAfter(node2, node0);\n    Node node3 = new Node(0, node1);\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    MethodCheck methodCheck0 = new MethodCheck((AbstractCompiler) null, checkLevel0);\n    methodCheck0.process(node1, node1);\n}",
    "testName" : "test55"
  }
}