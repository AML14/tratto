{
  "test1212" : {
    "methodSignature" : "void maybePrepareCall(Node callNode)",
    "methodName" : "maybePrepareCall",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    Node node0 = new Node(2877);\n    Node node1 = new Node(16, node0, node0, node0, node0, 55, 56);\n    functionInjector0.maybePrepareCall(node0);\n}",
    "testName" : "test1212"
  },
  "test1111" : {
    "methodSignature" : "Node inline(Node callNode, String fnName, Node fnNode, InliningMode mode)",
    "methodName" : "inline",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    Node node0 = null;\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, hashSet0, true, true);\n    String string0 = \"VAR_DECL_SIMPLE_ASSIGNMENT\";\n    FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;\n    functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode1);\n}",
    "testName" : "test1111"
  },
  "test000" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);\n    Node node0 = Node.newString(5, \"w!@nRXU\", 5, 5);\n    Node node1 = new Node(48, node0, 4, 30);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, true, true);\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);\n    Node node0 = new Node(5);\n    Node node1 = new Node(48, node0, 4, 30);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, false, false);\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "public FunctionInjector(AbstractCompiler compiler, Supplier<String> safeNameIdSupplier, boolean allowDecomposition, boolean assumeStrictThis, boolean assumeMinimumCapture)",
    "methodName" : "FunctionInjector",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    functionInjector0.setKnownConstants(hashSet0);\n    FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, false, false, false);\n}",
    "testName" : "test022"
  },
  "test033" : {
    "methodSignature" : "void maybePrepareCall(Node callNode)",
    "methodName" : "maybePrepareCall",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    functionInjector0.maybePrepareCall((Node) null);\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);\n    Node node0 = new Node(12);\n    Node node1 = new Node(48, node0, 4, 30);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, false, false);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions)",
    "methodName" : "canInlineReferenceToFunction",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);\n    Node node0 = Node.newString(5, \"w!@_RXU\", 5, 5);\n    Node node1 = new Node(57, node0, node0, node0, node0);\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, true, true);\n}",
    "testName" : "test066"
  },
  "test1616" : {
    "methodSignature" : "boolean doesFunctionMeetMinimumRequirements(final String fnName, Node fnNode)",
    "methodName" : "doesFunctionMeetMinimumRequirements",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    Node node0 = null;\n    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, \"com.google.javascript.jscomp.CheckEventfulObjectDisposal$1\", false);\n    processCommonJSModules0.getModule();\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);\n    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, false);\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    String string0 = \"\";\n    functionInjector0.doesFunctionMeetMinimumRequirements(string0, node0);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "void maybePrepareCall(Node callNode)",
    "methodName" : "maybePrepareCall",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);\n    gatherRawExports0.getExportedVariableNames();\n    JSModule jSModule0 = new JSModule(\"k*k l!v,cCXw\");\n    Node node0 = compiler0.externsRoot;\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);\n    FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);\n    Locale locale0 = Locale.US;\n    locale0.toLanguageTag();\n    Set<String> set0 = locale0.getUnicodeLocaleKeys();\n    functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);\n    functionInjector0.maybePrepareCall(node0);\n}",
    "testName" : "test1717"
  },
  "test1515" : {
    "methodSignature" : "void maybePrepareCall(Node callNode)",
    "methodName" : "maybePrepareCall",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    HashSet<String> hashSet0 = new HashSet<String>();\n    hashSet0.stream();\n    Node node0 = Node.newString(12, \"w!@_RXU\", 12, 12);\n    hashSet0.add(\"w!@_RXU\");\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);\n    functionInjector0.inliningLowersCost((JSModule) null, node0, immutableList0, hashSet0, true, false);\n    functionInjector0.maybePrepareCall(node0);\n}",
    "testName" : "test1515"
  },
  "test1818" : {
    "methodSignature" : "Node inline(Node callNode, String fnName, Node fnNode, InliningMode mode)",
    "methodName" : "inline",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    String string0 = \"k*k l!v,cCVXw\";\n    JSModule jSModule0 = new JSModule(\"k*k l!v,cCVXw\");\n    Node node0 = compiler0.externsRoot;\n    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;\n    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);\n    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);\n    JSModule jSModule1 = new JSModule(\"k*k l!v,cCVXw\");\n    FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule1, functionInjector_InliningMode0);\n    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1);\n    functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);\n    functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "void maybePrepareCall(Node callNode)",
    "methodName" : "maybePrepareCall",
    "className" : "com.google.javascript.jscomp.FunctionInjector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);\n    Node node0 = new Node(3364);\n    Node node1 = new Node(3364, node0, node0, node0, node0, 1, 36);\n    Node node2 = new Node(0, node1, 56, (-2609));\n    functionInjector0.maybePrepareCall(node0);\n}",
    "testName" : "test1919"
  }
}