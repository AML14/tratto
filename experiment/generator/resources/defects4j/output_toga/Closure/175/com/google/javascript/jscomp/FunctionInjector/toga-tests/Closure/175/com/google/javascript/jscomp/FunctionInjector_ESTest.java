/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 09:21:28 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Supplier;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.PeepholeMinimizeConditions;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.jscomp.ReorderConstantExpression;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SimpleDefinitionFinder;
import com.google.javascript.jscomp.StatementFusion;
import com.google.javascript.rhino.Node;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class FunctionInjector_ESTest extends FunctionInjector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        HashSet<String> hashSet0 = new HashSet<String>();
        OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
        Node node0 = Node.newString(5, "w!@nRXU", 5, 5);
        Node node1 = new Node(48, node0, 4, 30);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, true, true);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        HashSet<String> hashSet0 = new HashSet<String>();
        OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
        Node node0 = new Node(5);
        Node node1 = new Node(48, node0, 4, 30);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, false, false);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        HashSet<String> hashSet0 = new HashSet<String>();
        functionInjector0.setKnownConstants(hashSet0);
        FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, false, false, false);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        functionInjector0.maybePrepareCall((Node) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        HashSet<String> hashSet0 = new HashSet<String>();
        OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
        Node node0 = new Node(12);
        Node node1 = new Node(48, node0, 4, 30);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, false, false);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        JSModule jSModule0 = new JSModule("k*k l!v,cCXw");
        Node node0 = compiler0.externAndJsRoot;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        HashSet<String> hashSet0 = new HashSet<String>();
        OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
        Node node0 = Node.newString(5, "w!@_RXU", 5, 5);
        Node node1 = new Node(57, node0, node0, node0, node0);
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, true, true);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        Set<String> set0 = gatherRawExports0.getExportedVariableNames();
        TreeSet<FunctionInjector.Reference> treeSet0 = new TreeSet<FunctionInjector.Reference>();
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, treeSet0, set0, true, false);
        FileSystemHandling.shouldAllThrowIOExceptions();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        JSModule jSModule0 = new JSModule("k*k l!v,cCXw");
        Node node0 = compiler0.externsRoot;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
        FileSystemHandling.shouldAllThrowIOExceptions();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        JSModule jSModule0 = new JSModule("k*k l!v,cCXw");
        Node node0 = compiler0.externsRoot;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, false, false);
        FileSystemHandling.shouldAllThrowIOExceptions();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        JSModule jSModule0 = new JSModule("k*k l!v,cCXw");
        Node node0 = compiler0.externsRoot;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
        FileSystemHandling.shouldAllThrowIOExceptions();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        Node node0 = null;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
        HashSet<String> hashSet0 = new HashSet<String>();
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, hashSet0, true, true);
        String string0 = "VAR_DECL_SIMPLE_ASSIGNMENT";
        FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
        functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        Node node0 = new Node(2877);
        Node node1 = new Node(16, node0, node0, node0, node0, 55, 56);
        functionInjector0.maybePrepareCall(node0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        HashSet<String> hashSet0 = new HashSet<String>();
        String string0 = "=TM46wq+";
        hashSet0.add("=TM46wq+");
        functionInjector0.setKnownConstants(hashSet0);
        functionInjector0.setKnownConstants(hashSet0);
        ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
        int int0 = 1;
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getUniqueNameIdSupplier();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        JSModule jSModule0 = new JSModule("k*k l!v,cCXw");
        Node node0 = compiler0.externsRoot;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
        FileSystemHandling.shouldAllThrowIOExceptions();
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        HashSet<String> hashSet0 = new HashSet<String>();
        hashSet0.stream();
        Node node0 = Node.newString(12, "w!@_RXU", 12, 12);
        hashSet0.add("w!@_RXU");
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
        functionInjector0.inliningLowersCost((JSModule) null, node0, immutableList0, hashSet0, true, false);
        functionInjector0.maybePrepareCall(node0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        Node node0 = null;
        ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "com.google.javascript.jscomp.CheckEventfulObjectDisposal$1", false);
        processCommonJSModules0.getModule();
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
        functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, false);
        FileSystemHandling.shouldAllThrowIOExceptions();
        String string0 = "";
        functionInjector0.doesFunctionMeetMinimumRequirements(string0, node0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
        gatherRawExports0.getExportedVariableNames();
        JSModule jSModule0 = new JSModule("k*k l!v,cCXw");
        Node node0 = compiler0.externsRoot;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
        Locale locale0 = Locale.US;
        locale0.toLanguageTag();
        Set<String> set0 = locale0.getUnicodeLocaleKeys();
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
        functionInjector0.maybePrepareCall(node0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        String string0 = "k*k l!v,cCVXw";
        JSModule jSModule0 = new JSModule("k*k l!v,cCVXw");
        Node node0 = compiler0.externsRoot;
        FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
        FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
        Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
        JSModule jSModule1 = new JSModule("k*k l!v,cCVXw");
        FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule1, functionInjector_InliningMode0);
        ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1);
        functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
        functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Compiler compiler0 = new Compiler();
        Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
        FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
        Node node0 = new Node(3364);
        Node node1 = new Node(3364, node0, node0, node0, node0, 1, 36);
        Node node2 = new Node(0, node1, 56, (-2609));
        functionInjector0.maybePrepareCall(node0);
    }
}
