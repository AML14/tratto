project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    HashSet<String> hashSet0 = new HashSet<String>();
    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
    Node node0 = Node.newString(5, ""w!@nRXU"", 5, 5);
    Node node1 = new Node(48, node0, 4, 30);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, true, true);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    HashSet<String> hashSet0 = new HashSet<String>();
    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
    Node node0 = new Node(5);
    Node node1 = new Node(48, node0, 4, 30);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, false, false);
}",0,
project,0,test022,"public void test022() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    HashSet<String> hashSet0 = new HashSet<String>();
    functionInjector0.setKnownConstants(hashSet0);
    FunctionInjector functionInjector1 = new FunctionInjector(compiler0, supplier0, false, false, false);
}",0,
project,0,test033,"public void test033() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    functionInjector0.maybePrepareCall((Node) null);
}",0,
project,0,test044,"public void test044() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    HashSet<String> hashSet0 = new HashSet<String>();
    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
    Node node0 = new Node(12);
    Node node1 = new Node(48, node0, 4, 30);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, false, false);
}",0,
project,0,test066,"public void test066() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    HashSet<String> hashSet0 = new HashSet<String>();
    OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, optimizeArgumentsArray0, (ScopeCreator) null);
    Node node0 = Node.newString(5, ""w!@_RXU"", 5, 5);
    Node node1 = new Node(57, node0, node0, node0, node0);
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    functionInjector0.canInlineReferenceToFunction(nodeTraversal0, node1, node0, hashSet0, functionInjector_InliningMode0, true, true);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    Node node0 = null;
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference0);
    HashSet<String> hashSet0 = new HashSet<String>();
    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, hashSet0, true, true);
    String string0 = ""VAR_DECL_SIMPLE_ASSIGNMENT"";
    FunctionInjector.InliningMode functionInjector_InliningMode1 = FunctionInjector.InliningMode.DIRECT;
    // Undeclared exception!
    try {
        functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    Node node0 = new Node(2877);
    Node node1 = new Node(16, node0, node0, node0, node0, 55, 56);
    functionInjector0.maybePrepareCall(node0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    HashSet<String> hashSet0 = new HashSet<String>();
    hashSet0.stream();
    Node node0 = Node.newString(12, ""w!@_RXU"", 12, 12);
    hashSet0.add(""w!@_RXU"");
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, (JSModule) null, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
    functionInjector0.inliningLowersCost((JSModule) null, node0, immutableList0, hashSet0, true, false);
    functionInjector0.maybePrepareCall(node0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    Node node0 = null;
    ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ""com.google.javascript.jscomp.CheckEventfulObjectDisposal$1"", false);
    processCommonJSModules0.getModule();
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, (JSModule) null, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
    functionInjector0.inliningLowersCost((JSModule) null, (Node) null, immutableList0, (Set<String>) null, false, false);
    FileSystemHandling.shouldAllThrowIOExceptions();
    String string0 = """";
    functionInjector0.doesFunctionMeetMinimumRequirements(string0, node0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
    gatherRawExports0.getExportedVariableNames();
    JSModule jSModule0 = new JSModule(""k*k l!v,cCXw"");
    Node node0 = compiler0.externsRoot;
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
    FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0);
    Locale locale0 = Locale.US;
    locale0.toLanguageTag();
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
    functionInjector0.maybePrepareCall(node0);
}",1,
project,0,test1818,"public void test1818() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    String string0 = ""k*k l!v,cCVXw"";
    JSModule jSModule0 = new JSModule(""k*k l!v,cCVXw"");
    Node node0 = compiler0.externsRoot;
    FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
    FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference((Node) null, jSModule0, functionInjector_InliningMode0);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, true, true, true);
    JSModule jSModule1 = new JSModule(""k*k l!v,cCVXw"");
    FunctionInjector.Reference functionInjector_Reference1 = new FunctionInjector.Reference((Node) null, jSModule1, functionInjector_InliningMode0);
    ImmutableList<FunctionInjector.Reference> immutableList0 = ImmutableList.of(functionInjector_Reference0, functionInjector_Reference0, functionInjector_Reference1, functionInjector_Reference1);
    functionInjector0.inliningLowersCost(jSModule0, (Node) null, immutableList0, set0, true, true);
    functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    FunctionInjector functionInjector0 = new FunctionInjector(compiler0, supplier0, false, false, false);
    Node node0 = new Node(3364);
    Node node1 = new Node(3364, node0, node0, node0, node0, 1, 36);
    Node node2 = new Node(0, node1, 56, (-2609));
    functionInjector0.maybePrepareCall(node0);
}",0,
