{
  "test0002" : {
    "methodSignature" : "Node parseInputs()",
    "methodName" : "parseInputs",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0002() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n}",
    "testName" : "test0002"
  },
  "test07283" : {
    "methodSignature" : "boolean areNodesEqualForInlining(Node n1, Node n2)",
    "methodName" : "areNodesEqualForInlining",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07283() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.areNodesEqualForInlining((Node) null, (Node) null);\n}",
    "testName" : "test07283"
  },
  "test06070" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06070() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    JSModule jSModule0 = new JSModule((String) null);\n    linkedList0.add(jSModule0);\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test06070"
  },
  "test0000" : {
    "methodSignature" : "public int getType()",
    "methodName" : "getType",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    node0.getType();\n}",
    "testName" : "test0000"
  },
  "test08093" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08093() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test08093"
  },
  "test0001" : {
    "methodSignature" : "public boolean isSyntheticBlock()",
    "methodName" : "isSyntheticBlock",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0001() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    node0.isSyntheticBlock();\n}",
    "testName" : "test0001"
  },
  "test101122" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101122() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test101122"
  },
  "test03640" : {
    "methodSignature" : "List<CompilerInput> getInputsForTesting()",
    "methodName" : "getInputsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03640() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"com.google.javascript.jscomp.Compiler$3\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    List<CompilerInput> list0 = compiler0.getInputsForTesting();\n}",
    "testName" : "test03640"
  },
  "test101121" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    String string0 = compiler0.getAstDotGraph();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test101121"
  },
  "test07687" : {
    "methodSignature" : "public CompilerInput newExternInput(String name)",
    "methodName" : "newExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07687() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"yxaVT%'\", \"yxaVT%'\");\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    stack0.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.newExternInput(\"yxaVT%'\");\n}",
    "testName" : "test07687"
  },
  "test05665" : {
    "methodSignature" : "public boolean isExtern()",
    "methodName" : "isExtern",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05665() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"$\", \"$\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.sourceMapOutputPath = \"$\";\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    jSSourceFile0.isExtern();\n}",
    "testName" : "test05665"
  },
  "test06474" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06474() throws Throwable {\n    Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, true);\n}",
    "testName" : "test06474"
  },
  "test088104" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088104() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n    boolean boolean0 = compiler0.isInliningForbidden();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test088104"
  },
  "test088103" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088103() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test088103"
  },
  "test01215" : {
    "methodSignature" : "public void disableThreads()",
    "methodName" : "disableThreads",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01215() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.disableThreads();\n}",
    "testName" : "test01215"
  },
  "test03236" : {
    "methodSignature" : "JSModuleGraph getModuleGraph()",
    "methodName" : "getModuleGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03236() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();\n}",
    "testName" : "test03236"
  },
  "test02427" : {
    "methodSignature" : "VariableMap getVariableMap()",
    "methodName" : "getVariableMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02427() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getVariableMap();\n}",
    "testName" : "test02427"
  },
  "test04448" : {
    "methodSignature" : "ReferenceMap getGlobalVarReferences()",
    "methodName" : "getGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04448() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();\n}",
    "testName" : "test04448"
  },
  "test01619" : {
    "methodSignature" : "ControlFlowGraph<Node> computeCFG()",
    "methodName" : "computeCFG",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01619() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.computeCFG();\n}",
    "testName" : "test01619"
  },
  "test08092" : {
    "methodSignature" : "public ErrorManager getErrorManager()",
    "methodName" : "getErrorManager",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08092() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n}",
    "testName" : "test08092"
  },
  "test094111" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"5?5\");\n    compiler0.getSourceRegion(\"toSourceArray\", 15);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test094111"
  },
  "test0013" : {
    "methodSignature" : "public String toSource(final JSModule module)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0013() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource((JSModule) null);\n}",
    "testName" : "test0013"
  },
  "test091108" : {
    "methodSignature" : "void throwInternalError(String message, Exception cause)",
    "methodName" : "throwInternalError",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091108() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.throwInternalError(\"o9-`\\\"+UyN(Zj;n+\", (Exception) null);\n}",
    "testName" : "test091108"
  },
  "test05259" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05259() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(\"}7OS6NG%(qC \", diagnosticTypeArray0);\n    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;\n    compiler0.parseTestCode(\"}7OS6NG%(qC \");\n    compiler0.hasErrors();\n}",
    "testName" : "test05259"
  },
  "test104125" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104125() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Node.newString(\"I_\\\"`I'5PT0%MCgP(4\");\n    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(treeMap0, node0);\n}",
    "testName" : "test104125"
  },
  "test05258" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05258() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];\n    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(\"}7OS6NG%(qC \", diagnosticTypeArray0);\n    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;\n    compiler0.parseTestCode(\"}7OS6NG%(qC \");\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test05258"
  },
  "test06980" : {
    "methodSignature" : "public void optimize()",
    "methodName" : "optimize",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06980() throws Throwable {\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"%name%\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Compiler compiler0 = new Compiler();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.startPass(\"XJPu>\");\n    compiler0.optimize();\n}",
    "testName" : "test06980"
  },
  "test02023" : {
    "methodSignature" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
    "methodName" : "runCallableWithLargeStack",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02023() throws Throwable {\n    Callable<RenameVars> callable0 = (Callable<RenameVars>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    RenameVars renameVars0 = Compiler.runCallableWithLargeStack(callable0);\n}",
    "testName" : "test02023"
  },
  "test04044" : {
    "methodSignature" : "public JSError[] getMessages()",
    "methodName" : "getMessages",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getMessages();\n}",
    "testName" : "test04044"
  },
  "test01720" : {
    "methodSignature" : "VariableMap getPropertyMap()",
    "methodName" : "getPropertyMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01720() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    VariableMap variableMap0 = compiler0.getPropertyMap();\n}",
    "testName" : "test01720"
  },
  "test05767" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05767() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"computeCFG\");\n    stack0.add(jSSourceFile0);\n    stack0.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n}",
    "testName" : "test05767"
  },
  "test05766" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05766() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"computeCFG\");\n    stack0.add(jSSourceFile0);\n    stack0.add(jSSourceFile0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05766"
  },
  "test02932" : {
    "methodSignature" : "void recordFunctionInformation()",
    "methodName" : "recordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02932() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.recordFunctionInformation();\n}",
    "testName" : "test02932"
  },
  "test00912" : {
    "methodSignature" : "CssRenamingMap getCssRenamingMap()",
    "methodName" : "getCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00912() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getCssRenamingMap();\n}",
    "testName" : "test00912"
  },
  "test099119" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099119() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"JSC_MODULE_DEPENDENCY_ERROR\");\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    doReturn((String) null).when(sourceFile_Generator0).getCode();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(\"JSC_MODULE_DEPENDENCY_ERROR\", sourceFile_Generator0);\n    jSModule0.addFirst(jSSourceFile0);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test099119"
  },
  "test0024" : {
    "methodSignature" : "public String[] toSourceArray()",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0024() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray();\n}",
    "testName" : "test0024"
  },
  "test05360" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05360() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"yxaVT%'\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"yxaVT%'\");\n    jSSourceFileArray0[0] = jSSourceFile0;\n    CompilerOptions compilerOptions0 = compiler0.options;\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    compilerOptions0.setCheckGlobalThisLevel(checkLevel0);\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05360"
  },
  "test07384" : {
    "methodSignature" : "protected void removeExternInput(String name)",
    "methodName" : "removeExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07384() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"$\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"$\", \"$\");\n    jSSourceFileArray0[0] = jSSourceFile0;\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.removeExternInput(\"$\");\n}",
    "testName" : "test07384"
  },
  "test08194" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08194() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test08194"
  },
  "test08195" : {
    "methodSignature" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
    "methodName" : "getReverseAbstractInterpreter",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08195() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n}",
    "testName" : "test08195"
  },
  "test06171" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06171() throws Throwable {\n    Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, false);\n}",
    "testName" : "test06171"
  },
  "test07788" : {
    "methodSignature" : "void addIncrementalSourceAst(JsAst ast)",
    "methodName" : "addIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07788() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"\", \"\");\n    jSSourceFileArray0[0] = jSSourceFile0;\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    JsAst jsAst0 = new JsAst(jSSourceFileArray0[0]);\n    compiler0.addIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test07788"
  },
  "test03741" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03741() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"H+TSwrUF4lolL?Kgx\", \"eCFG\");\n    JSModule[] jSModuleArray0 = new JSModule[5];\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test03741"
  },
  "test06575" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06575() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);\n    compiler0.setPassConfig(defaultPassConfig0);\n}",
    "testName" : "test06575"
  },
  "test02528" : {
    "methodSignature" : "FunctionInformationMap getFunctionalInformationMap()",
    "methodName" : "getFunctionalInformationMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02528() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();\n}",
    "testName" : "test02528"
  },
  "test01316" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01316() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"iDMYQ#U+5.L?@3T-0X\");\n    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(treeMap0, node0);\n}",
    "testName" : "test01316"
  },
  "test03337" : {
    "methodSignature" : "public SourceMap getSourceMap()",
    "methodName" : "getSourceMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03337() throws Throwable {\n    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);\n    Compiler compiler0 = new Compiler(loggerErrorManager0);\n    SourceMap sourceMap0 = compiler0.getSourceMap();\n}",
    "testName" : "test03337"
  },
  "test096114" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"JSC_MODULE_DEPENDENCY_ERROR\");\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test096114"
  },
  "test0035" : {
    "methodSignature" : "public String toSource()",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0035() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource();\n}",
    "testName" : "test0035"
  },
  "test04145" : {
    "methodSignature" : "List<CompilerInput> getExternsForTesting()",
    "methodName" : "getExternsForTesting",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04145() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    List<CompilerInput> list0 = compiler0.getExternsForTesting();\n}",
    "testName" : "test04145"
  },
  "test102123" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);\n    compiler0.getErrorManager();\n    compiler0.hasErrors();\n}",
    "testName" : "test102123"
  },
  "test02124" : {
    "methodSignature" : "public LanguageMode languageMode()",
    "methodName" : "languageMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02124() throws Throwable {\n    LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    compiler0.languageMode();\n}",
    "testName" : "test02124"
  },
  "test03842" : {
    "methodSignature" : "void removeChangeHandler(CodeChangeHandler handler)",
    "methodName" : "removeChangeHandler",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03842() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();\n    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);\n}",
    "testName" : "test03842"
  },
  "test05868" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05868() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n}",
    "testName" : "test05868"
  },
  "test07889" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07889() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"iDMYQ#U+5.L?@3T-0X\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"AzLBi\", (Charset) null);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07889"
  },
  "test01821" : {
    "methodSignature" : "Node parseSyntheticCode(String js)",
    "methodName" : "parseSyntheticCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01821() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"}7OS6NG%(qC \");\n}",
    "testName" : "test01821"
  },
  "test093110" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093110() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Region region0 = compiler0.getSourceRegion(\"this.passes has already been assigned\", (-2082408384));\n}",
    "testName" : "test093110"
  },
  "test0046" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0046() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();\n    Node node0 = compiler0.parseTestCode(\"4`rnDcpCv~zUmi(\");\n    compiler0.toSource(compiler_CodeBuilder0, (-1), node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test0046"
  },
  "test06272" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06272() throws Throwable {\n    Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, true);\n}",
    "testName" : "test06272"
  },
  "test08297" : {
    "methodSignature" : "TypeValidator getTypeValidator()",
    "methodName" : "getTypeValidator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08297() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.getTypeValidator();\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n}",
    "testName" : "test08297"
  },
  "test090107" : {
    "methodSignature" : "public int getCharno()",
    "methodName" : "getCharno",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090107() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    String[] stringArray0 = new String[3];\n    JSError jSError0 = JSError.make(\"JSC_EMPTY_MODULE_LIST_ERROR\", (-2134), (-2915), checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);\n    compiler0.report(jSError0);\n    jSError0.getCharno();\n}",
    "testName" : "test090107"
  },
  "test0047" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0047() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();\n    Node node0 = compiler0.parseTestCode(\"4`rnDcpCv~zUmi(\");\n    compiler0.toSource(compiler_CodeBuilder0, (-1), node0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test0047"
  },
  "test08296" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08296() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    compiler0.getTypeValidator();\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test08296"
  },
  "test07081" : {
    "methodSignature" : "void endPass()",
    "methodName" : "endPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07081() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.endPass();\n}",
    "testName" : "test07081"
  },
  "test06676" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06676() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.getPassConfig();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test06676"
  },
  "test05462" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05462() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.checkSymbols = true;\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    compiler0.compileModules(arrayList0, stack0, compilerOptions0);\n}",
    "testName" : "test05462"
  },
  "test05461" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05461() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.checkSymbols = true;\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    compiler0.compileModules(arrayList0, stack0, compilerOptions0);\n    compiler0.hasErrors();\n}",
    "testName" : "test05461"
  },
  "test07485" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07485() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"\");\n    compiler0.removeExternInput((String) null);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07485"
  },
  "test03438" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03438() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test03438"
  },
  "test02225" : {
    "methodSignature" : "void setCssRenamingMap(CssRenamingMap map)",
    "methodName" : "setCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02225() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setCssRenamingMap((CssRenamingMap) null);\n}",
    "testName" : "test02225"
  },
  "test01417" : {
    "methodSignature" : "public void rebuildInputsFromModules()",
    "methodName" : "rebuildInputsFromModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01417() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.rebuildInputsFromModules();\n}",
    "testName" : "test01417"
  },
  "test02629" : {
    "methodSignature" : "public void parse()",
    "methodName" : "parse",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02629() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parse();\n}",
    "testName" : "test02629"
  },
  "test098118" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098118() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compileModules(arrayList0, stack0, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test098118"
  },
  "test0058" : {
    "methodSignature" : "public String[] toSourceArray(final JSModule module)",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0058() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray((JSModule) null);\n}",
    "testName" : "test0058"
  },
  "test07990" : {
    "methodSignature" : "public int getChildCount()",
    "methodName" : "getChildCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07990() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" [testcode] \");\n    node0.addChildrenToBack(node0);\n    node0.getChildCount();\n}",
    "testName" : "test07990"
  },
  "test100120" : {
    "methodSignature" : "public String getAstDotGraph() throws IOException",
    "methodName" : "getAstDotGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100120() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    String string0 = compiler0.getAstDotGraph();\n}",
    "testName" : "test100120"
  },
  "test04246" : {
    "methodSignature" : "void removeTryCatchFinally()",
    "methodName" : "removeTryCatchFinally",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04246() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.removeTryCatchFinally();\n}",
    "testName" : "test04246"
  },
  "test01013" : {
    "methodSignature" : "boolean hasRegExpGlobalReferences()",
    "methodName" : "hasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01013() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n}",
    "testName" : "test01013"
  },
  "test05055" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"(?T\", \"(?T\");\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n    compiler0.optimize();\n    compiler0.getErrorCount();\n}",
    "testName" : "test05055"
  },
  "test05054" : {
    "methodSignature" : "Node parseInputs()",
    "methodName" : "parseInputs",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05054() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"(?T\", \"(?T\");\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.getOptions();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.parseInputs();\n}",
    "testName" : "test05054"
  },
  "test07991" : {
    "methodSignature" : "boolean replaceIncrementalSourceAst(JsAst ast)",
    "methodName" : "replaceIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07991() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" [testcode] \");\n    node0.addChildrenToBack(node0);\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\" [testcode] \", \" [testcode] \");\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test07991"
  },
  "test03033" : {
    "methodSignature" : "List<CompilerInput> getExternsInOrder()",
    "methodName" : "getExternsInOrder",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getExternsInOrder();\n}",
    "testName" : "test03033"
  },
  "test05969" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05969() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);\n}",
    "testName" : "test05969"
  },
  "test02730" : {
    "methodSignature" : "Supplier<String> getUniqueNameIdSupplier()",
    "methodName" : "getUniqueNameIdSupplier",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02730() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();\n}",
    "testName" : "test02730"
  },
  "test01922" : {
    "methodSignature" : "public void processDefines()",
    "methodName" : "processDefines",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01922() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.processDefines();\n}",
    "testName" : "test01922"
  },
  "test06778" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06778() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"$\", \"$\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.check();\n    compiler0.getErrorCount();\n}",
    "testName" : "test06778"
  },
  "test00710" : {
    "methodSignature" : "void resetUniqueNameId()",
    "methodName" : "resetUniqueNameId",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00710() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.resetUniqueNameId();\n}",
    "testName" : "test00710"
  },
  "test03943" : {
    "methodSignature" : "void setHasRegExpGlobalReferences(boolean references)",
    "methodName" : "setHasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03943() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setHasRegExpGlobalReferences(true);\n}",
    "testName" : "test03943"
  },
  "test095113" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"5?5\");\n    Region region0 = compiler0.getSourceRegion(\" [testcode] \", 15);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test095113"
  },
  "test095112" : {
    "methodSignature" : "public Region getSourceRegion(String sourceName, int lineNumber)",
    "methodName" : "getSourceRegion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"5?5\");\n    Region region0 = compiler0.getSourceRegion(\" [testcode] \", 15);\n}",
    "testName" : "test095112"
  },
  "test0069" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0069() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule[] jSModuleArray0 = new JSModule[3];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test0069"
  },
  "test06373" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06373() throws Throwable {\n    Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, false);\n}",
    "testName" : "test06373"
  },
  "test07182" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07182() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.reportCodeChange();\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);\n}",
    "testName" : "test07182"
  },
  "test092109" : {
    "methodSignature" : "public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092109() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"y]`\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<JSSourceFile>) null, (List<JSSourceFile>) null, compilerOptions0);\n}",
    "testName" : "test092109"
  },
  "test05564" : {
    "methodSignature" : "public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05564() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    JSModule jSModule0 = new JSModule(\" nzl9y0'|z\");\n    stack0.add(jSModule0);\n    stack0.add(jSModule0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compileModules(arrayList0, stack0, compilerOptions0);\n}",
    "testName" : "test05564"
  },
  "test06777" : {
    "methodSignature" : "public boolean isExtern()",
    "methodName" : "isExtern",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06777() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"$\", \"$\");\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);\n    jSSourceFile0.isExtern();\n}",
    "testName" : "test06777"
  },
  "test103124" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103124() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.javascript.jscomp.SymbolTable$Symbol\");\n    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    compiler0.updateGlobalVarReferences(treeMap0, node0);\n}",
    "testName" : "test103124"
  },
  "test05563" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05563() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    JSModule jSModule0 = new JSModule(\" nzl9y0'|z\");\n    stack0.add(jSModule0);\n    stack0.add(jSModule0);\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compileModules(arrayList0, stack0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test05563"
  },
  "test08398" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08398() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"Yhy)pH(\\\"1\");\n    compiler0.parseTestCode(\"Yhy)pH(\\\"1\");\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test08398"
  },
  "test07586" : {
    "methodSignature" : "public CompilerInput newExternInput(String name)",
    "methodName" : "newExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07586() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<JSModule> stack0 = new Stack<JSModule>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();\n    compiler0.compileModules(arrayList0, stack0, compilerOptions0);\n    compiler0.newExternInput((String) null);\n}",
    "testName" : "test07586"
  },
  "test02326" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02326() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getWarningCount();\n}",
    "testName" : "test02326"
  },
  "test01114" : {
    "methodSignature" : "public void setState(IntermediateState state)",
    "methodName" : "setState",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    compiler0.setState(compiler_IntermediateState0);\n}",
    "testName" : "test01114"
  },
  "test03539" : {
    "methodSignature" : "public Node getRoot()",
    "methodName" : "getRoot",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03539() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.getRoot();\n}",
    "testName" : "test03539"
  },
  "test04347" : {
    "methodSignature" : "public Scope getTopScope()",
    "methodName" : "getTopScope",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04347() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"com.google.javascript.jscomp.Compiler$3\");\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    Scope scope0 = compiler0.getTopScope();\n}",
    "testName" : "test04347"
  },
  "test01518" : {
    "methodSignature" : "boolean precheck()",
    "methodName" : "precheck",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01518() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.precheck();\n}",
    "testName" : "test01518"
  },
  "test089106" : {
    "methodSignature" : "public boolean acceptEcmaScript5()",
    "methodName" : "acceptEcmaScript5",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"5?5\");\n    boolean boolean0 = compiler0.acceptEcmaScript5();\n}",
    "testName" : "test089106"
  },
  "test03134" : {
    "methodSignature" : "String toSource(Node n)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" [testcode] \");\n    String string0 = compiler0.toSource(node0);\n}",
    "testName" : "test03134"
  },
  "test05157" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05157() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"toSourceArray\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test05157"
  },
  "test03135" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03135() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\" [testcode] \");\n    String string0 = compiler0.toSource(node0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test03135"
  },
  "test05156" : {
    "methodSignature" : "public ErrorManager getErrorManager()",
    "methodName" : "getErrorManager",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05156() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"toSourceArray\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n}",
    "testName" : "test05156"
  },
  "test089105" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089105() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"5?5\");\n    boolean boolean0 = compiler0.acceptEcmaScript5();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test089105"
  },
  "test02831" : {
    "methodSignature" : "SymbolTable buildKnownSymbolTable()",
    "methodName" : "buildKnownSymbolTable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02831() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();\n}",
    "testName" : "test02831"
  },
  "test06879" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06879() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);\n}",
    "testName" : "test06879"
  },
  "test097116" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097116() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test097116"
  },
  "test097117" : {
    "methodSignature" : "public int getSourcePosition()",
    "methodName" : "getSourcePosition",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097117() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);\n    node0.getSourcePosition();\n}",
    "testName" : "test097117"
  },
  "test097115" : {
    "methodSignature" : "public String getSourceFileName()",
    "methodName" : "getSourceFileName",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097115() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();\n    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);\n    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);\n    node0.getSourceFileName();\n}",
    "testName" : "test097115"
  }
}