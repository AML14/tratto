focal_method,test_prefix,docstring
"public int getType() {
    return type;
}","public void test0000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertEquals(125, node0.getType());
}",""
"public boolean isSyntheticBlock() {
    return getBooleanProp(SYNTHETIC_BLOCK_PROP);
}","public void test0001() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertTrue(node0.isSyntheticBlock());
}","/**
 * Returns whether this is a synthetic block that should not be considered
 * a real source block.
 */"
"//------------------------------------------------------------------------
// Parsing
//------------------------------------------------------------------------
/**
 * Parses the externs and main inputs.
 *
 * @return A synthetic root node whose two children are the externs root
 *     and the main root
 */
Node parseInputs() {
    boolean devMode = options.devMode != DevMode.OFF;
    // If old roots exist (we are parsing a second time), detach each of the
    // individual file parse trees.
    if (externsRoot != null) {
        externsRoot.detachChildren();
    }
    if (jsRoot != null) {
        jsRoot.detachChildren();
    }
    // Parse main js sources.
    jsRoot = new Node(Token.BLOCK);
    jsRoot.setIsSyntheticBlock(true);
    externsRoot = new Node(Token.BLOCK);
    externsRoot.setIsSyntheticBlock(true);
    externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);
    externAndJsRoot.setIsSyntheticBlock(true);
    if (options.tracer.isOn()) {
        tracker = new PerformanceTracker(jsRoot, options.tracer == TracerMode.ALL);
        addChangeHandler(tracker.getCodeChangeHandler());
    }
    Tracer tracer = newTracer(""parseInputs"");
    try {
        // Parse externs sources.
        for (CompilerInput input : externs) {
            Node n = input.getAstRoot(this);
            if (hasErrors()) {
                return null;
            }
            externsRoot.addChildToBack(n);
        }
        // Check if the sources need to be re-ordered.
        if (options.manageClosureDependencies) {
            for (CompilerInput input : inputs) {
                input.setCompiler(this);
                // Forward-declare all the provided types, so that they
                // are not flagged even if they are dropped from the process.
                for (String provide : input.getProvides()) {
                    getTypeRegistry().forwardDeclareType(provide);
                }
            }
            try {
                inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(options.manageClosureDependenciesEntryPoints, inputs);
            } catch (CircularDependencyException e) {
                report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                return null;
            } catch (MissingProvideException e) {
                report(JSError.make(MISSING_ENTRY_ERROR, e.getMessage()));
                return null;
            }
        }
        // Check if inputs need to be rebuilt from modules.
        boolean staleInputs = false;
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            // Inputs can have a null AST during initial parse.
            if (n == null) {
                continue;
            }
            if (n.getJSDocInfo() != null) {
                JSDocInfo info = n.getJSDocInfo();
                if (info.isExterns()) {
                    // If the input file is explicitly marked as an externs file, then
                    // assume the programmer made a mistake and throw it into
                    // the externs pile anyways.
                    externsRoot.addChildToBack(n);
                    input.setIsExtern(true);
                    input.getModule().remove(input);
                    externs.add(input);
                    staleInputs = true;
                } else if (info.isNoCompile()) {
                    input.getModule().remove(input);
                    staleInputs = true;
                }
            }
        }
        if (staleInputs) {
            fillEmptyModules(modules);
            rebuildInputsFromModules();
        }
        // Build the AST.
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            if (devMode) {
                runSanityCheck();
                if (hasErrors()) {
                    return null;
                }
            }
            if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {
                // Annotate the nodes in the tree with information from the
                // input file. This information is used to construct the SourceMap.
                SourceInformationAnnotator sia = new SourceInformationAnnotator(input.getName(), options.devMode != DevMode.OFF);
                NodeTraversal.traverse(this, n, sia);
            }
            jsRoot.addChildToBack(n);
        }
        if (hasErrors()) {
            return null;
        }
        return externAndJsRoot;
    } finally {
        stopTracer(tracer, ""parseInputs"");
    }
}","public void test0002() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNotNull(node0);
}",""
"public String toSource(final JSModule module) {
    return runInCompilerThread(new Callable<String>() {

        public String call() throws Exception {
            List<CompilerInput> inputs = module.getInputs();
            int numInputs = inputs.size();
            if (numInputs == 0) {
                return """";
            }
            CodeBuilder cb = new CodeBuilder();
            for (int i = 0; i < numInputs; i++) {
                Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                if (scriptNode == null) {
                    throw new IllegalArgumentException(""Bad module: "" + module.getName());
                }
                toSource(cb, i, scriptNode);
            }
            return cb.toString();
        }
    });
}","public void test0013() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Converts the parse tree for a module back to js code.
 */"
"public String[] toSourceArray() {
    return runInCompilerThread(new Callable<String[]>() {

        public String[] call() throws Exception {
            Tracer tracer = newTracer(""toSourceArray"");
            try {
                int numInputs = inputs.size();
                String[] sources = new String[numInputs];
                CodeBuilder cb = new CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            } finally {
                stopTracer(tracer, ""toSourceArray"");
            }
        }
    });
}","public void test0024() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Converts the parse tree for each input back to js code.
 */"
"//------------------------------------------------------------------------
// Convert back to source code
//------------------------------------------------------------------------
/**
 * Converts the main parse tree back to js code.
 */
public String toSource() {
    return runInCompilerThread(new Callable<String>() {

        public String call() throws Exception {
            Tracer tracer = newTracer(""toSource"");
            try {
                CodeBuilder cb = new CodeBuilder();
                if (jsRoot != null) {
                    int i = 0;
                    for (Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                        toSource(cb, i++, scriptNode);
                    }
                }
                return cb.toString();
            } finally {
                stopTracer(tracer, ""toSource"");
            }
        }
    });
}","public void test0035() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSource();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test0046() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Node node0 = compiler0.parseTestCode(""4`rnDcpCv~zUmi("");
    compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test0047() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();
    Node node0 = compiler0.parseTestCode(""4`rnDcpCv~zUmi("");
    compiler0.toSource(compiler_CodeBuilder0, (-1), node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"public String[] toSourceArray(final JSModule module) {
    return runInCompilerThread(new Callable<String[]>() {

        public String[] call() throws Exception {
            List<CompilerInput> inputs = module.getInputs();
            int numInputs = inputs.size();
            if (numInputs == 0) {
                return new String[0];
            }
            String[] sources = new String[numInputs];
            CodeBuilder cb = new CodeBuilder();
            for (int i = 0; i < numInputs; i++) {
                Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                if (scriptNode == null) {
                    throw new IllegalArgumentException(""Bad module input: "" + inputs.get(i).getName());
                }
                cb.reset();
                toSource(cb, i, scriptNode);
                sources[i] = cb.toString();
            }
            return sources;
        }
    });
}","public void test0058() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.toSourceArray((JSModule) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Converts the parse tree for each input in a module back to js code.
 */"
"public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options) {
    initModules(Lists.<JSSourceFile>newArrayList(externs), Lists.<JSModule>newArrayList(modules), options);
}","public void test0069() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule[] jSModuleArray0 = new JSModule[3];
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Initializes the instance state needed for a compile job if the sources
 * are in modules.
 */"
"@VisibleForTesting
void resetUniqueNameId() {
    uniqueNameId = 0;
}","public void test00710() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.resetUniqueNameId();
}","/**
 * Resets the unique name id counter
 */"
"@Override
CssRenamingMap getCssRenamingMap() {
    return options.cssRenamingMap;
}","public void test00912() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getCssRenamingMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
boolean hasRegExpGlobalReferences() {
    return hasRegExpGlobalReferences;
}","public void test01013() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.hasRegExpGlobalReferences();
    assertTrue(boolean0);
}",""
"public void setState(IntermediateState state) {
    externsRoot = state.externsRoot;
    jsRoot = state.jsRoot;
    externs = state.externs;
    inputs = state.inputs;
    modules = state.modules;
    passes = createPassConfigInternal();
    getPassConfig().setIntermediateState(state.passConfigState);
    typeRegistry = state.typeRegistry;
    setLifeCycleStage(state.lifeCycleStage);
}","public void test01114() throws Throwable {
    Compiler compiler0 = new Compiler();
    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
    compiler0.setState(compiler_IntermediateState0);
}","/**
 * Sets the internal state to the capture given.  Note that this assumes that
 * the input files are already set up.
 */"
"public void disableThreads() {
    useThreads = false;
}","public void test01215() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.disableThreads();
}","/**
 * Disable threads. This is for clients that run on AppEngine and
 * don't have threads.
 */"
"@Override
void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot) {
    Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT || collectionRoot.getType() == Token.BLOCK);
    if (globalRefMap == null) {
        globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
    }
    globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
}","public void test01316() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""iDMYQ#U+5.L?@3T-0X"");
    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",""
"public void rebuildInputsFromModules() {
    inputs = getAllInputsFromModules(modules);
    initInputsByNameMap();
}","public void test01417() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.rebuildInputsFromModules();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Rebuilds the internal list of inputs by iterating over all modules.
 * This is necessary if inputs have been added to or removed from a module
 * after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call.
 */"
"boolean precheck() {
    return true;
}","public void test01518() throws Throwable {
    Compiler compiler0 = new Compiler();
    boolean boolean0 = compiler0.precheck();
    assertTrue(boolean0);
}","/**
 * Carry out any special checks or procedures that need to be done before
 * proceeding with rest of the compilation process.
 *
 * @return true, to continue with compilation
 */"
"ControlFlowGraph<Node> computeCFG() {
    logger.info(""Computing Control Flow Graph"");
    Tracer tracer = newTracer(""computeCFG"");
    ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);
    process(cfa);
    stopTracer(tracer, ""computeCFG"");
    return cfa.getCfg();
}","public void test01619() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.computeCFG();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Control Flow Analysis.
 */"
"VariableMap getPropertyMap() {
    return getPassConfig().getIntermediateState().propertyMap;
}","public void test01720() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getPropertyMap();
    assertNull(variableMap0);
}",""
"@Override
Node parseSyntheticCode(String js) {
    CompilerInput input = new CompilerInput(JSSourceFile.fromCode("" [synthetic] "", js));
    inputsByName.put(input.getName(), input);
    return input.getAstRoot(this);
}","public void test01821() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parseSyntheticCode(""}7OS6NG%(qC "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public void processDefines() {
    (new DefaultPassConfig(options)).processDefines.create(this).process(externsRoot, jsRoot);
}","public void test01922() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.processDefines();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.DefaultPassConfig"", e);
    }
}","/**
 * Reprocesses the current defines over the AST.  This is used by GwtCompiler
 * to generate N outputs for different targets from the same (checked) AST.
 * For each target, we apply the target-specific defines by calling
 * {@code processDefines} and then {@code optimize} to optimize the AST
 * specifically for that target.
 */"
"static <T> T runCallableWithLargeStack(final Callable<T> callable) {
    return runCallable(callable, true, false);
}","public void test02023() throws Throwable {
    Callable<RenameVars> callable0 = (Callable<RenameVars>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    RenameVars renameVars0 = Compiler.runCallableWithLargeStack(callable0);
    assertNull(renameVars0);
}",""
"public LanguageMode languageMode() {
    return options.getLanguageIn();
}","public void test02124() throws Throwable {
    LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(lightweightMessageFormatter0, (PrintStream) null);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    // Undeclared exception!
    try {
        compiler0.languageMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
void setCssRenamingMap(CssRenamingMap map) {
    options.cssRenamingMap = map;
}","public void test02225() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.setCssRenamingMap((CssRenamingMap) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public int getWarningCount() {
    return errorManager.getWarningCount();
}","public void test02326() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getWarningCount();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Gets the number of warnings.
 */"
"VariableMap getVariableMap() {
    return getPassConfig().getIntermediateState().variableMap;
}","public void test02427() throws Throwable {
    Compiler compiler0 = new Compiler();
    VariableMap variableMap0 = compiler0.getVariableMap();
    assertNull(variableMap0);
}",""
"FunctionInformationMap getFunctionalInformationMap() {
    return functionInformationMap;
}","public void test02528() throws Throwable {
    Compiler compiler0 = new Compiler();
    FunctionInformationMap functionInformationMap0 = compiler0.getFunctionalInformationMap();
    assertNull(functionInformationMap0);
}",""
"public void parse() {
    parseInputs();
}","public void test02629() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.parse();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
Supplier<String> getUniqueNameIdSupplier() {
    final Compiler self = this;
    return new Supplier<String>() {

        public String get() {
            return String.valueOf(self.nextUniqueNameId());
        }
    };
}","public void test02730() throws Throwable {
    Compiler compiler0 = new Compiler();
    Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
    assertNotNull(supplier0);
}",""
"SymbolTable buildKnownSymbolTable() {
    SymbolTable symbolTable = new SymbolTable();
    MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
    if (typedScopeCreator != null) {
        symbolTable.addSymbolsFrom(typedScopeCreator);
    }
    GlobalNamespace globalNamespace = ensureDefaultPassConfig().getGlobalNamespace();
    if (globalNamespace != null) {
        symbolTable.addSymbolsFrom(globalNamespace);
    }
    return symbolTable;
}","public void test02831() throws Throwable {
    Compiler compiler0 = new Compiler();
    SymbolTable symbolTable0 = compiler0.buildKnownSymbolTable();
    assertNotNull(symbolTable0);
}",""
"void recordFunctionInformation() {
    logger.info(""Recording function information"");
    startPass(""recordFunctionInformation"");
    RecordFunctionInformation recordFunctionInfoPass = new RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
    process(recordFunctionInfoPass);
    functionInformationMap = recordFunctionInfoPass.getMap();
    endPass();
}","public void test02932() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.recordFunctionInformation();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"List<CompilerInput> getExternsInOrder() {
    return Collections.<CompilerInput>unmodifiableList(externs);
}","public void test03033() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getExternsInOrder();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}","/**
 * Gets the externs in the order in which they are being processed.
 */"
"@Override
String toSource(Node n) {
    initCompilerOptionsIfTesting();
    return toSource(n, null, true);
}","public void test03134() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    String string0 = compiler0.toSource(node0);
    assertEquals(""[testcode]"", string0);
}","/**
 * Generates JavaScript source code for an AST, doesn't generate source
 * map info.
 */"
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test03135() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    String string0 = compiler0.toSource(node0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
JSModuleGraph getModuleGraph() {
    return moduleGraph;
}","public void test03236() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModuleGraph jSModuleGraph0 = compiler0.getModuleGraph();
    assertNull(jSModuleGraph0);
}",""
"public SourceMap getSourceMap() {
    return sourceMap;
}","public void test03337() throws Throwable {
    LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager((Logger) null);
    Compiler compiler0 = new Compiler(loggerErrorManager0);
    SourceMap sourceMap0 = compiler0.getSourceMap();
    assertNull(sourceMap0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test03438() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.isTypeCheckingEnabled();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public Node getRoot() {
    return externAndJsRoot;
}","public void test03539() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.getRoot();
    assertNull(node0);
}",""
"@VisibleForTesting
List<CompilerInput> getInputsForTesting() {
    return inputs;
}","public void test03640() throws Throwable {
    MockFile mockFile0 = new MockFile(""com.google.javascript.jscomp.Compiler$3"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    List<CompilerInput> list0 = compiler0.getInputsForTesting();
    assertNull(list0);
}",""
"public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options) {
    return compile(new JSSourceFile[] { extern }, modules, options);
}","public void test03741() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""H+TSwrUF4lolL?Kgx"", ""eCFG"");
    JSModule[] jSModuleArray0 = new JSModule[5];
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    // Undeclared exception!
    try {
        compiler0.compile(jSSourceFile0, jSModuleArray0, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@Override
void removeChangeHandler(CodeChangeHandler handler) {
    codeChangeHandlers.remove(handler);
}","public void test03842() throws Throwable {
    Compiler compiler0 = new Compiler();
    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();
    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);
}",""
"@Override
void setHasRegExpGlobalReferences(boolean references) {
    hasRegExpGlobalReferences = references;
}","public void test03943() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.setHasRegExpGlobalReferences(true);
}",""
"public JSError[] getMessages() {
    return getErrors();
}","public void test04044() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.getMessages();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Returns an array constructed from errors + temporary warnings.
 */"
"@VisibleForTesting
List<CompilerInput> getExternsForTesting() {
    return externs;
}","public void test04145() throws Throwable {
    Compiler compiler0 = new Compiler();
    List<CompilerInput> list0 = compiler0.getExternsForTesting();
    assertNull(list0);
}",""
"void removeTryCatchFinally() {
    logger.info(""Remove try/catch/finally"");
    startPass(""removeTryCatchFinally"");
    RemoveTryCatch r = new RemoveTryCatch(this);
    process(r);
    endPass();
}","public void test04246() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.removeTryCatchFinally();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Removes try/catch/finally statements for easier debugging.
 */"
"@Override
public Scope getTopScope() {
    return getPassConfig().getTopScope();
}","public void test04347() throws Throwable {
    MockFile mockFile0 = new MockFile(""com.google.javascript.jscomp.Compiler$3"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
    Compiler compiler0 = new Compiler(printStreamErrorManager0);
    Scope scope0 = compiler0.getTopScope();
    assertNull(scope0);
}",""
"@Override
ReferenceMap getGlobalVarReferences() {
    return globalRefMap;
}","public void test04448() throws Throwable {
    Compiler compiler0 = new Compiler();
    ReferenceCollectingCallback.ReferenceMap referenceCollectingCallback_ReferenceMap0 = compiler0.getGlobalVarReferences();
    assertNull(referenceCollectingCallback_ReferenceMap0);
}",""
"//------------------------------------------------------------------------
// Parsing
//------------------------------------------------------------------------
/**
 * Parses the externs and main inputs.
 *
 * @return A synthetic root node whose two children are the externs root
 *     and the main root
 */
Node parseInputs() {
    boolean devMode = options.devMode != DevMode.OFF;
    // If old roots exist (we are parsing a second time), detach each of the
    // individual file parse trees.
    if (externsRoot != null) {
        externsRoot.detachChildren();
    }
    if (jsRoot != null) {
        jsRoot.detachChildren();
    }
    // Parse main js sources.
    jsRoot = new Node(Token.BLOCK);
    jsRoot.setIsSyntheticBlock(true);
    externsRoot = new Node(Token.BLOCK);
    externsRoot.setIsSyntheticBlock(true);
    externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);
    externAndJsRoot.setIsSyntheticBlock(true);
    if (options.tracer.isOn()) {
        tracker = new PerformanceTracker(jsRoot, options.tracer == TracerMode.ALL);
        addChangeHandler(tracker.getCodeChangeHandler());
    }
    Tracer tracer = newTracer(""parseInputs"");
    try {
        // Parse externs sources.
        for (CompilerInput input : externs) {
            Node n = input.getAstRoot(this);
            if (hasErrors()) {
                return null;
            }
            externsRoot.addChildToBack(n);
        }
        // Check if the sources need to be re-ordered.
        if (options.manageClosureDependencies) {
            for (CompilerInput input : inputs) {
                input.setCompiler(this);
                // Forward-declare all the provided types, so that they
                // are not flagged even if they are dropped from the process.
                for (String provide : input.getProvides()) {
                    getTypeRegistry().forwardDeclareType(provide);
                }
            }
            try {
                inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(options.manageClosureDependenciesEntryPoints, inputs);
            } catch (CircularDependencyException e) {
                report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                return null;
            } catch (MissingProvideException e) {
                report(JSError.make(MISSING_ENTRY_ERROR, e.getMessage()));
                return null;
            }
        }
        // Check if inputs need to be rebuilt from modules.
        boolean staleInputs = false;
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            // Inputs can have a null AST during initial parse.
            if (n == null) {
                continue;
            }
            if (n.getJSDocInfo() != null) {
                JSDocInfo info = n.getJSDocInfo();
                if (info.isExterns()) {
                    // If the input file is explicitly marked as an externs file, then
                    // assume the programmer made a mistake and throw it into
                    // the externs pile anyways.
                    externsRoot.addChildToBack(n);
                    input.setIsExtern(true);
                    input.getModule().remove(input);
                    externs.add(input);
                    staleInputs = true;
                } else if (info.isNoCompile()) {
                    input.getModule().remove(input);
                    staleInputs = true;
                }
            }
        }
        if (staleInputs) {
            fillEmptyModules(modules);
            rebuildInputsFromModules();
        }
        // Build the AST.
        for (CompilerInput input : inputs) {
            Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            if (devMode) {
                runSanityCheck();
                if (hasErrors()) {
                    return null;
                }
            }
            if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {
                // Annotate the nodes in the tree with information from the
                // input file. This information is used to construct the SourceMap.
                SourceInformationAnnotator sia = new SourceInformationAnnotator(input.getName(), options.devMode != DevMode.OFF);
                NodeTraversal.traverse(this, n, sia);
            }
            jsRoot.addChildToBack(n);
        }
        if (hasErrors()) {
            return null;
        }
        return externAndJsRoot;
    } finally {
        stopTracer(tracer, ""parseInputs"");
    }
}","public void test05054() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""(?T"", ""(?T"");
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    assertNull(node0);
}",""
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05055() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseSyntheticCode(""(?T"", ""(?T"");
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    CompilerOptions compilerOptions0 = compiler0.getOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.parseInputs();
    compiler0.optimize();
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"@Override
public ErrorManager getErrorManager() {
    if (options == null) {
        initOptions(new CompilerOptions());
    }
    return errorManager;
}","public void test05156() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""toSourceArray"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test05157() throws Throwable {
    MockPrintStream mockPrintStream0 = new MockPrintStream(""toSourceArray"");
    Compiler compiler0 = new Compiler(mockPrintStream0);
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test05258() throws Throwable {
    Compiler compiler0 = new Compiler();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(""}7OS6NG%(qC "", diagnosticTypeArray0);
    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
    compiler0.parseTestCode(""}7OS6NG%(qC "");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test05259() throws Throwable {
    Compiler compiler0 = new Compiler();
    DiagnosticType[] diagnosticTypeArray0 = new DiagnosticType[0];
    DiagnosticGroup diagnosticGroup0 = new DiagnosticGroup(""}7OS6NG%(qC "", diagnosticTypeArray0);
    DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
    compiler0.parseTestCode(""}7OS6NG%(qC "");
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05360() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""yxaVT%'"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""yxaVT%'"");
    jSSourceFileArray0[0] = jSSourceFile0;
    CompilerOptions compilerOptions0 = compiler0.options;
    CheckLevel checkLevel0 = CheckLevel.ERROR;
    compilerOptions0.setCheckGlobalThisLevel(checkLevel0);
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test05461() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.checkSymbols = true;
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertTrue(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options) {
    // The compile method should only be called once.
    Preconditions.checkState(jsRoot == null);
    try {
        initModules(externs, modules, options);
        if (hasErrors()) {
            return getResult();
        }
        return compile();
    } finally {
        Tracer t = newTracer(""generateReport"");
        errorManager.generateReport();
        stopTracer(t, ""generateReport"");
    }
}","public void test05462() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.checkSymbols = true;
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}","/**
 * Compiles a list of modules.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05563() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    JSModule jSModule0 = new JSModule("" nzl9y0'|z"");
    stack0.add(jSModule0);
    stack0.add(jSModule0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options) {
    // The compile method should only be called once.
    Preconditions.checkState(jsRoot == null);
    try {
        initModules(externs, modules, options);
        if (hasErrors()) {
            return getResult();
        }
        return compile();
    } finally {
        Tracer t = newTracer(""generateReport"");
        errorManager.generateReport();
        stopTracer(t, ""generateReport"");
    }
}","public void test05564() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    JSModule jSModule0 = new JSModule("" nzl9y0'|z"");
    stack0.add(jSModule0);
    stack0.add(jSModule0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}","/**
 * Compiles a list of modules.
 */"
"@Override
public boolean isExtern() {
    return isExternFile;
}","public void test05665() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compilerOptions0.sourceMapOutputPath = ""$"";
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertTrue(jSSourceFile0.isExtern());
}","/**
 * Returns whether this is an extern.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test05766() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""computeCFG"");
    stack0.add(jSSourceFile0);
    stack0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    assertEquals(2, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options) {
    // The compile method should only be called once.
    Preconditions.checkState(jsRoot == null);
    try {
        init(externs, inputs, options);
        if (hasErrors()) {
            return getResult();
        }
        return compile();
    } finally {
        Tracer t = newTracer(""generateReport"");
        errorManager.generateReport();
        stopTracer(t, ""generateReport"");
    }
}","public void test05767() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""computeCFG"");
    stack0.add(jSSourceFile0);
    stack0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    assertFalse(compilerOptions0.checkTypes);
}","/**
 * Compiles a list of inputs.
 */"
"public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options) {
    // The compile method should only be called once.
    Preconditions.checkState(jsRoot == null);
    try {
        init(externs, inputs, options);
        if (hasErrors()) {
            return getResult();
        }
        return compile();
    } finally {
        Tracer t = newTracer(""generateReport"");
        errorManager.generateReport();
        stopTracer(t, ""generateReport"");
    }
}","public void test05868() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Compiles a list of inputs.
 */"
"public Result compileModules(List<JSSourceFile> externs, List<JSModule> modules, CompilerOptions options) {
    // The compile method should only be called once.
    Preconditions.checkState(jsRoot == null);
    try {
        initModules(externs, modules, options);
        if (hasErrors()) {
            return getResult();
        }
        return compile();
    } finally {
        Tracer t = newTracer(""generateReport"");
        errorManager.generateReport();
        stopTracer(t, ""generateReport"");
    }
}","public void test05969() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) arrayList0, (List<JSSourceFile>) arrayList0, compilerOptions0);
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    // Undeclared exception!
    try {
        compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Compiles a list of modules.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test06070() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    JSModule jSModule0 = new JSModule((String) null);
    linkedList0.add(jSModule0);
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"@SuppressWarnings(""unchecked"")
static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace) {
    // Under JRE 1.6, the jscompiler overflows the stack when running on some
    // large or complex js code. Here we start a new thread with a larger
    // stack in order to let the compiler do its thing, without having to
    // increase the stack size for *every* thread (which is what -Xss does).
    // Might want to add thread pool support for clients that compile a lot.
    final boolean dumpTraceReport = trace;
    final Object[] result = new Object[1];
    final Throwable[] exception = new Throwable[1];
    Runnable runnable = new Runnable() {

        public void run() {
            try {
                if (dumpTraceReport) {
                    Tracer.initCurrentThreadTrace();
                }
                result[0] = callable.call();
            } catch (Throwable e) {
                exception[0] = e;
            } finally {
                if (dumpTraceReport) {
                    Tracer.logAndClearCurrentThreadTrace();
                }
            }
        }
    };
    if (useLargeStackThread) {
        Thread th = new Thread(null, runnable, ""jscompiler"", COMPILER_STACK_SIZE);
        th.start();
        while (true) {
            try {
                th.join();
                break;
            } catch (InterruptedException ignore) {
                // ignore
            }
        }
    } else {
        runnable.run();
    }
    // Pass on any exception caught by the runnable object.
    if (exception[0] != null) {
        throw new RuntimeException(exception[0]);
    }
    return (T) result[0];
}","public void test06171() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, false);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"@SuppressWarnings(""unchecked"")
static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace) {
    // Under JRE 1.6, the jscompiler overflows the stack when running on some
    // large or complex js code. Here we start a new thread with a larger
    // stack in order to let the compiler do its thing, without having to
    // increase the stack size for *every* thread (which is what -Xss does).
    // Might want to add thread pool support for clients that compile a lot.
    final boolean dumpTraceReport = trace;
    final Object[] result = new Object[1];
    final Throwable[] exception = new Throwable[1];
    Runnable runnable = new Runnable() {

        public void run() {
            try {
                if (dumpTraceReport) {
                    Tracer.initCurrentThreadTrace();
                }
                result[0] = callable.call();
            } catch (Throwable e) {
                exception[0] = e;
            } finally {
                if (dumpTraceReport) {
                    Tracer.logAndClearCurrentThreadTrace();
                }
            }
        }
    };
    if (useLargeStackThread) {
        Thread th = new Thread(null, runnable, ""jscompiler"", COMPILER_STACK_SIZE);
        th.start();
        while (true) {
            try {
                th.join();
                break;
            } catch (InterruptedException ignore) {
                // ignore
            }
        }
    } else {
        runnable.run();
    }
    // Pass on any exception caught by the runnable object.
    if (exception[0] != null) {
        throw new RuntimeException(exception[0]);
    }
    return (T) result[0];
}","public void test06272() throws Throwable {
    Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, true);
    assertNull(crossModuleCodeMotion0);
}",""
"@SuppressWarnings(""unchecked"")
static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace) {
    // Under JRE 1.6, the jscompiler overflows the stack when running on some
    // large or complex js code. Here we start a new thread with a larger
    // stack in order to let the compiler do its thing, without having to
    // increase the stack size for *every* thread (which is what -Xss does).
    // Might want to add thread pool support for clients that compile a lot.
    final boolean dumpTraceReport = trace;
    final Object[] result = new Object[1];
    final Throwable[] exception = new Throwable[1];
    Runnable runnable = new Runnable() {

        public void run() {
            try {
                if (dumpTraceReport) {
                    Tracer.initCurrentThreadTrace();
                }
                result[0] = callable.call();
            } catch (Throwable e) {
                exception[0] = e;
            } finally {
                if (dumpTraceReport) {
                    Tracer.logAndClearCurrentThreadTrace();
                }
            }
        }
    };
    if (useLargeStackThread) {
        Thread th = new Thread(null, runnable, ""jscompiler"", COMPILER_STACK_SIZE);
        th.start();
        while (true) {
            try {
                th.join();
                break;
            } catch (InterruptedException ignore) {
                // ignore
            }
        }
    } else {
        runnable.run();
    }
    // Pass on any exception caught by the runnable object.
    if (exception[0] != null) {
        throw new RuntimeException(exception[0]);
    }
    return (T) result[0];
}","public void test06373() throws Throwable {
    Callable<CrossModuleCodeMotion> callable0 = (Callable<CrossModuleCodeMotion>) mock(Callable.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(callable0).call();
    CrossModuleCodeMotion crossModuleCodeMotion0 = Compiler.runCallable(callable0, false, false);
    assertNull(crossModuleCodeMotion0);
}",""
"@SuppressWarnings(""unchecked"")
static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace) {
    // Under JRE 1.6, the jscompiler overflows the stack when running on some
    // large or complex js code. Here we start a new thread with a larger
    // stack in order to let the compiler do its thing, without having to
    // increase the stack size for *every* thread (which is what -Xss does).
    // Might want to add thread pool support for clients that compile a lot.
    final boolean dumpTraceReport = trace;
    final Object[] result = new Object[1];
    final Throwable[] exception = new Throwable[1];
    Runnable runnable = new Runnable() {

        public void run() {
            try {
                if (dumpTraceReport) {
                    Tracer.initCurrentThreadTrace();
                }
                result[0] = callable.call();
            } catch (Throwable e) {
                exception[0] = e;
            } finally {
                if (dumpTraceReport) {
                    Tracer.logAndClearCurrentThreadTrace();
                }
            }
        }
    };
    if (useLargeStackThread) {
        Thread th = new Thread(null, runnable, ""jscompiler"", COMPILER_STACK_SIZE);
        th.start();
        while (true) {
            try {
                th.join();
                break;
            } catch (InterruptedException ignore) {
                // ignore
            }
        }
    } else {
        runnable.run();
    }
    // Pass on any exception caught by the runnable object.
    if (exception[0] != null) {
        throw new RuntimeException(exception[0]);
    }
    return (T) result[0];
}","public void test06474() throws Throwable {
    // Undeclared exception!
    try {
        Compiler.runCallable((Callable<CrossModuleCodeMotion>) null, false, true);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.lang.NullPointerException
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public void setPassConfig(PassConfig passes) {
    // Important to check for null because if setPassConfig(null) is
    // called before this.passes is set, getPassConfig() will create a
    // new PassConfig object and use that, which is probably not what
    // the client wanted since he or she probably meant to use their
    // own PassConfig object.
    Preconditions.checkNotNull(passes);
    if (this.passes != null) {
        throw new IllegalStateException(""this.passes has already been assigned"");
    }
    this.passes = passes;
}","public void test06575() throws Throwable {
    Compiler compiler0 = new Compiler();
    DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig((CompilerOptions) null);
    compiler0.setPassConfig(defaultPassConfig0);
}","/**
 * @param passes The PassConfig to use with this Compiler.
 * @throws NullPointerException if passes is null
 * @throws IllegalStateException if this.passes has already been assigned
 */"
"public void setPassConfig(PassConfig passes) {
    // Important to check for null because if setPassConfig(null) is
    // called before this.passes is set, getPassConfig() will create a
    // new PassConfig object and use that, which is probably not what
    // the client wanted since he or she probably meant to use their
    // own PassConfig object.
    Preconditions.checkNotNull(passes);
    if (this.passes != null) {
        throw new IllegalStateException(""this.passes has already been assigned"");
    }
    this.passes = passes;
}","public void test06676() throws Throwable {
    Compiler compiler0 = new Compiler();
    PassConfig passConfig0 = compiler0.getPassConfig();
    // Undeclared exception!
    try {
        compiler0.setPassConfig(passConfig0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // this.passes has already been assigned
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * @param passes The PassConfig to use with this Compiler.
 * @throws NullPointerException if passes is null
 * @throws IllegalStateException if this.passes has already been assigned
 */"
"@Override
public boolean isExtern() {
    return isExternFile;
}","public void test06777() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    assertTrue(jSSourceFile0.isExtern());
}","/**
 * Returns whether this is an extern.
 */"
"public int getErrorCount() {
    return errorManager.getErrorCount();
}","public void test06778() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.parseInputs();
    compiler0.check();
    assertEquals(1, compiler0.getErrorCount());
}","/**
 * Gets the number of errors.
 */"
"void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {
    logger.info(""Strip code"");
    startPass(""stripCode"");
    StripCode r = new StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
    if (options.getTweakProcessing().shouldStrip()) {
        r.enableTweakStripping();
    }
    process(r);
    endPass();
}","public void test06879() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Strips code for smaller compiled code. This is useful for removing debug
 * statements to prevent leaking them publicly.
 */"
"//------------------------------------------------------------------------
// Optimizations
//------------------------------------------------------------------------
public void optimize() {
    // Ideally, this pass should be the first pass run, however:
    // 1) VariableReferenceCheck reports unexpected warnings if Normalize
    // is done first.
    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on
    // unmodified local names.
    normalize();
    PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);
    if (options.devMode == DevMode.EVERY_PASS) {
        phaseOptimizer.setSanityCheck(sanityCheck);
    }
    phaseOptimizer.consume(getPassConfig().getOptimizations());
    phaseOptimizer.process(externsRoot, jsRoot);
    if (hasErrors()) {
        return;
    }
}","public void test06980() throws Throwable {
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""%name%"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Compiler compiler0 = new Compiler();
    compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
    compiler0.startPass(""XJPu>"");
    // Undeclared exception!
    try {
        compiler0.optimize();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"void endPass() {
    Preconditions.checkState(currentTracer != null, ""Tracer should not be null at the end of a pass."");
    stopTracer(currentTracer, currentPassName);
    String passToCheck = currentPassName;
    currentPassName = null;
    currentTracer = null;
    maybeSanityCheck();
}","public void test07081() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.endPass();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Tracer should not be null at the end of a pass.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Marks the end of a pass.
 */"
"void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {
    logger.info(""Strip code"");
    startPass(""stripCode"");
    StripCode r = new StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
    if (options.getTweakProcessing().shouldStrip()) {
        r.enableTweakStripping();
    }
    process(r);
    endPass();
}","public void test07182() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.reportCodeChange();
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        compiler0.stripCode(treeSet0, treeSet0, treeSet0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Strips code for smaller compiled code. This is useful for removing debug
 * statements to prevent leaking them publicly.
 */"
"@Override
boolean areNodesEqualForInlining(Node n1, Node n2) {
    if (options.ambiguateProperties || options.disambiguateProperties) {
        // The type based optimizations require that type information is preserved
        // during other optimizations.
        return n1.isEquivalentToTyped(n2);
    } else {
        return n1.isEquivalentTo(n2);
    }
}","public void test07283() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    // Undeclared exception!
    try {
        compiler0.areNodesEqualForInlining((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"protected void removeExternInput(String name) {
    CompilerInput input = getInput(name);
    if (input == null) {
        return;
    }
    Preconditions.checkState(input.isExtern(), ""Not an extern input: "" + input.getName());
    inputsByName.remove(name);
    externs.remove(input);
    Node root = input.getAstRoot(this);
    if (root != null) {
        root.detachFromParent();
    }
}","public void test07384() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""$"");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""$"", ""$"");
    jSSourceFileArray0[0] = jSSourceFile0;
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.removeExternInput(""$"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Removes an input file from AST.
 * @param name The name of the file to be removed.
 */"
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test07485() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode("""");
    compiler0.removeExternInput((String) null);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
public CompilerInput newExternInput(String name) {
    if (inputsByName.containsKey(name)) {
        throw new IllegalArgumentException(""Conflicting externs name: "" + name);
    }
    SourceAst ast = new SyntheticAst(name);
    CompilerInput input = new CompilerInput(ast, name, true);
    inputsByName.put(name, input);
    externsRoot.addChildToFront(ast.getAstRoot(this));
    externs.add(0, input);
    return input;
}","public void test07586() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.newExternInput((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // a source must have a name
        //
        verifyException(""com.google.javascript.jscomp.SourceFile"", e);
    }
}",""
"@Override
public CompilerInput newExternInput(String name) {
    if (inputsByName.containsKey(name)) {
        throw new IllegalArgumentException(""Conflicting externs name: "" + name);
    }
    SourceAst ast = new SyntheticAst(name);
    CompilerInput input = new CompilerInput(ast, name, true);
    inputsByName.put(name, input);
    externsRoot.addChildToFront(ast.getAstRoot(this));
    externs.add(0, input);
    return input;
}","public void test07687() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(""yxaVT%'"", ""yxaVT%'"");
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    stack0.add(jSSourceFile0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.newExternInput(""yxaVT%'"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Conflicting externs name: yxaVT%'
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"void addIncrementalSourceAst(JsAst ast) {
    String intputName = ast.getSourceFile().getName();
    Preconditions.checkState(getInput(intputName) == null, ""Duplicate input of name "" + intputName);
    inputsByName.put(intputName, new CompilerInput(ast));
}","public void test07788() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode("""");
    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[1];
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("""", """");
    jSSourceFileArray0[0] = jSSourceFile0;
    CompilerOptions compilerOptions0 = compiler0.options;
    compiler0.init(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);
    JsAst jsAst0 = new JsAst(jSSourceFileArray0[0]);
    // Undeclared exception!
    try {
        compiler0.addIncrementalSourceAst(jsAst0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Duplicate input of name 
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add a source input dynamically. Intended for incremental compilation.
 */"
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test07889() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""iDMYQ#U+5.L?@3T-0X"");
    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(""AzLBi"", (Charset) null);
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    compiler0.addIncrementalSourceAst(jsAst0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test07990() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    node0.addChildrenToBack(node0);
    assertEquals(2, node0.getChildCount());
}",""
"boolean replaceIncrementalSourceAst(JsAst ast) {
    String inputName = ast.getSourceFile().getName();
    CompilerInput oldInput = Preconditions.checkNotNull(getInput(inputName), ""No input to replace: "" + inputName);
    Node newRoot = ast.getAstRoot(this);
    if (newRoot == null) {
        return false;
    }
    Node oldRoot = oldInput.getAstRoot(this);
    if (oldRoot != null) {
        oldRoot.getParent().replaceChild(oldRoot, newRoot);
    } else {
        getRoot().getLastChild().addChildToBack(newRoot);
    }
    CompilerInput newInput = new CompilerInput(ast);
    inputsByName.put(inputName, newInput);
    JSModule module = oldInput.getModule();
    if (module != null) {
        module.addAfter(newInput, oldInput);
        module.remove(oldInput);
    }
    return true;
}","public void test07991() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode("" [testcode] "");
    node0.addChildrenToBack(node0);
    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("" [testcode] "", "" [testcode] "");
    JsAst jsAst0 = new JsAst(jSSourceFile0);
    boolean boolean0 = compiler0.replaceIncrementalSourceAst(jsAst0);
    assertTrue(boolean0);
}","/**
 * Replace a source input dynamically. Intended for incremental
 * re-compilation.
 *
 * If the new source input doesn't parse, then keep the old input
 * in the AST and return false.
 *
 * @return Whether the new AST was attached successfully.
 */"
"@Override
public ErrorManager getErrorManager() {
    if (options == null) {
        initOptions(new CompilerOptions());
    }
    return errorManager;
}","public void test08092() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    assertNotNull(errorManager0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test08093() throws Throwable {
    Compiler compiler0 = new Compiler();
    ErrorManager errorManager0 = compiler0.getErrorManager();
    TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test08194() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
public ReverseAbstractInterpreter getReverseAbstractInterpreter() {
    if (abstractInterpreter == null) {
        ChainableReverseAbstractInterpreter interpreter = new SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
        if (options.closurePass) {
            interpreter = new ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
        }
        abstractInterpreter = interpreter;
    }
    return abstractInterpreter;
}","public void test08195() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getReverseAbstractInterpreter();
    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
    assertNotNull(reverseAbstractInterpreter0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test08296() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getTypeValidator();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
TypeValidator getTypeValidator() {
    if (typeValidator == null) {
        typeValidator = new TypeValidator(this);
    }
    return typeValidator;
}","public void test08297() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    compiler0.getTypeValidator();
    TypeValidator typeValidator0 = compiler0.getTypeValidator();
    assertNotNull(typeValidator0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test08398() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""Yhy)pH(\""1"");
    compiler0.parseTestCode(""Yhy)pH(\""1"");
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"boolean isInliningForbidden() {
    return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC || options.propertyRenaming == PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
}","public void test088103() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(boolean0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test088104() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();
    compiler0.compileModules(arrayList0, linkedList0, compilerOptions0);
    boolean boolean0 = compiler0.isInliningForbidden();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test089105() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"@Override
public boolean acceptEcmaScript5() {
    switch(options.getLanguageIn()) {
        case ECMASCRIPT5:
        case ECMASCRIPT5_STRICT:
            return true;
    }
    return false;
}","public void test089106() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    boolean boolean0 = compiler0.acceptEcmaScript5();
    assertFalse(boolean0);
}",""
"public int getCharno() {
    return charno;
}","public void test090107() throws Throwable {
    Compiler compiler0 = new Compiler();
    CheckLevel checkLevel0 = CheckLevel.OFF;
    String[] stringArray0 = new String[3];
    JSError jSError0 = JSError.make(""JSC_EMPTY_MODULE_LIST_ERROR"", (-2134), (-2915), checkLevel0, compiler0.MOTION_ITERATIONS_ERROR, stringArray0);
    compiler0.report(jSError0);
    assertEquals((-2915), jSError0.getCharno());
}","/**
 * Get the character number.
 */"
"@Override
void throwInternalError(String message, Exception cause) {
    String finalMessage = ""INTERNAL COMPILER ERROR.\n"" + ""Please report this problem.\n"" + message;
    RuntimeException e = new RuntimeException(finalMessage, cause);
    if (cause != null) {
        e.setStackTrace(cause.getStackTrace());
    }
    throw e;
}","public void test091108() throws Throwable {
    Compiler compiler0 = new Compiler();
    // Undeclared exception!
    try {
        compiler0.throwInternalError(""o9-`\""+UyN(Zj;n+"", (Exception) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // o9-`\""+UyN(Zj;n+
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Report an internal error.
 */"
"public Result compile(List<JSSourceFile> externs, List<JSSourceFile> inputs, CompilerOptions options) {
    // The compile method should only be called once.
    Preconditions.checkState(jsRoot == null);
    try {
        init(externs, inputs, options);
        if (hasErrors()) {
            return getResult();
        }
        return compile();
    } finally {
        Tracer t = newTracer(""generateReport"");
        errorManager.generateReport();
        stopTracer(t, ""generateReport"");
    }
}","public void test092109() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""y]`"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        compiler0.compile((List<JSSourceFile>) null, (List<JSSourceFile>) null, compilerOptions0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}","/**
 * Compiles a list of inputs.
 */"
"public Region getSourceRegion(String sourceName, int lineNumber) {
    if (lineNumber < 1) {
        return null;
    }
    SourceFile input = getSourceFileByName(sourceName);
    if (input != null) {
        return input.getRegion(lineNumber);
    }
    return null;
}","public void test093110() throws Throwable {
    Compiler compiler0 = new Compiler();
    Region region0 = compiler0.getSourceRegion(""this.passes has already been assigned"", (-2082408384));
    assertNull(region0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test094111() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    compiler0.getSourceRegion(""toSourceArray"", 15);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"public Region getSourceRegion(String sourceName, int lineNumber) {
    if (lineNumber < 1) {
        return null;
    }
    SourceFile input = getSourceFileByName(sourceName);
    if (input != null) {
        return input.getRegion(lineNumber);
    }
    return null;
}","public void test095112() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    Region region0 = compiler0.getSourceRegion("" [testcode] "", 15);
    assertNull(region0);
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test095113() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.parseTestCode(""5?5"");
    Region region0 = compiler0.getSourceRegion("" [testcode] "", 15);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"//------------------------------------------------------------------------
// Package-private helpers
//------------------------------------------------------------------------
@Override
Node getNodeForCodeInsertion(JSModule module) {
    if (module == null) {
        if (inputs.isEmpty()) {
            throw new IllegalStateException(""No inputs"");
        }
        return inputs.get(0).getAstRoot(this);
    }
    List<CompilerInput> moduleInputs = module.getInputs();
    if (moduleInputs.size() > 0) {
        return moduleInputs.get(0).getAstRoot(this);
    }
    throw new IllegalStateException(""Root module has no inputs"");
}","public void test096114() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""JSC_MODULE_DEPENDENCY_ERROR"");
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Root module has no inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public String getSourceFileName() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? null : file.getName();
}","public void test097115() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(""[[singleton]]"", node0.getSourceFileName());
}",""
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test097116() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test097117() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Stack<JSSourceFile> stack0 = new Stack<JSSourceFile>();
    compiler0.compile((List<JSSourceFile>) stack0, (List<JSSourceFile>) stack0, compilerOptions0);
    Node node0 = compiler0.getNodeForCodeInsertion((JSModule) null);
    assertEquals(4096, node0.getSourcePosition());
}",""
"//------------------------------------------------------------------------
// Package-private helpers
//------------------------------------------------------------------------
@Override
Node getNodeForCodeInsertion(JSModule module) {
    if (module == null) {
        if (inputs.isEmpty()) {
            throw new IllegalStateException(""No inputs"");
        }
        return inputs.get(0).getAstRoot(this);
    }
    List<CompilerInput> moduleInputs = module.getInputs();
    if (moduleInputs.size() > 0) {
        return moduleInputs.get(0).getAstRoot(this);
    }
    throw new IllegalStateException(""Root module has no inputs"");
}","public void test098118() throws Throwable {
    Compiler compiler0 = new Compiler();
    Stack<JSModule> stack0 = new Stack<JSModule>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    ArrayList<JSSourceFile> arrayList0 = new ArrayList<JSSourceFile>();
    compiler0.compileModules(arrayList0, stack0, compilerOptions0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion((JSModule) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No inputs
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"//------------------------------------------------------------------------
// Package-private helpers
//------------------------------------------------------------------------
@Override
Node getNodeForCodeInsertion(JSModule module) {
    if (module == null) {
        if (inputs.isEmpty()) {
            throw new IllegalStateException(""No inputs"");
        }
        return inputs.get(0).getAstRoot(this);
    }
    List<CompilerInput> moduleInputs = module.getInputs();
    if (moduleInputs.size() > 0) {
        return moduleInputs.get(0).getAstRoot(this);
    }
    throw new IllegalStateException(""Root module has no inputs"");
}","public void test099119() throws Throwable {
    Compiler compiler0 = new Compiler();
    JSModule jSModule0 = new JSModule(""JSC_MODULE_DEPENDENCY_ERROR"");
    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(sourceFile_Generator0).getCode();
    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(""JSC_MODULE_DEPENDENCY_ERROR"", sourceFile_Generator0);
    jSModule0.addFirst(jSSourceFile0);
    // Undeclared exception!
    try {
        compiler0.getNodeForCodeInsertion(jSModule0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.Compiler"", e);
    }
}",""
"public String getAstDotGraph() throws IOException {
    if (jsRoot != null) {
        ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);
        cfa.process(null, jsRoot);
        return DotFormatter.toDot(jsRoot, cfa.getCfg());
    } else {
        return """";
    }
}","public void test100120() throws Throwable {
    Compiler compiler0 = new Compiler();
    String string0 = compiler0.getAstDotGraph();
    assertEquals("""", string0);
}","/**
 * Gets the DOT graph of the AST generated at the end of compilation.
 */"
"@Override
public boolean isTypeCheckingEnabled() {
    return options.checkTypes;
}","public void test101121() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertFalse(compiler0.isTypeCheckingEnabled());
}",""
"public String getAstDotGraph() throws IOException {
    if (jsRoot != null) {
        ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);
        cfa.process(null, jsRoot);
        return DotFormatter.toDot(jsRoot, cfa.getCfg());
    } else {
        return """";
    }
}","public void test101122() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    String string0 = compiler0.getAstDotGraph();
    assertEquals(""digraph AST {\n  node [color=lightblue2, style=filled];\n  node0 [label=\""BLOCK\""];\n  node1 [label=\""SCRIPT\""];\n  node0 -> node1 [weight=1];\n  node1 -> RETURN [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> RETURN [label=\""SYN_BLOCK\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n  node0 -> node1 [label=\""UNCOND\"", fontcolor=\""red\"", weight=0.01, color=\""red\""];\n}\n"", string0);
}","/**
 * Gets the DOT graph of the AST generated at the end of compilation.
 */"
"public boolean hasErrors() {
    return hasHaltingErrors();
}","public void test102123() throws Throwable {
    Compiler compiler0 = new Compiler();
    LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
    compiler0.getErrorManager();
    assertFalse(compiler0.hasErrors());
}","/**
 * Consults the {@link ErrorManager} to see if we've encountered errors
 * that should halt compilation. <p>
 *
 * If {@link CompilerOptions#ideMode} is {@code true}, this function
 * always returns {@code false} without consulting the error manager. The
 * error manager will continue to be told about new errors and warnings, but
 * the compiler will complete compilation of all inputs.<p>
 */"
"@Override
void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot) {
    Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT || collectionRoot.getType() == Token.BLOCK);
    if (globalRefMap == null) {
        globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
    }
    globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
}","public void test103124() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.javascript.jscomp.SymbolTable$Symbol"");
    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",""
"@Override
void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot) {
    Preconditions.checkState(collectionRoot.getType() == Token.SCRIPT || collectionRoot.getType() == Token.BLOCK);
    if (globalRefMap == null) {
        globalRefMap = new GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
    }
    globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
}","public void test104125() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newString(""I_\""`I'5PT0%MCgP(4"");
    TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> treeMap0 = new TreeMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();
    // Undeclared exception!
    try {
        compiler0.updateGlobalVarReferences(treeMap0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
