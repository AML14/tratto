focal_method,test_prefix,docstring
"static boolean isNameReferenced(Node node, String name, Predicate<Node> traverseChildrenPred) {
    return has(node, new MatchNameNode(name), traverseChildrenPred);
}","public void test0000() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.isNameReferenced(node0, ""-"", nodeUtil_BooleanResultPredicate0);
    assertFalse(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test0001() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.isNameReferenced(node0, ""-"", nodeUtil_BooleanResultPredicate0);
    assertTrue(node0.isTrue());
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test0012() throws Throwable {
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(34);
    Node node0 = new Node(34);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 34
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static Node getArgumentForCallOrNew(Node call, int index) {
    Preconditions.checkState(isCallOrNew(call));
    return getNthSibling(call.getFirstChild().getNext(), index);
}","public void test0023() throws Throwable {
    Node node0 = Node.newString(""T7Sy92eFqD%ux5K;;_"", (-1466), (-2593));
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForCallOrNew(node0, 48);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the new or call, this returns the nth
 * argument of the call or null if no such argument exists.
 */"
"static boolean containsFunction(Node n) {
    return containsType(n, Token.FUNCTION);
}","public void test0034() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.containsFunction((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil$MatchNodeType"", e);
    }
}","/**
 * Determines if the given node contains a function statement or function
 * expression.
 */"
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test0045() throws Throwable {
    Node node0 = new Node(26);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean isFunctionObjectCall(Node callNode) {
    return isObjectCallMethod(callNode, ""call"");
}","public void test0056() throws Throwable {
    Node node0 = new Node(147);
    boolean boolean0 = NodeUtil.isFunctionObjectCall(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.call(...)
 *    x['call'](...)
 */"
"static boolean canBeSideEffected(Node n) {
    Set<String> emptySet = Collections.emptySet();
    return canBeSideEffected(n, emptySet);
}","public void test0067() throws Throwable {
    Node node0 = new Node(104, 88, (-2908));
    boolean boolean0 = NodeUtil.canBeSideEffected(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public boolean isGetProp() {
    return this.getType() == Token.GETPROP;
}","public void test0078() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertFalse(node0.isGetProp());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test0079() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    NodeUtil.redeclareVarsInsideBranch(node0);
    assertFalse(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static String getPrototypePropertyName(Node qName) {
    String qNameStr = qName.getQualifiedName();
    int prototypeIdx = qNameStr.lastIndexOf("".prototype."");
    int memberIndex = prototypeIdx + "".prototype"".length() + 1;
    return qNameStr.substring(memberIndex);
}","public void test00810() throws Throwable {
    Node node0 = new Node(151);
    // Undeclared exception!
    try {
        NodeUtil.getPrototypePropertyName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The string property name part of a qualified prototype name.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test00911() throws Throwable {
    Node node0 = new Node(26);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test01012() throws Throwable {
    Node node0 = new Node(79, 79, 79);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean functionCallHasSideEffects(Node callNode) {
    return functionCallHasSideEffects(callNode, null);
}","public void test01113() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.functionCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected CALL node, got HOOK
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if calls to this function have side effects.
 *
 * @param callNode - function call node
 */"
"static Node getCatchBlock(Node n) {
    Preconditions.checkArgument(n.isTry());
    return n.getFirstChild().getNext();
}","public void test01214() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getCatchBlock((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return The BLOCK node containing the CATCH node (if any)
 * of a TRY.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test01315() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
    Node node0 = new Node((-12), 184, 147);
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""."", node0, ""."");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripTypePrefixes);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test01316() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
    Node node0 = new Node((-12), 184, 147);
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""."", node0, ""."");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripTypePrefixes);
    assertTrue(node1.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test01317() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention(jqueryCodingConvention0);
    Node node0 = new Node((-12), 184, 147);
    Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, ""."", node0, ""."");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.stripTypePrefixes);
    assertEquals(147, node1.getCharno());
}",""
"static Node getArgumentForFunction(Node function, int index) {
    Preconditions.checkState(function.isFunction());
    return getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
}","public void test01418() throws Throwable {
    Node node0 = new Node(70);
    // Undeclared exception!
    try {
        NodeUtil.getArgumentForFunction(node0, 41);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Given the function, this returns the nth
 * argument or null if no such parameter exists.
 */"
"static Node newName(CodingConvention convention, String name, Node basisNode, String originalName) {
    Node nameNode = newName(convention, name, basisNode);
    nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);
    return nameNode;
}","public void test01519() throws Throwable {
    Node node0 = new Node(163);
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    // Undeclared exception!
    try {
        NodeUtil.newName(jqueryCodingConvention0, (String) null, node0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}","/**
 * Creates a new node representing an *existing* name, copying over the source
 * location information from the basis node and assigning the given original
 * name to the node.
 *
 * @param name The name for the new NAME node.
 * @param basisNode The node that represents the name as currently found in
 *     the AST.
 * @param originalName The original name of the item being represented by the
 *     NAME node. Used for debugging information.
 *
 * @return The node created.
 */"
"static boolean isVarArgsFunction(Node function) {
    // TODO(johnlenz): rename this function
    Preconditions.checkArgument(function.isFunction());
    return isNameReferenced(function.getLastChild(), ""arguments"", MATCH_NOT_FUNCTION);
}","public void test01620() throws Throwable {
    Node node0 = new Node(85, 85, 85);
    // Undeclared exception!
    try {
        NodeUtil.isVarArgsFunction(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines if a function takes a variable number of arguments by
 * looking for references to the ""arguments"" var_args object.
 */"
"static int getNameReferenceCount(Node node, String name) {
    return getCount(node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());
}","public void test01721() throws Throwable {
    Node node0 = Node.newString(421, ""8B|=1yD;.lXT(FYG"");
    int int0 = NodeUtil.getNameReferenceCount(node0, ""=J\""Ls-x;"");
    assertEquals(0, int0);
}","/**
 * Finds the number of times a simple name is referenced within the node tree.
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test01822() throws Throwable {
    Node node0 = new Node(105);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test01923() throws Throwable {
    Node node0 = new Node(30);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean constructorCallHasSideEffects(Node callNode) {
    return constructorCallHasSideEffects(callNode, null);
}","public void test02024() throws Throwable {
    Node node0 = Node.newString(""B-c5o"");
    // Undeclared exception!
    try {
        NodeUtil.constructorCallHasSideEffects(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected NEW node, got STRING
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Do calls to this constructor have side effects?
 *
 * @param callNode - constructor call node
 */"
"static Node getFunctionBody(Node fn) {
    Preconditions.checkArgument(fn.isFunction());
    return fn.getLastChild();
}","public void test02125() throws Throwable {
    Node node0 = new Node(65256);
    // Undeclared exception!
    try {
        NodeUtil.getFunctionBody(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Return a BLOCK node for the given FUNCTION node.
 */"
"static boolean isFunctionObjectApply(Node callNode) {
    return isObjectCallMethod(callNode, ""apply"");
}","public void test02226() throws Throwable {
    Node node0 = new Node(21);
    boolean boolean0 = NodeUtil.isFunctionObjectApply(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the callNode represents an expression in the form of:
 *    x.apply(...)
 *    x['apply'](...)
 */"
"public static Node getFunctionParameters(Node fnNode) {
    // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]
    Preconditions.checkArgument(fnNode.isFunction());
    return fnNode.getFirstChild().getNext();
}","public void test02327() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.getFunctionParameters((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param fnNode The function.
 * @return The Node containing the Function parameters.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test02428() throws Throwable {
    Node node0 = new Node(116);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test02529() throws Throwable {
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    Node node0 = Node.newString(42, ""6wY"", 103, 41);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertFalse(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02630() throws Throwable {
    Node node0 = new Node(63);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02731() throws Throwable {
    Node node0 = new Node(99, 99, 99);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02832() throws Throwable {
    Node node0 = new Node(64);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test02933() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03034() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03135() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03236() throws Throwable {
    Node node0 = new Node(101);
    // Undeclared exception!
    try {
        NodeUtil.getImpureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test03337() throws Throwable {
    Node node0 = new Node((-425));
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.getImpureBooleanValue(node1);
    assertEquals(1, node1.getChildCount());
}",""
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03338() throws Throwable {
    Node node0 = new Node((-425));
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.getImpureBooleanValue(node1);
    assertNotSame(node0, node1);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
            return TernaryValue.FALSE;
        case Token.VOID:
            if (!mayHaveSideEffects(n.getFirstChild())) {
                return TernaryValue.FALSE;
            }
            break;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
            break;
    }
    return TernaryValue.UNKNOWN;
}","public void test03439() throws Throwable {
    Node node0 = new Node(26);
    // Undeclared exception!
    try {
        NodeUtil.getPureBooleanValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
            return TernaryValue.FALSE;
        case Token.VOID:
            if (!mayHaveSideEffects(n.getFirstChild())) {
                return TernaryValue.FALSE;
            }
            break;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
            break;
    }
    return TernaryValue.UNKNOWN;
}","public void test03540() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""?hpb1*keojrpMe(fr7"");
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03641() throws Throwable {
    Node node0 = Node.newNumber((double) 0, 139, 111);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03742() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03843() throws Throwable {
    Node node0 = new Node(41);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test03944() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test04045() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.getImpureBooleanValue(node0);
    assertTrue(node0.isTrue());
}",""
"public int getType() {
    return type;
}","public void test04046() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.getImpureBooleanValue(node0);
    assertEquals(44, node0.getType());
}",""
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test04147() throws Throwable {
    Node node0 = new Node(47, 2076, 16);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
            return TernaryValue.FALSE;
        case Token.VOID:
            if (!mayHaveSideEffects(n.getFirstChild())) {
                return TernaryValue.FALSE;
            }
            break;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
            break;
    }
    return TernaryValue.UNKNOWN;
}","public void test04248() throws Throwable {
    Node node0 = Node.newString(63, ""!ESQQnJgD/{Vz+32GL"", 110, 4367);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
            return TernaryValue.FALSE;
        case Token.VOID:
            if (!mayHaveSideEffects(n.getFirstChild())) {
                return TernaryValue.FALSE;
            }
            break;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
            break;
    }
    return TernaryValue.UNKNOWN;
}","public void test04349() throws Throwable {
    Node node0 = new Node(64, 111, 94);
    NodeUtil.getPureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"public int getType() {
    return type;
}","public void test04450() throws Throwable {
    Node node0 = new Node(148);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.getPureBooleanValue(node1);
    assertEquals(122, node1.getType());
}",""
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
            return TernaryValue.FALSE;
        case Token.VOID:
            if (!mayHaveSideEffects(n.getFirstChild())) {
                return TernaryValue.FALSE;
            }
            break;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
            break;
    }
    return TernaryValue.UNKNOWN;
}","public void test04451() throws Throwable {
    Node node0 = new Node(148);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.getPureBooleanValue(node1);
    assertNotSame(node0, node1);
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test04552() throws Throwable {
    Node node0 = Node.newString("""");
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static TernaryValue getImpureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            // For ASSIGN and COMMA the value is the value of the RHS.
            return getImpureBooleanValue(n.getLastChild());
        case Token.NOT:
            TernaryValue value = getImpureBooleanValue(n.getLastChild());
            return value.not();
        case Token.AND:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.and(rhs);
            }
        case Token.OR:
            {
                TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
                TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
                return lhs.or(rhs);
            }
        case Token.HOOK:
            {
                TernaryValue trueValue = getImpureBooleanValue(n.getFirstChild().getNext());
                TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());
                if (trueValue.equals(falseValue)) {
                    return trueValue;
                } else {
                    return TernaryValue.UNKNOWN;
                }
            }
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // ignoring side-effects
            return TernaryValue.TRUE;
        case Token.VOID:
            return TernaryValue.FALSE;
        default:
            return getPureBooleanValue(n);
    }
}","public void test04653() throws Throwable {
    Node node0 = Node.newNumber((double) 159, (-1696), 1068);
    NodeUtil.getImpureBooleanValue(node0);
}","/**
 * Gets the boolean value of a node that represents a expression. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function.
 * Note: unlike getBooleanValue this function does not return UNKNOWN
 * for expressions with side-effects.
 */"
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test04754() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(35, node0, node0, node0, node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertEquals(""false"", string0);
}",""
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
        case Token.STRING_KEY:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
            return ""false"";
        case Token.TRUE:
            return ""true"";
        case Token.NULL:
            return ""null"";
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test04856() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""+u)C"");
    String string0 = NodeUtil.getStringValue(node0);
    assertNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test04957() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertTrue(node0.isTrue());
}",""
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test04958() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertNotNull(string0);
}",""
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
        case Token.STRING_KEY:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
            return ""false"";
        case Token.TRUE:
            return ""true"";
        case Token.NULL:
            return ""null"";
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test05060() throws Throwable {
    Node node0 = Node.newString(""freeze"", (-30), (-30));
    String string0 = NodeUtil.getStringValue(node0);
    assertEquals(""freeze"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
        case Token.STRING_KEY:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
            return ""false"";
        case Token.TRUE:
            return ""true"";
        case Token.NULL:
            return ""null"";
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test05161() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = new Node(41, node0, node0, (-2394), 8233);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(""null"", string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test05162() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = new Node(41, node0, node0, (-2394), 8233);
    String string0 = NodeUtil.getStringValue(node1);
    assertFalse(node0.isFalse());
}",""
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test05263() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = new Node(35, node0, node0, node0, node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertNotNull(string0);
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05365() throws Throwable {
    Node node0 = new Node(63);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNotNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test05467() throws Throwable {
    Node node0 = Node.newString(9, "")UCvX{#oj6),g,7i5_"", 154, 9);
    Node node1 = new Node(64, node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static String getStringValue(Node n) {
    // TODO(user): regex literals as well.
    switch(n.getType()) {
        case Token.STRING:
        case Token.STRING_KEY:
            return n.getString();
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name)) {
                return name;
            }
            break;
        case Token.NUMBER:
            return getStringValue(n.getDouble());
        case Token.FALSE:
            return ""false"";
        case Token.TRUE:
            return ""true"";
        case Token.NULL:
            return ""null"";
        case Token.VOID:
            return ""undefined"";
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? ""false"" : ""true"";
            }
            break;
        case Token.ARRAYLIT:
            return arrayToString(n);
        case Token.OBJECTLIT:
            return ""[object Object]"";
    }
    return null;
}","public void test05569() throws Throwable {
    Node node0 = new Node(151, 151, 151);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertNotNull(string0);
}","/**
 * Gets the value of a node as a String, or null if it cannot be converted.
 * When it returns a non-null String, this method effectively emulates the
 * <code>String()</code> JavaScript cast function.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05571() throws Throwable {
    Node node0 = new Node(151, 151, 151);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getStringValue(node1);
    assertEquals(151, node1.getLineno());
}",""
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.isEmpty()) ? """" : getStringValue(n);
}","public void test05672() throws Throwable {
    Node node0 = new Node(154);
    // Undeclared exception!
    try {
        NodeUtil.getArrayElementStringValue(node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING_KEY is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static String arrayToString(Node literal) {
    Node first = literal.getFirstChild();
    StringBuilder result = new StringBuilder();
    int nextSlot = 0;
    int nextSkipSlot = 0;
    for (Node n = first; n != null; n = n.getNext()) {
        String childValue = getArrayElementStringValue(n);
        if (childValue == null) {
            return null;
        }
        if (n != first) {
            result.append(',');
        }
        result.append(childValue);
        nextSlot++;
    }
    return result.toString();
}","public void test05773() throws Throwable {
    Node node0 = new Node(143);
    Node node1 = new Node(10, node0, node0, node0, node0);
    String string0 = NodeUtil.arrayToString(node1);
    assertNull(string0);
}",""
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.isEmpty()) ? """" : getStringValue(n);
}","public void test05874() throws Throwable {
    Node node0 = Node.newNumber(758.720087545682, 4095, 2);
    String string0 = NodeUtil.getArrayElementStringValue(node0);
    assertEquals(""758.720087545682"", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.isEmpty()) ? """" : getStringValue(n);
}","public void test05975() throws Throwable {
    Node node0 = new Node(151, 151, 151);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals("""", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test05977() throws Throwable {
    Node node0 = new Node(151, 151, 151);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals(618647, node1.getSourcePosition());
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06078() throws Throwable {
    Node node0 = new Node(26);
    // Undeclared exception!
    try {
        NodeUtil.getNumberValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06179() throws Throwable {
    Node node0 = Node.newString(137, ""z'4h4d6"", 102, 137);
    Node node1 = new Node(29, node0, node0, 22, 15);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06280() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06381() throws Throwable {
    Node node0 = Node.newNumber(1.0, (-4121), (-4121));
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(1.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06482() throws Throwable {
    Node node0 = Node.newString(""infinity"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06583() throws Throwable {
    Node node0 = new Node(41, 50, 31);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06684() throws Throwable {
    Node node0 = new Node(43);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06785() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(1.0, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06886() throws Throwable {
    Node node0 = new Node(154);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test06988() throws Throwable {
    Node node0 = new Node(173);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test07089() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = Node.newString(154, "")UCvX{#oj6),g,7i5_"", 154, 154);
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""undefined"", node0);
    Double double0 = NodeUtil.getNumberValue(node1);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test07191() throws Throwable {
    Node node0 = new Node(29);
    Double double0 = NodeUtil.getNumberValue(node0);
    assertNull(double0);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
        // vertical tab is not always whitespace
        return null;
    }
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // Firefox and IE treat the ""Infinity"" differently. Firefox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test07292() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""<="");
    assertNotNull(double0);
}",""
"static Double getNumberValue(Node n) {
    switch(n.getType()) {
        case Token.TRUE:
            return 1.0;
        case Token.FALSE:
        case Token.NULL:
            return 0.0;
        case Token.NUMBER:
            return n.getDouble();
        case Token.VOID:
            if (mayHaveSideEffects(n.getFirstChild())) {
                return null;
            } else {
                return Double.NaN;
            }
        case Token.NAME:
            // Check for known constants
            String name = n.getString();
            if (name.equals(""undefined"")) {
                return Double.NaN;
            }
            if (name.equals(""NaN"")) {
                return Double.NaN;
            }
            if (name.equals(""Infinity"")) {
                return Double.POSITIVE_INFINITY;
            }
            return null;
        case Token.NEG:
            if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals(""Infinity"")) {
                return Double.NEGATIVE_INFINITY;
            }
            return null;
        case Token.NOT:
            TernaryValue child = getPureBooleanValue(n.getFirstChild());
            if (child != TernaryValue.UNKNOWN) {
                // reversed.
                return child.toBoolean(true) ? 0.0 : 1.0;
            }
            break;
        case Token.STRING:
            return getStringNumberValue(n.getString());
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            String value = getStringValue(n);
            return value != null ? getStringNumberValue(value) : null;
    }
    return null;
}","public void test07394() throws Throwable {
    Node node0 = Node.newString(""-&<&"");
    Double double0 = NodeUtil.getNumberValue(node0);
    assertEquals(Double.NaN, (double) double0, 0.01);
}","/**
 * Gets the value of a node as a Number, or null if it cannot be converted.
 * When it returns a non-null Double, this method effectively emulates the
 * <code>Number()</code> JavaScript cast function.
 */"
"static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
        // vertical tab is not always whitespace
        return null;
    }
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // Firefox and IE treat the ""Infinity"" differently. Firefox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test07496() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""+)}L*R"");
    assertNotNull(double0);
}",""
"static Double getStringNumberValue(String rawJsString) {
    if (rawJsString.contains(""\u000b"")) {
        // vertical tab is not always whitespace
        return null;
    }
    String s = trimJsWhiteSpace(rawJsString);
    // return ScriptRuntime.toNumber(s);
    if (s.length() == 0) {
        return 0.0;
    }
    if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
        // Attempt to convert hex numbers.
        try {
            return Double.valueOf(Integer.parseInt(s.substring(2), 16));
        } catch (NumberFormatException e) {
            return Double.NaN;
        }
    }
    if (s.length() > 3 && (s.charAt(0) == '-' || s.charAt(0) == '+') && s.charAt(1) == '0' && (s.charAt(2) == 'x' || s.charAt(2) == 'X')) {
        // hex numbers with explicit signs vary between browsers.
        return null;
    }
    // Firefox and IE treat the ""Infinity"" differently. Firefox is case
    // insensitive, but IE treats ""infinity"" as NaN.  So leave it alone.
    if (s.equals(""infinity"") || s.equals(""-infinity"") || s.equals(""+infinity"")) {
        return null;
    }
    try {
        return Double.parseDouble(s);
    } catch (NumberFormatException e) {
        return Double.NaN;
    }
}","public void test07598() throws Throwable {
    Double double0 = NodeUtil.getStringNumberValue(""-infinity"");
    assertNull(double0);
}",""
"static String trimJsWhiteSpace(String s) {
    int start = 0;
    int end = s.length();
    while (end > 0 && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {
        end--;
    }
    while (start < end && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {
        start++;
    }
    return s.substring(start, end);
}","public void test07699() throws Throwable {
    String string0 = NodeUtil.trimJsWhiteSpace(""Strings used more than once:\n"");
    assertEquals(""Strings used more than once:"", string0);
}",""
"static String trimJsWhiteSpace(String s) {
    int start = 0;
    int end = s.length();
    while (end > 0 && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {
        end--;
    }
    while (start < end && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {
        start++;
    }
    return s.substring(start, end);
}","public void test077100() throws Throwable {
    String string0 = NodeUtil.trimJsWhiteSpace("" *YZs8%zfr-m)/>*`:"");
    assertEquals(""*YZs8%zfr-m)/>*`:"", string0);
}",""
"public static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", ECMAScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test078101() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(9);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"public static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", ECMAScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test079102() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(12);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"public static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", ECMAScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test080103() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(13);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"public static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", ECMAScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test081104() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(8233);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"public static TernaryValue isStrWhiteSpaceChar(int c) {
    switch(c) {
        case // <VT>
        '\u000B':
            // IE says ""no"", ECMAScript says ""yes""
            return TernaryValue.UNKNOWN;
        // <SP>
        case ' ':
        // <LF>
        case '\n':
        // <CR>
        case '\r':
        // <TAB>
        case '\t':
        // <NBSP>
        case '\u00A0':
        // <FF>
        case '\u000C':
        // <LS>
        case '\u2028':
        // <PS>
        case '\u2029':
        case // <BOM>
        '\uFEFF':
            return TernaryValue.TRUE;
        default:
            return (Character.getType(c) == Character.SPACE_SEPARATOR) ? TernaryValue.TRUE : TernaryValue.FALSE;
    }
}","public void test082105() throws Throwable {
    NodeUtil.isStrWhiteSpaceChar(8200);
}","/**
 * Copied from Rhino's ScriptRuntime
 */"
"public static String getNearestFunctionName(Node n) {
    if (!n.isFunction()) {
        return null;
    }
    String name = getFunctionName(n);
    if (name != null) {
        return name;
    }
    // Check for the form { 'x' : function() { } }
    Node parent = n.getParent();
    switch(parent.getType()) {
        case Token.SETTER_DEF:
        case Token.GETTER_DEF:
        case Token.STRING_KEY:
            // Return the name of the literal's key.
            return parent.getString();
        case Token.NUMBER:
            return getStringValue(parent);
    }
    return null;
}","public void test083106() throws Throwable {
    Node node0 = new Node(126);
    String string0 = NodeUtil.getNearestFunctionName(node0);
    assertNull(string0);
}","/**
 * Gets the function's name. This method recognizes the forms:
 * <ul>
 * <li>{@code &#123;'name': function() ...&#125;}</li>
 * <li>{@code &#123;name: function() ...&#125;}</li>
 * <li>{@code function name() ...}</li>
 * <li>{@code var name = function() ...}</li>
 * <li>{@code qualified.name = function() ...}</li>
 * <li>{@code var name2 = function name1() ...}</li>
 * <li>{@code qualified.name2 = function name1() ...}</li>
 * </ul>
 *
 * @param n a node whose type is {@link Token#FUNCTION}
 * @return the function's name, or {@code null} if it has no name
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test084107() throws Throwable {
    Node node0 = new Node(26);
    // Undeclared exception!
    try {
        NodeUtil.isLiteralValue(node0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured variables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test085108() throws Throwable {
    Node node0 = new Node(50, 50, 50);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 50
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        case Token.NOT:
            return isImmutableValue(n.getFirstChild());
        case Token.VOID:
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test086109() throws Throwable {
    Node node0 = new Node(143);
    Node node1 = new Node(29, node0);
    boolean boolean0 = NodeUtil.isImmutableValue(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if this is an immutable value.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test087110() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_BooleanResultPredicate0);
    assertFalse(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test088111() throws Throwable {
    Node node0 = new Node(156);
    Node node1 = new Node(39, node0, 1, 53);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test089112() throws Throwable {
    Node node0 = Node.newString(""_or{c/h!jMM6"", 85, 85);
    Node node1 = new Node(87, node0, node0, 46, 48);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test090113() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""+u)C"");
    Node node1 = new Node(41, node0, node0, node0, node0);
    SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.ALL;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, sourceMap_DetailLevel0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test091114() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(node0.isTrue());
}",""
"public int getType() {
    return type;
}","public void test091115() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    NodeUtil.evaluatesToLocalValue(node0);
    assertEquals(43, node0.getType());
}",""
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test092116() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(node0.isTrue());
}",""
"public int getType() {
    return type;
}","public void test092117() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.evaluatesToLocalValue(node0);
    assertEquals(44, node0.getType());
}",""
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test093118() throws Throwable {
    Node node0 = new Node((-266));
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured variables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isImmutableValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.NULL:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        case Token.NOT:
            return isImmutableValue(n.getFirstChild());
        case Token.VOID:
        case Token.NEG:
            return isImmutableValue(n.getFirstChild());
        case Token.NAME:
            String name = n.getString();
            // We assume here that programs don't change the value of the keyword
            // undefined to something other than the value undefined.
            return ""undefined"".equals(name) || ""Infinity"".equals(name) || ""NaN"".equals(name);
    }
    return false;
}","public void test094119() throws Throwable {
    Node node0 = Node.newString(8200, "".infinity"", 738, 738);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""Infinity"", node0);
    boolean boolean0 = NodeUtil.isImmutableValue(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if this is an immutable value.
 */"
"static boolean isSymmetricOperation(Node n) {
    switch(n.getType()) {
        // equal
        case Token.EQ:
        // not equal
        case Token.NE:
        // exactly equal
        case Token.SHEQ:
        // exactly not equal
        case Token.SHNE:
        case // multiply, unlike add it only works on numbers
        Token.MUL:
            // or results NaN if any of the operators is not a number
            return true;
    }
    return false;
}","public void test095120() throws Throwable {
    Node node0 = new Node(127, 127, 127);
    Node node1 = new Node(12, node0, 44, 44);
    boolean boolean0 = NodeUtil.isSymmetricOperation(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator on this node is symmetric
 */"
"static boolean isSymmetricOperation(Node n) {
    switch(n.getType()) {
        // equal
        case Token.EQ:
        // not equal
        case Token.NE:
        // exactly equal
        case Token.SHEQ:
        // exactly not equal
        case Token.SHNE:
        case // multiply, unlike add it only works on numbers
        Token.MUL:
            // or results NaN if any of the operators is not a number
            return true;
    }
    return false;
}","public void test096121() throws Throwable {
    Node node0 = new Node(1220);
    Node node1 = new Node(45, node0, node0, node0);
    boolean boolean0 = NodeUtil.isSymmetricOperation(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator on this node is symmetric
 */"
"// TODO(user): Rename this pass to PeepholeReorderConstantExpression
// to follow our naming convention.
@Override
Node optimizeSubtree(Node subtree) {
    // if the operator is symmetric
    if (NodeUtil.isSymmetricOperation(subtree) || NodeUtil.isRelationalOperation(subtree)) {
        // right value is immutable and left is not
        if (NodeUtil.isImmutableValue(subtree.getLastChild()) && !NodeUtil.isImmutableValue(subtree.getFirstChild())) {
            // if relational, get the inverse operator.
            if (NodeUtil.isRelationalOperation(subtree)) {
                int inverseOperator = NodeUtil.getInverseOperator(subtree.getType());
                subtree.setType(inverseOperator);
            }
            // swap them
            Node firstNode = subtree.getFirstChild().detachFromParent();
            Node lastNode = subtree.getLastChild().detachFromParent();
            subtree.addChildrenToFront(lastNode);
            subtree.addChildrenToBack(firstNode);
            reportCodeChange();
        }
    }
    return subtree;
}","public void test097122() throws Throwable {
    Node node0 = Node.newString(46, ""JSCompiler_returnArg"", 109, 32);
    ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
    // Undeclared exception!
    try {
        reorderConstantExpression0.optimizeSubtree(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test098123() throws Throwable {
    Node node0 = new Node(26);
    ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
    Node node1 = reorderConstantExpression0.optimizeSubtree(node0);
    assertFalse(node1.isFalse());
}",""
"static boolean isRelationalOperation(Node n) {
    switch(n.getType()) {
        // equal
        case Token.GT:
        // not equal
        case Token.GE:
        // exactly equal
        case Token.LT:
        case // exactly not equal
        Token.LE:
            return true;
    }
    return false;
}","public void test099124() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    Node node1 = new Node(15, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isRelationalOperation(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator on this node is relational.
 * the returned set does not include the equalities.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test099125() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    Node node1 = new Node(15, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isRelationalOperation(node1);
    assertEquals(2, node0.getChildCount());
}",""
"// TODO(user): Rename this pass to PeepholeReorderConstantExpression
// to follow our naming convention.
@Override
Node optimizeSubtree(Node subtree) {
    // if the operator is symmetric
    if (NodeUtil.isSymmetricOperation(subtree) || NodeUtil.isRelationalOperation(subtree)) {
        // right value is immutable and left is not
        if (NodeUtil.isImmutableValue(subtree.getLastChild()) && !NodeUtil.isImmutableValue(subtree.getFirstChild())) {
            // if relational, get the inverse operator.
            if (NodeUtil.isRelationalOperation(subtree)) {
                int inverseOperator = NodeUtil.getInverseOperator(subtree.getType());
                subtree.setType(inverseOperator);
            }
            // swap them
            Node firstNode = subtree.getFirstChild().detachFromParent();
            Node lastNode = subtree.getLastChild().detachFromParent();
            subtree.addChildrenToFront(lastNode);
            subtree.addChildrenToBack(firstNode);
            reportCodeChange();
        }
    }
    return subtree;
}","public void test100126() throws Throwable {
    Node node0 = Node.newString(16, ""JSCompiler_returnArg"", 38, 43);
    ReorderConstantExpression reorderConstantExpression0 = new ReorderConstantExpression();
    // Undeclared exception!
    try {
        reorderConstantExpression0.optimizeSubtree(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static int getInverseOperator(int type) {
    switch(type) {
        case Token.GT:
            return Token.LT;
        case Token.LT:
            return Token.GT;
        case Token.GE:
            return Token.LE;
        case Token.LE:
            return Token.GE;
    }
    return Token.ERROR;
}","public void test101127() throws Throwable {
    int int0 = NodeUtil.getInverseOperator(14);
    assertEquals(16, int0);
}","/**
 * Returns the inverse of an operator if it is invertible.
 * ex. '>' ==> '<'
 */"
"static int getInverseOperator(int type) {
    switch(type) {
        case Token.GT:
            return Token.LT;
        case Token.LT:
            return Token.GT;
        case Token.GE:
            return Token.LE;
        case Token.LE:
            return Token.GE;
    }
    return Token.ERROR;
}","public void test102128() throws Throwable {
    int int0 = NodeUtil.getInverseOperator(1431);
    assertEquals((-1), int0);
}","/**
 * Returns the inverse of an operator if it is invertible.
 * ex. '>' ==> '<'
 */"
"static int getInverseOperator(int type) {
    switch(type) {
        case Token.GT:
            return Token.LT;
        case Token.LT:
            return Token.GT;
        case Token.GE:
            return Token.LE;
        case Token.LE:
            return Token.GE;
    }
    return Token.ERROR;
}","public void test103129() throws Throwable {
    int int0 = NodeUtil.getInverseOperator(15);
    assertEquals(17, int0);
}","/**
 * Returns the inverse of an operator if it is invertible.
 * ex. '>' ==> '<'
 */"
"static int getInverseOperator(int type) {
    switch(type) {
        case Token.GT:
            return Token.LT;
        case Token.LT:
            return Token.GT;
        case Token.GE:
            return Token.LE;
        case Token.LE:
            return Token.GE;
    }
    return Token.ERROR;
}","public void test104130() throws Throwable {
    int int0 = NodeUtil.getInverseOperator(16);
    assertEquals(14, int0);
}","/**
 * Returns the inverse of an operator if it is invertible.
 * ex. '>' ==> '<'
 */"
"static int getInverseOperator(int type) {
    switch(type) {
        case Token.GT:
            return Token.LT;
        case Token.LT:
            return Token.GT;
        case Token.GE:
            return Token.LE;
        case Token.LE:
            return Token.GE;
    }
    return Token.ERROR;
}","public void test105131() throws Throwable {
    int int0 = NodeUtil.getInverseOperator(17);
    assertEquals(15, int0);
}","/**
 * Returns the inverse of an operator if it is invertible.
 * ex. '>' ==> '<'
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test106132() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, true);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured variables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test107133() throws Throwable {
    Node node0 = new Node(64, 111, 94);
    boolean boolean0 = NodeUtil.isLiteralValue(node0, false);
    assertTrue(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured variables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test108134() throws Throwable {
    Node node0 = new Node(91);
    Node node1 = new Node(105, node0, node0, 46, 48);
    boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
    assertFalse(boolean0);
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured variables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isLiteralValue(Node n, boolean includeFunctions) {
    switch(n.getType()) {
        case Token.ARRAYLIT:
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.REGEXP:
            // Return true only if all children are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child, includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.OBJECTLIT:
            // Return true only if all values are const.
            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {
                    return false;
                }
            }
            return true;
        case Token.FUNCTION:
            return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
        default:
            return isImmutableValue(n);
    }
}","public void test109135() throws Throwable {
    Node node0 = new Node(91);
    Node node1 = new Node(105, node0, node0, 46, 48);
    // Undeclared exception!
    try {
        NodeUtil.isLiteralValue(node1, true);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Returns true if this is a literal value. We define a literal value
 * as any node that evaluates to the same thing regardless of when or
 * where it is evaluated. So /xyz/ and [3, 5] are literals, but
 * the name a is not.
 *
 * Function literals do not meet this definition, because they
 * lexically capture variables. For example, if you have
 * <code>
 * function() { return a; }
 * </code>
 * If it is evaluated in a different scope, then it
 * captures a different variable. Even if the function did not read
 * any captured variables directly, it would still fail this definition,
 * because it affects the lifecycle of variables in the enclosing scope.
 *
 * However, a function literal with respect to a particular scope is
 * a literal.
 *
 * @param includeFunctions If true, all function expressions will be
 *     treated as literals.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test110136() throws Throwable {
    Node node0 = Node.newString(9, "")UCvX{#oj6),g,7i5_"");
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test111137() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test111138() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    assertFalse(node0.isFalse());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test112139() throws Throwable {
    Node node0 = new Node(11);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, compilerOptions0.aliasableStrings);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test113140() throws Throwable {
    Node node0 = new Node(154);
    Node node1 = new Node(12, node0, node0, node0, node0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test114141() throws Throwable {
    Node node0 = new Node(137, 137, 137);
    Node node1 = new Node(15, node0);
    Stack<String> stack0 = new Stack<String>();
    TreeSet<String> treeSet0 = new TreeSet<String>(stack0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test115142() throws Throwable {
    Node node0 = new Node(17, 82, 1988);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test116143() throws Throwable {
    Node node0 = new Node(19);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test117144() throws Throwable {
    Node node0 = Node.newString(21, ""o}6GuzK3\""DgaN\""IJ"", (-3315), 240);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test118145() throws Throwable {
    Node node0 = new Node(23, 61, 1988);
    Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, set0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test119146() throws Throwable {
    Node node0 = new Node(25, 1, 55);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test120147() throws Throwable {
    Node node0 = new Node(26);
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, (Set<String>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test121148() throws Throwable {
    Node node0 = new Node(28);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test122149() throws Throwable {
    Node node0 = Node.newString(29, "">>>="");
    TreeSet<String> treeSet0 = new TreeSet<String>();
    // Undeclared exception!
    try {
        NodeUtil.isValidDefineValue(node0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test123150() throws Throwable {
    Node node0 = new Node(30);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test124151() throws Throwable {
    Node node0 = new Node(25, (-4024), (-4024));
    Node node1 = new Node(31, node0);
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test125152() throws Throwable {
    Node node0 = new Node(68);
    Node node1 = new Node(32, node0, node0, node0, node0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test126153() throws Throwable {
    Node node0 = new Node(34);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripTypePrefixes);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test127154() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "">>>="");
    Node node1 = new Node(36, node0, node0, node0, node0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test128155() throws Throwable {
    Node node0 = new Node(37);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNamePrefixes);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test129156() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "">="");
    HashSet<String> hashSet0 = new HashSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test130157() throws Throwable {
    Node node0 = Node.newNumber((double) (-1340));
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test131158() throws Throwable {
    Node node0 = Node.newString(""$]/CD"");
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test132159() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""+u)C"");
    Node node1 = new Node(41, node0, node0, node0, node0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node1, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test133160() throws Throwable {
    Node node0 = new Node(42, 55, 12);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test134161() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public int getType() {
    return type;
}","public void test134162() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, compilerOptions0.stripNameSuffixes);
    assertEquals(43, node0.getType());
}",""
"static boolean isValidDefineValue(Node val, Set<String> defines) {
    switch(val.getType()) {
        case Token.STRING:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
            return true;
        // Binary operators are only valid if both children are valid.
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GT:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.URSH:
            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
        // Unary operators are valid if the child is valid.
        case Token.NOT:
        case Token.NEG:
        case Token.POS:
            return isValidDefineValue(val.getFirstChild(), defines);
        // Names are valid if and only if they are defines themselves.
        case Token.NAME:
        case Token.GETPROP:
            if (val.isQualifiedName()) {
                return defines.contains(val.getQualifiedName());
            }
    }
    return false;
}","public void test135163() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    TreeSet<String> treeSet0 = new TreeSet<String>();
    treeSet0.add(""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given value may be assigned to a define.
 *
 * @param val The value being assigned.
 * @param defines The list of names of existing defines.
 */"
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test135164() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    TreeSet<String> treeSet0 = new TreeSet<String>();
    treeSet0.add(""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.isValidDefineValue(node0, treeSet0);
    assertFalse(node0.isName());
}",""
"static boolean isEmptyBlock(Node block) {
    if (!block.isBlock()) {
        return false;
    }
    for (Node n = block.getFirstChild(); n != null; n = n.getNext()) {
        if (!n.isEmpty()) {
            return false;
        }
    }
    return true;
}","public void test136165() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    boolean boolean0 = NodeUtil.isEmptyBlock(node0);
    assertFalse(boolean0);
}","/**
 * Returns whether this a BLOCK node with no children.
 *
 * @param block The node.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test137166() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(9);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test138167() throws Throwable {
    Node node0 = new Node(143);
    Node node1 = new Node(10, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test139168() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(11);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test140169() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test141170() throws Throwable {
    Node node0 = new Node(13);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test142171() throws Throwable {
    Node node0 = new Node(14);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test143172() throws Throwable {
    Node node0 = new Node(137, 137, 137);
    Node node1 = new Node(15, node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test144173() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test145174() throws Throwable {
    Node node0 = new Node(17, 17, 17);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test146175() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(18, node0, 45, 36);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test147176() throws Throwable {
    Node node0 = new Node(19);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test148177() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test149178() throws Throwable {
    Node node0 = new Node(21);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test150179() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(22);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test151180() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test152181() throws Throwable {
    Node node0 = Node.newString(24, ""yp5X"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test153182() throws Throwable {
    Node node0 = new Node(25, 25, 25);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test154183() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test155184() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(28);
    assertTrue(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperator(Node n) {
    return isSimpleOperatorType(n.getType());
}","public void test156185() throws Throwable {
    Node node0 = Node.newString(""-&<&"");
    Node node1 = new Node(29, node0);
    boolean boolean0 = NodeUtil.isSimpleOperator(node1);
    assertTrue(boolean0);
}",""
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test157186() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test158187() throws Throwable {
    Node node0 = new Node(156, 16, 16);
    Node node1 = new Node(31, node0, 29, 52);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test159188() throws Throwable {
    Node node0 = new Node(32, 2365, 2365);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test160189() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertEquals(2, node0.getChildCount());
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test160190() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test161191() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test162192() throws Throwable {
    Node node0 = new Node(36);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 36
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test163193() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test164194() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test165195() throws Throwable {
    Node node0 = Node.newString(""%M:`&`W4n"");
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test166196() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test167197() throws Throwable {
    Node node0 = new Node(1220);
    Node node1 = new Node(45, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test168198() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = new Node(46, node0, 4, 4095);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test168199() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = new Node(46, node0, 4, 4095);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(node0.isFalse());
}",""
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test169200() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test170201() throws Throwable {
    Node node0 = new Node(48);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 48
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test171202() throws Throwable {
    Node node0 = new Node(139, 139, 139);
    Node node1 = new Node(49, node0, node0);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1, predicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTHROW
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test172203() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(51);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test173204() throws Throwable {
    Node node0 = new Node(52, (-820), 52);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test174205() throws Throwable {
    Node node0 = new Node(53);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"// NodeUtil's mayEffectMutableState and mayHaveSideEffects need access to the
// compiler object, route them through here to give them access.
/**
 * @return Whether the node may create new mutable state, or change existing
 * state.
 */
boolean mayEffectMutableState(Node n) {
    return NodeUtil.mayEffectMutableState(n, compiler);
}","public void test175206() throws Throwable {
    Node node0 = Node.newString(""d_I&9AJW]["", 64, 64);
    Node node1 = new Node(54, node0, node0, 45, 8);
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
    boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node1);
    assertTrue(boolean0);
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test176207() throws Throwable {
    Node node0 = new Node(55);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test177208() throws Throwable {
    Node node0 = new Node(56, 12, 56);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 56
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test178209() throws Throwable {
    Node node0 = new Node(57, 118, 57);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test179210() throws Throwable {
    Node node0 = new Node(58);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test180211() throws Throwable {
    Node node0 = new Node(61);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test181212() throws Throwable {
    Node node0 = new Node(62);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test182213() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean isSimpleOperator(Node n) {
    return isSimpleOperatorType(n.getType());
}","public void test183214() throws Throwable {
    Node node0 = Node.newString(26, "")UCvX{#oj6),g,7i5_"");
    Node node1 = new Node(64, node0);
    boolean boolean0 = NodeUtil.isSimpleOperator(node1);
    assertFalse(boolean0);
}",""
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test184215() throws Throwable {
    Node node0 = new Node(65);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 65
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test185216() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test186217() throws Throwable {
    Node node0 = new Node(68, 68, 68);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test187218() throws Throwable {
    Node node0 = new Node(69);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test188219() throws Throwable {
    Node node0 = new Node(70);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test189220() throws Throwable {
    Node node0 = new Node(71);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 71
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test190221() throws Throwable {
    Node node0 = new Node(72);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test191222() throws Throwable {
    Node node0 = new Node(74);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 74
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test192223() throws Throwable {
    Node node0 = new Node(75, 75, 75);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 75
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test193224() throws Throwable {
    Node node0 = new Node(76);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 76
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test194225() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeTRY 77
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test195226() throws Throwable {
    Node node0 = new Node(78, 78, 78);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test196227() throws Throwable {
    Node node0 = new Node(80);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test197228() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(81);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test198229() throws Throwable {
    Node node0 = new Node(82);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test199230() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodePARAM_LIST
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"// NodeUtil's mayEffectMutableState and mayHaveSideEffects need access to the
// compiler object, route them through here to give them access.
/**
 * @return Whether the node may create new mutable state, or change existing
 * state.
 */
boolean mayEffectMutableState(Node n) {
    return NodeUtil.mayEffectMutableState(n, compiler);
}","public void test200231() throws Throwable {
    Node node0 = new Node(85);
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    boolean boolean0 = peepholeRemoveDeadCode0.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test201232() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test202233() throws Throwable {
    Node node0 = new Node(48);
    Node node1 = new Node(88, node0, 1, 43);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test203234() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test204235() throws Throwable {
    Node node0 = new Node(90, 98, 98);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test205236() throws Throwable {
    Node node0 = new Node(91);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test206237() throws Throwable {
    Node node0 = Node.newString(92, ""variable {0} is undeclared"", (-9), 92);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test207238() throws Throwable {
    Node node0 = new Node(93, 93, 93);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test208239() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test209240() throws Throwable {
    Node node0 = new Node(95);
    // Undeclared exception!
    try {
        NodeUtil.mayHaveSideEffects(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test210241() throws Throwable {
    Node node0 = new Node(96, 96, 96);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test211242() throws Throwable {
    Node node0 = new Node(35);
    Node node1 = new Node(97, node0, 88, 1861);
    // Undeclared exception!
    try {
        NodeUtil.mayEffectMutableState(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test212243() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(98);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"// NodeUtil's mayEffectMutableState and mayHaveSideEffects need access to the
// compiler object, route them through here to give them access.
/**
 * @return Whether the node may create new mutable state, or change existing
 * state.
 */
boolean mayEffectMutableState(Node n) {
    return NodeUtil.mayEffectMutableState(n, compiler);
}","public void test213244() throws Throwable {
    Node node0 = new Node(99, 99, 99);
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
    boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",""
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test214245() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test215246() throws Throwable {
    Node node0 = new Node(102, 98, 98);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test216247() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test217248() throws Throwable {
    Node node0 = Node.newString(104, ""variable {0} is undeclared"", 92, 92);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 104
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test218249() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"boolean mayHaveSideEffects(Node n) {
    return NodeUtil.mayHaveSideEffects(n, compiler);
}","public void test219250() throws Throwable {
    Node node0 = new Node(106, 106, 106);
    PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
    boolean boolean0 = peepholeFoldWithTypes0.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test220251() throws Throwable {
    Node node0 = new Node(107, (-1779), (-1779));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test221252() throws Throwable {
    Node node0 = new Node(108, 2287, 2287);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeIF 2287
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test222253() throws Throwable {
    Node node0 = new Node(109, (-1750), (-1750));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test223254() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test224255() throws Throwable {
    Node node0 = new Node(112, 2165, (-1687));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test225256() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test226257() throws Throwable {
    Node node0 = new Node(114, 113, 279);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test227258() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test228259() throws Throwable {
    Node node0 = new Node(117);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean isSimpleOperatorType(int type) {
    switch(type) {
        case Token.ADD:
        case Token.BITAND:
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.COMMA:
        case Token.DIV:
        case Token.EQ:
        case Token.GE:
        case Token.GETELEM:
        case Token.GETPROP:
        case Token.GT:
        case Token.INSTANCEOF:
        case Token.LE:
        case Token.LSH:
        case Token.LT:
        case Token.MOD:
        case Token.MUL:
        case Token.NE:
        case Token.NOT:
        case Token.RSH:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.SUB:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.POS:
        case Token.NEG:
        case Token.URSH:
            return true;
        default:
            return false;
    }
}","public void test229260() throws Throwable {
    boolean boolean0 = NodeUtil.isSimpleOperatorType(118);
    assertFalse(boolean0);
}","/**
 * A ""simple"" operator is one whose children are expressions,
 * has no direct side-effects (unlike '+='), and has no
 * conditional aspects (unlike '||').
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test230261() throws Throwable {
    Node node0 = new Node(66);
    Node node1 = new Node(120, node0, node0, 17, 42);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchDeclaration0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected expression nodeCATCH 17
        //  parent:null
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test231262() throws Throwable {
    Node node0 = new Node(121);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test232263() throws Throwable {
    Node node0 = Node.newString(9, "")UCvX{#oj6),g,7i5_"", 154, 9);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public int getType() {
    return type;
}","public void test232264() throws Throwable {
    Node node0 = Node.newString(9, "")UCvX{#oj6),g,7i5_"", 154, 9);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(122, node1.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test232265() throws Throwable {
    Node node0 = Node.newString(9, "")UCvX{#oj6),g,7i5_"", 154, 9);
    Node node1 = NodeUtil.newUndefinedNode(node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(154, node1.getLineno());
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test233266() throws Throwable {
    Node node0 = new Node((-4107), (-4107), (-4107));
    Node node1 = new Node(30, node0, 36, 2);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test234267() throws Throwable {
    Node node0 = new Node(36, 103, (-1459145716));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test235268() throws Throwable {
    Node node0 = new Node(156);
    Node node1 = new Node(37, node0, node0, node0);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"// TODO(dcc): Some (all) of these can probably be better achieved
// using the control flow graph (like CheckUnreachableCode).
// There is an existing CFG pass (UnreachableCodeElimination) that
// could be changed to use code from CheckUnreachableCode to do this.
@Override
Node optimizeSubtree(Node subtree) {
    switch(subtree.getType()) {
        case Token.ASSIGN:
            return tryFoldAssignment(subtree);
        case Token.COMMA:
            return tryFoldComma(subtree);
        case Token.SCRIPT:
        case Token.BLOCK:
            return tryOptimizeBlock(subtree);
        case Token.EXPR_RESULT:
            subtree = tryFoldExpr(subtree);
            return subtree;
        case Token.HOOK:
            return tryFoldHook(subtree);
        case Token.SWITCH:
            return tryOptimizeSwitch(subtree);
        case Token.IF:
            return tryFoldIf(subtree);
        case Token.WHILE:
            return tryFoldWhile(subtree);
        case Token.FOR:
            {
                Node condition = NodeUtil.getConditionExpression(subtree);
                if (condition != null) {
                    tryFoldForCondition(condition);
                }
            }
            return tryFoldFor(subtree);
        case Token.DO:
            return tryFoldDo(subtree);
        case Token.TRY:
            return tryFoldTry(subtree);
        default:
            return subtree;
    }
}","public void test236269() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""null"");
    PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
    // Undeclared exception!
    try {
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test237270() throws Throwable {
    Node node0 = new Node(84);
    Node node1 = new Node(42, node0, (-519), 37);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"// NodeUtil's mayEffectMutableState and mayHaveSideEffects need access to the
// compiler object, route them through here to give them access.
/**
 * @return Whether the node may create new mutable state, or change existing
 * state.
 */
boolean mayEffectMutableState(Node n) {
    return NodeUtil.mayEffectMutableState(n, compiler);
}","public void test238271() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(true);
    boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test239272() throws Throwable {
    Node node0 = new Node(154);
    Node node1 = new Node(47, node0, node0, 55, 55);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test240273() throws Throwable {
    Node node0 = new Node(49);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test241274() throws Throwable {
    Node node0 = new Node(50, 50, 50);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test242275() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"// NodeUtil's mayEffectMutableState and mayHaveSideEffects need access to the
// compiler object, route them through here to give them access.
/**
 * @return Whether the node may create new mutable state, or change existing
 * state.
 */
boolean mayEffectMutableState(Node n) {
    return NodeUtil.mayEffectMutableState(n, compiler);
}","public void test243276() throws Throwable {
    Node node0 = new Node(65);
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
    boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    assertTrue(boolean0);
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test244277() throws Throwable {
    Node node0 = new Node(71);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test245278() throws Throwable {
    Node node0 = new Node(74);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test246279() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = new Node(76, node0, 1, 41);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test247280() throws Throwable {
    Node node0 = new Node(77, 77, 97);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test248281() throws Throwable {
    Vector<JSType> vector0 = new Vector<JSType>();
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) vector0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test249282() throws Throwable {
    Node node0 = new Node(59);
    Node node1 = new Node(100, node0, 3406, 1394);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test250283() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test251284() throws Throwable {
    Node node0 = new Node(104, (-1408), (-1716));
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test252285() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test253286() throws Throwable {
    Node node0 = new Node(110, 957, 957);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test254287() throws Throwable {
    Node node0 = new Node(111, 102, 137);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test255288() throws Throwable {
    Node node0 = new Node(116, 116, 116);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public boolean isVar() {
    return this.getType() == Token.VAR;
}","public void test256289() throws Throwable {
    Node node0 = new Node(4, 190, 4);
    Node node1 = NodeUtil.newVarNode(""function"", node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(node1.isVar());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test256290() throws Throwable {
    Node node0 = new Node(4, 190, 4);
    Node node1 = NodeUtil.newVarNode(""function"", node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertEquals(190, node1.getLineno());
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test256291() throws Throwable {
    Node node0 = new Node(4, 190, 4);
    Node node1 = NodeUtil.newVarNode(""function"", node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test256292() throws Throwable {
    Node node0 = new Node(4, 190, 4);
    Node node1 = NodeUtil.newVarNode(""function"", node0);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test257293() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test258294() throws Throwable {
    Node node0 = new Node(120);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"// NodeUtil's mayEffectMutableState and mayHaveSideEffects need access to the
// compiler object, route them through here to give them access.
/**
 * @return Whether the node may create new mutable state, or change existing
 * state.
 */
boolean mayEffectMutableState(Node n) {
    return NodeUtil.mayEffectMutableState(n, compiler);
}","public void test259295() throws Throwable {
    Node node0 = new Node(124);
    PeepholeReplaceKnownMethods peepholeReplaceKnownMethods0 = new PeepholeReplaceKnownMethods(false);
    boolean boolean0 = peepholeReplaceKnownMethods0.mayEffectMutableState(node0);
    assertFalse(boolean0);
}",""
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test260296() throws Throwable {
    Node node0 = new Node(125, 2371, 2371);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test261297() throws Throwable {
    Node node0 = Node.newString(126, "")UCvX{#oj6),g,7i5_"", 61, 131);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test262298() throws Throwable {
    Node node0 = new Node(127, 127, 127);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test263299() throws Throwable {
    Node node0 = new Node(128);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test264300() throws Throwable {
    Node node0 = new Node(131);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test265301() throws Throwable {
    Node node0 = new Node(132, 2371, 2371);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayHaveSideEffects(Node n) {
    return mayHaveSideEffects(n, null);
}","public void test266302() throws Throwable {
    Node node0 = new Node(133);
    boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node which may have side effects when executed.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test267303() throws Throwable {
    Node node0 = new Node(134);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test268304() throws Throwable {
    Node node0 = new Node(135);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test269305() throws Throwable {
    Node node0 = new Node(126, 126, 126);
    Node node1 = new Node(136, node0, 43, 55);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test270306() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(138, node0, 45, 36);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test271307() throws Throwable {
    Node node0 = new Node(139, 139, 139);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test272308() throws Throwable {
    Node node0 = new Node(143);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test273309() throws Throwable {
    Node node0 = new Node(144, 144, 144);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test274310() throws Throwable {
    Node node0 = new Node(145);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test275311() throws Throwable {
    Node node0 = new Node(147);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test276312() throws Throwable {
    Node node0 = new Node(148);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test277313() throws Throwable {
    Node node0 = new Node(150);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test278314() throws Throwable {
    Node node0 = new Node(151);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test279315() throws Throwable {
    Node node0 = new Node(152);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test280316() throws Throwable {
    Node node0 = new Node(153, 153, 153);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test281317() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test282318() throws Throwable {
    Node node0 = new Node(64, 111, 94);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static TernaryValue getPureBooleanValue(Node n) {
    switch(n.getType()) {
        case Token.STRING:
            return TernaryValue.forBoolean(n.getString().length() > 0);
        case Token.NUMBER:
            return TernaryValue.forBoolean(n.getDouble() != 0);
        case Token.NOT:
            return getPureBooleanValue(n.getLastChild()).not();
        case Token.NULL:
        case Token.FALSE:
            return TernaryValue.FALSE;
        case Token.VOID:
            if (!mayHaveSideEffects(n.getFirstChild())) {
                return TernaryValue.FALSE;
            }
            break;
        case Token.NAME:
            String name = n.getString();
            if (""undefined"".equals(name) || ""NaN"".equals(name)) {
                // We assume here that programs don't change the value of the keyword
                // undefined to something other than the value undefined.
                return TernaryValue.FALSE;
            } else if (""Infinity"".equals(name)) {
                return TernaryValue.TRUE;
            }
            break;
        case Token.TRUE:
        case Token.REGEXP:
            return TernaryValue.TRUE;
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            if (!mayHaveSideEffects(n)) {
                return TernaryValue.TRUE;
            }
            break;
    }
    return TernaryValue.UNKNOWN;
}","public void test283319() throws Throwable {
    Node node0 = new Node(64, 111, 94);
    node0.addChildToFront(node0);
    // Undeclared exception!
    try {
        NodeUtil.getPureBooleanValue(node0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
    }
}","/**
 * Gets the boolean value of a node that represents a literal. This method
 * effectively emulates the <code>Boolean()</code> JavaScript cast function
 * except it return UNKNOWN for known values with side-effects, use
 * getExpressionBooleanValue if you don't care about side-effects.
 */"
"static boolean mayEffectMutableState(Node n) {
    return mayEffectMutableState(n, null);
}","public void test284320() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the node may create new mutable state, or change existing
 * state.
 *
 * @see <a href=""http://www.xkcd.org/326/"">XKCD Cartoon</a>
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test285321() throws Throwable {
    Node node0 = new Node(119, 145, 119);
    Node node1 = new Node(30, node0, 51, 42);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test286322() throws Throwable {
    Node node0 = new Node(96, 96, 96);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"boolean nodeTypeMayHaveSideEffects(Node n) {
    return NodeUtil.nodeTypeMayHaveSideEffects(n, compiler);
}","public void test287323() throws Throwable {
    Node node0 = new Node(31);
    PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
    boolean boolean0 = peepholeFoldWithTypes0.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test288324() throws Throwable {
    Node node0 = new Node(105);
    Node[] nodeArray0 = new Node[0];
    Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test289325() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test290326() throws Throwable {
    Node node0 = new Node(49);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test291327() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean nodeTypeMayHaveSideEffects(Node n) {
    return nodeTypeMayHaveSideEffects(n, null);
}","public void test292328() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if the current node's type implies side effects.
 *
 * This is a non-recursive version of the may have side effects
 * check; used to check wherever the current node's type is one of
 * the reason's why a subtree has side effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test293329() throws Throwable {
    Node node0 = new Node(30, 35, 0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNameSuffixes);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test294330() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripNamePrefixes);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test295331() throws Throwable {
    Node node0 = new Node(37, 16, 8232);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node0, compilerOptions0.stripTypes);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test296332() throws Throwable {
    Node node0 = new Node(105);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        NodeUtil.canBeSideEffected(node0, compilerOptions0.stripTypes);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test297333() throws Throwable {
    Node node0 = new Node(70);
    Node node1 = new Node(31, node0, node0, 12, 47);
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, (Set<String>) null);
    assertFalse(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test298334() throws Throwable {
    Node node0 = new Node(3);
    Node node1 = NodeUtil.newVarNode(""."", node0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.aliasableStrings);
    assertFalse(node1.isName());
}",""
"static boolean canBeSideEffected(Node n, Set<String> knownConstants) {
    switch(n.getType()) {
        case Token.CALL:
        case Token.NEW:
            // Function calls or constructor can reference changed values.
            // TODO(johnlenz): Add some mechanism for determining that functions
            // are unaffected by side effects.
            return true;
        case Token.NAME:
            // Non-constant names values may have been changed.
            return !isConstantName(n) && !knownConstants.contains(n.getString());
        // Properties on constant NAMEs can still be side-effected.
        case Token.GETPROP:
        case Token.GETELEM:
            return true;
        case Token.FUNCTION:
            // Function expression are not changed by side-effects,
            // and function declarations are not part of expressions.
            Preconditions.checkState(isFunctionExpression(n));
            return false;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (canBeSideEffected(c, knownConstants)) {
            return true;
        }
    }
    return false;
}","public void test298335() throws Throwable {
    Node node0 = new Node(3);
    Node node1 = NodeUtil.newVarNode(""."", node0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.aliasableStrings);
    assertTrue(boolean0);
}","/**
 * @param knownConstants A set of names known to be constant value at
 * node 'n' (such as locals that are last written before n can execute).
 * @return Whether the tree can be affected by side-effects or
 * has side-effects.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test298336() throws Throwable {
    Node node0 = new Node(3);
    Node node1 = NodeUtil.newVarNode(""."", node0);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.canBeSideEffected(node1, compilerOptions0.aliasableStrings);
    assertEquals(0, node0.getChildCount());
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test299337() throws Throwable {
    int int0 = NodeUtil.precedence(9);
    assertEquals(5, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test300338() throws Throwable {
    int int0 = NodeUtil.precedence(103);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test301339() throws Throwable {
    int int0 = NodeUtil.precedence(10);
    assertEquals(6, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test302340() throws Throwable {
    int int0 = NodeUtil.precedence(11);
    assertEquals(7, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test303341() throws Throwable {
    int int0 = NodeUtil.precedence(12);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test304342() throws Throwable {
    int int0 = NodeUtil.precedence(13);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test305343() throws Throwable {
    int int0 = NodeUtil.precedence(14);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test306344() throws Throwable {
    int int0 = NodeUtil.precedence(15);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test307345() throws Throwable {
    int int0 = NodeUtil.precedence(16);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test308346() throws Throwable {
    int int0 = NodeUtil.precedence(17);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test309347() throws Throwable {
    int int0 = NodeUtil.precedence(18);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test310348() throws Throwable {
    int int0 = NodeUtil.precedence(19);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test311349() throws Throwable {
    int int0 = NodeUtil.precedence(20);
    assertEquals(10, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test312350() throws Throwable {
    int int0 = NodeUtil.precedence(21);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test313351() throws Throwable {
    int int0 = NodeUtil.precedence(22);
    assertEquals(11, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test314352() throws Throwable {
    int int0 = NodeUtil.precedence(23);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test315353() throws Throwable {
    int int0 = NodeUtil.precedence(24);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test316354() throws Throwable {
    int int0 = NodeUtil.precedence(25);
    assertEquals(12, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test317355() throws Throwable {
    int int0 = NodeUtil.precedence(26);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test318356() throws Throwable {
    int int0 = NodeUtil.precedence(27);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test319357() throws Throwable {
    int int0 = NodeUtil.precedence(28);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test320358() throws Throwable {
    int int0 = NodeUtil.precedence(29);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test321359() throws Throwable {
    int int0 = NodeUtil.precedence(30);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test322360() throws Throwable {
    int int0 = NodeUtil.precedence(31);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test323361() throws Throwable {
    int int0 = NodeUtil.precedence(32);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test324362() throws Throwable {
    int int0 = NodeUtil.precedence(33);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test325363() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(34);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 34
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test326364() throws Throwable {
    int int0 = NodeUtil.precedence(35);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test327365() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(36);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 36
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test328366() throws Throwable {
    int int0 = NodeUtil.precedence(37);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test329367() throws Throwable {
    int int0 = NodeUtil.precedence(38);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test330368() throws Throwable {
    int int0 = NodeUtil.precedence(39);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test331369() throws Throwable {
    int int0 = NodeUtil.precedence(40);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test332370() throws Throwable {
    int int0 = NodeUtil.precedence(41);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test333371() throws Throwable {
    int int0 = NodeUtil.precedence(42);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test334372() throws Throwable {
    int int0 = NodeUtil.precedence(43);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test335373() throws Throwable {
    int int0 = NodeUtil.precedence(44);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test336374() throws Throwable {
    int int0 = NodeUtil.precedence(45);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test337375() throws Throwable {
    int int0 = NodeUtil.precedence(46);
    assertEquals(8, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test338376() throws Throwable {
    int int0 = NodeUtil.precedence(47);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test339377() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(48);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 48
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test340378() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(49);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for THROW (type 49)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test341379() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(50);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 50
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test342380() throws Throwable {
    int int0 = NodeUtil.precedence(51);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test343381() throws Throwable {
    int int0 = NodeUtil.precedence(52);
    assertEquals(9, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test344382() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(53);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 53
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test345383() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(54);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 54
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test346384() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(55);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 55
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test347385() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(57);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 57
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test348386() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(58);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 58
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test349387() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(59);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 59
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test350388() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(61);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 61
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test351389() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(62);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 62
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test352390() throws Throwable {
    int int0 = NodeUtil.precedence(63);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test353391() throws Throwable {
    int int0 = NodeUtil.precedence(64);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test354392() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(65);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 65
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test355393() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(66);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 66
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test356394() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(67);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 67
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test357395() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(68);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 68
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test358396() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(69);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 69
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test359397() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(70);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 70
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test360398() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(71);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 71
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test361399() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(72);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 72
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test362400() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(74);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 74
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test363401() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(75);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 75
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test364402() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(76);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 76
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test365403() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(77);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for TRY (type 77)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test366404() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(79);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 79
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test367405() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(80);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 80
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test368406() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(81);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 81
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test369407() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(82);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 82
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test370408() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(83);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for PARAM_LIST (type 83)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test371409() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(84);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 84
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test372410() throws Throwable {
    int int0 = NodeUtil.precedence(85);
    assertEquals(0, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test373411() throws Throwable {
    int int0 = NodeUtil.precedence(86);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test374412() throws Throwable {
    int int0 = NodeUtil.precedence(87);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test375413() throws Throwable {
    int int0 = NodeUtil.precedence(88);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test376414() throws Throwable {
    int int0 = NodeUtil.precedence(89);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test377415() throws Throwable {
    int int0 = NodeUtil.precedence(90);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test378416() throws Throwable {
    int int0 = NodeUtil.precedence(91);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test379417() throws Throwable {
    int int0 = NodeUtil.precedence(92);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test380418() throws Throwable {
    int int0 = NodeUtil.precedence(93);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test381419() throws Throwable {
    int int0 = NodeUtil.precedence(94);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test382420() throws Throwable {
    int int0 = NodeUtil.precedence(95);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test383421() throws Throwable {
    int int0 = NodeUtil.precedence(96);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test384422() throws Throwable {
    int int0 = NodeUtil.precedence(97);
    assertEquals(1, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test385423() throws Throwable {
    int int0 = NodeUtil.precedence(98);
    assertEquals(2, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test386424() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(99);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 99
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test387425() throws Throwable {
    int int0 = NodeUtil.precedence(100);
    assertEquals(3, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test388426() throws Throwable {
    int int0 = NodeUtil.precedence(101);
    assertEquals(4, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test389427() throws Throwable {
    int int0 = NodeUtil.precedence(102);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test390428() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(104);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 104
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test391429() throws Throwable {
    int int0 = NodeUtil.precedence(105);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test392430() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(106);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 106
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test393431() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(107);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 107
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test394432() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(108);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for IF (type 108)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test395433() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(109);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 109
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test396434() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(110);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for SWITCH (type 110)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test397435() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for CASE (type 111)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test398436() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for DEFAULT_CASE (type 112)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test399437() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(113);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for WHILE (type 113)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test400438() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(114);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for DO (type 114)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test401439() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(115);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for FOR (type 115)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test402440() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(116);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for BREAK (type 116)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test403441() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(117);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for CONTINUE (type 117)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test404442() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(118);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for VAR (type 118)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test405443() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(119);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for WITH (type 119)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test406444() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(120);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for CATCH (type 120)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test407445() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(121);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 121
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test408446() throws Throwable {
    int int0 = NodeUtil.precedence(122);
    assertEquals(13, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test409447() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(123);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 123
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test410448() throws Throwable {
    int int0 = NodeUtil.precedence(124);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test411449() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(125);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for BLOCK (type 125)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test412450() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(126);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for LABEL (type 126)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test413451() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(127);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 127
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test414452() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(128);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 128
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test415453() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(129);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 129
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test416454() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(130);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for EXPR_RESULT (type 130)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test417455() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(131);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 131
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test418456() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(132);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for SCRIPT (type 132)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test419457() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(133);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 133
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test420458() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(134);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 134
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test421459() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(135);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 135
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test422460() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(136);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 136
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test423461() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(137);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 137
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test424462() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(138);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 138
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test425463() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(139);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 139
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test426464() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(140);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 140
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test427465() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(141);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 141
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test428466() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(142);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 142
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test429467() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(143);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 143
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test430468() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(144);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 144
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test431469() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(145);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 145
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test432470() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(146);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 146
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test433471() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(147);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for GETTER_DEF (type 147)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test434472() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(148);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for SETTER_DEF (type 148)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test435473() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(149);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for CONST (type 149)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test436474() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(150);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 150
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test437475() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(151);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 151
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test438476() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(152);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for DEBUGGER (type 152)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test439477() throws Throwable {
    int int0 = NodeUtil.precedence(154);
    assertEquals(15, int0);
}",""
"/*
   *  0 comma ,
   *  1 assignment = += -= *= /= %= <<= >>= >>>= &= ^= |=
   *  2 conditional ?:
   *  3 logical-or ||
   *  4 logical-and &&
   *  5 bitwise-or |
   *  6 bitwise-xor ^
   *  7 bitwise-and &
   *  8 equality == !=
   *  9 relational < <= > >=
   * 10 bitwise shift << >> >>>
   * 11 addition/subtraction + -
   * 12 multiply/divide * / %
   * 13 negation/increment ! ~ - ++ --
   * 14 call, member () [] .
   */
static int precedence(int type) {
    switch(type) {
        case Token.COMMA:
            return 0;
        case Token.ASSIGN_BITOR:
        case Token.ASSIGN_BITXOR:
        case Token.ASSIGN_BITAND:
        case Token.ASSIGN_LSH:
        case Token.ASSIGN_RSH:
        case Token.ASSIGN_URSH:
        case Token.ASSIGN_ADD:
        case Token.ASSIGN_SUB:
        case Token.ASSIGN_MUL:
        case Token.ASSIGN_DIV:
        case Token.ASSIGN_MOD:
        case Token.ASSIGN:
            return 1;
        // ?: operator
        case Token.HOOK:
            return 2;
        case Token.OR:
            return 3;
        case Token.AND:
            return 4;
        case Token.BITOR:
            return 5;
        case Token.BITXOR:
            return 6;
        case Token.BITAND:
            return 7;
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
            return 8;
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        case Token.INSTANCEOF:
        case Token.IN:
            return 9;
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
            return 10;
        case Token.SUB:
        case Token.ADD:
            return 11;
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
            return 12;
        case Token.INC:
        case Token.DEC:
        case Token.NEW:
        case Token.DELPROP:
        case Token.TYPEOF:
        case Token.VOID:
        case Token.NOT:
        case Token.BITNOT:
        case Token.POS:
        case Token.NEG:
            return 13;
        case Token.CALL:
        case Token.GETELEM:
        case Token.GETPROP:
        // Data values
        case Token.ARRAYLIT:
        // TODO(johnlenz): remove this.
        case Token.EMPTY:
        case Token.FALSE:
        case Token.FUNCTION:
        case Token.NAME:
        case Token.NULL:
        case Token.NUMBER:
        case Token.OBJECTLIT:
        case Token.REGEXP:
        case Token.STRING:
        case Token.STRING_KEY:
        case Token.THIS:
        case Token.TRUE:
            return 15;
        default:
            throw new Error(""Unknown precedence for "" + Token.name(type) + "" (type "" + type + "")"");
    }
}","public void test440478() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.precedence(4);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown precedence for RETURN (type 4)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean isNullOrUndefined(Node n) {
    return n.isNull() || isUndefined(n);
}","public void test441479() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""49Xi}"");
    boolean boolean0 = NodeUtil.isNullOrUndefined(node0);
    assertFalse(boolean0);
}",""
"static String getArrayElementStringValue(Node n) {
    return (NodeUtil.isNullOrUndefined(n) || n.isEmpty()) ? """" : getStringValue(n);
}","public void test442480() throws Throwable {
    Node node0 = new Node(31);
    Node node1 = new Node(41, node0);
    String string0 = NodeUtil.getArrayElementStringValue(node1);
    assertEquals("""", string0);
}","/**
 * When converting arrays to string using Array.prototype.toString or
 * Array.prototype.join, the rules for conversion to String are different
 * than converting each element individually.  Specifically, ""null"" and
 * ""undefined"" are converted to an empty string.
 * @param n A node that is a member of an Array.
 * @return The string representation.
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test443481() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.isBooleanResult(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test444482() throws Throwable {
    Node node0 = new Node(86);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test445483() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.isBooleanResult(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test446484() throws Throwable {
    Node node0 = new Node(100);
    // Undeclared exception!
    try {
        NodeUtil.mayBeStringHelper(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test447485() throws Throwable {
    Node node0 = new Node(16, 16, 16);
    Node node1 = new Node(101, node0, 51, 16);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean anyResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return anyResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return anyResultsMatch(n.getFirstChild(), p) || anyResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return anyResultsMatch(n.getFirstChild().getNext(), p) || anyResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test448486() throws Throwable {
    Node node0 = new Node(85);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    // Undeclared exception!
    try {
        NodeUtil.anyResultsMatch(node0, predicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static boolean anyResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return anyResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return anyResultsMatch(n.getFirstChild(), p) || anyResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return anyResultsMatch(n.getFirstChild().getNext(), p) || anyResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test449487() throws Throwable {
    Node node0 = new Node(86);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    // Undeclared exception!
    try {
        NodeUtil.anyResultsMatch(node0, nodeUtil_MatchShallowStatement0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static boolean anyResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return anyResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return anyResultsMatch(n.getFirstChild(), p) || anyResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return anyResultsMatch(n.getFirstChild().getNext(), p) || anyResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test450488() throws Throwable {
    Node node0 = new Node(98);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    // Undeclared exception!
    try {
        NodeUtil.anyResultsMatch(node0, nodeUtil_MatchShallowStatement0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static boolean anyResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return anyResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return anyResultsMatch(n.getFirstChild(), p) || anyResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return anyResultsMatch(n.getFirstChild().getNext(), p) || anyResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test451489() throws Throwable {
    Node node0 = new Node(100, 16, 113);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.anyResultsMatch(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static boolean anyResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return anyResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return anyResultsMatch(n.getFirstChild(), p) || anyResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return anyResultsMatch(n.getFirstChild().getNext(), p) || anyResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test452490() throws Throwable {
    Node node0 = new Node(159, 16, 16);
    Node node1 = new Node(101, node0, 51, 16);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.anyResultsMatch(node1, nodeUtil_MatchShallowStatement0);
    assertFalse(boolean0);
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static boolean anyResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return anyResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return anyResultsMatch(n.getFirstChild(), p) || anyResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return anyResultsMatch(n.getFirstChild().getNext(), p) || anyResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test453491() throws Throwable {
    Node node0 = new Node(156, 16, (-937));
    Node node1 = new Node(101, node0, 51, 16);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    boolean boolean0 = NodeUtil.anyResultsMatch(node1, predicate0);
    assertTrue(boolean0);
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static boolean isNumericResultHelper(Node n) {
    switch(n.getType()) {
        case Token.ADD:
            return !mayBeString(n.getFirstChild()) && !mayBeString(n.getLastChild());
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.SUB:
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
        case Token.INC:
        case Token.DEC:
        case Token.POS:
        case Token.NEG:
        case Token.NUMBER:
            return true;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""NaN"")) {
                return true;
            }
            if (name.equals(""Infinity"")) {
                return true;
            }
            return false;
        default:
            return false;
    }
}","public void test454492() throws Throwable {
    Node node0 = new Node(9, 113, 9);
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test455493() throws Throwable {
    Node node0 = new Node(11);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test456494() throws Throwable {
    Node node0 = new Node(18);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test458496() throws Throwable {
    Node node0 = new Node(63);
    Node node1 = new Node(20, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test459497() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(23, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test459498() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(23, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertEquals(43, node0.getType());
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test460499() throws Throwable {
    Node node0 = new Node(25, 1, 31);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeString(Node n, boolean recurse) {
    if (recurse) {
        return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
    } else {
        return mayBeStringHelper(n);
    }
}","public void test461500() throws Throwable {
    Node node0 = new Node(28, 28, 28);
    boolean boolean0 = NodeUtil.mayBeString(node0, false);
    assertFalse(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test462501() throws Throwable {
    Node node0 = new Node(3644, (-937), 3644);
    Node node1 = new Node(29, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isNumericResultHelper(Node n) {
    switch(n.getType()) {
        case Token.ADD:
            return !mayBeString(n.getFirstChild()) && !mayBeString(n.getLastChild());
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.SUB:
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
        case Token.INC:
        case Token.DEC:
        case Token.POS:
        case Token.NEG:
        case Token.NUMBER:
            return true;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""NaN"")) {
                return true;
            }
            if (name.equals(""Infinity"")) {
                return true;
            }
            return false;
        default:
            return false;
    }
}","public void test463502() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isNumericResultHelper(Node n) {
    switch(n.getType()) {
        case Token.ADD:
            return !mayBeString(n.getFirstChild()) && !mayBeString(n.getLastChild());
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.SUB:
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
        case Token.INC:
        case Token.DEC:
        case Token.POS:
        case Token.NEG:
        case Token.NUMBER:
            return true;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""NaN"")) {
                return true;
            }
            if (name.equals(""Infinity"")) {
                return true;
            }
            return false;
        default:
            return false;
    }
}","public void test464503() throws Throwable {
    Node node0 = Node.newNumber(0.0, 79, 80);
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test465504() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertFalse(boolean0);
}",""
"static boolean isNumericResultHelper(Node n) {
    switch(n.getType()) {
        case Token.ADD:
            return !mayBeString(n.getFirstChild()) && !mayBeString(n.getLastChild());
        case Token.BITNOT:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
        case Token.LSH:
        case Token.RSH:
        case Token.URSH:
        case Token.SUB:
        case Token.MUL:
        case Token.MOD:
        case Token.DIV:
        case Token.INC:
        case Token.DEC:
        case Token.POS:
        case Token.NEG:
        case Token.NUMBER:
            return true;
        case Token.NAME:
            String name = n.getString();
            if (name.equals(""NaN"")) {
                return true;
            }
            if (name.equals(""Infinity"")) {
                return true;
            }
            return false;
        default:
            return false;
    }
}","public void test466505() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
    assertTrue(boolean0);
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test467506() throws Throwable {
    Node node0 = new Node(21);
    Node node1 = NodeUtil.newVarNode("",[F\""q"", node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertEquals(1, node0.getChildCount());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test467507() throws Throwable {
    Node node0 = new Node(21);
    Node node1 = NodeUtil.newVarNode("",[F\""q"", node0);
    node0.addChildToFront(node1);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test468508() throws Throwable {
    Node node0 = new Node(101);
    Node node1 = new Node(12, node0, 44, 44);
    boolean boolean0 = NodeUtil.isBooleanResult(node1);
    assertTrue(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test469509() throws Throwable {
    Node node0 = new Node((-2432));
    Node node1 = new Node(13, node0, 40, (-223));
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test470510() throws Throwable {
    Node node0 = new Node(14);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test471511() throws Throwable {
    Node node0 = new Node(137, 137, 137);
    Node node1 = new Node(15, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static int getCount(Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    int total = 0;
    if (pred.apply(n)) {
        total++;
    }
    if (traverseChildrenPred.apply(n)) {
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            total += getCount(c, pred, traverseChildrenPred);
        }
    }
    return total;
}","public void test472512() throws Throwable {
    Node node0 = new Node(17, 2371, 2371);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
    assertEquals(1, int0);
}","/**
 * @return The number of times the the predicate is true for the node
 * or any of its children.
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test473513() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(18, node0);
    boolean boolean0 = NodeUtil.isBooleanResult(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test474514() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(23, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(node0.isTrue());
}",""
"static boolean isBooleanResultHelper(Node n) {
    switch(n.getType()) {
        // Primitives
        case Token.TRUE:
        case Token.FALSE:
        // Comparisons
        case Token.EQ:
        case Token.NE:
        case Token.SHEQ:
        case Token.SHNE:
        case Token.LT:
        case Token.GT:
        case Token.LE:
        case Token.GE:
        // Queries
        case Token.IN:
        case Token.INSTANCEOF:
        // Inversion
        case Token.NOT:
        // delete operator returns a boolean.
        case Token.DELPROP:
            return true;
        default:
            return false;
    }
}","public void test474515() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(23, node0);
    boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test475516() throws Throwable {
    Node node0 = Node.newString(24, ""y5X"");
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test476517() throws Throwable {
    Node node0 = new Node(25, 2, 31);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test477518() throws Throwable {
    Node node0 = new Node(28);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test478519() throws Throwable {
    Node node0 = Node.newString(""-&<&"");
    Node node1 = new Node(29, node0);
    boolean boolean0 = NodeUtil.isBooleanResult(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test479520() throws Throwable {
    Node node0 = new Node(74);
    Node node1 = new Node(31, node0, node0, 12, 47);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static int getCount(Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    int total = 0;
    if (pred.apply(n)) {
        total++;
    }
    if (traverseChildrenPred.apply(n)) {
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            total += getCount(c, pred, traverseChildrenPred);
        }
    }
    return total;
}","public void test480521() throws Throwable {
    Node node0 = new Node(32, 2365, 2365);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    int int0 = NodeUtil.getCount(node0, nodeUtil_BooleanResultPredicate0, nodeUtil_BooleanResultPredicate0);
    assertEquals(0, int0);
}","/**
 * @return The number of times the the predicate is true for the node
 * or any of its children.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test481522() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertEquals(2, node0.getChildCount());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test481523() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
    assertTrue(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test482524() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test483525() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test484526() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "">>>="");
    Node node1 = new Node(36, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isBooleanResult(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test485527() throws Throwable {
    Node node0 = new Node(173);
    Node node1 = new Node(37, node0, node0, node0);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_BooleanResultPredicate0);
    assertFalse(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static int getNodeTypeReferenceCount(Node node, int type, Predicate<Node> traverseChildrenPred) {
    return getCount(node, new MatchNodeType(type), traverseChildrenPred);
}","public void test486528() throws Throwable {
    Node node0 = Node.newNumber(1.0, (-4121), (-4121));
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 38, nodeUtil_BooleanResultPredicate0);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test487529() throws Throwable {
    Node node0 = Node.newString(""_or{c/h!jMM6"", 85, 85);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test488530() throws Throwable {
    Node node0 = new Node((-2385), 17, 112);
    Node node1 = new Node(41, node0);
    boolean boolean0 = NodeUtil.mayBeString(node1);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test489531() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(42, node0);
    boolean boolean0 = NodeUtil.isBooleanResult(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test489532() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(42, node0);
    boolean boolean0 = NodeUtil.isBooleanResult(node1);
    assertFalse(node0.isTrue());
}",""
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test490533() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test491534() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(45, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(node0.isTrue());
}",""
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test491535() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(45, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean isBooleanResult(Node n) {
    return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);
}","public void test492536() throws Throwable {
    Node node0 = Node.newString(46, ""JSCompiler_returnArg"", 109, 32);
    boolean boolean0 = NodeUtil.isBooleanResult(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the result of node evaluation is always a boolean
 */"
"static int getNodeTypeReferenceCount(Node node, int type, Predicate<Node> traverseChildrenPred) {
    return getCount(node, new MatchNodeType(type), traverseChildrenPred);
}","public void test493537() throws Throwable {
    Node node0 = new Node(47, 2076, 16);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = NodeUtil.BOOLEAN_RESULT_PREDICATE;
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 118, nodeUtil_BooleanResultPredicate0);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test494538() throws Throwable {
    Node node0 = new Node(3, 3, 3);
    Node node1 = new Node(48, node0, 54, 8);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertTrue(boolean0);
}",""
"static int getNodeTypeReferenceCount(Node node, int type, Predicate<Node> traverseChildrenPred) {
    return getCount(node, new MatchNodeType(type), traverseChildrenPred);
}","public void test495539() throws Throwable {
    Node node0 = new Node(49, 31, 51);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    int int0 = NodeUtil.getNodeTypeReferenceCount(node0, 16, nodeUtil_BooleanResultPredicate0);
    assertEquals(0, int0);
}","/**
 * Finds the number of times a type is referenced within the node tree.
 */"
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test496540() throws Throwable {
    Node node0 = new Node(50, 50, 50);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertTrue(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean mayBeStringHelper(Node n) {
    return !isNumericResult(n) && !isBooleanResult(n) && !isUndefined(n) && !n.isNull();
}","public void test498542() throws Throwable {
    Node node0 = new Node((-1305), (-1305), (-1305));
    Node node1 = new Node(52, node0);
    boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
    assertFalse(boolean0);
}",""
"static boolean mayBeString(Node n) {
    return mayBeString(n, true);
}","public void test499543() throws Throwable {
    Node node0 = new Node(122, 122, 122);
    boolean boolean0 = NodeUtil.mayBeString(node0);
    assertFalse(boolean0);
}","/**
 * @returns Whether the results is possibly a string.
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test500544() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(9);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test501545() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(32);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test502546() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test503547() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(100);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isAssociative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.AND:
        case Token.OR:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test504548() throws Throwable {
    boolean boolean0 = NodeUtil.isAssociative(101);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is associative.
 * e.g. (a * b) * c = a * (b * c)
 * Note: ""+"" is not associative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test505549() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(9);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test506550() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(24);
    assertFalse(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test507551() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(10);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean isCommutative(int type) {
    switch(type) {
        case Token.MUL:
        case Token.BITOR:
        case Token.BITXOR:
        case Token.BITAND:
            return true;
        default:
            return false;
    }
}","public void test508552() throws Throwable {
    boolean boolean0 = NodeUtil.isCommutative(23);
    assertTrue(boolean0);
}","/**
 * Returns true if the operator is commutative.
 * e.g. (a * b) * c = c * (b * a)
 * Note 1: ""+"" is not commutative because it is also the concatenation
 * for strings. e.g. ""a"" + (1 + 2) is not ""a"" + 1 + 2
 * Note 2: only operations on literals and pure functions are commutative.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test509553() throws Throwable {
    Node node0 = new Node(89);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assignment op:"" + n);
}","public void test510554() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    // Undeclared exception!
    try {
        NodeUtil.getOpFromAssignmentOp(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not an assignment op:FALSE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assignment op:"" + n);
}","public void test511555() throws Throwable {
    Node node0 = new Node(88, 88, 88);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(10, int0);
}",""
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test512556() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    assertTrue(node0.isFalse());
}",""
"static int getOpFromAssignmentOp(Node n) {
    switch(n.getType()) {
        case Token.ASSIGN_BITOR:
            return Token.BITOR;
        case Token.ASSIGN_BITXOR:
            return Token.BITXOR;
        case Token.ASSIGN_BITAND:
            return Token.BITAND;
        case Token.ASSIGN_LSH:
            return Token.LSH;
        case Token.ASSIGN_RSH:
            return Token.RSH;
        case Token.ASSIGN_URSH:
            return Token.URSH;
        case Token.ASSIGN_ADD:
            return Token.ADD;
        case Token.ASSIGN_SUB:
            return Token.SUB;
        case Token.ASSIGN_MUL:
            return Token.MUL;
        case Token.ASSIGN_DIV:
            return Token.DIV;
        case Token.ASSIGN_MOD:
            return Token.MOD;
    }
    throw new IllegalArgumentException(""Not an assignment op:"" + n);
}","public void test512557() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    node0.setType(92);
    int int0 = NodeUtil.getOpFromAssignmentOp(node0);
    assertEquals(20, int0);
}",""
"static boolean referencesThis(Node n) {
    Node start = (n.isFunction()) ? n.getLastChild() : n;
    return containsType(start, Token.THIS, MATCH_NOT_FUNCTION);
}","public void test513558() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = NodeUtil.referencesThis(node0);
    assertFalse(boolean0);
}","/**
 * Returns true if the shallow scope contains references to 'this' keyword
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test514559() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""com.google.javascript.jscomp.DefaultPassConfig$60"", ""j:Q:"");
    assertEquals(1, node0.getLineno());
}",""
"public boolean isEmpty() {
    return this.getType() == Token.EMPTY;
}","public void test515560() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""null"");
    ExploitAssigns exploitAssigns0 = new ExploitAssigns();
    Node node1 = exploitAssigns0.optimizeSubtree(node0);
    assertFalse(node1.isEmpty());
}",""
"static boolean isExprCall(Node n) {
    return n.isExprResult() && n.getFirstChild().isCall();
}","public void test516561() throws Throwable {
    Node node0 = new Node(76);
    boolean boolean0 = NodeUtil.isExprCall(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a call expression statement?
 *
 * @param n The node
 * @return True if {@code n} is EXPR_RESULT and {@code n}'s
 *     first child is CALL
 */"
"static boolean isForIn(Node n) {
    return n.isFor() && n.getChildCount() == 3;
}","public void test517562() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    boolean boolean0 = NodeUtil.isForIn(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a FOR-IN loop.
 */"
"static boolean isWithinLoop(Node n) {
    for (Node parent : n.getAncestors()) {
        if (NodeUtil.isLoopStructure(parent)) {
            return true;
        }
        if (parent.isFunction()) {
            break;
        }
    }
    return false;
}","public void test518563() throws Throwable {
    Node node0 = Node.newString(""m"");
    Node node1 = new Node(113, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the specified node has a loop parent that
 * is within the current scope.
 */"
"static boolean isWithinLoop(Node n) {
    for (Node parent : n.getAncestors()) {
        if (NodeUtil.isLoopStructure(parent)) {
            return true;
        }
        if (parent.isFunction()) {
            break;
        }
    }
    return false;
}","public void test519564() throws Throwable {
    Node node0 = new Node(156);
    Node node1 = new Node(39, node0, 1, 53);
    boolean boolean0 = NodeUtil.isWithinLoop(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the specified node has a loop parent that
 * is within the current scope.
 */"
"public boolean isObjectLit() {
    return this.getType() == Token.OBJECTLIT;
}","public void test520565() throws Throwable {
    Node node0 = Node.newString(""m"");
    Node node1 = new Node(113, node0, node0, node0, node0);
    Node node2 = NodeUtil.getLoopCodeBlock(node1);
    assertFalse(node2.isObjectLit());
}",""
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test521566() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static Node getLoopCodeBlock(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.WHILE:
            return n.getLastChild();
        case Token.DO:
            return n.getFirstChild();
        default:
            return null;
    }
}","public void test522567() throws Throwable {
    Node node0 = new Node(115, 115, 115);
    Node node1 = NodeUtil.getLoopCodeBlock(node0);
    assertNull(node1);
}","/**
 * @param n The node to inspect.
 * @return If the node, is a FOR, WHILE, or DO, it returns the node for
 * the code BLOCK, null otherwise.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test523568() throws Throwable {
    Node node0 = new Node(77);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test524569() throws Throwable {
    Node node0 = new Node(108, (-2447), (-937));
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test525570() throws Throwable {
    Node node0 = new Node(110, 957, 957);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test526571() throws Throwable {
    Node node0 = new Node(112, (-937), (-1687));
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test527572() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test528573() throws Throwable {
    Node node0 = new Node(115);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test529574() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test530575() throws Throwable {
    Node node0 = Node.newString(120, ""F"");
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructure(Node n) {
    switch(n.getType()) {
        case Token.FOR:
        case Token.DO:
        case Token.WHILE:
        case Token.WITH:
        case Token.IF:
        case Token.LABEL:
        case Token.TRY:
        case Token.CATCH:
        case Token.SWITCH:
        case Token.CASE:
        case Token.DEFAULT_CASE:
            return true;
        default:
            return false;
    }
}","public void test531576() throws Throwable {
    Node node0 = Node.newString(126, "")UCvX{#oj6),g,7i5_"", 61, 131);
    boolean boolean0 = NodeUtil.isControlStructure(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT_CASE:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test532577() throws Throwable {
    Node node0 = new Node(77, 77, 77);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT_CASE:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test533578() throws Throwable {
    Node node0 = new Node(108);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT_CASE:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test534579() throws Throwable {
    Node node0 = new Node(112);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT_CASE:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test535580() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT_CASE:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test536581() throws Throwable {
    Node node0 = Node.newString(126, "")UCvX{#oj6),g,7i5_"", 61, 131);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT_CASE:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test537582() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    // Undeclared exception!
    try {
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static boolean isControlStructureCodeBlock(Node parent, Node n) {
    switch(parent.getType()) {
        case Token.FOR:
        case Token.WHILE:
        case Token.LABEL:
        case Token.WITH:
            return parent.getLastChild() == n;
        case Token.DO:
            return parent.getFirstChild() == n;
        case Token.IF:
            return parent.getFirstChild() != n;
        case Token.TRY:
            return parent.getFirstChild() == n || parent.getLastChild() == n;
        case Token.CATCH:
            return parent.getLastChild() == n;
        case Token.SWITCH:
        case Token.CASE:
            return parent.getFirstChild() != n;
        case Token.DEFAULT_CASE:
            return true;
        default:
            Preconditions.checkState(isControlStructure(parent));
            return false;
    }
}","public void test538583() throws Throwable {
    Node node0 = new Node(115, 26, 838);
    boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, (Node) null);
    assertTrue(boolean0);
}","/**
 * Determines whether the given node is code node for FOR, DO,
 * WHILE, WITH, or IF node.
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test539584() throws Throwable {
    Node node0 = new Node(43, 43, 43);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // FALSE 43 does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test540585() throws Throwable {
    Node node0 = new Node(112, 2165, (-1687));
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // DEFAULT_CASE does not have a condition.
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test541586() throws Throwable {
    Node node0 = new Node(113);
    Node node1 = NodeUtil.getConditionExpression(node0);
    assertNull(node1);
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static Node getConditionExpression(Node n) {
    switch(n.getType()) {
        case Token.IF:
        case Token.WHILE:
            return n.getFirstChild();
        case Token.DO:
            return n.getLastChild();
        case Token.FOR:
            switch(n.getChildCount()) {
                case 3:
                    return null;
                case 4:
                    return n.getFirstChild().getNext();
            }
            throw new IllegalArgumentException(""malformed 'for' statement "" + n);
        case Token.CASE:
            return null;
    }
    throw new IllegalArgumentException(n + "" does not have a condition."");
}","public void test542587() throws Throwable {
    Node node0 = new Node(115);
    // Undeclared exception!
    try {
        NodeUtil.getConditionExpression(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // malformed 'for' statement FOR
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Gets the condition of an ON_TRUE / ON_FALSE CFG edge.
 * @param n a node with an outgoing conditional CFG edge
 * @return the condition node or null if the condition is not obviously a node
 */"
"static boolean isStatementBlock(Node n) {
    return n.isScript() || n.isBlock();
}","public void test543588() throws Throwable {
    Node node0 = new Node(139);
    Node node1 = new Node(125, node0, node0, node0);
    boolean boolean0 = NodeUtil.isStatementBlock(node1);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is of a type that contain other statements.
 */"
"static boolean isStatementParent(Node parent) {
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test544589() throws Throwable {
    Node node0 = new Node(125, 2371, 2371);
    boolean boolean0 = NodeUtil.isStatementParent(node0);
    assertTrue(boolean0);
}",""
"static boolean isStatementParent(Node parent) {
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getType()) {
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
            return true;
        default:
            return false;
    }
}","public void test545590() throws Throwable {
    Node node0 = new Node(132, 2371, 2371);
    boolean boolean0 = NodeUtil.isStatementParent(node0);
    assertTrue(boolean0);
}",""
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise, only its children can be removed.
            node.detachChildren();
        }
    } else if (node.isCatch()) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.isBlock()) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.isVar()) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.isLabel() && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.isFor() && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, IR.empty());
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test546591() throws Throwable {
    Node node0 = new Node(112, (-1687), (-1687));
    Node node1 = new Node(55, node0, node0, 1, 4113);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static boolean isReferenceName(Node n) {
    return n.isName() && !n.getString().isEmpty();
}","public void test547592() throws Throwable {
    Node node0 = new Node(32, 2365, 2365);
    boolean boolean0 = NodeUtil.isReferenceName(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"static boolean isReferenceName(Node n) {
    return n.isName() && !n.getString().isEmpty();
}","public void test548593() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = Node.newString(154, """", 154, 154);
    Node node1 = NodeUtil.newName(googleCodingConvention0, """", node0);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"static boolean isReferenceName(Node n) {
    return n.isName() && !n.getString().isEmpty();
}","public void test549594() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = Node.newString(""qD Q46J`b"", (-9), (-9));
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""qD Q46J`b"", node0);
    boolean boolean0 = NodeUtil.isReferenceName(node1);
    assertTrue(boolean0);
}","/**
 * @return Whether the name is a reference to a variable, function or
 *       function parameter (not a label or a empty function expression name).
 */"
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise, only its children can be removed.
            node.detachChildren();
        }
    } else if (node.isCatch()) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.isBlock()) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.isVar()) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.isLabel() && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.isFor() && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, IR.empty());
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test550595() throws Throwable {
    Node node0 = new Node(156, 16, (-914));
    Node node1 = new Node(101, node0, 51, 16);
    Compiler compiler0 = new Compiler();
    Node node2 = compiler0.parseTestCode(""779/J)"");
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node2, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"static void removeChild(Node parent, Node node) {
    if (isTryFinallyNode(parent, node)) {
        if (NodeUtil.hasCatchHandler(getCatchBlock(parent))) {
            // A finally can only be removed if there is a catch.
            parent.removeChild(node);
        } else {
            // Otherwise, only its children can be removed.
            node.detachChildren();
        }
    } else if (node.isCatch()) {
        // The CATCH can can only be removed if there is a finally clause.
        Node tryNode = node.getParent().getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachFromParent();
    } else if (isTryCatchNodeContainer(node)) {
        // The container node itself can't be removed, but the contained CATCH
        // can if there is a 'finally' clause
        Node tryNode = node.getParent();
        Preconditions.checkState(NodeUtil.hasFinally(tryNode));
        node.detachChildren();
    } else if (node.isBlock()) {
        // Simply empty the block.  This maintains source location and
        // ""synthetic""-ness.
        node.detachChildren();
    } else if (isStatementBlock(parent) || isSwitchCase(node)) {
        // A statement in a block can simply be removed.
        parent.removeChild(node);
    } else if (parent.isVar()) {
        if (parent.hasMoreThanOneChild()) {
            parent.removeChild(node);
        } else {
            // Remove the node from the parent, so it can be reused.
            parent.removeChild(node);
            // This would leave an empty VAR, remove the VAR itself.
            removeChild(parent.getParent(), parent);
        }
    } else if (parent.isLabel() && node == parent.getLastChild()) {
        // Remove the node from the parent, so it can be reused.
        parent.removeChild(node);
        // A LABEL without children can not be referred to, remove it.
        removeChild(parent.getParent(), parent);
    } else if (parent.isFor() && parent.getChildCount() == 4) {
        // Only Token.FOR can have an Token.EMPTY other control structure
        // need something for the condition. Others need to be replaced
        // or the structure removed.
        parent.replaceChild(node, IR.empty());
    } else {
        throw new IllegalStateException(""Invalid attempt to remove node: "" + node.toString() + "" of "" + parent.toString());
    }
}","public void test551596() throws Throwable {
    Node node0 = new Node(85);
    Node node1 = new Node(76, node0, 1, 41);
    // Undeclared exception!
    try {
        NodeUtil.removeChild(node0, node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Invalid attempt to remove node: COMMA of COMMA
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Safely remove children while maintaining a valid node structure.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test552597() throws Throwable {
    Node node0 = new Node(77, 8199, 8199);
    NodeUtil.maybeAddFinally(node0);
    assertEquals(1, node0.getChildCount());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test552598() throws Throwable {
    Node node0 = new Node(77, 8199, 8199);
    NodeUtil.maybeAddFinally(node0);
    assertTrue(node0.hasChildren());
}",""
"static boolean isHoistedFunctionDeclaration(Node n) {
    return isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
}","public void test553599() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(53, node0, (-824), 55);
    boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * Is this node a hoisted function declaration? A function declaration in the
 * scope root is hoisted to the top of the scope.
 * See {@link #isFunctionDeclaration}).
 */"
"static boolean isBleedingFunctionName(Node n) {
    return n.isName() && !n.getString().isEmpty() && isFunctionExpression(n.getParent());
}","public void test554600() throws Throwable {
    Node node0 = Node.newString(""d_I&9AJW]["", 64, 64);
    boolean boolean0 = NodeUtil.isBleedingFunctionName(node0);
    assertFalse(boolean0);
}","/**
 * Returns whether this is a bleeding function (an anonymous named function
 * that bleeds into the inner scope).
 */"
"static boolean isBleedingFunctionName(Node n) {
    return n.isName() && !n.getString().isEmpty() && isFunctionExpression(n.getParent());
}","public void test555601() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""f"");
    // Undeclared exception!
    try {
        NodeUtil.isBleedingFunctionName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Returns whether this is a bleeding function (an anonymous named function
 * that bleeds into the inner scope).
 */"
"static boolean isEmptyFunctionExpression(Node node) {
    return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());
}","public void test556602() throws Throwable {
    Node node0 = new Node(58);
    boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
    assertFalse(boolean0);
}","/**
 * Determines if a node is a function expression that has an empty body.
 *
 * @param node a node
 * @return whether the given node is a function expression that is empty
 */"
"static boolean isObjectCallMethod(Node callNode, String methodName) {
    if (callNode.isCall()) {
        Node functionIndentifyingExpression = callNode.getFirstChild();
        if (isGet(functionIndentifyingExpression)) {
            Node last = functionIndentifyingExpression.getLastChild();
            if (last != null && last.isString()) {
                String propName = last.getString();
                return (propName.equals(methodName));
            }
        }
    }
    return false;
}","public void test557603() throws Throwable {
    Node node0 = Node.newString(63, ""!ESQQnJgD/{Vz+32GL"", 110, 4367);
    Node node1 = new Node(37, node0, node0, 39, (-31));
    boolean boolean0 = NodeUtil.isObjectCallMethod(node1, ""!ESQQnJgD/{Vz+32GL"");
    assertFalse(boolean0);
}","/**
 * @return Whether node is a call to methodName.
 *    a.f(...)
 *    a['f'](...)
 */"
"static boolean isVarOrSimpleAssignLhs(Node n, Node parent) {
    return (parent.isAssign() && parent.getFirstChild() == n) || parent.isVar();
}","public void test558604() throws Throwable {
    Node node0 = new Node(86, 86, 86);
    boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test559605() throws Throwable {
    Node node0 = new Node(3);
    Node node1 = NodeUtil.newVarNode(""."", node0);
    boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
    assertFalse(node0.hasChildren());
}",""
"static boolean isVarOrSimpleAssignLhs(Node n, Node parent) {
    return (parent.isAssign() && parent.getFirstChild() == n) || parent.isVar();
}","public void test559606() throws Throwable {
    Node node0 = new Node(3);
    Node node1 = NodeUtil.newVarNode(""."", node0);
    boolean boolean0 = NodeUtil.isVarOrSimpleAssignLhs(node0, node1);
    assertTrue(boolean0);
}","/**
 * Determines whether this node is strictly on the left hand side of an assign
 * or var initialization. Notably, this does not include all L-values, only
 * statements where the node is used only as an L-value.
 *
 * @param n The node
 * @param parent Parent of the node
 * @return True if n is the left hand of an assign
 */"
"public static boolean isLValue(Node n) {
    Preconditions.checkArgument(n.isName() || n.isGetProp() || n.isGetElem());
    Node parent = n.getParent();
    if (parent == null) {
        return false;
    }
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == n) || parent.isVar() || (parent.isFunction() && parent.getFirstChild() == n) || parent.isDec() || parent.isInc() || parent.isParamList() || parent.isCatch();
}","public void test560607() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, ""M4aU*3HqbT!8cIf"");
    boolean boolean0 = NodeUtil.isLValue(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as syntactically similar to
 * ""var x = 0;"".
 *
 * @param n The node
 * @return True if n is an L-value.
 */"
"public static boolean isLValue(Node n) {
    Preconditions.checkArgument(n.isName() || n.isGetProp() || n.isGetElem());
    Node parent = n.getParent();
    if (parent == null) {
        return false;
    }
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == n) || parent.isVar() || (parent.isFunction() && parent.getFirstChild() == n) || parent.isDec() || parent.isInc() || parent.isParamList() || parent.isCatch();
}","public void test561608() throws Throwable {
    Node node0 = new Node(8257);
    // Undeclared exception!
    try {
        NodeUtil.isLValue(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as syntactically similar to
 * ""var x = 0;"".
 *
 * @param n The node
 * @return True if n is an L-value.
 */"
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test562609() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(35, node0);
    boolean boolean0 = NodeUtil.isLValue(node1);
    assertTrue(node0.isFalse());
}",""
"public static boolean isLValue(Node n) {
    Preconditions.checkArgument(n.isName() || n.isGetProp() || n.isGetElem());
    Node parent = n.getParent();
    if (parent == null) {
        return false;
    }
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == n) || parent.isVar() || (parent.isFunction() && parent.getFirstChild() == n) || parent.isDec() || parent.isInc() || parent.isParamList() || parent.isCatch();
}","public void test562610() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(35, node0);
    boolean boolean0 = NodeUtil.isLValue(node1);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as syntactically similar to
 * ""var x = 0;"".
 *
 * @param n The node
 * @return True if n is an L-value.
 */"
"public static boolean isLValue(Node n) {
    Preconditions.checkArgument(n.isName() || n.isGetProp() || n.isGetElem());
    Node parent = n.getParent();
    if (parent == null) {
        return false;
    }
    return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || (NodeUtil.isForIn(parent) && parent.getFirstChild() == n) || parent.isVar() || (parent.isFunction() && parent.getFirstChild() == n) || parent.isDec() || parent.isInc() || parent.isParamList() || parent.isCatch();
}","public void test563611() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "".%"");
    Node node1 = new Node(19, node0, node0, 40, 1675);
    boolean boolean0 = NodeUtil.isLValue(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether this node is used as an L-value. Notice that sometimes
 * names are used as both L-values and R-values.
 *
 * We treat ""var x;"" as a pseudo-L-value, which kind of makes sense if you
 * treat it as ""assignment to 'undefined' at the top of the scope"". But if
 * we're honest with ourselves, it doesn't make sense, and we only do this
 * because it makes sense to treat this as syntactically similar to
 * ""var x = 0;"".
 *
 * @param n The node
 * @return True if n is an L-value.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test563612() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "".%"");
    Node node1 = new Node(19, node0, node0, 40, 1675);
    boolean boolean0 = NodeUtil.isLValue(node0);
    assertEquals(2, node0.getChildCount());
}",""
"static boolean isObjectLitKey(Node node, Node parent) {
    switch(node.getType()) {
        case Token.STRING_KEY:
        case Token.GETTER_DEF:
        case Token.SETTER_DEF:
            return true;
    }
    return false;
}","public void test564613() throws Throwable {
    Node node0 = new Node(147);
    boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
    assertTrue(boolean0);
}","/**
 * Determines whether a node represents an object literal key
 * (e.g. key1 in {key1: value1, key2: value2}).
 *
 * @param node A node
 * @param parent The node's parent
 */"
"static String getBestLValueName(@Nullable Node lValue) {
    if (lValue == null || lValue.getParent() == null) {
        return null;
    }
    if (isObjectLitKey(lValue, lValue.getParent())) {
        Node owner = getBestLValue(lValue.getParent());
        if (owner != null) {
            String ownerName = getBestLValueName(owner);
            if (ownerName != null) {
                return ownerName + ""."" + getObjectLitKeyName(lValue);
            }
        }
        return null;
    }
    return lValue.getQualifiedName();
}","public void test565614() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = new Node(49, node0, node0, 1545, 49);
    // Undeclared exception!
    try {
        NodeUtil.getBestLValueName(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Get the name of the given l-value node.
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.STRING_KEY:
        case Token.GETTER_DEF:
        case Token.SETTER_DEF:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test566615() throws Throwable {
    Node node0 = new Node(147);
    // Undeclared exception!
    try {
        NodeUtil.getObjectLitKeyName(node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // GETTER_DEF is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.STRING_KEY:
        case Token.GETTER_DEF:
        case Token.SETTER_DEF:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test567616() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    // Undeclared exception!
    try {
        NodeUtil.getObjectLitKeyName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unexpected node type: WITH 119
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static String getObjectLitKeyName(Node key) {
    switch(key.getType()) {
        case Token.STRING_KEY:
        case Token.GETTER_DEF:
        case Token.SETTER_DEF:
            return key.getString();
    }
    throw new IllegalStateException(""Unexpected node type: "" + key);
}","public void test568617() throws Throwable {
    Node node0 = new Node(154);
    // Undeclared exception!
    try {
        NodeUtil.getObjectLitKeyName(node0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING_KEY is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Get the name of an object literal key.
 *
 * @param key A node
 */"
"static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType) {
    if (valueType != null) {
        switch(key.getType()) {
            case Token.GETTER_DEF:
                // GET must always return a function type.
                if (valueType.isFunctionType()) {
                    FunctionType fntype = valueType.toMaybeFunctionType();
                    valueType = fntype.getReturnType();
                } else {
                    return null;
                }
                break;
            case Token.SETTER_DEF:
                if (valueType.isFunctionType()) {
                    // SET must always return a function type.
                    FunctionType fntype = valueType.toMaybeFunctionType();
                    Node param = fntype.getParametersNode().getFirstChild();
                    // SET function must always have one parameter.
                    valueType = param.getJSType();
                } else {
                    return null;
                }
                break;
        }
    }
    return valueType;
}","public void test569618() throws Throwable {
    Node node0 = new Node(116, 116, 116);
    JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
    assertNull(jSType0);
}","/**
 * @param key A OBJECTLIT key node.
 * @return The type expected when using the key.
 */"
"public boolean isFunctionPrototypeType() {
    return false;
}","public void test570619() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseVoidType();
    Node node0 = new Node(105);
    JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
    assertFalse(jSType1.isFunctionPrototypeType());
}","/**
 * Whether this is the prototype of a function.
 */"
"static boolean isGetOrSetKey(Node node) {
    switch(node.getType()) {
        case Token.GETTER_DEF:
        case Token.SETTER_DEF:
            return true;
    }
    return false;
}","public void test571620() throws Throwable {
    Node node0 = new Node(147, 2588, 2588);
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertTrue(boolean0);
}","/**
 * Determines whether a node represents an object literal get or set key
 * (e.g. key1 in {get key1() {}, set key2(a){}).
 *
 * @param node A node
 */"
"static boolean isGetOrSetKey(Node node) {
    switch(node.getType()) {
        case Token.GETTER_DEF:
        case Token.SETTER_DEF:
            return true;
    }
    return false;
}","public void test572621() throws Throwable {
    Node node0 = new Node(58, 1099, 1099);
    boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
    assertFalse(boolean0);
}","/**
 * Determines whether a node represents an object literal get or set key
 * (e.g. key1 in {get key1() {}, set key2(a){}).
 *
 * @param node A node
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test573622() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(9);
    assertEquals(""|"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test574623() throws Throwable {
    String string0 = NodeUtil.opToStr(45);
    assertEquals(""==="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test575624() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(10);
    assertEquals(""^"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test576625() throws Throwable {
    String string0 = NodeUtil.opToStr(11);
    assertEquals(""&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test577626() throws Throwable {
    String string0 = NodeUtil.opToStr(12);
    assertEquals(""=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test578627() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(13);
    assertEquals(""!="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test579628() throws Throwable {
    String string0 = NodeUtil.opToStr(14);
    assertEquals(""<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test580629() throws Throwable {
    String string0 = NodeUtil.opToStr(15);
    assertEquals(""<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test581630() throws Throwable {
    String string0 = NodeUtil.opToStr(16);
    assertEquals("">"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test582631() throws Throwable {
    String string0 = NodeUtil.opToStr(17);
    assertEquals("">="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test583632() throws Throwable {
    String string0 = NodeUtil.opToStr(18);
    assertEquals(""<<"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test584633() throws Throwable {
    String string0 = NodeUtil.opToStr(19);
    assertEquals("">>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test585634() throws Throwable {
    String string0 = NodeUtil.opToStr(20);
    assertEquals("">>>"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test586635() throws Throwable {
    String string0 = NodeUtil.opToStr(21);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test587636() throws Throwable {
    String string0 = NodeUtil.opToStr(22);
    assertEquals(""-"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test588637() throws Throwable {
    String string0 = NodeUtil.opToStr(23);
    assertEquals(""*"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test589638() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(24);
    assertEquals(""/"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test590639() throws Throwable {
    String string0 = NodeUtil.opToStr(25);
    assertEquals(""%"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test591640() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(26);
    assertEquals(""!"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test592641() throws Throwable {
    String string0 = NodeUtil.opToStr(27);
    assertEquals(""~"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test593642() throws Throwable {
    String string0 = NodeUtil.opToStr(28);
    assertEquals(""+"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test594643() throws Throwable {
    String string0 = NodeUtil.opToStr(29);
    assertNotNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test595645() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(30);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 30: NEW
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test596646() throws Throwable {
    String string0 = NodeUtil.opToStr(31);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test597647() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(32);
    assertEquals(""typeof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test598648() throws Throwable {
    String string0 = NodeUtil.opToStr(33);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test599649() throws Throwable {
    String string0 = NodeUtil.opToStr(34);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test600650() throws Throwable {
    String string0 = NodeUtil.opToStr(35);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test601651() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(36);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 36
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test602652() throws Throwable {
    String string0 = NodeUtil.opToStr(37);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test603653() throws Throwable {
    String string0 = NodeUtil.opToStr(38);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test604654() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(39);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 39: NUMBER
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test605655() throws Throwable {
    String string0 = NodeUtil.opToStr(40);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test606656() throws Throwable {
    String string0 = NodeUtil.opToStr(41);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test607657() throws Throwable {
    String string0 = NodeUtil.opToStr(42);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test608658() throws Throwable {
    String string0 = NodeUtil.opToStr(43);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test609659() throws Throwable {
    String string0 = NodeUtil.opToStr(44);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test610660() throws Throwable {
    String string0 = NodeUtil.opToStr(46);
    assertEquals(""!=="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test611661() throws Throwable {
    String string0 = NodeUtil.opToStr(47);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test612662() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(48);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 48
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test613663() throws Throwable {
    String string0 = NodeUtil.opToStr(49);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test614664() throws Throwable {
    String string0 = NodeUtil.opToStr(50);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test615665() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(51);
    assertEquals(""in"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test616666() throws Throwable {
    String string0 = NodeUtil.opToStr(52);
    assertEquals(""instanceof"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test617667() throws Throwable {
    String string0 = NodeUtil.opToStr(53);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test618668() throws Throwable {
    String string0 = NodeUtil.opToStr(54);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test619669() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(55);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 55
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test620670() throws Throwable {
    String string0 = NodeUtil.opToStr(56);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test621671() throws Throwable {
    String string0 = NodeUtil.opToStr(57);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test622672() throws Throwable {
    String string0 = NodeUtil.opToStr(58);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test623673() throws Throwable {
    String string0 = NodeUtil.opToStr(59);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test624674() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail('<');
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 60
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test625675() throws Throwable {
    String string0 = NodeUtil.opToStr(61);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test626676() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(62);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 62
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test627677() throws Throwable {
    String string0 = NodeUtil.opToStr(63);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test628678() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(64);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 64: OBJECTLIT
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test629679() throws Throwable {
    String string0 = NodeUtil.opToStr(65);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test630680() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(66);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 66
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test631681() throws Throwable {
    String string0 = NodeUtil.opToStr(67);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test632682() throws Throwable {
    String string0 = NodeUtil.opToStr(68);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test633683() throws Throwable {
    String string0 = NodeUtil.opToStr(70);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test634684() throws Throwable {
    String string0 = NodeUtil.opToStr(71);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test635685() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(72);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 72
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test636686() throws Throwable {
    String string0 = NodeUtil.opToStr(73);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test637687() throws Throwable {
    String string0 = NodeUtil.opToStr(74);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test638688() throws Throwable {
    String string0 = NodeUtil.opToStr(75);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test639689() throws Throwable {
    String string0 = NodeUtil.opToStr(76);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test640690() throws Throwable {
    String string0 = NodeUtil.opToStr(77);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test641691() throws Throwable {
    String string0 = NodeUtil.opToStr(78);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test642692() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(79);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 79
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test643693() throws Throwable {
    String string0 = NodeUtil.opToStr(80);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test644694() throws Throwable {
    String string0 = NodeUtil.opToStr(81);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test645695() throws Throwable {
    String string0 = NodeUtil.opToStr(83);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test646696() throws Throwable {
    String string0 = NodeUtil.opToStr(84);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test647697() throws Throwable {
    String string0 = NodeUtil.opToStr(85);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test648698() throws Throwable {
    String string0 = NodeUtil.opToStr(86);
    assertEquals(""="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test649699() throws Throwable {
    String string0 = NodeUtil.opToStr(87);
    assertEquals(""|="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test650700() throws Throwable {
    String string0 = NodeUtil.opToStr(88);
    assertEquals(""^="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test651701() throws Throwable {
    String string0 = NodeUtil.opToStr(89);
    assertEquals(""&="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test652702() throws Throwable {
    String string0 = NodeUtil.opToStr(90);
    assertEquals(""<<="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test653703() throws Throwable {
    String string0 = NodeUtil.opToStr(91);
    assertEquals("">>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test654704() throws Throwable {
    String string0 = NodeUtil.opToStr(92);
    assertEquals("">>>="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test655705() throws Throwable {
    String string0 = NodeUtil.opToStr(93);
    assertEquals(""+="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test656706() throws Throwable {
    String string0 = NodeUtil.opToStrNoFail(94);
    assertEquals(""-="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test657707() throws Throwable {
    String string0 = NodeUtil.opToStr(95);
    assertEquals(""*="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test658708() throws Throwable {
    String string0 = NodeUtil.opToStr(96);
    assertEquals(""/="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test659709() throws Throwable {
    String string0 = NodeUtil.opToStr(97);
    assertEquals(""%="", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test660710() throws Throwable {
    String string0 = NodeUtil.opToStr(98);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test661711() throws Throwable {
    String string0 = NodeUtil.opToStr(99);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test662712() throws Throwable {
    String string0 = NodeUtil.opToStr(100);
    assertEquals(""||"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test663713() throws Throwable {
    String string0 = NodeUtil.opToStr(101);
    assertEquals(""&&"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test664714() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(102);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 102: INC
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test665715() throws Throwable {
    String string0 = NodeUtil.opToStr(103);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test666716() throws Throwable {
    String string0 = NodeUtil.opToStr(104);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test667717() throws Throwable {
    String string0 = NodeUtil.opToStr(105);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test668718() throws Throwable {
    String string0 = NodeUtil.opToStr(106);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test669719() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(107);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 107
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test670720() throws Throwable {
    String string0 = NodeUtil.opToStr(108);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test671721() throws Throwable {
    String string0 = NodeUtil.opToStr(109);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test672722() throws Throwable {
    String string0 = NodeUtil.opToStr(110);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test673723() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(111);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 111: CASE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStrNoFail(int operator) {
    String res = opToStr(operator);
    if (res == null) {
        throw new Error(""Unknown op "" + operator + "": "" + Token.name(operator));
    }
    return res;
}","public void test674724() throws Throwable {
    // Undeclared exception!
    try {
        NodeUtil.opToStrNoFail(112);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // Unknown op 112: DEFAULT_CASE
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation or fails.
 *
 * @param operator the operator's token value to convert
 * @return the string representation
 * @throws Error if the token value is not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test675725() throws Throwable {
    String string0 = NodeUtil.opToStr(113);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test676726() throws Throwable {
    String string0 = NodeUtil.opToStr(114);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test677727() throws Throwable {
    String string0 = NodeUtil.opToStr(115);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test678728() throws Throwable {
    String string0 = NodeUtil.opToStr(116);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test679729() throws Throwable {
    String string0 = NodeUtil.opToStr(117);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test680730() throws Throwable {
    String string0 = NodeUtil.opToStr(118);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test681731() throws Throwable {
    String string0 = NodeUtil.opToStr(119);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test682732() throws Throwable {
    String string0 = NodeUtil.opToStr(120);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test683733() throws Throwable {
    String string0 = NodeUtil.opToStr(121);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test684734() throws Throwable {
    String string0 = NodeUtil.opToStr(122);
    assertEquals(""void"", string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static String opToStr(int operator) {
    switch(operator) {
        case Token.BITOR:
            return ""|"";
        case Token.OR:
            return ""||"";
        case Token.BITXOR:
            return ""^"";
        case Token.AND:
            return ""&&"";
        case Token.BITAND:
            return ""&"";
        case Token.SHEQ:
            return ""==="";
        case Token.EQ:
            return ""=="";
        case Token.NOT:
            return ""!"";
        case Token.NE:
            return ""!="";
        case Token.SHNE:
            return ""!=="";
        case Token.LSH:
            return ""<<"";
        case Token.IN:
            return ""in"";
        case Token.LE:
            return ""<="";
        case Token.LT:
            return ""<"";
        case Token.URSH:
            return "">>>"";
        case Token.RSH:
            return "">>"";
        case Token.GE:
            return "">="";
        case Token.GT:
            return "">"";
        case Token.MUL:
            return ""*"";
        case Token.DIV:
            return ""/"";
        case Token.MOD:
            return ""%"";
        case Token.BITNOT:
            return ""~"";
        case Token.ADD:
            return ""+"";
        case Token.SUB:
            return ""-"";
        case Token.POS:
            return ""+"";
        case Token.NEG:
            return ""-"";
        case Token.ASSIGN:
            return ""="";
        case Token.ASSIGN_BITOR:
            return ""|="";
        case Token.ASSIGN_BITXOR:
            return ""^="";
        case Token.ASSIGN_BITAND:
            return ""&="";
        case Token.ASSIGN_LSH:
            return ""<<="";
        case Token.ASSIGN_RSH:
            return "">>="";
        case Token.ASSIGN_URSH:
            return "">>>="";
        case Token.ASSIGN_ADD:
            return ""+="";
        case Token.ASSIGN_SUB:
            return ""-="";
        case Token.ASSIGN_MUL:
            return ""*="";
        case Token.ASSIGN_DIV:
            return ""/="";
        case Token.ASSIGN_MOD:
            return ""%="";
        case Token.VOID:
            return ""void"";
        case Token.TYPEOF:
            return ""typeof"";
        case Token.INSTANCEOF:
            return ""instanceof"";
        default:
            return null;
    }
}","public void test685735() throws Throwable {
    String string0 = NodeUtil.opToStr(7);
    assertNull(string0);
}","/**
 * Converts an operator's token value (see {@link Token}) to a string
 * representation.
 *
 * @param operator the operator's token value to convert
 * @return the string representation or {@code null} if the token value is
 * not an operator
 */"
"static void redeclareVarsInsideBranch(Node branch) {
    Collection<Node> vars = getVarsDeclaredInBranch(branch);
    if (vars.isEmpty()) {
        return;
    }
    Node parent = getAddingRoot(branch);
    for (Node nameNode : vars) {
        Node var = IR.var(IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
        copyNameAnnotations(nameNode, var.getFirstChild());
        parent.addChildToFront(var);
    }
}","public void test686736() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, ""infinity"");
    Node node1 = NodeUtil.newVarNode(""checkType"", node0);
    // Undeclared exception!
    try {
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * Given a node tree, finds all the VAR declarations in that tree that are
 * not in an inner scope. Then adds a new VAR node at the top of the current
 * scope that redeclares them, if necessary.
 */"
"public String getSourceFileName() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? null : file.getName();
}","public void test687737() throws Throwable {
    Node node0 = new Node(35, 35, 35);
    NodeUtil.copyNameAnnotations(node0, node0);
    assertNull(node0.getSourceFileName());
}",""
"public boolean isGetProp() {
    return this.getType() == Token.GETPROP;
}","public void test688738() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""@\rS8TDI/YY="");
    NodeUtil.getRootOfQualifiedName(node0);
    assertFalse(node0.isGetProp());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test688739() throws Throwable {
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention(googleCodingConvention0);
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""@\rS8TDI/YY="");
    NodeUtil.getRootOfQualifiedName(node0);
    assertEquals(0, node0.getChildCount());
}",""
"static Node getRootOfQualifiedName(Node qName) {
    for (Node current = qName; true; current = current.getFirstChild()) {
        if (current.isName() || current.isThis()) {
            return current;
        }
        Preconditions.checkState(current.isGetProp());
    }
}","public void test689740() throws Throwable {
    Node node0 = new Node(14);
    // Undeclared exception!
    try {
        NodeUtil.getRootOfQualifiedName(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Gets the root node of a qualified name. Must be either NAME or THIS.
 */"
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test690741() throws Throwable {
    Node node0 = Node.newString(738, ""T&(Gf3*l{c"", 18, 1425);
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    Node node1 = NodeUtil.newName(googleCodingConvention0, ""PROPERTY"", node0);
    assertFalse(node1.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static boolean isValidPropertyName(String name) {
    return isValidSimpleName(name);
}","public void test691742() throws Throwable {
    boolean boolean0 = NodeUtil.isValidPropertyName(""function"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name can appear on the right side of
 * the dot operator. Many properties (like reserved words) cannot.
 */"
"// TODO(nicksantos): This should be moved into a ""Language"" API,
// so that the results are different for es5 and es3.
public static boolean isValidQualifiedName(String name) {
    if (name.endsWith(""."") || name.startsWith(""."")) {
        return false;
    }
    String[] parts = name.split(""\\."");
    for (String part : parts) {
        if (!isValidSimpleName(part)) {
            return false;
        }
    }
    return true;
}","public void test692743() throws Throwable {
    boolean boolean0 = NodeUtil.isValidQualifiedName(""PROPERTY"");
    assertTrue(boolean0);
}","/**
 * Determines whether the given name is a valid qualified name.
 */"
"// TODO(nicksantos): This should be moved into a ""Language"" API,
// so that the results are different for es5 and es3.
public static boolean isValidQualifiedName(String name) {
    if (name.endsWith(""."") || name.startsWith(""."")) {
        return false;
    }
    String[] parts = name.split(""\\."");
    for (String part : parts) {
        if (!isValidSimpleName(part)) {
            return false;
        }
    }
    return true;
}","public void test693744() throws Throwable {
    boolean boolean0 = NodeUtil.isValidQualifiedName(""UTF-16LE."");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name is a valid qualified name.
 */"
"// TODO(nicksantos): This should be moved into a ""Language"" API,
// so that the results are different for es5 and es3.
public static boolean isValidQualifiedName(String name) {
    if (name.endsWith(""."") || name.startsWith(""."")) {
        return false;
    }
    String[] parts = name.split(""\\."");
    for (String part : parts) {
        if (!isValidSimpleName(part)) {
            return false;
        }
    }
    return true;
}","public void test694745() throws Throwable {
    boolean boolean0 = NodeUtil.isValidQualifiedName("".~]LIvezO*_.`e"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name is a valid qualified name.
 */"
"// TODO(nicksantos): This should be moved into a ""Language"" API,
// so that the results are different for es5 and es3.
public static boolean isValidQualifiedName(String name) {
    if (name.endsWith(""."") || name.startsWith(""."")) {
        return false;
    }
    String[] parts = name.split(""\\."");
    for (String part : parts) {
        if (!isValidSimpleName(part)) {
            return false;
        }
    }
    return true;
}","public void test695746() throws Throwable {
    boolean boolean0 = NodeUtil.isValidQualifiedName(""j:Q:"");
    assertFalse(boolean0);
}","/**
 * Determines whether the given name is a valid qualified name.
 */"
"static boolean isPrototypePropertyDeclaration(Node n) {
    if (!isExprAssign(n)) {
        return false;
    }
    return isPrototypeProperty(n.getFirstChild().getFirstChild());
}","public void test696747() throws Throwable {
    Node node0 = new Node(88, 88, 88);
    boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
    assertFalse(boolean0);
}","/**
 * @return {@code true} if the node an assignment to a prototype property of
 *     some constructor.
 */"
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test697748() throws Throwable {
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "">>>="");
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a qualified prototype property.
 */"
"static boolean isPrototypeProperty(Node n) {
    String lhsString = n.getQualifiedName();
    if (lhsString == null) {
        return false;
    }
    int prototypeIdx = lhsString.indexOf("".prototype."");
    return prototypeIdx != -1;
}","public void test698749() throws Throwable {
    Node node0 = new Node((-4935));
    boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node represents a qualified prototype property.
 */"
"static Node getPrototypeClassName(Node qName) {
    Node cur = qName;
    while (cur.isGetProp()) {
        if (cur.getLastChild().getString().equals(""prototype"")) {
            return cur.getFirstChild();
        } else {
            cur = cur.getFirstChild();
        }
    }
    return null;
}","public void test699750() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertNull(node1);
}","/**
 * @return The class name part of a qualified prototype name.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) c++;
    return c;
}","public void test699751() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(2, node0.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test699752() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    Node node1 = NodeUtil.getPrototypeClassName(node0);
    assertEquals(33, node0.getType());
}",""
"static Node newUndefinedNode(Node srcReferenceNode) {
    Node node = IR.voidNode(IR.number(0));
    if (srcReferenceNode != null) {
        node.copyInformationFromForTree(srcReferenceNode);
    }
    return node;
}","public void test700753() throws Throwable {
    Node node0 = NodeUtil.newUndefinedNode((Node) null);
    assertEquals(48, Node.DIRECTIVES);
}","/**
 * Create a node for an empty result expression:
 *   ""void 0""
 */"
"static Node newVarNode(String name, Node value) {
    Node nodeName = IR.name(name);
    if (value != null) {
        Preconditions.checkState(value.getNext() == null);
        nodeName.addChildToBack(value);
        nodeName.srcref(value);
    }
    Node var = IR.var(nodeName).srcref(nodeName);
    return var;
}","public void test701754() throws Throwable {
    Node node0 = NodeUtil.newVarNode(""3"", (Node) null);
    assertEquals(8, Node.FLAG_NO_THROWS);
}","/**
 * Create a VAR node containing the given name and initial value expression.
 */"
"static boolean isNameReferenced(Node node, String name) {
    return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());
}","public void test702755() throws Throwable {
    Node node0 = new Node(3);
    Node node1 = NodeUtil.newVarNode(""."", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""."");
    assertTrue(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test702756() throws Throwable {
    Node node0 = new Node(3);
    Node node1 = NodeUtil.newVarNode(""."", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""."");
    assertFalse(node0.hasChildren());
}",""
"static boolean isNameReferenced(Node node, String name) {
    return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());
}","public void test703757() throws Throwable {
    Node node0 = new Node(151);
    Node node1 = NodeUtil.newVarNode(""Oa{PJ<iJ[:0G"", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""mEw.9s7x!(Y"");
    assertFalse(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test703758() throws Throwable {
    Node node0 = new Node(151);
    Node node1 = NodeUtil.newVarNode(""Oa{PJ<iJ[:0G"", node0);
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""mEw.9s7x!(Y"");
    assertFalse(node0.hasChildren());
}",""
"static boolean allResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return allResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return allResultsMatch(n.getFirstChild(), p) && allResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return allResultsMatch(n.getFirstChild().getNext(), p) && allResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test704759() throws Throwable {
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(63);
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.allResultsMatch(node0, nodeUtil_MatchNodeType0);
    assertTrue(boolean0);
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static boolean anyResultsMatch(Node n, Predicate<Node> p) {
    switch(n.getType()) {
        case Token.ASSIGN:
        case Token.COMMA:
            return anyResultsMatch(n.getLastChild(), p);
        case Token.AND:
        case Token.OR:
            return anyResultsMatch(n.getFirstChild(), p) || anyResultsMatch(n.getLastChild(), p);
        case Token.HOOK:
            return anyResultsMatch(n.getFirstChild().getNext(), p) || anyResultsMatch(n.getLastChild(), p);
        default:
            return p.apply(n);
    }
}","public void test705760() throws Throwable {
    Node node0 = Node.newString(154, "")UCvX{#oj6),g,7i5_"", 154, 154);
    NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
    boolean boolean0 = NodeUtil.anyResultsMatch(node0, nodeUtil_MatchDeclaration0);
    assertFalse(boolean0);
}","/**
 * Apply the supplied predicate against
 * all possible result Nodes of the expression.
 */"
"static int getCount(Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    int total = 0;
    if (pred.apply(n)) {
        total++;
    }
    if (traverseChildrenPred.apply(n)) {
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            total += getCount(c, pred, traverseChildrenPred);
        }
    }
    return total;
}","public void test707762() throws Throwable {
    Node node0 = new Node(112);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = NodeUtil.NUMBERIC_RESULT_PREDICATE;
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    int int0 = NodeUtil.getCount(node0, nodeUtil_MatchShallowStatement0, nodeUtil_NumbericResultPredicate0);
    assertEquals(1, int0);
}","/**
 * @return The number of times the the predicate is true for the node
 * or any of its children.
 */"
"static boolean isNameReferenced(Node node, String name, Predicate<Node> traverseChildrenPred) {
    return has(node, new MatchNameNode(name), traverseChildrenPred);
}","public void test708763() throws Throwable {
    Node node0 = Node.newString(""8B|=1yD;.lXT(FYG"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""o!k%l5%Ho,?S3t'muH)"", nodeUtil_MatchShallowStatement0);
    assertFalse(boolean0);
}","/**
 * Whether a simple name is referenced within the node tree.
 */"
"public boolean isVoid() {
    return this.getType() == Token.VOID;
}","public void test708764() throws Throwable {
    Node node0 = Node.newString(""8B|=1yD;.lXT(FYG"");
    Node node1 = NodeUtil.newUndefinedNode(node0);
    NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
    boolean boolean0 = NodeUtil.isNameReferenced(node1, ""o!k%l5%Ho,?S3t'muH)"", nodeUtil_MatchShallowStatement0);
    assertTrue(node1.isVoid());
}",""
"static int getCount(Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred) {
    int total = 0;
    if (pred.apply(n)) {
        total++;
    }
    if (traverseChildrenPred.apply(n)) {
        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            total += getCount(c, pred, traverseChildrenPred);
        }
    }
    return total;
}","public void test709765() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    Node node1 = NodeUtil.newVarNode("".infinity"", node0);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    int int0 = NodeUtil.getCount(node1, predicate0, predicate0);
    assertEquals(3, int0);
}","/**
 * @return The number of times the the predicate is true for the node
 * or any of its children.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test709766() throws Throwable {
    Node node0 = new Node(119, 119, 119);
    Node node1 = NodeUtil.newVarNode("".infinity"", node0);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    int int0 = NodeUtil.getCount(node1, predicate0, predicate0);
    assertEquals(119, node1.getCharno());
}",""
"static void visitPostOrder(Node node, Visitor visitor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, visitor, traverseChildrenPred);
        }
    }
    visitor.visit(node);
}","public void test710767() throws Throwable {
    Node node0 = new Node(127, 127, 127);
    NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_BooleanResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Visitor.visit for each child matching
 * the predicate.
 */"
"static void visitPostOrder(Node node, Visitor visitor, Predicate<Node> traverseChildrenPred) {
    if (traverseChildrenPred.apply(node)) {
        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            visitPostOrder(c, visitor, traverseChildrenPred);
        }
    }
    visitor.visit(node);
}","public void test711768() throws Throwable {
    Node node0 = new Node(28);
    Node node1 = new Node(52, node0, node0, node0, node0, 50, 1);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    // Undeclared exception!
    try {
        NodeUtil.visitPostOrder(node1, (NodeUtil.Visitor) null, predicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * A post-order traversal, calling Visitor.visit for each child matching
 * the predicate.
 */"
"static boolean isConstantByConvention(CodingConvention convention, Node node, Node parent) {
    String name = node.getString();
    if (parent.isGetProp() && node == parent.getLastChild()) {
        return convention.isConstantKey(name);
    } else if (isObjectLitKey(node, parent)) {
        return convention.isConstantKey(name);
    } else {
        return convention.isConstant(name);
    }
}","public void test712769() throws Throwable {
    Node node0 = Node.newString(""-&<&"");
    GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
    boolean boolean0 = NodeUtil.isConstantByConvention(googleCodingConvention0, node0, node0);
    assertFalse(boolean0);
}","/**
 * Whether the given name is constant by coding convention.
 */"
"protected void error(DiagnosticType diagnostic, Node n) {
    JSError error = JSError.make(NodeUtil.getSourceName(n), n, diagnostic, n.toString());
    compiler.report(error);
}","public void test713770() throws Throwable {
    SyntheticAst syntheticAst0 = new SyntheticAst(""_Vg'G\u0005-XxY5s$"");
    Compiler compiler0 = new Compiler();
    Node node0 = syntheticAst0.getAstRoot(compiler0);
    PeepholeFoldWithTypes peepholeFoldWithTypes0 = new PeepholeFoldWithTypes();
    // Undeclared exception!
    try {
        peepholeFoldWithTypes0.error(compiler0.MOTION_ITERATIONS_ERROR, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.AbstractPeepholeOptimization"", e);
    }
}","/**
 * Helper method for reporting an error to the compiler when applying a
 * peephole optimization.
 *
 * @param diagnostic The error type
 * @param n The node for which the error should be reported
 */"
"public static String getSourceName(Node n) {
    String sourceName = null;
    while (sourceName == null && n != null) {
        sourceName = n.getSourceFileName();
        n = n.getParent();
    }
    return sourceName;
}","public void test714771() throws Throwable {
    Node node0 = new Node(22);
    String string0 = NodeUtil.getSourceName(node0);
    assertNull(string0);
}","/**
 * @param n The node.
 * @return The source name property on the node or its ancestors.
 */"
"String getName();","public void test715772() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""v>>@cg"", ""E"");
    StaticSourceFile staticSourceFile0 = NodeUtil.getSourceFile(node0);
    assertEquals(""[testcode]"", staticSourceFile0.getName());
}","/**
 * The name of the file. Must be unique across all files in the compilation.
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test716773() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.getSourceFile(node0);
    assertTrue(node0.isTrue());
}",""
"public int getType() {
    return type;
}","public void test716774() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    NodeUtil.getSourceFile(node0);
    assertEquals(44, node0.getType());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test717775() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "".%"");
    NodeUtil.getInputId(node0);
    assertTrue(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test717776() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, "".%"");
    NodeUtil.getInputId(node0);
    assertTrue(node0.hasChildren());
}",""
"static Node newCallNode(Node callTarget, Node... parameters) {
    boolean isFreeCall = !isGet(callTarget);
    Node call = IR.call(callTarget);
    call.putBooleanProp(Node.FREE_CALL, isFreeCall);
    for (Node parameter : parameters) {
        call.addChildToBack(parameter);
    }
    return call;
}","public void test718777() throws Throwable {
    Node node0 = new Node((-971));
    Node[] nodeArray0 = new Node[1];
    // Undeclared exception!
    try {
        NodeUtil.newCallNode(node0, nodeArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * A new CALL node with the ""FREE_CALL"" set based on call target.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test719778() throws Throwable {
    Node node0 = new Node(31);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test720779() throws Throwable {
    Node node0 = new Node(32, 1436, 37);
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test721780() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(node0.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test721781() throws Throwable {
    JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
    Node node0 = NodeUtil.newQualifiedNameNode(jqueryCodingConvention0, ""com.google.javascript.jscomp.JsMessage$1"");
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test722782() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(35, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"public int getType() {
    return type;
}","public void test722783() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(35, node0, node0, node0, node0);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
    assertEquals(43, node0.getType());
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test723784() throws Throwable {
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    Node node0 = Node.newString(45, ""6wY"", 45, 1966);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test724785() throws Throwable {
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    Node node0 = Node.newString(47, ""6wY"", 3, 62);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, predicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test725786() throws Throwable {
    NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(51);
    Node node0 = new Node(51);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchNodeType0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test726787() throws Throwable {
    Node node0 = new Node(52, (-804), 52);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test727788() throws Throwable {
    Node node0 = new Node(53);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 53
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test728789() throws Throwable {
    Node node0 = new Node(54, 55, (-1536));
    NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 54
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test729790() throws Throwable {
    Node node0 = new Node(55, 55, 55);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 55
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test730791() throws Throwable {
    Node node0 = new Node(59);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 59
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test731792() throws Throwable {
    Node node0 = Node.newString(61, ""/="", 61, 61);
    Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 61
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test732793() throws Throwable {
    Node node0 = new Node(62);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 62
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test733794() throws Throwable {
    Node node0 = new Node(63);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test734795() throws Throwable {
    Node node0 = new Node(64, 111, 94);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test735796() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 66
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test736797() throws Throwable {
    Node node0 = new Node(68, 68, 68);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 68
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test737798() throws Throwable {
    Node node0 = new Node(69);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 69
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test738799() throws Throwable {
    Node node0 = new Node(70);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 70
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test739800() throws Throwable {
    Node node0 = new Node(72, 72, (-139));
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 72
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test740801() throws Throwable {
    Node node0 = new Node(80);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 80
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test741802() throws Throwable {
    Node node0 = new Node(82);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 82
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test742803() throws Throwable {
    Node node0 = new Node(84);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, predicate0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 84
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test743804() throws Throwable {
    Node node0 = new Node(85);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test744805() throws Throwable {
    Node node0 = new Node(86);
    CompilerOptions compilerOptions0 = new CompilerOptions();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test745806() throws Throwable {
    Node node0 = new Node(87, 87, 87);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test746807() throws Throwable {
    Node node0 = new Node(88);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test747808() throws Throwable {
    Node node0 = new Node(90);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test748809() throws Throwable {
    Node node0 = new Node(91);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test749810() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    node0.setType(92);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test750811() throws Throwable {
    Node node0 = new Node(96, 96, 96);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test751812() throws Throwable {
    Node node0 = new Node(98);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test752813() throws Throwable {
    Node node0 = new Node(99, 99, 99);
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // 99
        //
        verifyException(""com.google.javascript.rhino.Token"", e);
    }
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test753814() throws Throwable {
    Node node0 = new Node(101);
    NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
    // Undeclared exception!
    try {
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MayBeStringResultPredicate0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test754815() throws Throwable {
    Node node0 = new Node(102);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test755816() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test756817() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertTrue(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"public int getType() {
    return type;
}","public void test757818() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""p"", node0);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, predicate0);
    assertEquals(43, node0.getType());
}",""
"static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
    switch(value.getType()) {
        case Token.ASSIGN:
            // A result that is aliased by a non-local name, is the effectively the
            // same as returning a non-local name, but this doesn't matter if the
            // value is immutable.
            return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));
        case Token.COMMA:
            return evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.AND:
        case Token.OR:
            return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.HOOK:
            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals);
        case Token.INC:
        case Token.DEC:
            if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                return evaluatesToLocalValue(value.getFirstChild(), locals);
            } else {
                return true;
            }
        case Token.THIS:
            return locals.apply(value);
        case Token.NAME:
            return isImmutableValue(value) || locals.apply(value);
        case Token.GETELEM:
        case Token.GETPROP:
            // There is no information about the locality of object properties.
            return locals.apply(value);
        case Token.CALL:
            return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
        case Token.NEW:
            return newHasLocalResult(value) || locals.apply(value);
        case Token.FUNCTION:
        case Token.REGEXP:
        case Token.ARRAYLIT:
        case Token.OBJECTLIT:
            // Literals objects with non-literal children are allowed.
            return true;
        case Token.DELPROP:
        case Token.IN:
            // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
            return true;
        default:
            // Other op force a local value:
            //  x = '' + g (x is now an local string)
            //  x -= g (x is now an local number)
            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
                return true;
            }
            throw new IllegalStateException(""Unexpected expression node"" + value + ""\n parent:"" + value.getParent());
    }
}","public void test757819() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
    Node node1 = NodeUtil.newName(closureCodingConvention0, ""p"", node0);
    Predicate<Node> predicate0 = NodeUtil.MATCH_NOT_FUNCTION;
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, predicate0);
    assertTrue(boolean0);
}","/**
 * @param locals A predicate to apply to unknown local values.
 * @return Whether the node is known to be a value that is not a reference
 *     outside the expression scope.
 */"
"static boolean evaluatesToLocalValue(Node value) {
    return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());
}","public void test758820() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
    assertFalse(boolean0);
}","/**
 * @return Whether the node is known to be a value that is not referenced
 * elsewhere.
 */"
"public String getSourceName() {
    return this.associatedNode != null ? this.associatedNode.getSourceFileName() : null;
}","public void test759821() throws Throwable {
    Node node0 = new Node(3812, 3812, (-613));
    node0.addSuppression(""$\""QjR(}5jt@%1"");
    JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
    assertNull(jSDocInfo0.getSourceName());
}","/**
 * Gets the name of the source file that contains this JSDoc.
 */"
"static JSDocInfo getBestJSDocInfo(Node n) {
    JSDocInfo info = n.getJSDocInfo();
    if (info == null) {
        Node parent = n.getParent();
        if (parent == null) {
            return null;
        }
        if (parent.isName()) {
            return getBestJSDocInfo(parent);
        } else if (parent.isAssign()) {
            return parent.getJSDocInfo();
        } else if (isObjectLitKey(parent, parent.getParent())) {
            return parent.getJSDocInfo();
        } else if (parent.isFunction()) {
            return parent.getJSDocInfo();
        } else if (parent.isVar() && parent.hasOneChild()) {
            return parent.getJSDocInfo();
        } else if ((parent.isHook() && parent.getFirstChild() != n) || parent.isOr() || parent.isAnd() || (parent.isComma() && parent.getFirstChild() != n)) {
            return getBestJSDocInfo(parent);
        }
    }
    return info;
}","public void test760822() throws Throwable {
    Node node0 = new Node(32, 2365, 2365);
    JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
    assertNull(jSDocInfo0);
}","/**
 * Find the best JSDoc for the given node.
 */"
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test761823() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(35, node0, node0, node0, node0);
    NodeUtil.getBestJSDocInfo(node0);
    assertFalse(node0.isTrue());
}",""
"public int getType() {
    return type;
}","public void test761824() throws Throwable {
    Node node0 = NodeUtil.booleanNode(false);
    Node node1 = new Node(35, node0, node0, node0, node0);
    NodeUtil.getBestJSDocInfo(node0);
    assertEquals(43, node0.getType());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test762825() throws Throwable {
    Node node0 = new Node((-1687));
    NodeUtil.newVarNode(""Y"", node0);
    NodeUtil.getBestJSDocInfo(node0);
    assertFalse(node0.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public boolean hasChildren() {
    return first != null;
}","public void test762826() throws Throwable {
    Node node0 = new Node((-1687));
    NodeUtil.newVarNode(""Y"", node0);
    NodeUtil.getBestJSDocInfo(node0);
    assertFalse(node0.hasChildren());
}",""
"static JSDocInfo getBestJSDocInfo(Node n) {
    JSDocInfo info = n.getJSDocInfo();
    if (info == null) {
        Node parent = n.getParent();
        if (parent == null) {
            return null;
        }
        if (parent.isName()) {
            return getBestJSDocInfo(parent);
        } else if (parent.isAssign()) {
            return parent.getJSDocInfo();
        } else if (isObjectLitKey(parent, parent.getParent())) {
            return parent.getJSDocInfo();
        } else if (parent.isFunction()) {
            return parent.getJSDocInfo();
        } else if (parent.isVar() && parent.hasOneChild()) {
            return parent.getJSDocInfo();
        } else if ((parent.isHook() && parent.getFirstChild() != n) || parent.isOr() || parent.isAnd() || (parent.isComma() && parent.getFirstChild() != n)) {
            return getBestJSDocInfo(parent);
        }
    }
    return info;
}","public void test763827() throws Throwable {
    Node node0 = new Node(91);
    Node node1 = new Node(105, node0, node0, 46, 48);
    JSDocInfo jSDocInfo0 = NodeUtil.getBestJSDocInfo(node0);
    assertNull(jSDocInfo0);
}","/**
 * Find the best JSDoc for the given node.
 */"
"static Node getBestLValue(Node n) {
    Node parent = n.getParent();
    boolean isFunctionDeclaration = isFunctionDeclaration(n);
    if (isFunctionDeclaration) {
        return n.getFirstChild();
    } else if (parent.isName()) {
        return parent;
    } else if (parent.isAssign()) {
        return parent.getFirstChild();
    } else if (isObjectLitKey(parent, parent.getParent())) {
        return parent;
    } else if ((parent.isHook() && parent.getFirstChild() != n) || parent.isOr() || parent.isAnd() || (parent.isComma() && parent.getFirstChild() != n)) {
        return getBestLValue(parent);
    }
    return null;
}","public void test764828() throws Throwable {
    Node node0 = new Node(139);
    Node node1 = new Node(125, node0, node0, node0);
    Node node2 = NodeUtil.getBestLValue(node0);
    assertNull(node2);
}","/**
 * Find the l-value that the given r-value is being assigned to.
 */"
"static Node getRValueOfLValue(Node n) {
    Node parent = n.getParent();
    switch(parent.getType()) {
        case Token.ASSIGN:
            return n.getNext();
        case Token.VAR:
            return n.getFirstChild();
        case Token.FUNCTION:
            return parent;
    }
    return null;
}","public void test765829() throws Throwable {
    Node node0 = new Node(127, 127, 127);
    Node node1 = new Node(12, node0, 44, 44);
    Node node2 = NodeUtil.getRValueOfLValue(node0);
    assertNull(node2);
}","/**
 * Gets the r-value of a node returned by getBestLValue.
 */"
"static Node getBestLValueOwner(@Nullable Node lValue) {
    if (lValue == null || lValue.getParent() == null) {
        return null;
    }
    if (isObjectLitKey(lValue, lValue.getParent())) {
        return getBestLValue(lValue.getParent());
    } else if (isGet(lValue)) {
        return lValue.getFirstChild();
    }
    return null;
}","public void test766830() throws Throwable {
    Node node0 = NodeUtil.getBestLValueOwner((Node) null);
    assertNull(node0);
}","/**
 * Get the owner of the given l-value node.
 */"
"static Node getBestLValueOwner(@Nullable Node lValue) {
    if (lValue == null || lValue.getParent() == null) {
        return null;
    }
    if (isObjectLitKey(lValue, lValue.getParent())) {
        return getBestLValue(lValue.getParent());
    } else if (isGet(lValue)) {
        return lValue.getFirstChild();
    }
    return null;
}","public void test767831() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = NodeUtil.getBestLValueOwner(node0);
    assertNull(node1);
}","/**
 * Get the owner of the given l-value node.
 */"
"public int getType() {
    return type;
}","public void test768832() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = new Node(0, node0, node0, node0, node0);
    NodeUtil.getBestLValueOwner(node0);
    assertEquals(44, node0.getType());
}",""
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test768833() throws Throwable {
    Node node0 = NodeUtil.booleanNode(true);
    Node node1 = new Node(0, node0, node0, node0, node0);
    NodeUtil.getBestLValueOwner(node0);
    assertFalse(node0.isFalse());
}",""
"static String getBestLValueName(@Nullable Node lValue) {
    if (lValue == null || lValue.getParent() == null) {
        return null;
    }
    if (isObjectLitKey(lValue, lValue.getParent())) {
        Node owner = getBestLValue(lValue.getParent());
        if (owner != null) {
            String ownerName = getBestLValueName(owner);
            if (ownerName != null) {
                return ownerName + ""."" + getObjectLitKeyName(lValue);
            }
        }
        return null;
    }
    return lValue.getQualifiedName();
}","public void test769834() throws Throwable {
    String string0 = NodeUtil.getBestLValueName((Node) null);
    assertNull(string0);
}","/**
 * Get the name of the given l-value node.
 */"
"static String getBestLValueName(@Nullable Node lValue) {
    if (lValue == null || lValue.getParent() == null) {
        return null;
    }
    if (isObjectLitKey(lValue, lValue.getParent())) {
        Node owner = getBestLValue(lValue.getParent());
        if (owner != null) {
            String ownerName = getBestLValueName(owner);
            if (ownerName != null) {
                return ownerName + ""."" + getObjectLitKeyName(lValue);
            }
        }
        return null;
    }
    return lValue.getQualifiedName();
}","public void test770835() throws Throwable {
    Node node0 = new Node(88, 88, 88);
    String string0 = NodeUtil.getBestLValueName(node0);
    assertNull(string0);
}","/**
 * Get the name of the given l-value node.
 */"
"static String getBestLValueName(@Nullable Node lValue) {
    if (lValue == null || lValue.getParent() == null) {
        return null;
    }
    if (isObjectLitKey(lValue, lValue.getParent())) {
        Node owner = getBestLValue(lValue.getParent());
        if (owner != null) {
            String ownerName = getBestLValueName(owner);
            if (ownerName != null) {
                return ownerName + ""."" + getObjectLitKeyName(lValue);
            }
        }
        return null;
    }
    return lValue.getQualifiedName();
}","public void test771836() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node node1 = new Node(26, node0, node0, node0, node0, 48, 4095);
    String string0 = NodeUtil.getBestLValueName(node0);
    assertNull(string0);
}","/**
 * Get the name of the given l-value node.
 */"
"static boolean isExpressionResultUsed(Node expr) {
    // TODO(johnlenz): consider sharing some code with trySimpleUnusedResult.
    Node parent = expr.getParent();
    switch(parent.getType()) {
        case Token.BLOCK:
        case Token.EXPR_RESULT:
            return false;
        case Token.HOOK:
        case Token.AND:
        case Token.OR:
            return (expr == parent.getFirstChild()) ? true : isExpressionResultUsed(parent);
        case Token.COMMA:
            Node gramps = parent.getParent();
            if (gramps.isCall() && parent == gramps.getFirstChild()) {
                // Semantically, a direct call to eval is different from an indirect
                // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first
                // expression to a comma to be a no-op if it's used to indirect
                // an eval. This we pretend that this is ""used"".
                if (expr == parent.getFirstChild() && parent.getChildCount() == 2 && expr.getNext().isName() && ""eval"".equals(expr.getNext().getString())) {
                    return true;
                }
            }
            return (expr == parent.getFirstChild()) ? false : isExpressionResultUsed(parent);
        case Token.FOR:
            if (!NodeUtil.isForIn(parent)) {
                // Only an expression whose result is in the condition part of the
                // expression is used.
                return (parent.getChildAtIndex(1) == expr);
            }
            break;
    }
    return true;
}","public void test772837() throws Throwable {
    Node node0 = new Node(88, 88, 88);
    Node node1 = new Node(55, node0, node0);
    boolean boolean0 = NodeUtil.isExpressionResultUsed(node0);
    assertTrue(boolean0);
}","/**
 * @returns false iff the result of the expression is not consumed.
 */"
"static boolean isExecutedExactlyOnce(Node n) {
    inspect: do {
        Node parent = n.getParent();
        switch(parent.getType()) {
            case Token.IF:
            case Token.HOOK:
            case Token.AND:
            case Token.OR:
                if (parent.getFirstChild() != n) {
                    return false;
                }
                // other ancestors may be conditional
                continue inspect;
            case Token.FOR:
                if (NodeUtil.isForIn(parent)) {
                    if (parent.getChildAtIndex(1) != n) {
                        return false;
                    }
                } else {
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                }
                // other ancestors may be conditional
                continue inspect;
            case Token.WHILE:
            case Token.DO:
                return false;
            case Token.TRY:
                // Consider all code under a try/catch to be conditionally executed.
                if (!hasFinally(parent) || parent.getLastChild() != n) {
                    return false;
                }
                continue inspect;
            case Token.CASE:
            case Token.DEFAULT_CASE:
                return false;
            case Token.SCRIPT:
            case Token.FUNCTION:
                // Done, we've reached the scope root.
                break inspect;
        }
    } while ((n = n.getParent()) != null);
    return true;
}","public void test773838() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    NodeUtil.newExpr(node0);
    // Undeclared exception!
    try {
        NodeUtil.isExecutedExactlyOnce(node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.jscomp.NodeUtil"", e);
    }
}","/**
 * @param n The expression to check.
 * @return Whether the expression is unconditionally executed only once in the
 *     containing execution scope.
 */"
"static boolean isExecutedExactlyOnce(Node n) {
    inspect: do {
        Node parent = n.getParent();
        switch(parent.getType()) {
            case Token.IF:
            case Token.HOOK:
            case Token.AND:
            case Token.OR:
                if (parent.getFirstChild() != n) {
                    return false;
                }
                // other ancestors may be conditional
                continue inspect;
            case Token.FOR:
                if (NodeUtil.isForIn(parent)) {
                    if (parent.getChildAtIndex(1) != n) {
                        return false;
                    }
                } else {
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                }
                // other ancestors may be conditional
                continue inspect;
            case Token.WHILE:
            case Token.DO:
                return false;
            case Token.TRY:
                // Consider all code under a try/catch to be conditionally executed.
                if (!hasFinally(parent) || parent.getLastChild() != n) {
                    return false;
                }
                continue inspect;
            case Token.CASE:
            case Token.DEFAULT_CASE:
                return false;
            case Token.SCRIPT:
            case Token.FUNCTION:
                // Done, we've reached the scope root.
                break inspect;
        }
    } while ((n = n.getParent()) != null);
    return true;
}","public void test774839() throws Throwable {
    Node node0 = new Node(98, 98, 98);
    node0.addChildToFront(node0);
    // Undeclared exception!
    NodeUtil.isExecutedExactlyOnce(node0);
}","/**
 * @param n The expression to check.
 * @return Whether the expression is unconditionally executed only once in the
 *     containing execution scope.
 */"
"static boolean isExecutedExactlyOnce(Node n) {
    inspect: do {
        Node parent = n.getParent();
        switch(parent.getType()) {
            case Token.IF:
            case Token.HOOK:
            case Token.AND:
            case Token.OR:
                if (parent.getFirstChild() != n) {
                    return false;
                }
                // other ancestors may be conditional
                continue inspect;
            case Token.FOR:
                if (NodeUtil.isForIn(parent)) {
                    if (parent.getChildAtIndex(1) != n) {
                        return false;
                    }
                } else {
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                }
                // other ancestors may be conditional
                continue inspect;
            case Token.WHILE:
            case Token.DO:
                return false;
            case Token.TRY:
                // Consider all code under a try/catch to be conditionally executed.
                if (!hasFinally(parent) || parent.getLastChild() != n) {
                    return false;
                }
                continue inspect;
            case Token.CASE:
            case Token.DEFAULT_CASE:
                return false;
            case Token.SCRIPT:
            case Token.FUNCTION:
                // Done, we've reached the scope root.
                break inspect;
        }
    } while ((n = n.getParent()) != null);
    return true;
}","public void test775840() throws Throwable {
    Node node0 = new Node(105);
    node0.addChildToFront(node0);
    boolean boolean0 = NodeUtil.isExecutedExactlyOnce(node0);
    assertTrue(boolean0);
}","/**
 * @param n The expression to check.
 * @return Whether the expression is unconditionally executed only once in the
 *     containing execution scope.
 */"
"public int getType() {
    return type;
}","public void test776841() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType[] jSTypeArray0 = new JSType[0];
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    Node node1 = NodeUtil.numberNode(Double.NEGATIVE_INFINITY, node0);
    assertEquals(29, node1.getType());
}",""
"public int getType() {
    return type;
}","public void test777842() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = NodeUtil.numberNode(Double.NaN, node0);
    assertEquals(38, node1.getType());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test778843() throws Throwable {
    Node node0 = NodeUtil.numberNode(Double.POSITIVE_INFINITY, (Node) null);
    assertFalse(node0.isNumber());
}",""
"static Node numberNode(double value, Node srcref) {
    Node result;
    if (Double.isNaN(value)) {
        result = IR.name(""NaN"");
    } else if (value == Double.POSITIVE_INFINITY) {
        result = IR.name(""Infinity"");
    } else if (value == Double.NEGATIVE_INFINITY) {
        result = IR.neg(IR.name(""Infinity""));
    } else {
        result = IR.number(value);
    }
    if (srcref != null) {
        result.srcrefTree(srcref);
    }
    return result;
}","public void test778844() throws Throwable {
    Node node0 = NodeUtil.numberNode(Double.POSITIVE_INFINITY, (Node) null);
    assertNotNull(node0);
}","/**
 * @return An appropriate AST node for the double value.
 */"
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test779845() throws Throwable {
    Node node0 = Node.newString(""&%HC^\""wA:p"", 15, 9);
    Node node1 = NodeUtil.numberNode(9, node0);
    assertTrue(node1.isNumber());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test779846() throws Throwable {
    Node node0 = Node.newString(""&%HC^\""wA:p"", 15, 9);
    Node node1 = NodeUtil.numberNode(9, node0);
    assertEquals(9, node1.getCharno());
}",""
