{
  "test1014" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1014() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;\n    InstanceObjectType instanceObjectType0 = (InstanceObjectType) jSTypeRegistry0.getNativeType(jSTypeNative0);\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    typeValidator0.expectIndexMatch(nodeTraversal0, node0, instanceObjectType0, noType0);\n    noType0.hasCachedValues();\n}",
    "testName" : "test1014"
  },
  "test2227" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2227() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;\n    InstanceObjectType instanceObjectType0 = (InstanceObjectType) jSTypeRegistry0.getNativeType(jSTypeNative0);\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, instanceObjectType0, noType0);\n    noType0.hasCachedValues();\n}",
    "testName" : "test2227"
  },
  "test3239" : {
    "methodSignature" : "boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType, JSType leftType, String msg)",
    "methodName" : "expectCanAssignTo",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3239() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, functionType0, \"Unknown class name\");\n}",
    "testName" : "test3239"
  },
  "test4049" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4049() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" nly \\\"rrays*Or ob1ecFscan ce acce(sed\", \" nly \\\"rrays*Or ob1ecFscan ce acce(sed\");\n    UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test4049"
  },
  "test2025" : {
    "methodSignature" : "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType)",
    "methodName" : "expectNotNullOrUndefined",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2025() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" nl \\\"rrays*Or ob1ecFsca ce acce(sed\", \" nl \\\"rrays*Or ob1ecFsca ce acce(sed\");\n    UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, functionType0, \"Unknown class name\", functionType0);\n}",
    "testName" : "test2025"
  },
  "test5971" : {
    "methodSignature" : "String getReadableJSTypeName(Node n, boolean dereference)",
    "methodName" : "getReadableJSTypeName",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5971() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"Unknown class name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node0 = new Node(33);\n    Node node1 = Node.newString(45, \"Unknown class name\");\n    node0.addChildrenToFront(node1);\n    String string0 = typeValidator0.getReadableJSTypeName(node0, true);\n}",
    "testName" : "test5971"
  },
  "test1013" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1013() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;\n    InstanceObjectType instanceObjectType0 = (InstanceObjectType) jSTypeRegistry0.getNativeType(jSTypeNative0);\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    typeValidator0.expectIndexMatch(nodeTraversal0, node0, instanceObjectType0, noType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test1013"
  },
  "test3036" : {
    "methodSignature" : "boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType, JSType leftType, Node owner, String propName)",
    "methodName" : "expectCanAssignToPropertyOf",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3036() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    EnumType enumType0 = jSTypeRegistry0.createEnumType(\"Not declared as a constructor\", functionType0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, enumType0, (Node) null, \"Unknown class name\");\n}",
    "testName" : "test3036"
  },
  "test4960" : {
    "methodSignature" : "public boolean isConstructor()",
    "methodName" : "isConstructor",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4960() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    Scope scope0 = new Scope(node0, noType0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Scope.Var scope_Var0 = scope0.declare(\"_nD1HOfPD\", node0, noType0, (CompilerInput) null, true);\n    NameReferenceGraphConstruction nameReferenceGraphConstruction0 = new NameReferenceGraphConstruction(compiler0);\n    NameReferenceGraph nameReferenceGraph0 = nameReferenceGraphConstruction0.getNameReferenceGraph();\n    NameReferenceGraph.Name nameReferenceGraph_Name0 = nameReferenceGraph0.WINDOW;\n    UnknownType unknownType0 = (UnknownType) nameReferenceGraph_Name0.getType();\n    typeValidator0.expectUndeclaredVariable(\"\", node0, node0, scope_Var0, \"\", unknownType0);\n    unknownType0.isConstructor();\n}",
    "testName" : "test4960"
  },
  "test034" : {
    "methodSignature" : "boolean expectObject(NodeTraversal t, Node n, JSType type, String msg)",
    "methodName" : "expectObject",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, \"Not declared as a type name\");\n}",
    "testName" : "test034"
  },
  "test1419" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1419() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"!\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, \"Not declared as a constructor\");\n    compiler0.getWarningCount();\n}",
    "testName" : "test1419"
  },
  "test1216" : {
    "methodSignature" : "void expectBitwiseable(NodeTraversal t, Node n, JSType type, String msg)",
    "methodName" : "expectBitwiseable",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1216() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    FlowSensitiveInlineVariables flowSensitiveInlineVariables0 = new FlowSensitiveInlineVariables(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, flowSensitiveInlineVariables0, (ScopeCreator) null);\n    typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, \"^#\");\n}",
    "testName" : "test1216"
  },
  "test2429" : {
    "methodSignature" : "void expectSwitchMatchesCase(NodeTraversal t, Node n, JSType switchType, JSType caseType)",
    "methodName" : "expectSwitchMatchesCase",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2429() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();\n    JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    typeValidator0.expectSwitchMatchesCase((NodeTraversal) null, node0, objectType0, jSType0);\n}",
    "testName" : "test2429"
  },
  "test068" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    NullType nullType0 = (NullType) jSTypeRegistry0.createDefaultObjectUnion(noType0);\n    typeValidator0.expectActualObject(nodeTraversal0, node0, nullType0, \"t'ptp$Gy\");\n    compiler0.getWarningCount();\n}",
    "testName" : "test068"
  },
  "test069" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    NullType nullType0 = (NullType) jSTypeRegistry0.createDefaultObjectUnion(noType0);\n    typeValidator0.expectActualObject(nodeTraversal0, node0, nullType0, \"t'ptp$Gy\");\n    noType0.hasCachedValues();\n}",
    "testName" : "test069"
  },
  "test2632" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2632() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectIndexMatch(nodeTraversal0, node0, jSType0, jSType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2632"
  },
  "test4657" : {
    "methodSignature" : "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType)",
    "methodName" : "expectUndeclaredVariable",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4657() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"SBx' \", \"SBx' \");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Scope scope0 = new Scope(node0, compiler0);\n    Scope.Var scope_Var0 = scope0.declare(\"#I-\", node0, (JSType) null, (CompilerInput) null);\n    typeValidator0.expectUndeclaredVariable(\"SBx' \", node0, node0, scope_Var0, \"JSC_DUP_VAR_DECLARATION\", (JSType) null);\n}",
    "testName" : "test4657"
  },
  "test1621" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    JSType jSType0 = jSTypeRegistry0.createNamedType(\"Not declared as a constructor\", \"Unknown class name\", 49, 1);\n    typeValidator0.expectIndexMatch(nodeTraversal0, node0, jSType0, functionType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test1621"
  },
  "test5667" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5667() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"actual parameter %d of %s does not match formal parameter\", \"actual parameter %d of %s does not match formal parameter\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.setShouldReport(false);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    typeValidator0.expectIndexMatch(nodeTraversal0, node0, functionType0, functionType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test5667"
  },
  "test3645" : {
    "methodSignature" : "void expectArgumentMatchesParameter(NodeTraversal t, Node n, JSType argType, JSType paramType, Node callNode, int ordinal)",
    "methodName" : "expectArgumentMatchesParameter",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3645() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, functionType0, node0, 1);\n}",
    "testName" : "test3645"
  },
  "test3442" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3442() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, noType0, \"Not declared as a type name\");\n    noType0.hasCachedValues();\n}",
    "testName" : "test3442"
  },
  "test4455" : {
    "methodSignature" : "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType)",
    "methodName" : "expectUndeclaredVariable",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4455() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    Scope scope0 = new Scope(node0, noType0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Scope.Var scope_Var0 = scope0.declare(\"kd0R7KXL)JtA|os=\\\"f\", node0, noType0, (CompilerInput) null, true);\n    typeValidator0.expectUndeclaredVariable(\"<k;vjYdTDAt^gO\", node0, node0, scope_Var0, \"kd0R7KXL)JtA|os=\\\"f\", noType0);\n}",
    "testName" : "test4455"
  },
  "test5465" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5465() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"Named type with empty name component\");\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);\n    Scope scope0 = new Scope(node0, noType0);\n    Scope.Var scope_Var0 = scope0.declare(\"Named type with empty name component\", node0, noType0, compilerInput0, false);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node1 = new Node(130, node0, node0, node0, 34, 44);\n    Vector<JSType> vector0 = new Vector<JSType>();\n    FunctionType functionType0 = (FunctionType) jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) noType0, (JSType) noType0, (List<JSType>) vector0);\n    typeValidator0.expectUndeclaredVariable(\"kI`}oOzsS\", node0, node1, scope_Var0, \"\", functionType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test5465"
  },
  "test3443" : {
    "methodSignature" : "boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType, JSType leftType, String msg)",
    "methodName" : "expectCanAssignTo",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3443() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, noType0, \"Not declared as a type name\");\n}",
    "testName" : "test3443"
  },
  "test2834" : {
    "methodSignature" : "boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType, JSType leftType, Node owner, String propName)",
    "methodName" : "expectCanAssignToPropertyOf",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2834() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf((NodeTraversal) null, node0, jSType0, jSType0, node0, \"Not declared as a constructor\");\n}",
    "testName" : "test2834"
  },
  "test4859" : {
    "methodSignature" : "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType)",
    "methodName" : "expectUndeclaredVariable",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4859() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"Named type with empty name component\");\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);\n    Scope scope0 = new Scope(node0, noType0);\n    Scope.Var scope_Var0 = scope0.declare(\"Named type with empty name component\", node0, noType0, compilerInput0, false);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectUndeclaredVariable(\"Named type with empty name component\", node0, node0, scope_Var0, \"Not declared as a type name\", (JSType) null);\n}",
    "testName" : "test4859"
  },
  "test0811" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0811() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    UnreachableCodeElimination unreachableCodeElimination0 = new UnreachableCodeElimination(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unreachableCodeElimination0);\n    typeValidator0.expectAnyObject(nodeTraversal0, node0, noType0, \"Named type with empty name component\");\n    noType0.hasCachedValues();\n}",
    "testName" : "test0811"
  },
  "test1823" : {
    "methodSignature" : "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType)",
    "methodName" : "expectNotNullOrUndefined",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1823() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectNotNullOrUndefined((NodeTraversal) null, node0, jSType0, \"Named type with empty name component\", jSType0);\n}",
    "testName" : "test1823"
  },
  "test3847" : {
    "methodSignature" : "void expectSuperType(NodeTraversal t, Node n, ObjectType superObject, ObjectType subObject)",
    "methodName" : "expectSuperType",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3847() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" nly arrays*Or ob1ecFscan ce acce(sed\", \" nly arrays*Or ob1ecFscan ce acce(sed\");\n    UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    JSType[] jSTypeArray0 = new JSType[7];\n    jSTypeArray0[6] = (JSType) functionType0;\n    FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) null, jSTypeArray0);\n    ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) functionType1);\n    typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, objectType0);\n}",
    "testName" : "test3847"
  },
  "test6072" : {
    "methodSignature" : "String getReadableJSTypeName(Node n, boolean dereference)",
    "methodName" : "getReadableJSTypeName",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6072() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"~,,[QIF.L&A\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    String string0 = typeValidator0.getReadableJSTypeName(node0, false);\n}",
    "testName" : "test6072"
  },
  "test057" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectActualObject((NodeTraversal) null, node0, noType0, \"Unknown class name\");\n    noType0.hasCachedValues();\n}",
    "testName" : "test057"
  },
  "test4251" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4251() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, jSType0);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test4251"
  },
  "test5263" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5263() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"Named type with empty name component\");\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);\n    Scope scope0 = new Scope(node0, noType0);\n    Scope.Var scope_Var0 = scope0.declare(\"Named type with empty name component\", node0, noType0, compilerInput0, true);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node1 = new Node(1, node0, 4095, 10);\n    typeValidator0.expectUndeclaredVariable(\"Not declared as a constructor\", node0, node1, scope_Var0, \"Not declared as a constructor\", noType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test5263"
  },
  "test4252" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4252() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, jSType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test4252"
  },
  "test5061" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5061() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    Scope scope0 = new Scope(node0, noType0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node1 = new Node(118, node0, node0, node0, 7, 4095);\n    Scope.Var scope_Var0 = scope0.declare(\"kd0R7KXL)JtA|os=\\\"f\", node0, noType0, (CompilerInput) null, true);\n    typeValidator0.expectUndeclaredVariable(\"<k;vjYdTDAt^gO\", node1, node1, scope_Var0, \"kd0R7KXL)JtA|os=\\\"f\", noType0);\n    typeValidator0.getReadableJSTypeName(node0, true);\n    compiler0.getWarningCount();\n}",
    "testName" : "test5061"
  },
  "test2126" : {
    "methodSignature" : "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType)",
    "methodName" : "expectNotNullOrUndefined",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2126() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, gatherRawExports0);\n    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, \"Not declared as a constructor\", (JSType) null);\n}",
    "testName" : "test2126"
  },
  "test3138" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3138() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    EnumType enumType0 = jSTypeRegistry0.createEnumType(\"Named type with empty name component\", jSType0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    EnumType enumType1 = jSTypeRegistry0.createEnumType(\"Not declared as a constructor\", enumType0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType1, enumType0, node0, \"Named type with empty name component\");\n    compiler0.getWarningCount();\n}",
    "testName" : "test3138"
  },
  "test3137" : {
    "methodSignature" : "boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType, JSType leftType, Node owner, String propName)",
    "methodName" : "expectCanAssignToPropertyOf",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3137() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    EnumType enumType0 = jSTypeRegistry0.createEnumType(\"Named type with empty name component\", jSType0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    EnumType enumType1 = jSTypeRegistry0.createEnumType(\"Not declared as a constructor\", enumType0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType1, enumType0, node0, \"Named type with empty name component\");\n}",
    "testName" : "test3137"
  },
  "test1115" : {
    "methodSignature" : "void expectIndexMatch(NodeTraversal t, Node n, JSType objType, JSType indexType)",
    "methodName" : "expectIndexMatch",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1115() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    typeValidator0.expectIndexMatch((NodeTraversal) null, node0, jSType0, jSType0);\n}",
    "testName" : "test1115"
  },
  "test012" : {
    "methodSignature" : "Iterable<TypeMismatch> getMismatches()",
    "methodName" : "getMismatches",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"`JXDCZ[.t:M[!2?B8X\");\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();\n}",
    "testName" : "test012"
  },
  "test2328" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2328() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseSyntheticCode(\"Not declared as a constructor\", \"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeNative jSTypeNative1 = JSTypeNative.TOP_LEVEL_PROTOTYPE;\n    ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative1);\n    typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, objectType0, jSType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2328"
  },
  "test1317" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1317() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, \"Not declared as a type name\");\n    compiler0.getWarningCount();\n}",
    "testName" : "test1317"
  },
  "test1318" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1318() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.ALL_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, \"Not declared as a type name\");\n    functionType0.hasCachedValues();\n}",
    "testName" : "test1318"
  },
  "test046" : {
    "methodSignature" : "boolean expectObject(NodeTraversal t, Node n, JSType type, String msg)",
    "methodName" : "expectObject",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"!\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, \"Named type with empty name component\");\n}",
    "testName" : "test046"
  },
  "test5870" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5870() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a constructor\");\n    JSTypeNative jSTypeNative1 = JSTypeNative.ARRAY_FUNCTION_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative1);\n    GroupVariableDeclarations groupVariableDeclarations0 = new GroupVariableDeclarations(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, groupVariableDeclarations0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, functionType0, \"Unknown class name\", jSType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test5870"
  },
  "test1520" : {
    "methodSignature" : "void expectStringOrNumber(NodeTraversal t, Node n, JSType type, String msg)",
    "methodName" : "expectStringOrNumber",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1520() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();\n    SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);\n    TypeCheck typeCheck0 = new TypeCheck(compiler0, semanticReverseAbstractInterpreter0, jSTypeRegistry0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, typeCheck0, (ScopeCreator) null);\n    typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, \"Not declared as a type name\");\n}",
    "testName" : "test1520"
  },
  "test5768" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5768() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, functionType0);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test5768"
  },
  "test3544" : {
    "methodSignature" : "public boolean isQuotedString()",
    "methodName" : "isQuotedString",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3544() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null);\n    typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, 6);\n    node0.isQuotedString();\n}",
    "testName" : "test3544"
  },
  "test5769" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5769() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, functionType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test5769"
  },
  "test2733" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2733() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Attempt to remove() an extern definition.\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    typeValidator0.expectIndexMatch(nodeTraversal0, node0, jSType0, jSType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2733"
  },
  "test4556" : {
    "methodSignature" : "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType)",
    "methodName" : "expectUndeclaredVariable",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4556() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"Unknown class name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node0 = new Node(33);\n    typeValidator0.expectUndeclaredVariable(\"Unknown class name\", node0, node0, (Scope.Var) null, \"Not declared as a type name\", jSType0);\n}",
    "testName" : "test4556"
  },
  "test5566" : {
    "methodSignature" : "void expectAllInterfaceProperties(NodeTraversal t, Node n, FunctionType type)",
    "methodName" : "expectAllInterfaceProperties",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5566() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectAllInterfaceProperties((NodeTraversal) null, node0, noType0);\n}",
    "testName" : "test5566"
  },
  "test2531" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, jSType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test2531"
  },
  "test4354" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4354() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, noType0);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test4354"
  },
  "test2530" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2530() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, jSType0);\n    functionType0.hasCachedValues();\n}",
    "testName" : "test2530"
  },
  "test000" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" nl \\\"rrays*Or ob1ecFsca ce acce(sed\", \" nl \\\"rrays*Or ob1ecFsca ce acce(sed\");\n    UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, \"Named type with empty name component\", jSType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test000"
  },
  "test0912" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0912() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"~,,[QIF.L&A\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, syntacticScopeCreator0);\n    JSType jSType1 = jSTypeRegistry0.createOptionalType(jSType0);\n    typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType1, \"Named type with empty name component\");\n    compiler0.getWarningCount();\n}",
    "testName" : "test0912"
  },
  "test1924" : {
    "methodSignature" : "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType)",
    "methodName" : "expectNotNullOrUndefined",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1924() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Attempt to remove() an extern definition.\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, \"/J_G4NIDGVp#\", jSType0);\n}",
    "testName" : "test1924"
  },
  "test001" : {
    "methodSignature" : "boolean expectNotNullOrUndefined(NodeTraversal t, Node n, JSType type, String msg, JSType expectedType)",
    "methodName" : "expectNotNullOrUndefined",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" nl \\\"rrays*Or ob1ecFsca ce acce(sed\", \" nl \\\"rrays*Or ob1ecFsca ce acce(sed\");\n    UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, \"Named type with empty name component\", jSType0);\n}",
    "testName" : "test001"
  },
  "test045" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"!\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0, (ScopeCreator) null);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, \"Named type with empty name component\");\n    compiler0.getWarningCount();\n}",
    "testName" : "test045"
  },
  "test3948" : {
    "methodSignature" : "void expectSuperType(NodeTraversal t, Node n, ObjectType superObject, ObjectType subObject)",
    "methodName" : "expectSuperType",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3948() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);\n}",
    "testName" : "test3948"
  },
  "test0710" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0710() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"\");\n    ReferenceCollectingCallback.Behavior referenceCollectingCallback_Behavior0 = ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR;\n    ReferenceCollectingCallback referenceCollectingCallback0 = new ReferenceCollectingCallback(compiler0, referenceCollectingCallback_Behavior0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, referenceCollectingCallback0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);\n    typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, \"Named type with empty name component\");\n    functionType0.hasCachedValues();\n}",
    "testName" : "test0710"
  },
  "test1722" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1722() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    compiler0.parseTestCode(\"Unknown class name\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    TypeValidator typeValidator0 = new TypeValidator(compiler0);\n    EnumType enumType0 = jSTypeRegistry0.createEnumType(\"Not declared as a constructor\", jSType0);\n    typeValidator0.expectStringOrNumber(nodeTraversal0, (Node) null, enumType0, \"Not declared as a type name\");\n    compiler0.getWarningCount();\n}",
    "testName" : "test1722"
  },
  "test3746" : {
    "methodSignature" : "void expectCanOverride(NodeTraversal t, Node n, JSType overridingType, JSType hiddenType, String propertyName, JSType ownerType)",
    "methodName" : "expectCanOverride",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3746() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanOverride((NodeTraversal) null, node0, jSType0, jSType0, \"Not declared as a type name\", jSType0);\n}",
    "testName" : "test3746"
  },
  "test2935" : {
    "methodSignature" : "boolean expectCanAssignToPropertyOf(NodeTraversal t, Node n, JSType rightType, JSType leftType, Node owner, String propName)",
    "methodName" : "expectCanAssignToPropertyOf",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2935() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    EnumType enumType0 = jSTypeRegistry0.createEnumType(\"Not declared as a constructor\", jSType0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, enumType0, (Node) null, \"Unknown class name\");\n}",
    "testName" : "test2935"
  },
  "test4758" : {
    "methodSignature" : "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType)",
    "methodName" : "expectUndeclaredVariable",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4758() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" nly \\\"rrays*Or ob1ecFscan ce acce(sed\", \" nly \\\"rrays*Or ob1ecFscan ce acce(sed\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    Scope scope0 = new Scope(node0, compiler0);\n    EnumType enumType0 = jSTypeRegistry0.createEnumType(\"Unknown class name\", functionType0);\n    EnumElementType enumElementType0 = enumType0.getElementsType();\n    JSType jSType0 = enumElementType0.getPropertyType(\"Not declared as a type name\");\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"S63MumJVF_q[` sQ\\\"f\", charset0);\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);\n    Scope.Var scope_Var0 = scope0.declare(\"EP\", node0, jSType0, compilerInput0, false);\n    typeValidator0.expectUndeclaredVariable(\"\", node0, node0, scope_Var0, \"S63MumJVF_q[` sQ\\\"f\", enumElementType0);\n}",
    "testName" : "test4758"
  },
  "test5364" : {
    "methodSignature" : "void expectUndeclaredVariable(String sourceName, Node n, Node parent, Var var, String variableName, JSType newType)",
    "methodName" : "expectUndeclaredVariable",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5364() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Unknown class name\");\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"Named type with empty name component\");\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);\n    Scope scope0 = new Scope(node0, noType0);\n    Scope.Var scope_Var0 = scope0.declare(\"Named type with empty name component\", node0, noType0, compilerInput0, false);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node1 = new Node(130, node0, node0, node0, 34, 44);\n    typeValidator0.expectUndeclaredVariable(\"Not declared as a constructor\", node1, node1, scope_Var0, \"Not declared as a constructor\", noType0);\n}",
    "testName" : "test5364"
  },
  "test4353" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4353() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, noType0);\n    noType0.hasCachedValues();\n}",
    "testName" : "test4353"
  },
  "test3341" : {
    "methodSignature" : "boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType, JSType leftType, String msg)",
    "methodName" : "expectCanAssignTo",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3341() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, functionType0, \"Named type with empty name component\");\n}",
    "testName" : "test3341"
  },
  "test3340" : {
    "methodSignature" : "public boolean hasCachedValues()",
    "methodName" : "hasCachedValues",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3340() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;\n    JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);\n    Denormalize denormalize0 = new Denormalize(compiler0);\n    Node node0 = compiler0.parseTestCode(\"Named type with empty name component\");\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, denormalize0);\n    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();\n    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs(jSType0, (List<JSType>) linkedList0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, functionType0, \"Named type with empty name component\");\n    functionType0.hasCachedValues();\n}",
    "testName" : "test3340"
  },
  "test4150" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4150() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\" nly \\\"rrays*Or ob1ecFscan ce acce(sed\", \" nly \\\"rrays*Or ob1ecFscan ce acce(sed\");\n    UnfoldCompoundAssignments unfoldCompoundAssignments0 = new UnfoldCompoundAssignments(compiler0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, unfoldCompoundAssignments0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();\n    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;\n    typeValidator0.setShouldReport(false);\n    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);\n    typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test4150"
  },
  "test5162" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5162() throws Throwable {\n    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();\n    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);\n    JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];\n    NoType noType0 = (NoType) jSTypeRegistry0.createUnionType(jSTypeNativeArray0);\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Not declared as a type name\");\n    Scope scope0 = new Scope(node0, noType0);\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node1 = new Node(118, node0, node0, node0, 7, 4095);\n    Scope.Var scope_Var0 = scope0.declare(\"kd0R7KXL)JtA|os=\\\"f\", node0, noType0, (CompilerInput) null, true);\n    typeValidator0.expectUndeclaredVariable(\"kd0R7KXL)JtA|os=\\\"f\", node0, node1, scope_Var0, \"*[[2?!+4~yQ\", noType0);\n    compiler0.getWarningCount();\n}",
    "testName" : "test5162"
  },
  "test6173" : {
    "methodSignature" : "String getReadableJSTypeName(Node n, boolean dereference)",
    "methodName" : "getReadableJSTypeName",
    "className" : "com.google.javascript.jscomp.TypeValidator",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6173() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseSyntheticCode(\"actual parameter %d of %s does not match formal parameter\", \"actual parameter %d of %s does not match formal parameter\");\n    TypeValidator typeValidator0 = compiler0.getTypeValidator();\n    Node node0 = new Node(42);\n    String string0 = typeValidator0.getReadableJSTypeName(node0, true);\n}",
    "testName" : "test6173"
  }
}