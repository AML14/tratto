focal_method,test_prefix,docstring
"public int getSourcePosition() {
    return sourcePosition;
}","public void test0000() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.siblings();
    assertEquals(630938, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test0001() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.siblings();
    assertEquals(154, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test0012() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.NO_SIDE_EFFECTS);
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertEquals(630938, node1.getSourcePosition());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test0013() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.NO_SIDE_EFFECTS);
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertTrue(node1.isNumber());
}",""
"public int getExistingIntProp(int propType) {
    PropListItem item = lookupProperty(propType);
    if (item == null) {
        throw new IllegalStateException(""missing prop: "" + propType);
    }
    return item.getIntValue();
}","public void test0024() throws Throwable {
    Node node0 = new Node((-4248), (-4248), 51);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Set<String> set0 = jSDocInfo0.getSuppressions();
    node0.setDirectives(set0);
    // Undeclared exception!
    try {
        node0.getExistingIntProp(48);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node$ObjectPropListItem"", e);
    }
}",""
"public int getType() {
    return type;
}","public void test0035() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(46, nodeArray0);
    Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
    node_FileLevelJsDocBuilder0.append(""!"");
    node0.putProp(4095, ""!"");
    node_FileLevelJsDocBuilder0.append("",n"");
    assertEquals(46, node0.getType());
}",""
"public double getDouble() throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a number node"");
    }
}","public void test0046() throws Throwable {
    Node node0 = Node.newString("",n"");
    node0.setQuotedString();
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING ,n [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
 */"
"public boolean isQuotedString() {
    return false;
}","public void test0057() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    boolean boolean0 = node0.isQuotedString();
    assertFalse(boolean0);
}","/**
 * This should only be called for STRING nodes children of OBJECTLIT.
 */"
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test0058() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    boolean boolean0 = node0.isQuotedString();
    assertTrue(node0.isString());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test0059() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    boolean boolean0 = node0.isQuotedString();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public double getDouble() throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a number node"");
    }
}","public void test00610() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
    node0.setSideEffectFlags(node_SideEffectFlags0);
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // CALL 37 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
 */"
"public boolean isEquivalentToTyped(Node node) {
    return isEquivalentTo(node, true, true, false);
}","public void test01418() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if this node is equivalent semantically to another and
 * the types are equivalent.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test01419() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertEquals(0, node0.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test01420() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertEquals(39, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test01421() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test01522() throws Throwable {
    Node node0 = Node.newNumber((-476.30970638241644));
    node0.setDouble((-476.30970638241644));
    assertTrue(node0.isNumber());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test01523() throws Throwable {
    Node node0 = Node.newNumber((-476.30970638241644));
    node0.setDouble((-476.30970638241644));
    assertEquals((-1), node0.getLineno());
}",""
"public double getDouble() throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a number node"");
    }
}","public void test01624() throws Throwable {
    Node node0 = Node.newString("",n"");
    InputId inputId0 = new InputId("",n"");
    node0.setInputId(inputId0);
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING ,n [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
 */"
"public Node srcref(Node other) {
    return useSourceInfoFrom(other);
}","public void test01725() throws Throwable {
    Node node0 = new Node(172, 172, 172);
    // Undeclared exception!
    try {
        node0.srcref((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test01826() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setWasEmptyNode(true);
    assertTrue(node0.isStringKey());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test01827() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setWasEmptyNode(true);
    assertEquals(630938, node0.getSourcePosition());
}",""
"public static Node newString(String str, int lineno, int charno) {
    return new StringNode(Token.STRING, str, lineno, charno);
}","public void test01928() throws Throwable {
    // Undeclared exception!
    try {
        Node.newString((String) null, (-1920), (-1920));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}",""
"public Node(int nodeType, Node left, Node mid, Node right) {
    Preconditions.checkArgument(left.parent == null);
    Preconditions.checkArgument(left.next == null);
    Preconditions.checkArgument(mid.parent == null);
    Preconditions.checkArgument(mid.next == null);
    Preconditions.checkArgument(right.parent == null);
    Preconditions.checkArgument(right.next == null);
    type = nodeType;
    parent = null;
    first = left;
    last = right;
    left.next = mid;
    left.parent = this;
    mid.next = right;
    mid.parent = this;
    right.next = null;
    right.parent = this;
    sourcePosition = -1;
}","public void test02029() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    node0.addChildrenToBack(node0);
    Node node1 = null;
    try {
        node1 = new Node(57, node0, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test02130() throws Throwable {
    Node node0 = Node.newString(""Y_AxCFe^0"");
    node0.getInputId();
    assertTrue(node0.isString());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test02131() throws Throwable {
    Node node0 = Node.newString(""Y_AxCFe^0"");
    node0.getInputId();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test02232() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.isSyntheticBlock();
    assertEquals(200753, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test02233() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.isSyntheticBlock();
    assertEquals(49, node0.getType());
}",""
"public Node(int nodeType, Node left, Node mid, Node right) {
    Preconditions.checkArgument(left.parent == null);
    Preconditions.checkArgument(left.next == null);
    Preconditions.checkArgument(mid.parent == null);
    Preconditions.checkArgument(mid.next == null);
    Preconditions.checkArgument(right.parent == null);
    Preconditions.checkArgument(right.next == null);
    type = nodeType;
    parent = null;
    first = left;
    last = right;
    left.next = mid;
    left.parent = this;
    mid.next = right;
    mid.parent = this;
    right.next = null;
    right.parent = this;
    sourcePosition = -1;
}","public void test02334() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    Node node2 = null;
    try {
        node2 = new Node(4, node1, node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test02435() throws Throwable {
    Node node0 = new Node(36);
    node0.setSourceEncodedPosition(36);
    assertEquals(36, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test02536() throws Throwable {
    Node node0 = new Node((-856), (-856), (-856));
    node0.getAncestors();
    assertEquals((-856), node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test02537() throws Throwable {
    Node node0 = new Node((-856), (-856), (-856));
    node0.getAncestors();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isLocalResultCall() {
    return areBitFlagsSet(getSideEffectFlags(), FLAG_LOCAL_RESULTS);
}","public void test02638() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isLocalResultCall();
    assertFalse(boolean0);
}","/**
 * Returns true if this node is a function or constructor call that
 * returns a primitive or a local object (an object that has no other
 * references).
 */"
"public boolean isCast() {
    return this.getType() == Token.CAST;
}","public void test02639() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isLocalResultCall();
    assertTrue(node0.isCast());
}",""
"public int getType() {
    return type;
}","public void test02740() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    assertEquals(29, node0.getType());
}",""
"public boolean isOnlyModifiesArgumentsCall() {
    return areBitFlagsSet(getSideEffectFlags() & Node.NO_SIDE_EFFECTS, Node.FLAG_GLOBAL_STATE_UNMODIFIED | Node.FLAG_THIS_UNMODIFIED | Node.FLAG_NO_THROWS);
}","public void test02741() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    assertFalse(boolean0);
}","/**
 * @return Whether the only side-effect is ""modifies arguments""
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test02742() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    assertEquals((-1), node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test02843() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.setIsSyntheticBlock(false);
    assertEquals(200753, node0.getSourcePosition());
}",""
"public boolean isThrow() {
    return this.getType() == Token.THROW;
}","public void test02844() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.setIsSyntheticBlock(false);
    assertTrue(node0.isThrow());
}",""
"public boolean isQuotedString() {
    return false;
}","public void test02945() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isQuotedString();
    assertFalse(boolean0);
}","/**
 * This should only be called for STRING nodes children of OBJECTLIT.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test02946() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isQuotedString();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isWhile() {
    return this.getType() == Token.WHILE;
}","public void test02947() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isQuotedString();
    assertTrue(node0.isWhile());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test03048() throws Throwable {
    Node node0 = new Node(1370, 1370, 1370);
    Node node1 = new Node(50, node0, 2, 42);
    Node node2 = node1.copyInformationFrom(node0);
    node1.addChildToFront(node2);
    assertEquals(1370, node1.getCharno());
}",""
"public boolean isDefaultCase() {
    return this.getType() == Token.DEFAULT_CASE;
}","public void test03149() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    Node node1 = node0.srcrefTree(node0);
    assertTrue(node1.isDefaultCase());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03150() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    Node node1 = node0.srcrefTree(node0);
    assertEquals((-1), node1.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test03251() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.wasEmptyNode();
    assertEquals(630938, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test03252() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.wasEmptyNode();
    assertEquals(154, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test03353() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isNoSideEffectsCall();
    assertEquals((-3765), node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03354() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isNoSideEffectsCall();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isNoSideEffectsCall() {
    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);
}","public void test03355() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isNoSideEffectsCall();
    assertFalse(boolean0);
}","/**
 * Returns true if this node is a function or constructor call that
 * has no side effects.
 */"
"public int getType() {
    return type;
}","public void test03456() throws Throwable {
    Node node0 = Node.newString(""g(k9Afw/rYOkc_Q.]J"");
    boolean boolean0 = node0.isOnlyModifiesThisCall();
    assertEquals(40, node0.getType());
}",""
"public boolean isOnlyModifiesThisCall() {
    return areBitFlagsSet(getSideEffectFlags() & Node.NO_SIDE_EFFECTS, Node.FLAG_GLOBAL_STATE_UNMODIFIED | Node.FLAG_ARGUMENTS_UNMODIFIED | Node.FLAG_NO_THROWS);
}","public void test03457() throws Throwable {
    Node node0 = Node.newString(""g(k9Afw/rYOkc_Q.]J"");
    boolean boolean0 = node0.isOnlyModifiesThisCall();
    assertFalse(boolean0);
}","/**
 * @return Whether the only side-effect is ""modifies this""
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03458() throws Throwable {
    Node node0 = Node.newString(""g(k9Afw/rYOkc_Q.]J"");
    boolean boolean0 = node0.isOnlyModifiesThisCall();
    assertEquals((-1), node0.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test03559() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    node0.getDirectives();
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test03560() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    node0.getDirectives();
    assertEquals(112, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test03661() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setChangeTime(1636);
    int int0 = node0.getChangeTime();
    assertEquals(630938, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test03662() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setChangeTime(1636);
    int int0 = node0.getChangeTime();
    assertEquals(154, node0.getType());
}",""
"public int getChangeTime() {
    return getIntProp(CHANGE_TIME);
}","public void test03663() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setChangeTime(1636);
    int int0 = node0.getChangeTime();
    assertEquals(1636, int0);
}","/**
 * Returns the time of the last change for this node
 */"
"public int getType() {
    return type;
}","public void test03764() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    int int0 = node0.getSourcePosition();
    assertEquals(29, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test03765() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    int int0 = node0.getSourcePosition();
    assertEquals(118813, int0);
}",""
"public int getLength() {
    return getIntProp(LENGTH);
}","public void test03866() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getLength();
    assertEquals(0, int0);
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test03867() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getLength();
    assertTrue(node0.isNumber());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test03868() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getLength();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test03969() throws Throwable {
    Node node0 = new Node(154);
    node0.setCharno(154);
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test03970() throws Throwable {
    Node node0 = new Node(154);
    node0.setCharno(154);
    assertTrue(node0.isStringKey());
}",""
"public void setQuotedString() {
    throw new IllegalStateException(""not a StringNode"");
}","public void test04071() throws Throwable {
    Node node0 = new Node(37);
    // Undeclared exception!
    try {
        node0.setQuotedString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // not a StringNode
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * This should only be called for STRING nodes children of OBJECTLIT.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test04172() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertEquals(630938, node0.getSourcePosition());
}",""
"public boolean isEquivalentTo(Node node) {
    return isEquivalentTo(node, false, true, false);
}","public void test04173() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertTrue(boolean0);
}","/**
 * Returns true if this node is equivalent semantically to another
 */"
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test04174() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertTrue(node0.isStringKey());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test04175() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertEquals(0, node0.getChildCount());
}",""
"public String getString() throws UnsupportedOperationException {
    if (this.getType() == Token.STRING) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test04276() throws Throwable {
    Node node0 = new Node(154);
    node0.setLength(154);
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING_KEY [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when node has String context.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test04377() throws Throwable {
    Node node0 = new Node((-72));
    node0.setSourceFileForTesting(""1dB~TH'"");
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertEquals((-1), node1.getCharno());
}",""
"public int getType() {
    return type;
}","public void test04378() throws Throwable {
    Node node0 = new Node((-72));
    node0.setSourceFileForTesting(""1dB~TH'"");
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertEquals((-72), node1.getType());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test04479() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getSourceOffset();
    assertTrue(node0.isNumber());
}",""
"public int getSourceOffset() {
    StaticSourceFile file = getStaticSourceFile();
    if (file == null) {
        return -1;
    }
    int lineno = getLineno();
    if (lineno == -1) {
        return -1;
    }
    return file.getLineOffset(lineno) + getCharno();
}","public void test04480() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getSourceOffset();
    assertEquals((-1), int0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04481() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getSourceOffset();
    assertEquals((-1), node0.getLineno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test04582() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    node0.setLineno(31);
    assertEquals(31, node0.getLineno());
}",""
"public Node(int nodeType, Node left, Node mid, Node right, int lineno, int charno) {
    this(nodeType, left, mid, right);
    sourcePosition = mergeLineCharNo(lineno, charno);
}","public void test04683() throws Throwable {
    Node node0 = new Node(2771, 2771, 2771);
    Node node1 = new Node(56, node0, node0, 15, 4);
    Node node2 = null;
    try {
        node2 = new Node(52, node1, node0, node1, 4095, 49);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public String getString() throws UnsupportedOperationException {
    if (this.getType() == Token.STRING) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test04784() throws Throwable {
    Node node0 = Node.newNumber((-460.9471936));
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NUMBER -460.9471936 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when node has String context.
 */"
"public double getDouble() throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a number node"");
    }
}","public void test04885() throws Throwable {
    Node node0 = new Node(31);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.putProp(31, jSDocInfo0);
    // Undeclared exception!
    try {
        node0.getDouble();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 31
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
 */"
"public double getDouble() throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a number node"");
    }
}","public void test04986() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(32, ""}m\""{${/lQS0b5f\""'V"");
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING }m\""{${/lQS0b5f\""'V [incrdecr: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
 */"
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test05087() throws Throwable {
    Node node0 = Node.newString(""!"");
    node0.putProp(33, ""!"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 33
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test05188() throws Throwable {
    Node node0 = Node.newString(""Object#Element"");
    JSDocInfo jSDocInfo0 = new JSDocInfo(false);
    node0.putProp(34, jSDocInfo0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 34
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test05289() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(35, ""}m\""{${/lQS0b5f\""'V"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 35
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public String getString() throws UnsupportedOperationException {
    if (this.getType() == Token.STRING) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test05390() throws Throwable {
    Node node0 = new Node(29);
    node0.setIsSyntheticBlock(true);
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NEG [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when node has String context.
 */"
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test05491() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.putProp(39, ""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.toStringTree();
    assertTrue(node0.isString());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05492() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.putProp(39, ""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05593() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.INFERRED_FUNCTION);
    node0.toStringTree();
    assertEquals(154, node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test05594() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.INFERRED_FUNCTION);
    node0.toStringTree();
    assertEquals(630938, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test05595() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.INFERRED_FUNCTION);
    node0.toStringTree();
    assertEquals(39, node0.getType());
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test05696() throws Throwable {
    Node node0 = new Node(154);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.putProp(41, jSDocInfo0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 41
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test05797() throws Throwable {
    Node node0 = Node.newString(""Y_AxDCFX^0"");
    node0.putProp(43, ""Y_AxDCFX^0"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test05798() throws Throwable {
    Node node0 = Node.newString(""Y_AxDCFX^0"");
    node0.putProp(43, ""Y_AxDCFX^0"");
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test05899() throws Throwable {
    Node node0 = new Node(44);
    node0.putProp(44, ""g(k9Afw/rYOkc_Q.]J"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 44
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test059100() throws Throwable {
    Node node0 = new Node(45);
    Object object0 = new Object();
    node0.putProp(45, object0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 45
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test060101() throws Throwable {
    Node node0 = new Node(46);
    node0.putProp(46, ""\\}Gw?L y~f)"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test060102() throws Throwable {
    Node node0 = new Node(46);
    node0.putProp(46, ""\\}Gw?L y~f)"");
    node0.toStringTree();
    assertEquals(46, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test061103() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(47, ""}m\""{${/lQS0b5f\""'V"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test061104() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(47, ""}m\""{${/lQS0b5f\""'V"");
    node0.toStringTree();
    assertTrue(node0.isString());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test062105() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    HashSet<String> hashSet0 = new HashSet<String>();
    node0.setDirectives(hashSet0);
    node0.toStringTree();
    assertEquals(154, node0.getLineno());
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test062106() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    HashSet<String> hashSet0 = new HashSet<String>();
    node0.setDirectives(hashSet0);
    node0.toStringTree();
    assertTrue(node0.isStringKey());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test062107() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    HashSet<String> hashSet0 = new HashSet<String>();
    node0.setDirectives(hashSet0);
    node0.toStringTree();
    assertEquals(154, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test063108() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.putProp(49, ""incrdecr"");
    assertEquals(49, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test063109() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.putProp(49, ""incrdecr"");
    node0.toStringTree();
    assertEquals(49, node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test063110() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.putProp(49, ""incrdecr"");
    node0.toStringTree();
    assertEquals(200753, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test064111() throws Throwable {
    Node node0 = Node.newString(""D/;@/@0NG/H<^E4+T"");
    node0.putProp(50, ""D/;@/@0NG/H<^E4+T"");
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test064112() throws Throwable {
    Node node0 = Node.newString(""D/;@/@0NG/H<^E4+T"");
    node0.putProp(50, ""D/;@/@0NG/H<^E4+T"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public String getString() throws UnsupportedOperationException {
    if (this.getType() == Token.STRING) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test065113() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    node0.setSourceFileForTesting(""W"");
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // FUNCTION <invalid> 105 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when node has String context.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test066114() throws Throwable {
    Node node0 = Node.newString(""Y_AxFe^0"");
    node0.putProp(54, node0);
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test066115() throws Throwable {
    Node node0 = Node.newString(""Y_AxFe^0"");
    node0.putProp(54, node0);
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test067116() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.putProp(55, ""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test067117() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.putProp(55, ""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.toStringTree();
    assertTrue(node0.isString());
}",""
"public double getDouble() throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a number node"");
    }
}","public void test068118() throws Throwable {
    Node node0 = new Node(13);
    node0.setChangeTime((-135));
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NE [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
 */"
"public int getType() {
    return type;
}","public void test069119() throws Throwable {
    Node node0 = Node.newString(""!"");
    node0.putProp(57, ""!"");
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test069120() throws Throwable {
    Node node0 = Node.newString(""!"");
    node0.putProp(57, ""!"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test070121() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(2, ""}m\""{${/lQS0b5f\""'V"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 2
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test071122() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertEquals(430185, node0.getSourcePosition());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test071123() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertEquals(0, node1.getChildCount());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test071124() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertTrue(node0.isNumber());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test071125() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertTrue(node1.isNumber());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test072126() throws Throwable {
    Node node0 = Node.newNumber((-471.31165337815554));
    Node node1 = Node.newNumber((double) 50);
    node0.isEquivalentTo(node1);
    assertEquals(0, node1.getChildCount());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test072127() throws Throwable {
    Node node0 = Node.newNumber((-471.31165337815554));
    Node node1 = Node.newNumber((double) 50);
    node0.isEquivalentTo(node1);
    assertTrue(node1.isNumber());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test072128() throws Throwable {
    Node node0 = Node.newNumber((-471.31165337815554));
    Node node1 = Node.newNumber((double) 50);
    node0.isEquivalentTo(node1);
    assertEquals(0, node0.getChildCount());
}",""
"public static Node newString(String str) {
    return new StringNode(Token.STRING, str);
}","public void test073129() throws Throwable {
    // Undeclared exception!
    try {
        Node.newString((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test074130() throws Throwable {
    Node node0 = Node.newString(""D%Dv*"");
    node0.setString(""D%Dv*"");
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test074131() throws Throwable {
    Node node0 = Node.newString(""D%Dv*"");
    node0.setString(""D%Dv*"");
    assertTrue(node0.isString());
}",""
"public void setString(String value) throws UnsupportedOperationException {
    if (this.getType() == Token.STRING || this.getType() == Token.NAME) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test075132() throws Throwable {
    Node node0 = Node.newString("": "");
    // Undeclared exception!
    try {
        node0.setString((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}","/**
 * Can only be called for a Token.STRING or Token.NAME.
 * @param value the value to set.
 */"
"public String checkTreeEquals(Node node2) {
    NodeMismatch diff = checkTreeEqualsImpl(node2);
    if (diff != null) {
        return ""Node tree inequality:"" + ""\nTree1:\n"" + toStringTree() + ""\n\nTree2:\n"" + node2.toStringTree() + ""\n\nSubtree1: "" + diff.nodeA.toStringTree() + ""\n\nSubtree2: "" + diff.nodeB.toStringTree();
    }
    return null;
}","public void test076133() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertNotNull(string0);
}","/**
 * Checks if the subtree under this node is the same as another subtree.
 * Returns null if it's equal, or a message describing the differences.
 */"
"public int getType() {
    return type;
}","public void test076134() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertEquals(40, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test076136() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertEquals(385, node0.getCharno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test076137() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertEquals(38, node1.getCharno());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test077138() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(0, node1.getChildCount());
}",""
"NodeMismatch checkTreeEqualsImpl(Node node2) {
    if (!isEquivalentTo(node2, false, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        if (node2 == null) {
            throw new IllegalStateException();
        }
        res = n.checkTreeEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test077139() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getType() {
    return type;
}","public void test077140() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(40, node1.getType());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test077141() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertTrue(node0.isString());
}",""
"public Node(int nodeType, Node child) {
    Preconditions.checkArgument(child.parent == null, ""new child has existing parent"");
    Preconditions.checkArgument(child.next == null, ""new child has existing sibling"");
    type = nodeType;
    parent = null;
    first = last = child;
    child.next = null;
    child.parent = this;
    sourcePosition = -1;
}","public void test078142() throws Throwable {
    Node node0 = new Node((-894));
    Node node1 = new Node(53, node0, node0, node0, 12, 31);
    Node node2 = null;
    try {
        node2 = new Node(39, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // new child has existing parent
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node left, Node right) {
    Preconditions.checkArgument(left.parent == null, ""first new child has existing parent"");
    Preconditions.checkArgument(left.next == null, ""first new child has existing sibling"");
    Preconditions.checkArgument(right.parent == null, ""second new child has existing parent"");
    Preconditions.checkArgument(right.next == null, ""second new child has existing sibling"");
    type = nodeType;
    parent = null;
    first = left;
    last = right;
    left.next = right;
    left.parent = this;
    right.next = null;
    right.parent = this;
    sourcePosition = -1;
}","public void test079143() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(48, node0, 53, 37);
    Node node2 = null;
    try {
        node2 = new Node(32, node0, node1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // first new child has existing parent
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node left, Node right, int lineno, int charno) {
    this(nodeType, left, right);
    sourcePosition = mergeLineCharNo(lineno, charno);
}","public void test080144() throws Throwable {
    Node node0 = Node.newNumber((double) 112, 112, 112);
    Node node1 = new Node(112, node0, node0, node0, node0);
    Node node2 = null;
    try {
        node2 = new Node(52, node1, node0, 54, 38);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // second new child has existing parent
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node left, Node mid, Node mid2, Node right) {
    Preconditions.checkArgument(left.parent == null);
    Preconditions.checkArgument(left.next == null);
    Preconditions.checkArgument(mid.parent == null);
    Preconditions.checkArgument(mid.next == null);
    Preconditions.checkArgument(mid2.parent == null);
    Preconditions.checkArgument(mid2.next == null);
    Preconditions.checkArgument(right.parent == null);
    Preconditions.checkArgument(right.next == null);
    type = nodeType;
    parent = null;
    first = left;
    last = right;
    left.next = mid;
    left.parent = this;
    mid.next = mid2;
    mid.parent = this;
    mid2.next = right;
    mid2.parent = this;
    right.next = null;
    right.parent = this;
    sourcePosition = -1;
}","public void test081145() throws Throwable {
    Node node0 = new Node((-2748), 37, 37);
    Node node1 = new Node((-2748), node0, node0, node0);
    Node node2 = null;
    try {
        node2 = new Node(30, node0, node0, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node left, Node mid, Node mid2, Node right) {
    Preconditions.checkArgument(left.parent == null);
    Preconditions.checkArgument(left.next == null);
    Preconditions.checkArgument(mid.parent == null);
    Preconditions.checkArgument(mid.next == null);
    Preconditions.checkArgument(mid2.parent == null);
    Preconditions.checkArgument(mid2.next == null);
    Preconditions.checkArgument(right.parent == null);
    Preconditions.checkArgument(right.next == null);
    type = nodeType;
    parent = null;
    first = left;
    last = right;
    left.next = mid;
    left.parent = this;
    mid.next = mid2;
    mid.parent = this;
    mid2.next = right;
    mid2.parent = this;
    right.next = null;
    right.parent = this;
    sourcePosition = -1;
}","public void test082146() throws Throwable {
    Node node0 = new Node((-475), (-475), (-475));
    Node node1 = new Node((-475), node0, node0);
    Node node2 = null;
    try {
        node2 = new Node((-475), node1, node0, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node left, Node mid, Node mid2, Node right) {
    Preconditions.checkArgument(left.parent == null);
    Preconditions.checkArgument(left.next == null);
    Preconditions.checkArgument(mid.parent == null);
    Preconditions.checkArgument(mid.next == null);
    Preconditions.checkArgument(mid2.parent == null);
    Preconditions.checkArgument(mid2.next == null);
    Preconditions.checkArgument(right.parent == null);
    Preconditions.checkArgument(right.next == null);
    type = nodeType;
    parent = null;
    first = left;
    last = right;
    left.next = mid;
    left.parent = this;
    mid.next = mid2;
    mid.parent = this;
    mid2.next = right;
    mid2.parent = this;
    right.next = null;
    right.parent = this;
    sourcePosition = -1;
}","public void test083147() throws Throwable {
    Node node0 = Node.newString(""new child has existing parent"");
    Node node1 = new Node(47, node0, node0);
    Node node2 = null;
    try {
        node2 = new Node(38, node1, node1, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node left, Node mid, Node mid2, Node right) {
    Preconditions.checkArgument(left.parent == null);
    Preconditions.checkArgument(left.next == null);
    Preconditions.checkArgument(mid.parent == null);
    Preconditions.checkArgument(mid.next == null);
    Preconditions.checkArgument(mid2.parent == null);
    Preconditions.checkArgument(mid2.next == null);
    Preconditions.checkArgument(right.parent == null);
    Preconditions.checkArgument(right.next == null);
    type = nodeType;
    parent = null;
    first = left;
    last = right;
    left.next = mid;
    left.parent = this;
    mid.next = mid2;
    mid.parent = this;
    mid2.next = right;
    mid2.parent = this;
    right.next = null;
    right.parent = this;
    sourcePosition = -1;
}","public void test084148() throws Throwable {
    Node node0 = Node.newString(""synh_tc"");
    Node node1 = new Node(4095, node0, node0, 52, 30);
    Node node2 = null;
    try {
        node2 = new Node(4095, node1, node1, node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node[] children) {
    this.type = nodeType;
    parent = null;
    if (children.length != 0) {
        this.first = children[0];
        this.last = children[children.length - 1];
        for (int i = 1; i < children.length; i++) {
            if (null != children[i - 1].next) {
                // fail early on loops. implies same node in array twice
                throw new IllegalArgumentException(""duplicate child"");
            }
            children[i - 1].next = children[i];
            Preconditions.checkArgument(children[i - 1].parent == null);
            children[i - 1].parent = this;
        }
        Preconditions.checkArgument(children[children.length - 1].parent == null);
        children[children.length - 1].parent = this;
        if (null != this.last.next) {
            // fail early on loops. implies same node in array twice
            throw new IllegalArgumentException(""duplicate child"");
        }
    }
}","public void test085149() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    Node[] nodeArray0 = new Node[3];
    nodeArray0[0] = node0;
    nodeArray0[1] = node0;
    Node node1 = null;
    try {
        node1 = new Node(54, nodeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // duplicate child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public Node(int nodeType, Node[] children, int lineno, int charno) {
    this(nodeType, children);
    sourcePosition = mergeLineCharNo(lineno, charno);
}","public void test086150() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    Node[] nodeArray0 = new Node[2];
    nodeArray0[0] = node0;
    Node node2 = null;
    try {
        node2 = new Node(2, nodeArray0, 46, 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node(int nodeType, Node[] children, int lineno, int charno) {
    this(nodeType, children);
    sourcePosition = mergeLineCharNo(lineno, charno);
}","public void test087151() throws Throwable {
    Node node0 = new Node(154);
    Node[] nodeArray0 = new Node[2];
    nodeArray0[0] = node0;
    nodeArray0[1] = node0;
    Node node1 = null;
    try {
        node1 = new Node(32, nodeArray0, 57, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public int getType() {
    return type;
}","public void test088152() throws Throwable {
    Node node0 = new Node((-1454));
    assertEquals((-1454), node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test088153() throws Throwable {
    Node node0 = new Node((-1454));
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test088154() throws Throwable {
    Node node0 = new Node((-1454));
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node0;
    Node node1 = new Node(1, nodeArray0, 29, 29);
    assertEquals(1, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test088155() throws Throwable {
    Node node0 = new Node((-1454));
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node0;
    Node node1 = new Node(1, nodeArray0, 29, 29);
    assertEquals(118813, node1.getSourcePosition());
}",""
"public boolean isVar() {
    return this.getType() == Token.VAR;
}","public void test089156() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.hasChildren();
    assertTrue(node0.isVar());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test089157() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.hasChildren();
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test089158() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.hasChildren();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test090159() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertTrue(boolean0);
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test090160() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertFalse(node1.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getType() {
    return type;
}","public void test090161() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals(85, node1.getType());
}",""
"public int getType() {
    return type;
}","public void test090162() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals(39, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test090163() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals((-1), node0.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test090164() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals((-1), node1.getLineno());
}",""
"public void replaceChild(Node child, Node newChild) {
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(child);
    newChild.next = child.next;
    newChild.parent = this;
    if (child == first) {
        first = newChild;
    } else {
        Node prev = getChildBefore(child);
        prev.next = newChild;
    }
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test091165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, jSType0, jSType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    // Undeclared exception!
    try {
        node0.replaceChild(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Detaches child from Node and replaces it with newChild.
 */"
"public void removeChild(Node child) {
    Node prev = getChildBefore(child);
    if (prev == null) {
        first = first.next;
    } else {
        prev.next = child.next;
    }
    if (child == last) {
        last = prev;
    }
    child.next = null;
    child.parent = null;
}","public void test092166() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = new Node(0, node0);
    // Undeclared exception!
    try {
        node1.removeChild((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Detach a child from its parent and siblings.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test093167() throws Throwable {
    Node node0 = Node.newString(""Object#Element"", (-3331), (-3331));
    Node node1 = node0.getChildAtIndex((-3331));
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test093168() throws Throwable {
    Node node0 = Node.newString(""Object#Element"", (-3331), (-3331));
    Node node1 = node0.getChildAtIndex((-3331));
    assertTrue(node0.isString());
}",""
"public Node getChildAtIndex(int i) {
    Node n = first;
    while (i > 0) {
        n = n.next;
        i--;
    }
    return n;
}","public void test093169() throws Throwable {
    Node node0 = Node.newString(""Object#Element"", (-3331), (-3331));
    Node node1 = node0.getChildAtIndex((-3331));
    assertNull(node1);
}",""
"public Node getChildAtIndex(int i) {
    Node n = first;
    while (i > 0) {
        n = n.next;
        i--;
    }
    return n;
}","public void test094170() throws Throwable {
    Node node0 = Node.newString(""ALWAYS_TRUE"");
    // Undeclared exception!
    try {
        node0.getChildAtIndex(310);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test095171() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    node0.addChildrenToFront(node0);
    int int0 = node0.getIndexOfChild(node0);
    assertTrue(node0.hasChildren());
}",""
"public int getIndexOfChild(Node child) {
    Node n = first;
    int i = 0;
    while (n != null) {
        if (child == n) {
            return i;
        }
        n = n.next;
        i++;
    }
    return -1;
}","public void test095172() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    node0.addChildrenToFront(node0);
    int int0 = node0.getIndexOfChild(node0);
    assertEquals(0, int0);
}",""
"public int getType() {
    return type;
}","public void test096173() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertEquals(924, node1.getType());
}",""
"public int getIndexOfChild(Node child) {
    Node n = first;
    int i = 0;
    while (n != null) {
        if (child == n) {
            return i;
        }
        n = n.next;
        i++;
    }
    return -1;
}","public void test096174() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertEquals((-1), int0);
}",""
"public boolean isParamList() {
    return this.getType() == Token.PARAM_LIST;
}","public void test096175() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertTrue(node0.isParamList());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test096176() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertEquals((-1), node0.getLineno());
}",""
"public Node cloneNode() {
    Node result;
    try {
        result = (Node) super.clone();
        // PropListItem lists are immutable and can be shared so there is no
        // need to clone them here.
        result.next = null;
        result.first = null;
        result.last = null;
        result.parent = null;
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException(e.getMessage());
    }
    return result;
}","public void test097177() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    assertNotNull(node1);
}","/**
 * @return A detached clone of the Node, specifically excluding its children.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test097178() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertEquals(2, node2.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test097179() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertEquals((-1), node2.getSourcePosition());
}",""
"public boolean isSetterDef() {
    return this.getType() == Token.SETTER_DEF;
}","public void test097180() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertTrue(node2.isSetterDef());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test097181() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertTrue(node2.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getType() {
    return type;
}","public void test097182() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    Node node3 = node1.getLastSibling();
    assertEquals(40, node3.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test097183() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    Node node3 = node1.getLastSibling();
    assertEquals((-1), node3.getSourcePosition());
}",""
"public Node getLastSibling() {
    Node n = this;
    while (n.next != null) {
        n = n.next;
    }
    return n;
}","public void test097184() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    Node node3 = node1.getLastSibling();
    assertNotSame(node3, node1);
}",""
"public void addChildToFront(Node child) {
    Preconditions.checkArgument(child.parent == null);
    Preconditions.checkArgument(child.next == null);
    child.parent = this;
    child.next = first;
    first = child;
    if (last == null) {
        last = child;
    }
}","public void test098185() throws Throwable {
    Node node0 = new Node((-1718), (-1718), (-1718));
    Node node1 = new Node((-1718), node0, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.addChildToFront(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public void addChildToFront(Node child) {
    Preconditions.checkArgument(child.parent == null);
    Preconditions.checkArgument(child.next == null);
    child.parent = this;
    child.next = first;
    first = child;
    if (last == null) {
        last = child;
    }
}","public void test099186() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    Node node1 = Node.newString(36, ""no next sibling."", 31, 36);
    Node node2 = new Node(18, node0, node0, node1, 49, 53);
    Node node3 = node2.removeChildren();
    // Undeclared exception!
    try {
        node3.addChildToFront(node3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public void addChildToBack(Node child) {
    Preconditions.checkArgument(child.parent == null);
    Preconditions.checkArgument(child.next == null);
    child.parent = this;
    child.next = null;
    if (last == null) {
        first = last = child;
        return;
    }
    last.next = child;
    last = child;
}","public void test100187() throws Throwable {
    Node node0 = new Node((-3791));
    Node node1 = new Node(57, node0);
    // Undeclared exception!
    try {
        node1.addChildToBack(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public void addChildrenToFront(Node children) {
    for (Node child = children; child != null; child = child.next) {
        Preconditions.checkArgument(child.parent == null);
        child.parent = this;
    }
    Node lastSib = children.getLastSibling();
    lastSib.next = first;
    first = children;
    if (last == null) {
        last = lastSib;
    }
}","public void test101188() throws Throwable {
    Node node0 = new Node(34);
    Node node1 = new Node(48, node0, node0, node0, 54, 4095);
    // Undeclared exception!
    try {
        node1.addChildrenToFront(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test102189() throws Throwable {
    Node node0 = new Node(2635, 3033, 3033);
    Node node1 = new Node(1303, node0, node0, node0, node0);
    node1.addChildrenToFront(node1);
    assertEquals(2, node1.getChildCount());
}",""
"public void addChildBefore(Node newChild, Node node) {
    Preconditions.checkArgument(node != null && node.parent == this, ""The existing child node of the parent should not be null."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    if (first == node) {
        newChild.parent = this;
        newChild.next = first;
        first = newChild;
        return;
    }
    Node prev = getChildBefore(node);
    addChildAfter(newChild, prev);
}","public void test103190() throws Throwable {
    Node node0 = Node.newString(""5."");
    // Undeclared exception!
    try {
        node0.addChildBefore((Node) null, (Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The existing child node of the parent should not be null.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add 'child' before 'node'.
 */"
"public void addChildBefore(Node newChild, Node node) {
    Preconditions.checkArgument(node != null && node.parent == this, ""The existing child node of the parent should not be null."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    if (first == node) {
        newChild.parent = this;
        newChild.next = first;
        first = newChild;
        return;
    }
    Node prev = getChildBefore(node);
    addChildAfter(newChild, prev);
}","public void test104191() throws Throwable {
    Node node0 = Node.newString(""5."");
    // Undeclared exception!
    try {
        node0.addChildBefore(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The existing child node of the parent should not be null.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add 'child' before 'node'.
 */"
"public void addChildBefore(Node newChild, Node node) {
    Preconditions.checkArgument(node != null && node.parent == this, ""The existing child node of the parent should not be null."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    if (first == node) {
        newChild.parent = this;
        newChild.next = first;
        first = newChild;
        return;
    }
    Node prev = getChildBefore(node);
    addChildAfter(newChild, prev);
}","public void test105192() throws Throwable {
    Node node0 = Node.newString(""FUNCKzON)^PR]]OTYP"");
    Node node1 = new Node(12, node0, node0, node0, 51, 2);
    // Undeclared exception!
    try {
        node1.addChildBefore(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node already has a parent.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add 'child' before 'node'.
 */"
"public void addChildBefore(Node newChild, Node node) {
    Preconditions.checkArgument(node != null && node.parent == this, ""The existing child node of the parent should not be null."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    if (first == node) {
        newChild.parent = this;
        newChild.next = first;
        first = newChild;
        return;
    }
    Node prev = getChildBefore(node);
    addChildAfter(newChild, prev);
}","public void test106193() throws Throwable {
    Node node0 = Node.newString(""FUNCKzON)^PR]]OTYP"");
    Node node1 = new Node(51, 2, 51);
    Node node2 = new Node(12, node0, node1, node0, 51, 2);
    // Undeclared exception!
    try {
        node2.addChildBefore(node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add 'child' before 'node'.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test107194() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    node1.addChildBefore(node1, node0);
    assertEquals(2, node1.getChildCount());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test108195() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = Node.newNumber(4217.053478921, 2, 29);
    Node node2 = new Node(4095, node0, node0, node1);
    assertEquals(2, node2.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test108196() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = Node.newNumber(4217.053478921, 2, 29);
    Node node2 = new Node(4095, node0, node0, node1);
    node2.addChildBefore(node2, node1);
    assertEquals(4095, node2.getType());
}",""
"public void addChildAfter(Node newChild, Node node) {
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    addChildrenAfter(newChild, node);
}","public void test109197() throws Throwable {
    Node node0 = new Node((-3752), (-3752), (-3752));
    Node node1 = new Node(103, 30, 42);
    Node node2 = new Node(392, node0, node1, node1, node1, 2545, 52);
    // Undeclared exception!
    try {
        node1.addChildAfter(node0, node2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add 'child' after 'node'.
 */"
"public void addChildrenAfter(Node children, Node node) {
    Preconditions.checkArgument(node == null || node.parent == this);
    for (Node child = children; child != null; child = child.next) {
        Preconditions.checkArgument(child.parent == null);
        child.parent = this;
    }
    Node lastSibling = children.getLastSibling();
    if (node != null) {
        Node oldNext = node.next;
        node.next = children;
        lastSibling.next = oldNext;
        if (node == last) {
            last = lastSibling;
        }
    } else {
        // Append to the beginning.
        if (first != null) {
            lastSibling.next = first;
        } else {
            last = lastSibling;
        }
        first = children;
    }
}","public void test110198() throws Throwable {
    Node node0 = Node.newNumber((double) (-1881));
    // Undeclared exception!
    try {
        node0.addChildrenAfter(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Add all children after 'node'.
 */"
"public void addChildrenToBack(Node children) {
    addChildrenAfter(children, getLastChild());
}","public void test111199() throws Throwable {
    Node node0 = new Node((-2411));
    Node node1 = new Node(39, node0, node0);
    // Undeclared exception!
    try {
        node1.addChildrenToBack(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test112200() throws Throwable {
    Node node0 = new Node(38);
    node0.addChildrenToBack(node0);
    Node node1 = Node.newString(""b^hA"");
    node0.addChildrenToBack(node1);
    assertTrue(node0.hasChildren());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test113201() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Key"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    node0.addChildrenAfter(node0, (Node) null);
    assertEquals(2, node0.getChildCount());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test114202() throws Throwable {
    Node node0 = new Node(25, 25, 97);
    Node node1 = Node.newString(4095, ""8[7b(OV4q;6!`9vOqV"");
    Node node2 = new Node(97, node0, node1, 3777, 110);
    node2.removeFirstChild();
    assertEquals(1, node2.getChildCount());
}",""
"public void replaceChild(Node child, Node newChild) {
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(child);
    newChild.next = child.next;
    newChild.parent = this;
    if (child == first) {
        first = newChild;
    } else {
        Node prev = getChildBefore(child);
        prev.next = newChild;
    }
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test115203() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = Node.newString(47, ""YimPZnfCVFn"");
    Node node2 = new Node(54, node0, node1, node1, 56, 42);
    // Undeclared exception!
    try {
        node2.replaceChild(node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Detaches child from Node and replaces it with newChild.
 */"
"public void replaceChild(Node child, Node newChild) {
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(child);
    newChild.next = child.next;
    newChild.parent = this;
    if (child == first) {
        first = newChild;
    } else {
        Node prev = getChildBefore(child);
        prev.next = newChild;
    }
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test116204() throws Throwable {
    Node node0 = new Node(65536);
    Node node1 = new Node(37, node0, node0);
    // Undeclared exception!
    try {
        node1.replaceChild(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node already has a parent.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Detaches child from Node and replaces it with newChild.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test117205() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = new Node(40, node0, node0);
    Node node2 = new Node((-3384), node1, 37, 4095);
    assertEquals(4095, node2.getCharno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test117206() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = new Node(40, node0, node0);
    Node node2 = new Node((-3384), node1, 37, 4095);
    node1.replaceChild(node0, node2);
    assertEquals((-1), node2.getSourcePosition());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test117207() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = new Node(40, node0, node0);
    Node node2 = new Node((-3384), node1, 37, 4095);
    node1.replaceChild(node0, node2);
    assertEquals((-1), node2.getLineno());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test118208() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node2 = new Node(40, node0, node1);
    Node node3 = new Node((-3384), node2, 37, 4095);
    node2.replaceChild(node0, node3);
    assertEquals((-1), node3.getCharno());
}",""
"public int getType() {
    return type;
}","public void test118209() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node2 = new Node(40, node0, node1);
    Node node3 = new Node((-3384), node2, 37, 4095);
    node2.replaceChild(node0, node3);
    assertEquals((-3384), node3.getType());
}",""
"public void replaceChildAfter(Node prevChild, Node newChild) {
    Preconditions.checkArgument(prevChild.parent == this, ""prev is not a child of this node."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(prevChild);
    Node child = prevChild.next;
    newChild.next = child.next;
    newChild.parent = this;
    prevChild.next = newChild;
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test119210() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    // Undeclared exception!
    try {
        node0.replaceChildAfter(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // prev is not a child of this node.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public void replaceChildAfter(Node prevChild, Node newChild) {
    Preconditions.checkArgument(prevChild.parent == this, ""prev is not a child of this node."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(prevChild);
    Node child = prevChild.next;
    newChild.next = child.next;
    newChild.parent = this;
    prevChild.next = newChild;
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test120211() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(48, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.replaceChildAfter(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node already has a parent.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public void replaceChildAfter(Node prevChild, Node newChild) {
    Preconditions.checkArgument(prevChild.parent == this, ""prev is not a child of this node."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(prevChild);
    Node child = prevChild.next;
    newChild.next = child.next;
    newChild.parent = this;
    prevChild.next = newChild;
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test121212() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(4);
    Node node2 = new Node(48, node1, node1, node0);
    // Undeclared exception!
    try {
        node2.replaceChildAfter(node0, node1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public void replaceChildAfter(Node prevChild, Node newChild) {
    Preconditions.checkArgument(prevChild.parent == this, ""prev is not a child of this node."");
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(prevChild);
    Node child = prevChild.next;
    newChild.next = child.next;
    newChild.parent = this;
    prevChild.next = newChild;
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test122213() throws Throwable {
    Node node0 = new Node((-856));
    Node node1 = new Node(12, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.replaceChildAfter(node0, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public Node clonePropsFrom(Node other) {
    Preconditions.checkState(this.propListHead == null, ""Node has existing properties."");
    this.propListHead = other.propListHead;
    return this;
}","public void test123214() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setOptionalArg(true);
    // Undeclared exception!
    try {
        node0.clonePropsFrom(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Node has existing properties.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Clone the properties from the provided node without copying
 * the property object.  The receiving node may not have any
 * existing properties.
 * @param other The node to clone properties from.
 * @return this node.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test124215() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = node0.clonePropsFrom(node0);
    assertEquals(630938, node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test124216() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = node0.clonePropsFrom(node0);
    assertEquals(154, node1.getType());
}",""
"public abstract BooleanLiteralSet getPossibleToBooleanOutcomes();","public void test125217() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    JSType jSType0 = modificationVisitor0.caseFunctionType(functionType0);
    assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
}","/**
 * Computes the set of possible outcomes of the {@code ToBoolean} predicate
 * for this type. The {@code ToBoolean} predicate is defined by the ECMA-262
 * standard, 3<sup>rd</sup> edition. Its behavior for simple types can be
 * summarized by the following table:
 * <table>
 * <tr><th>type</th><th>result</th></tr>
 * <tr><td>{@code undefined}</td><td>{false}</td></tr>
 * <tr><td>{@code null}</td><td>{false}</td></tr>
 * <tr><td>{@code boolean}</td><td>{true, false}</td></tr>
 * <tr><td>{@code number}</td><td>{true, false}</td></tr>
 * <tr><td>{@code string}</td><td>{true, false}</td></tr>
 * <tr><td>{@code Object}</td><td>{true}</td></tr>
 * </table>
 * @return the set of boolean literals for this type
 */"
"public int getExistingIntProp(int propType) {
    PropListItem item = lookupProperty(propType);
    if (item == null) {
        throw new IllegalStateException(""missing prop: "" + propType);
    }
    return item.getIntValue();
}","public void test126218() throws Throwable {
    Node node0 = Node.newNumber((double) 31);
    // Undeclared exception!
    try {
        node0.getExistingIntProp(4);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // missing prop: 4
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test127219() throws Throwable {
    Node node0 = new Node(39, 39, 39);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Number node not created with Node.newNumber
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public void setDouble(double value) throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test128220() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    try {
        node0.setDouble(118);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // VAR 118 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == Token.NUMBER</tt>
 * @param value value to set.
 */"
"public void setDouble(double value) throws UnsupportedOperationException {
    if (this.getType() == Token.NUMBER) {
        throw new IllegalStateException(""Number node not created with Node.newNumber"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test129221() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(39, node0, node0, node0, 39, 52);
    // Undeclared exception!
    try {
        node1.setDouble(29);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Number node not created with Node.newNumber
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when <tt>getType() == Token.NUMBER</tt>
 * @param value value to set.
 */"
"public String getString() throws UnsupportedOperationException {
    if (this.getType() == Token.STRING) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test130222() throws Throwable {
    Node node0 = new Node(40);
    // Undeclared exception!
    try {
        node0.getString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // String node not created with Node.newString
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called when node has String context.
 */"
"public void setString(String value) throws UnsupportedOperationException {
    if (this.getType() == Token.STRING || this.getType() == Token.NAME) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test131223() throws Throwable {
    Node node0 = new Node(40, 102, 119);
    // Undeclared exception!
    try {
        node0.setString(""com.google.common.collect.Platform"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // String node not created with Node.newString
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called for a Token.STRING or Token.NAME.
 * @param value the value to set.
 */"
"public void setString(String value) throws UnsupportedOperationException {
    if (this.getType() == Token.STRING || this.getType() == Token.NAME) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test132224() throws Throwable {
    Node node0 = new Node(51, 38, 51);
    try {
        node0.setString(""!"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // IN 38 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called for a Token.STRING or Token.NAME.
 * @param value the value to set.
 */"
"public void setString(String value) throws UnsupportedOperationException {
    if (this.getType() == Token.STRING || this.getType() == Token.NAME) {
        throw new IllegalStateException(""String node not created with Node.newString"");
    } else {
        throw new UnsupportedOperationException(this + "" is not a string node"");
    }
}","public void test133225() throws Throwable {
    Node node0 = new Node(51, 38, 51);
    Node node1 = new Node(38, node0, node0);
    // Undeclared exception!
    try {
        node1.setString(""!"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // String node not created with Node.newString
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Can only be called for a Token.STRING or Token.NAME.
 * @param value the value to set.
 */"
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test134226() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(""FUNCTION <invalid> 43\n    NUMBER 105.0 105\n"", string0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test134227() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(430185, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test134228() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(39, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test134229() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(176180, node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test134230() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(105, node1.getType());
}",""
"public int getType() {
    return type;
}","public void test135231() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    String string0 = node0.toString(false, false, false);
    assertEquals(39, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test135232() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    String string0 = node0.toString(false, false, false);
    assertEquals((-1), node0.getCharno());
}",""
"public String toString(boolean printSource, boolean printAnnotations, boolean printType) {
    StringBuilder sb = new StringBuilder();
    toString(sb, printSource, printAnnotations, printType);
    return sb.toString();
}","public void test135233() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    String string0 = node0.toString(false, false, false);
    assertEquals(""NUMBER 0.0"", string0);
}",""
"public String toStringTree() {
    return toStringTreeImpl();
}","public void test136234() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
    JSType[] jSTypeArray0 = new JSType[6];
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[5] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType$1"", e);
    }
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test137235() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Key"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test137236() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Key"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    node0.toStringTree();
    assertEquals(83, node0.getType());
}",""
"public String getSourceFileName() {
    StaticSourceFile file = getStaticSourceFile();
    return file == null ? null : file.getName();
}","public void test138237() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""prev is not a child of this node."", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    String string0 = node0.getSourceFileName();
    assertNotNull(string0);
}",""
"public boolean isVoid() {
    return this.getType() == Token.VOID;
}","public void test138238() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""prev is not a child of this node."", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    String string0 = node0.getSourceFileName();
    assertTrue(node0.isVoid());
}",""
"public boolean isVar() {
    return this.getType() == Token.VAR;
}","public void test139239() throws Throwable {
    Node node0 = new Node(118);
    node0.getSourceFileName();
    assertTrue(node0.isVar());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test139240() throws Throwable {
    Node node0 = new Node(118);
    node0.getSourceFileName();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test140241() throws Throwable {
    Node node0 = new Node(2747, 2747, 2747);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""<invalid>"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    node0.isFromExterns();
    assertEquals(2747, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test140242() throws Throwable {
    Node node0 = new Node(2747, 2747, 2747);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""<invalid>"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    node0.isFromExterns();
    assertEquals(11254459, node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test141243() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.isFromExterns();
    assertEquals(630938, node0.getSourcePosition());
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test141244() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.isFromExterns();
    assertTrue(node0.isStringKey());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test142245() throws Throwable {
    Node node0 = new Node((-3377), (-2084), (-3377));
    node0.setSourceFileForTesting(""`J"");
    int int0 = node0.getSourceOffset();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test142246() throws Throwable {
    Node node0 = new Node((-3377), (-2084), (-3377));
    node0.setSourceFileForTesting(""`J"");
    int int0 = node0.getSourceOffset();
    assertEquals((-3377), node0.getType());
}",""
"public int getSourceOffset() {
    StaticSourceFile file = getStaticSourceFile();
    if (file == null) {
        return -1;
    }
    int lineno = getLineno();
    if (lineno == -1) {
        return -1;
    }
    return file.getLineOffset(lineno) + getCharno();
}","public void test142247() throws Throwable {
    Node node0 = new Node((-3377), (-2084), (-3377));
    node0.setSourceFileForTesting(""`J"");
    int int0 = node0.getSourceOffset();
    assertEquals((-1), int0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test143248() throws Throwable {
    Node node0 = new Node(154, 1648, 1648);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Ju?o$?[fjA%S8'! O"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    int int0 = node0.getSourceOffset();
    assertEquals(1648, node0.getLineno());
}",""
"public int getSourceOffset() {
    StaticSourceFile file = getStaticSourceFile();
    if (file == null) {
        return -1;
    }
    int lineno = getLineno();
    if (lineno == -1) {
        return -1;
    }
    return file.getLineOffset(lineno) + getCharno();
}","public void test143249() throws Throwable {
    Node node0 = new Node(154, 1648, 1648);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Ju?o$?[fjA%S8'! O"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    int int0 = node0.getSourceOffset();
    assertEquals((-2147482000), int0);
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test143250() throws Throwable {
    Node node0 = new Node(154, 1648, 1648);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Ju?o$?[fjA%S8'! O"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    int int0 = node0.getSourceOffset();
    assertTrue(node0.isStringKey());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test144251() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    node0.setLineno(33);
    assertEquals(135201, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test144252() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    node0.setLineno(33);
    assertEquals(33, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test145253() throws Throwable {
    Node node0 = new Node(130);
    Node node1 = new Node(130, node0, node0, node0, node0, 43, 52);
    node1.setSourceEncodedPositionForTree(53);
    assertEquals(53, node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test145254() throws Throwable {
    Node node0 = new Node(130);
    Node node1 = new Node(130, node0, node0, node0, node0, 43, 52);
    node1.setSourceEncodedPositionForTree(53);
    assertEquals(130, node0.getType());
}",""
"public boolean isRegExp() {
    return this.getType() == Token.REGEXP;
}","public void test146255() throws Throwable {
    Node node0 = new Node(47, 47, 751619276);
    boolean boolean0 = node0.isRegExp();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test146256() throws Throwable {
    Node node0 = new Node(47, 47, 751619276);
    boolean boolean0 = node0.isRegExp();
    assertEquals(196607, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test147257() throws Throwable {
    Node node0 = new Node(1389);
    node0.children();
    assertEquals(1389, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test147258() throws Throwable {
    Node node0 = new Node(1389);
    node0.children();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public Node getAncestor(int level) {
    Preconditions.checkArgument(level >= 0);
    Node node = this;
    while (node != null && level-- > 0) {
        node = node.getParent();
    }
    return node;
}","public void test148259() throws Throwable {
    Node node0 = Node.newString(""79AK `an~"");
    // Undeclared exception!
    try {
        node0.getAncestor((-1671));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Gets the ancestor node relative to this.
 *
 * @param level 0 = this, 1 = the parent, etc.
 */"
"public Node getAncestor(int level) {
    Preconditions.checkArgument(level >= 0);
    Node node = this;
    while (node != null && level-- > 0) {
        node = node.getParent();
    }
    return node;
}","public void test149260() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    Node node1 = node0.getAncestor(0);
    assertNotNull(node1);
}","/**
 * Gets the ancestor node relative to this.
 *
 * @param level 0 = this, 1 = the parent, etc.
 */"
"public int getType() {
    return type;
}","public void test149261() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    Node node1 = node0.getAncestor(0);
    assertEquals(40, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test149262() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    Node node1 = node0.getAncestor(0);
    assertEquals((-1), node1.getSourcePosition());
}",""
"public Node getAncestor(int level) {
    Preconditions.checkArgument(level >= 0);
    Node node = this;
    while (node != null && level-- > 0) {
        node = node.getParent();
    }
    return node;
}","public void test150263() throws Throwable {
    Node node0 = new Node(102);
    Node node1 = node0.getAncestor(102);
    assertNull(node1);
}","/**
 * Gets the ancestor node relative to this.
 *
 * @param level 0 = this, 1 = the parent, etc.
 */"
"public boolean isInc() {
    return this.getType() == Token.INC;
}","public void test150264() throws Throwable {
    Node node0 = new Node(102);
    Node node1 = node0.getAncestor(102);
    assertTrue(node0.isInc());
}",""
"public boolean isWhile() {
    return this.getType() == Token.WHILE;
}","public void test151265() throws Throwable {
    Node node0 = new Node(113);
    Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    node_AncestorIterable0.forEach(consumer0);
    assertTrue(node0.isWhile());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test151266() throws Throwable {
    Node node0 = new Node(113);
    Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    node_AncestorIterable0.forEach(consumer0);
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test151267() throws Throwable {
    Node node0 = new Node(113);
    Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    node_AncestorIterable0.forEach(consumer0);
    assertEquals(113, node0.getType());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test152268() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = node0.hasOneChild();
    assertFalse(boolean0);
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test152269() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = node0.hasOneChild();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test152270() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = node0.hasOneChild();
    assertEquals(47, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test153271() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertEquals(217141, node1.getSourcePosition());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test153272() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertTrue(boolean0);
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public boolean isGetProp() {
    return this.getType() == Token.GETPROP;
}","public void test153273() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertTrue(node0.isGetProp());
}",""
"public int getType() {
    return type;
}","public void test153274() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertEquals(16, node1.getType());
}",""
"public int getType() {
    return type;
}","public void test154275() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(38, node1.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test154276() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(9877867, node2.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test154277() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(1023, node2.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test154278() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(2, node2.getChildCount());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test154279() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals((-1), node1.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test155280() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.hasMoreThanOneChild();
    assertEquals(487809, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test155281() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.hasMoreThanOneChild();
    assertEquals(40, node0.getType());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test156282() throws Throwable {
    JSType[] jSTypeArray0 = new JSType[2];
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertTrue(boolean0);
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test156283() throws Throwable {
    JSType[] jSTypeArray0 = new JSType[2];
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isParamList() {
    return this.getType() == Token.PARAM_LIST;
}","public void test156284() throws Throwable {
    JSType[] jSTypeArray0 = new JSType[2];
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertTrue(node0.isParamList());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test157285() throws Throwable {
    Node node0 = new Node(76);
    node0.addChildrenToBack(node0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertTrue(node0.hasChildren());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test157286() throws Throwable {
    Node node0 = new Node(76);
    node0.addChildrenToBack(node0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertFalse(boolean0);
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"// Intended for testing and verification only.
public boolean hasChild(Node child) {
    for (Node n = first; n != null; n = n.getNext()) {
        if (child == n) {
            return true;
        }
    }
    return false;
}","public void test158287() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertFalse(boolean0);
}",""
"public boolean isParamList() {
    return this.getType() == Token.PARAM_LIST;
}","public void test158288() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertTrue(node0.isParamList());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test158289() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertEquals(1, node0.getChildCount());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test158290() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertEquals((-1), node0.getLineno());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test159291() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    node0.addChildToFront(node0);
    boolean boolean0 = node0.hasChild(node0);
    assertTrue(node0.hasChildren());
}",""
"// Intended for testing and verification only.
public boolean hasChild(Node child) {
    for (Node n = first; n != null; n = n.getNext()) {
        if (child == n) {
            return true;
        }
    }
    return false;
}","public void test159292() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    node0.addChildToFront(node0);
    boolean boolean0 = node0.hasChild(node0);
    assertTrue(boolean0);
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test160293() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertEquals(0, node0.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test160294() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isBlock() {
    return this.getType() == Token.BLOCK;
}","public void test160295() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertTrue(node0.isBlock());
}",""
"public String checkTreeEquals(Node node2) {
    NodeMismatch diff = checkTreeEqualsImpl(node2);
    if (diff != null) {
        return ""Node tree inequality:"" + ""\nTree1:\n"" + toStringTree() + ""\n\nTree2:\n"" + node2.toStringTree() + ""\n\nSubtree1: "" + diff.nodeA.toStringTree() + ""\n\nSubtree2: "" + diff.nodeB.toStringTree();
    }
    return null;
}","public void test160296() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertNull(string0);
}","/**
 * Checks if the subtree under this node is the same as another subtree.
 * Returns null if it's equal, or a message describing the differences.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test161297() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(1, node1.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test161298() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(49152, node1.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test161299() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(266305, node0.getSourcePosition());
}",""
"public boolean isInstanceOf() {
    return this.getType() == Token.INSTANCEOF;
}","public void test161300() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertTrue(node1.isInstanceOf());
}",""
"NodeMismatch checkTreeEqualsImpl(Node node2) {
    if (!isEquivalentTo(node2, false, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        if (node2 == null) {
            throw new IllegalStateException();
        }
        res = n.checkTreeEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test161301() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getType() {
    return type;
}","public void test161302() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(65, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test162303() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals((-894), node2.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test162304() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals(229433, node2.getSourcePosition());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test162305() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertFalse(node1.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test162306() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertTrue(node0.isNumber());
}",""
"public int getType() {
    return type;
}","public void test162307() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals((-894), node1.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test162308() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals(1, node2.getChildCount());
}",""
"NodeMismatch checkTreeTypeAwareEqualsImpl(Node node2) {
    // Do a non-recursive equivalents check.
    if (!isEquivalentTo(node2, true, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        res = n.checkTreeTypeAwareEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test163309() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getType() {
    return type;
}","public void test163310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertEquals(83, node1.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test163311() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertEquals(3, node1.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test163312() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertEquals(83, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test164313() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(29, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test164314() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(29, node1.getType());
}",""
"NodeMismatch checkTreeEqualsImpl(Node node2) {
    if (!isEquivalentTo(node2, false, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        if (node2 == null) {
            throw new IllegalStateException();
        }
        res = n.checkTreeEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test164315() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test164316() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(176181, node1.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test165317() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertEquals(417894, node0.getSourcePosition());
}",""
"NodeMismatch checkTreeEqualsImpl(Node node2) {
    if (!isEquivalentTo(node2, false, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        if (node2 == null) {
            throw new IllegalStateException();
        }
        res = n.checkTreeEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test165318() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test165319() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertEquals(0, node0.getChildCount());
}",""
"public boolean isInc() {
    return this.getType() == Token.INC;
}","public void test165320() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertTrue(node0.isInc());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test166321() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(421991, node0.getSourcePosition());
}",""
"NodeMismatch checkTreeTypeAwareEqualsImpl(Node node2) {
    // Do a non-recursive equivalents check.
    if (!isEquivalentTo(node2, true, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        res = n.checkTreeTypeAwareEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test166322() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getType() {
    return type;
}","public void test166323() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(103, node0.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test166324() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(0, node0.getChildCount());
}",""
"NodeMismatch checkTreeTypeAwareEqualsImpl(Node node2) {
    // Do a non-recursive equivalents check.
    if (!isEquivalentTo(node2, true, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        res = n.checkTreeTypeAwareEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test167325() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test167326() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(0, node0.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test167327() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(37, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test167328() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test168329() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(95, node1.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test168330() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(1, node1.getChildCount());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test168331() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(0, node0.getChildCount());
}",""
"public boolean isEquivalentToShallow(Node node) {
    return isEquivalentTo(node, false, true, true);
}","public void test168332() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertTrue(boolean0);
}","/**
 * Checks equivalence without going into inner functions
 */"
"public boolean isFunction() {
    return this.getType() == Token.FUNCTION;
}","public void test168333() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertTrue(node0.isFunction());
}",""
"public boolean isEquivalentToShallow(Node node) {
    return isEquivalentTo(node, false, true, true);
}","public void test169334() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertTrue(boolean0);
}","/**
 * Checks equivalence without going into inner functions
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test169335() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(1, node1.getChildCount());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test169336() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(155698, node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test169337() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(15, node1.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test169338() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test169339() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(39, node0.getType());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test170340() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Element"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.isEquivalentToTyped(node1);
    assertEquals(1, node1.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test170341() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Element"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.isEquivalentToTyped(node1);
    assertEquals(83, node1.getType());
}",""
"public boolean isEquivalentToTyped(Node node) {
    return isEquivalentTo(node, true, true, false);
}","public void test170342() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Element"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.isEquivalentToTyped(node1);
    assertFalse(boolean0);
}","/**
 * Returns true if this node is equivalent semantically to another and
 * the types are equivalent.
 */"
"public String getQualifiedName() {
    if (type == Token.NAME) {
        String name = getString();
        return name.isEmpty() ? null : name;
    } else if (type == Token.GETPROP) {
        String left = getFirstChild().getQualifiedName();
        if (left == null) {
            return null;
        }
        return left + ""."" + getLastChild().getString();
    } else if (type == Token.THIS) {
        return ""this"";
    } else {
        return null;
    }
}","public void test171343() throws Throwable {
    Node node0 = new Node(38, 38, 38);
    // Undeclared exception!
    try {
        node0.getQualifiedName();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME 38 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * This function takes a set of GETPROP nodes and produces a string that is
 * each property separated by dots. If the node ultimately under the left
 * sub-tree is not a simple name, this is not a valid qualified name.
 *
 * @return a null if this is not a qualified name, or a dot-separated string
 *         of the name and properties.
 */"
"public int getType() {
    return type;
}","public void test172344() throws Throwable {
    Node node0 = Node.newString(""n"");
    node0.setType(38);
    node0.getQualifiedName();
    assertEquals(38, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test173345() throws Throwable {
    Node node0 = Node.newString("""");
    node0.setType(38);
    node0.getQualifiedName();
    assertEquals(38, node0.getType());
}",""
"public String getQualifiedName() {
    if (type == Token.NAME) {
        String name = getString();
        return name.isEmpty() ? null : name;
    } else if (type == Token.GETPROP) {
        String left = getFirstChild().getQualifiedName();
        if (left == null) {
            return null;
        }
        return left + ""."" + getLastChild().getString();
    } else if (type == Token.THIS) {
        return ""this"";
    } else {
        return null;
    }
}","public void test174346() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    Node node1 = new Node(42, node0, node0);
    node0.addChildrenToBack(node1);
    // Undeclared exception!
    try {
        node0.getQualifiedName();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // THIS is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * This function takes a set of GETPROP nodes and produces a string that is
 * each property separated by dots. If the node ultimately under the left
 * sub-tree is not a simple name, this is not a valid qualified name.
 *
 * @return a null if this is not a qualified name, or a dot-separated string
 *         of the name and properties.
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test175347() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getType() {
    return type;
}","public void test175348() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    assertEquals(16, node1.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test175349() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    node0.getQualifiedName();
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test175350() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    node0.getQualifiedName();
    assertEquals(33, node0.getType());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return getString().isEmpty() ? false : true;
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test176351() throws Throwable {
    Node node0 = new Node(33, 18, 18);
    // Undeclared exception!
    try {
        node0.isQualifiedName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test177352() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isQualifiedName();
    assertEquals(122910, node0.getSourcePosition());
}",""
"public boolean isNew() {
    return this.getType() == Token.NEW;
}","public void test177353() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isQualifiedName();
    assertTrue(node0.isNew());
}",""
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test178354() throws Throwable {
    Node node0 = Node.newString("""");
    assertFalse(node0.isName());
}",""
"public int getType() {
    return type;
}","public void test178355() throws Throwable {
    Node node0 = Node.newString("""");
    node0.setType(38);
    node0.isQualifiedName();
    assertEquals(38, node0.getType());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return getString().isEmpty() ? false : true;
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test179356() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isQualifiedName();
    assertTrue(boolean0);
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test179357() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isQualifiedName();
    assertEquals(172074, node0.getSourcePosition());
}",""
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test180358() throws Throwable {
    Node node0 = Node.newString(""FUNCTONPROTTYPE"");
    assertFalse(node0.isName());
}",""
"public int getType() {
    return type;
}","public void test180359() throws Throwable {
    Node node0 = Node.newString(""FUNCTONPROTTYPE"");
    node0.setType(38);
    boolean boolean0 = node0.isQualifiedName();
    assertEquals(38, node0.getType());
}",""
"public boolean isQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return getString().isEmpty() ? false : true;
        case Token.THIS:
            return true;
        case Token.GETPROP:
            return getFirstChild().isQualifiedName();
        default:
            return false;
    }
}","public void test180360() throws Throwable {
    Node node0 = Node.newString(""FUNCTONPROTTYPE"");
    node0.setType(38);
    boolean boolean0 = node0.isQualifiedName();
    assertTrue(boolean0);
}","/**
 * Returns whether a node corresponds to a simple or a qualified name, such as
 * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
 */"
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return getString().isEmpty() ? false : true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test181361() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    // Undeclared exception!
    try {
        node0.isUnscopedQualifiedName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test182362() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isUnscopedQualifiedName();
    assertEquals(122910, node0.getSourcePosition());
}",""
"public boolean isNew() {
    return this.getType() == Token.NEW;
}","public void test182363() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isUnscopedQualifiedName();
    assertTrue(node0.isNew());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return getString().isEmpty() ? false : true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test183364() throws Throwable {
    Node node0 = new Node(38);
    // Undeclared exception!
    try {
        node0.isUnscopedQualifiedName();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test184365() throws Throwable {
    Node node0 = Node.newString(""4"");
    assertFalse(node0.isName());
}",""
"public int getType() {
    return type;
}","public void test184366() throws Throwable {
    Node node0 = Node.newString(""4"");
    node0.setType(38);
    boolean boolean0 = node0.isUnscopedQualifiedName();
    assertEquals(38, node0.getType());
}",""
"public boolean isUnscopedQualifiedName() {
    switch(getType()) {
        case Token.NAME:
            return getString().isEmpty() ? false : true;
        case Token.GETPROP:
            return getFirstChild().isUnscopedQualifiedName();
        default:
            return false;
    }
}","public void test184367() throws Throwable {
    Node node0 = Node.newString(""4"");
    node0.setType(38);
    boolean boolean0 = node0.isUnscopedQualifiedName();
    assertTrue(boolean0);
}","/**
 * Returns whether a node corresponds to a simple or a qualified name without
 * a ""this"" reference, such as <code>a.b.c</code>, but not <code>this.a</code>
 * .
 */"
"public int getType() {
    return type;
}","public void test185369() throws Throwable {
    Node node0 = Node.newString("""");
    node0.setType(38);
    node0.isUnscopedQualifiedName();
    assertEquals(38, node0.getType());
}",""
"// ==========================================================================
// Mutators
/**
 * Removes this node from its parent. Equivalent to:
 * node.getParent().removeChild();
 */
public Node detachFromParent() {
    Preconditions.checkState(parent != null);
    parent.removeChild(this);
    return this;
}","public void test186370() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    // Undeclared exception!
    try {
        node0.detachFromParent();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public int getType() {
    return type;
}","public void test187371() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    assertEquals(16, node1.getType());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test187372() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    assertTrue(node1.hasChildren());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test187373() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    assertEquals((-1), node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test187374() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    Node node2 = node0.detachFromParent();
    assertEquals(33, node2.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test187375() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    Node node2 = node0.detachFromParent();
    assertEquals((-1), node2.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test188376() throws Throwable {
    Node node0 = new Node(0, 0, 0);
    node0.removeFirstChild();
    assertEquals(0, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test188377() throws Throwable {
    Node node0 = new Node(0, 0, 0);
    node0.removeFirstChild();
    assertEquals(0, node0.getType());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test189378() throws Throwable {
    Node node0 = new Node(2792, 2792, 2792);
    Node node1 = new Node(56, node0, node0, 15, 4);
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test189379() throws Throwable {
    Node node0 = new Node(2792, 2792, 2792);
    Node node1 = new Node(56, node0, node0, 15, 4);
    node1.detachChildren();
    assertEquals(61444, node1.getSourcePosition());
}",""
"public Node removeChildAfter(Node prev) {
    Preconditions.checkArgument(prev.parent == this, ""prev is not a child of this node."");
    Preconditions.checkArgument(prev.next != null, ""no next sibling."");
    Node child = prev.next;
    prev.next = child.next;
    if (child == last) {
        last = prev;
    }
    child.next = null;
    child.parent = null;
    return child;
}","public void test190380() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    // Undeclared exception!
    try {
        node0.removeChildAfter(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // prev is not a child of this node.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public Node removeChildAfter(Node prev) {
    Preconditions.checkArgument(prev.parent == this, ""prev is not a child of this node."");
    Preconditions.checkArgument(prev.next != null, ""no next sibling."");
    Node child = prev.next;
    prev.next = child.next;
    if (child == last) {
        last = prev;
    }
    child.next = null;
    child.parent = null;
    return child;
}","public void test191381() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = new Node(56, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.removeChildAfter(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no next sibling.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test192382() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    assertFalse(node2.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test192383() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    node2.removeChildAfter(node0);
    assertFalse(node2.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test193384() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    assertEquals(1, node2.getChildCount());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test193385() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    node2.removeChildren();
    node2.removeChildAfter(node0);
    assertEquals(0, node1.getCharno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test194386() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals(233503, node3.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test194387() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals((-1695), node3.getType());
}",""
"public boolean hasChildren() {
    return first != null;
}","public void test194388() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertTrue(node2.hasChildren());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test194389() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertTrue(node1.isString());
}",""
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test194390() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals(2, node3.getChildCount());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test194391() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals((-1), node1.getLineno());
}",""
"public void replaceChild(Node child, Node newChild) {
    Preconditions.checkArgument(newChild.next == null, ""The new child node has siblings."");
    Preconditions.checkArgument(newChild.parent == null, ""The new child node already has a parent."");
    // Copy over important information.
    newChild.copyInformationFrom(child);
    newChild.next = child.next;
    newChild.parent = this;
    if (child == first) {
        first = newChild;
    } else {
        Node prev = getChildBefore(child);
        prev.next = newChild;
    }
    if (child == last) {
        last = newChild;
    }
    child.next = null;
    child.parent = null;
}","public void test195392() throws Throwable {
    Node node0 = new Node(2747, 2747, 2747);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""<invalid>"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    // Undeclared exception!
    try {
        node0.replaceChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}","/**
 * Detaches child from Node and replaces it with newChild.
 */"
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test196393() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    assertFalse(node1.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getType() {
    return type;
}","public void test196394() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    Node node2 = node1.copyInformationFromForTree(node0);
    assertEquals(4095, node2.getType());
}",""
"public int getType() {
    return type;
}","public void test196395() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    Node node2 = node1.copyInformationFromForTree(node0);
    assertEquals(39, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test196396() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    Node node2 = node1.copyInformationFromForTree(node0);
    assertEquals((-1), node2.getCharno());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test197397() throws Throwable {
    Node node0 = new Node((-894));
    Node node1 = new Node(53, node0, node0, node0, 12, 31);
    node1.useSourceInfoFromForTree(node0);
    assertEquals((-1), node1.getLineno());
}",""
"public int getType() {
    return type;
}","public void test198398() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertEquals(95, node2.getType());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test198399() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertTrue(node2.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getType() {
    return type;
}","public void test198400() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertEquals(105, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test198401() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertEquals((-1), node2.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test199402() throws Throwable {
    Node node0 = new Node(619, 619, 619);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    node0.addSuppression(""setIsNoSideEffectsCall only supports CALL and NEW nodes, got "");
    assertEquals(619, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test199403() throws Throwable {
    Node node0 = new Node(619, 619, 619);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    node0.addSuppression(""setIsNoSideEffectsCall only supports CALL and NEW nodes, got "");
    assertEquals(2536043, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test200404() throws Throwable {
    Node node0 = new Node(61);
    node0.addSuppression((String) null);
    assertEquals(61, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test201405() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    assertEquals(30, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test201406() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.setSideEffectFlags(119);
    boolean boolean0 = node0.mayMutateArguments();
    assertEquals(122910, node0.getSourcePosition());
}",""
"public boolean mayMutateArguments() {
    return !areBitFlagsSet(getSideEffectFlags(), FLAG_ARGUMENTS_UNMODIFIED);
}","public void test201407() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.setSideEffectFlags(119);
    boolean boolean0 = node0.mayMutateArguments();
    assertFalse(boolean0);
}","/**
 * Returns true if this is a new/call that may mutate its arguments.
 */"
"public void setSideEffectFlags(int flags) {
    Preconditions.checkArgument(getType() == Token.CALL || getType() == Token.NEW, ""setIsNoSideEffectsCall only supports CALL and NEW nodes, got "" + Token.name(getType()));
    putIntProp(SIDE_EFFECT_FLAGS, flags);
}","public void test202408() throws Throwable {
    Node node0 = Node.newNumber(1.0);
    // Undeclared exception!
    try {
        node0.setSideEffectFlags(49);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}","/**
 * Marks this function or constructor call's side effect flags.
 * This property is only meaningful for {@link Token#CALL} and
 * {@link Token#NEW} nodes.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test205412() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.mayMutateArguments();
    assertEquals(512125, node0.getSourcePosition());
}",""
"public boolean mayMutateArguments() {
    return !areBitFlagsSet(getSideEffectFlags(), FLAG_ARGUMENTS_UNMODIFIED);
}","public void test205413() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.mayMutateArguments();
    assertTrue(boolean0);
}","/**
 * Returns true if this is a new/call that may mutate its arguments.
 */"
"public int getType() {
    return type;
}","public void test205414() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.mayMutateArguments();
    assertEquals(125, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test206415() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
    Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
    node0.setSideEffectFlags(node_SideEffectFlags1);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(151589, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test206416() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
    Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
    node0.setSideEffectFlags(node_SideEffectFlags1);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(37, node0.getType());
}",""
"public boolean mayMutateGlobalStateOrThrow() {
    return !areBitFlagsSet(getSideEffectFlags(), FLAG_GLOBAL_STATE_UNMODIFIED | FLAG_NO_THROWS);
}","public void test206417() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
    Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
    node0.setSideEffectFlags(node_SideEffectFlags1);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertFalse(boolean0);
}","/**
 * Returns true if this is a new/call that may mutate global state or throw.
 */"
"public boolean mayMutateGlobalStateOrThrow() {
    return !areBitFlagsSet(getSideEffectFlags(), FLAG_GLOBAL_STATE_UNMODIFIED | FLAG_NO_THROWS);
}","public void test207418() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertTrue(boolean0);
}","/**
 * Returns true if this is a new/call that may mutate global state or throw.
 */"
"public int getType() {
    return type;
}","public void test207419() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(64, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test207420() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(262208, node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test208421() throws Throwable {
    Node node0 = Node.newNumber((double) 118, 118, 118);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node0);
    assertEquals(483446, node0.getSourcePosition());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test208423() throws Throwable {
    Node node0 = Node.newNumber((double) 118, 118, 118);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node0);
    assertTrue(node0.isNumber());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test209424() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(188445, node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test209425() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(16, node1.getType());
}",""
"public int getType() {
    return type;
}","public void test209427() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(118, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test209428() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(483446, node0.getSourcePosition());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test210429() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test210430() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isVar() {
    return this.getType() == Token.VAR;
}","public void test210431() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertTrue(node0.isVar());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test210433() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node1.getLineno());
}",""
"public int getType() {
    return type;
}","public void test210434() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals(15, node1.getType());
}",""
"NodeMismatch checkTreeEqualsImpl(Node node2) {
    if (!isEquivalentTo(node2, false, false, false)) {
        return new NodeMismatch(this, node2);
    }
    NodeMismatch res = null;
    Node n, n2;
    for (n = first, n2 = node2.first; res == null && n != null; n = n.next, n2 = n2.next) {
        if (node2 == null) {
            throw new IllegalStateException();
        }
        res = n.checkTreeEqualsImpl(n2);
        if (res != null) {
            return res;
        }
    }
    return res;
}","public void test211435() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}","/**
 * Compare this node to node2 recursively and return the first pair of nodes
 * that differs doing a preorder depth-first traversal. Package private for
 * testing. Returns null if the nodes are equivalent.
 */"
"public int getType() {
    return type;
}","public void test211437() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals(15, node1.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test211438() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node0.getLineno());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test211439() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test211440() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test211441() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals(98, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test212442() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = node0.isAdd();
    assertEquals(66, node0.getType());
}",""
"public boolean isAdd() {
    return this.getType() == Token.ADD;
}","public void test212443() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = node0.isAdd();
    assertFalse(boolean0);
}","/**
 * AST type check methods **
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test212444() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = node0.isAdd();
    assertEquals(270402, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test213445() throws Throwable {
    Node node0 = Node.newString(""Number node not created with Node.newNumber"");
    node0.setType(21);
    boolean boolean0 = node0.isAdd();
    assertEquals(21, node0.getType());
}",""
"public boolean isAdd() {
    return this.getType() == Token.ADD;
}","public void test213446() throws Throwable {
    Node node0 = Node.newString(""Number node not created with Node.newNumber"");
    node0.setType(21);
    boolean boolean0 = node0.isAdd();
    assertTrue(boolean0);
}","/**
 * AST type check methods **
 */"
"public int getType() {
    return type;
}","public void test214447() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isAnd();
    assertEquals((-3765), node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test214448() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isAnd();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isAnd() {
    return this.getType() == Token.AND;
}","public void test214449() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isAnd();
    assertFalse(boolean0);
}",""
"public boolean isAnd() {
    return this.getType() == Token.AND;
}","public void test215450() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = node0.isAnd();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test215451() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = node0.isAnd();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test216452() throws Throwable {
    Node node0 = new Node(174, 174, 174);
    boolean boolean0 = node0.isArrayLit();
    assertEquals(712878, node0.getSourcePosition());
}",""
"public boolean isArrayLit() {
    return this.getType() == Token.ARRAYLIT;
}","public void test216453() throws Throwable {
    Node node0 = new Node(174, 174, 174);
    boolean boolean0 = node0.isArrayLit();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test216454() throws Throwable {
    Node node0 = new Node(174, 174, 174);
    boolean boolean0 = node0.isArrayLit();
    assertEquals(174, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test217455() throws Throwable {
    Node node0 = new Node(63, 30, 42);
    boolean boolean0 = node0.isArrayLit();
    assertEquals(122922, node0.getSourcePosition());
}",""
"public boolean isArrayLit() {
    return this.getType() == Token.ARRAYLIT;
}","public void test217456() throws Throwable {
    Node node0 = new Node(63, 30, 42);
    boolean boolean0 = node0.isArrayLit();
    assertTrue(boolean0);
}",""
"public boolean isAssign() {
    return this.getType() == Token.ASSIGN;
}","public void test218457() throws Throwable {
    Node node0 = Node.newNumber((-406.6402727316181));
    boolean boolean0 = node0.isAssign();
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test218458() throws Throwable {
    Node node0 = Node.newNumber((-406.6402727316181));
    boolean boolean0 = node0.isAssign();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test218459() throws Throwable {
    Node node0 = Node.newNumber((-406.6402727316181));
    boolean boolean0 = node0.isAssign();
    assertEquals(39, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test219460() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    node0.setType(86);
    boolean boolean0 = node0.isAssign();
    assertEquals(86, node0.getType());
}",""
"public boolean isAssign() {
    return this.getType() == Token.ASSIGN;
}","public void test219461() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    node0.setType(86);
    boolean boolean0 = node0.isAssign();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test220462() throws Throwable {
    Node node0 = Node.newString(""NK"");
    boolean boolean0 = node0.isAssignAdd();
    assertEquals(40, node0.getType());
}",""
"public boolean isAssignAdd() {
    return this.getType() == Token.ASSIGN_ADD;
}","public void test220463() throws Throwable {
    Node node0 = Node.newString(""NK"");
    boolean boolean0 = node0.isAssignAdd();
    assertFalse(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test220464() throws Throwable {
    Node node0 = Node.newString(""NK"");
    boolean boolean0 = node0.isAssignAdd();
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test221465() throws Throwable {
    Node node0 = Node.newNumber((-1.0), 43, 43);
    node0.setType(93);
    boolean boolean0 = node0.isAssignAdd();
    assertEquals(93, node0.getType());
}",""
"public boolean isAssignAdd() {
    return this.getType() == Token.ASSIGN_ADD;
}","public void test221466() throws Throwable {
    Node node0 = Node.newNumber((-1.0), 43, 43);
    node0.setType(93);
    boolean boolean0 = node0.isAssignAdd();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test222467() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    node0.isBlock();
    assertEquals(118813, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test222468() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    node0.isBlock();
    assertEquals(29, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test223469() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isBlock();
    assertEquals(512125, node0.getSourcePosition());
}",""
"public boolean isBlock() {
    return this.getType() == Token.BLOCK;
}","public void test223470() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isBlock();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test224471() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isBreak();
    assertEquals(139298, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test224472() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isBreak();
    assertEquals(34, node0.getType());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test225473() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test225474() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertEquals((-1), node1.getLineno());
}",""
"public boolean isBreak() {
    return this.getType() == Token.BREAK;
}","public void test225475() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertTrue(boolean0);
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test225476() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertTrue(node0.isString());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test225477() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isCall() {
    return this.getType() == Token.CALL;
}","public void test226478() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isCall();
    assertFalse(boolean0);
}",""
"public boolean isIn() {
    return this.getType() == Token.IN;
}","public void test226479() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isCall();
    assertTrue(node0.isIn());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test226480() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isCall();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isCall() {
    return this.getType() == Token.CALL;
}","public void test227481() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = node0.isCall();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test227482() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = node0.isCall();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test228483() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isCase();
    assertEquals((-3765), node0.getType());
}",""
"public boolean isCase() {
    return this.getType() == Token.CASE;
}","public void test228484() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isCase();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test228485() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isCase();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isCase() {
    return this.getType() == Token.CASE;
}","public void test229486() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertTrue(boolean0);
}",""
"public boolean isParamList() {
    return this.getType() == Token.PARAM_LIST;
}","public void test229487() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertTrue(node0.isParamList());
}",""
"public boolean hasMoreThanOneChild() {
    return first != null && first != last;
}","public void test229488() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertFalse(node1.hasMoreThanOneChild());
}","/**
 * Check for more than one child more efficiently than by iterating over all
 * the children as is done with Node.getChildCount().
 *
 * @return Whether the node more than one child.
 */"
"public int getChildCount() {
    int c = 0;
    for (Node n = first; n != null; n = n.next) {
        c++;
    }
    return c;
}","public void test229489() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertEquals(7, node0.getChildCount());
}",""
"public int getType() {
    return type;
}","public void test230490() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    node0.isCast();
    assertEquals(117, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test230491() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    node0.isCast();
    assertEquals(3650427, node0.getSourcePosition());
}",""
"public boolean isCast() {
    return this.getType() == Token.CAST;
}","public void test231492() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isCast();
    assertTrue(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test231493() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isCast();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isLabel() {
    return this.getType() == Token.LABEL;
}","public void test232494() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isCatch();
    assertTrue(node0.isLabel());
}",""
"public boolean isCatch() {
    return this.getType() == Token.CATCH;
}","public void test232495() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isCatch();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test232496() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isCatch();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test233497() throws Throwable {
    Node node0 = new Node(120, 120, 120);
    boolean boolean0 = node0.isCatch();
    assertEquals(491640, node0.getSourcePosition());
}",""
"public boolean isCatch() {
    return this.getType() == Token.CATCH;
}","public void test233498() throws Throwable {
    Node node0 = new Node(120, 120, 120);
    boolean boolean0 = node0.isCatch();
    assertTrue(boolean0);
}",""
"public boolean isComma() {
    return this.getType() == Token.COMMA;
}","public void test234499() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isComma();
    assertFalse(boolean0);
}",""
"public boolean isNew() {
    return this.getType() == Token.NEW;
}","public void test234500() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isComma();
    assertTrue(node0.isNew());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test234501() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isComma();
    assertEquals(122910, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test235502() throws Throwable {
    Node node0 = Node.newString(118, ""\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA"");
    node0.setType(85);
    boolean boolean0 = node0.isComma();
    assertEquals(85, node0.getType());
}",""
"public boolean isComma() {
    return this.getType() == Token.COMMA;
}","public void test235503() throws Throwable {
    Node node0 = Node.newString(118, ""\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA"");
    node0.setType(85);
    boolean boolean0 = node0.isComma();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test236504() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isContinue();
    assertEquals(122910, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test236505() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isContinue();
    assertEquals(30, node0.getType());
}",""
"public boolean isContinue() {
    return this.getType() == Token.CONTINUE;
}","public void test236506() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isContinue();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test237507() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    boolean boolean0 = node0.isContinue();
    assertEquals(3650427, node0.getSourcePosition());
}",""
"public boolean isContinue() {
    return this.getType() == Token.CONTINUE;
}","public void test237508() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    boolean boolean0 = node0.isContinue();
    assertTrue(boolean0);
}",""
"public boolean isDebugger() {
    return this.getType() == Token.DEBUGGER;
}","public void test238509() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    boolean boolean0 = node0.isDebugger();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test238510() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    boolean boolean0 = node0.isDebugger();
    assertEquals(125, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test238511() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    boolean boolean0 = node0.isDebugger();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isDebugger() {
    return this.getType() == Token.DEBUGGER;
}","public void test239512() throws Throwable {
    Node node0 = new Node(152);
    boolean boolean0 = node0.isDebugger();
    assertTrue(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test239513() throws Throwable {
    Node node0 = new Node(152);
    boolean boolean0 = node0.isDebugger();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isDec() {
    return this.getType() == Token.DEC;
}","public void test240514() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDec();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test240515() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDec();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test240516() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDec();
    assertEquals(39, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test241517() throws Throwable {
    Node node0 = new Node(103, 30, 42);
    boolean boolean0 = node0.isDec();
    assertEquals(122922, node0.getSourcePosition());
}",""
"public boolean isDec() {
    return this.getType() == Token.DEC;
}","public void test241518() throws Throwable {
    Node node0 = new Node(103, 30, 42);
    boolean boolean0 = node0.isDec();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test242519() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isDefaultCase();
    assertEquals(105, node0.getType());
}",""
"public boolean isDefaultCase() {
    return this.getType() == Token.DEFAULT_CASE;
}","public void test242520() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isDefaultCase();
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test242521() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isDefaultCase();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isDefaultCase() {
    return this.getType() == Token.DEFAULT_CASE;
}","public void test243522() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    boolean boolean0 = node0.isDefaultCase();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test243523() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    boolean boolean0 = node0.isDefaultCase();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isDelProp() {
    return this.getType() == Token.DELPROP;
}","public void test244524() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDelProp();
    assertFalse(boolean0);
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test244525() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDelProp();
    assertTrue(node0.isNumber());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test244526() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDelProp();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isDelProp() {
    return this.getType() == Token.DELPROP;
}","public void test245527() throws Throwable {
    Node node0 = new Node(31, 1547, 31);
    boolean boolean0 = node0.isDelProp();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test245528() throws Throwable {
    Node node0 = new Node(31, 1547, 31);
    boolean boolean0 = node0.isDelProp();
    assertEquals(6336543, node0.getSourcePosition());
}",""
"public boolean isDo() {
    return this.getType() == Token.DO;
}","public void test246529() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = node0.isDo();
    assertFalse(boolean0);
}",""
"public boolean isThrow() {
    return this.getType() == Token.THROW;
}","public void test246530() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = node0.isDo();
    assertTrue(node0.isThrow());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test246531() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = node0.isDo();
    assertEquals(200753, node0.getSourcePosition());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test247532() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = node0.isDo();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isDo() {
    return this.getType() == Token.DO;
}","public void test247533() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = node0.isDo();
    assertTrue(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test248534() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isEmpty();
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test248535() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isEmpty();
    assertEquals(105, node0.getType());
}",""
"public boolean isEmpty() {
    return this.getType() == Token.EMPTY;
}","public void test248536() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isEmpty();
    assertFalse(boolean0);
}",""
"public boolean isEmpty() {
    return this.getType() == Token.EMPTY;
}","public void test249537() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = node0.isEmpty();
    assertTrue(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test249538() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = node0.isEmpty();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isExprResult() {
    return this.getType() == Token.EXPR_RESULT;
}","public void test250539() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isExprResult();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test250540() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isExprResult();
    assertEquals((-3765), node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test250541() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isExprResult();
    assertEquals((-1), node0.getCharno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test251542() throws Throwable {
    Node node0 = Node.newString(130, ""~XVY4[/7}"", 130, 130);
    boolean boolean0 = node0.isExprResult();
    assertEquals(532610, node0.getSourcePosition());
}",""
"public boolean isExprResult() {
    return this.getType() == Token.EXPR_RESULT;
}","public void test251543() throws Throwable {
    Node node0 = Node.newString(130, ""~XVY4[/7}"", 130, 130);
    boolean boolean0 = node0.isExprResult();
    assertTrue(boolean0);
}",""
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test252544() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    boolean boolean0 = node0.isFalse();
    assertFalse(boolean0);
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test252545() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    boolean boolean0 = node0.isFalse();
    assertTrue(node0.isNumber());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test252546() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    boolean boolean0 = node0.isFalse();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isFalse() {
    return this.getType() == Token.FALSE;
}","public void test253547() throws Throwable {
    Node node0 = new Node(43, 43, 39);
    boolean boolean0 = node0.isFalse();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test253548() throws Throwable {
    Node node0 = new Node(43, 43, 39);
    boolean boolean0 = node0.isFalse();
    assertEquals(176167, node0.getSourcePosition());
}",""
"public boolean isFor() {
    return this.getType() == Token.FOR;
}","public void test254549() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isFor();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test254550() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isFor();
    assertEquals(29, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test254551() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isFor();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isFor() {
    return this.getType() == Token.FOR;
}","public void test255552() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    boolean boolean0 = node0.isFor();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test255553() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    boolean boolean0 = node0.isFor();
    assertEquals(471155, node0.getSourcePosition());
}",""
"public boolean isGetterDef() {
    return this.getType() == Token.GETTER_DEF;
}","public void test256554() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isGetterDef();
    assertFalse(boolean0);
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test256555() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isGetterDef();
    assertTrue(node0.isStringKey());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test256556() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isGetterDef();
    assertEquals((-1), node0.getCharno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test257557() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertEquals(20479, node1.getSourcePosition());
}",""
"public boolean isGetterDef() {
    return this.getType() == Token.GETTER_DEF;
}","public void test257558() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test257559() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertEquals(536940543, node0.getSourcePosition());
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test257560() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getType() {
    return type;
}","public void test257561() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertEquals(39, node0.getType());
}",""
"public boolean isGetElem() {
    return this.getType() == Token.GETELEM;
}","public void test258562() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isGetElem();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test258563() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isGetElem();
    assertEquals(630938, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test258564() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isGetElem();
    assertEquals(154, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test259565() throws Throwable {
    Node node0 = Node.newNumber((double) 83, 10, 125);
    Node node1 = new Node(35, node0, node0, node0);
    boolean boolean0 = node1.isGetElem();
    assertEquals(41085, node0.getSourcePosition());
}",""
"public boolean isGetElem() {
    return this.getType() == Token.GETELEM;
}","public void test259566() throws Throwable {
    Node node0 = Node.newNumber((double) 83, 10, 125);
    Node node1 = new Node(35, node0, node0, node0);
    boolean boolean0 = node1.isGetElem();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test259567() throws Throwable {
    Node node0 = Node.newNumber((double) 83, 10, 125);
    Node node1 = new Node(35, node0, node0, node0);
    boolean boolean0 = node1.isGetElem();
    assertEquals(39, node0.getType());
}",""
"public int getType() {
    return type;
}","public void test260568() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isGetProp();
    assertEquals((-3765), node0.getType());
}",""
"public boolean isGetProp() {
    return this.getType() == Token.GETPROP;
}","public void test260569() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isGetProp();
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test260570() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isGetProp();
    assertEquals((-1), node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test261571() throws Throwable {
    Node node0 = Node.newString(33, ""com.google.common.collect.Maps$ImprovedAbstractMap"", 4095, 164);
    boolean boolean0 = node0.isGetProp();
    assertEquals(16773284, node0.getSourcePosition());
}",""
"public boolean isGetProp() {
    return this.getType() == Token.GETPROP;
}","public void test261572() throws Throwable {
    Node node0 = Node.newString(33, ""com.google.common.collect.Maps$ImprovedAbstractMap"", 4095, 164);
    boolean boolean0 = node0.isGetProp();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test262573() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isHook();
    assertEquals((-3765), node0.getType());
}",""
"public boolean isHook() {
    return this.getType() == Token.HOOK;
}","public void test262574() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isHook();
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test262575() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isHook();
    assertEquals((-1), node0.getLineno());
}",""
"public int getType() {
    return type;
}","public void test263576() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = new Node(98, node0, node0, node0);
    boolean boolean0 = node1.isHook();
    assertEquals(37, node0.getType());
}",""
"public boolean isHook() {
    return this.getType() == Token.HOOK;
}","public void test263577() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = new Node(98, node0, node0, node0);
    boolean boolean0 = node1.isHook();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test264578() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = node0.isIf();
    assertEquals(118, node0.getType());
}",""
"public boolean isIf() {
    return this.getType() == Token.IF;
}","public void test264579() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = node0.isIf();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test264580() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = node0.isIf();
    assertEquals(483446, node0.getSourcePosition());
}",""
"public boolean isIf() {
    return this.getType() == Token.IF;
}","public void test265581() throws Throwable {
    Node node0 = new Node(108, 50, 108);
    boolean boolean0 = node0.isIf();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test265582() throws Throwable {
    Node node0 = new Node(108, 50, 108);
    boolean boolean0 = node0.isIf();
    assertEquals(204908, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test266583() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isIn();
    assertEquals(34, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test266584() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isIn();
    assertEquals(139298, node0.getSourcePosition());
}",""
"public boolean isIn() {
    return this.getType() == Token.IN;
}","public void test267585() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isIn();
    assertTrue(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test267586() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isIn();
    assertEquals((-1), node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test268587() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.isInc();
    assertEquals(487809, node0.getSourcePosition());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test268588() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.isInc();
    assertTrue(node0.isString());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test269589() throws Throwable {
    Node node0 = new Node(102, 30, 42);
    boolean boolean0 = node0.isInc();
    assertEquals(122922, node0.getSourcePosition());
}",""
"public boolean isInc() {
    return this.getType() == Token.INC;
}","public void test269590() throws Throwable {
    Node node0 = new Node(102, 30, 42);
    boolean boolean0 = node0.isInc();
    assertTrue(boolean0);
}",""
"public boolean isInstanceOf() {
    return this.getType() == Token.INSTANCEOF;
}","public void test270591() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isInstanceOf();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test270592() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isInstanceOf();
    assertEquals(105, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test270593() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isInstanceOf();
    assertEquals((-1), node0.getCharno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test271594() throws Throwable {
    Node node0 = new Node(52, 52, 52);
    boolean boolean0 = node0.isInstanceOf();
    assertEquals(213044, node0.getSourcePosition());
}",""
"public boolean isInstanceOf() {
    return this.getType() == Token.INSTANCEOF;
}","public void test271595() throws Throwable {
    Node node0 = new Node(52, 52, 52);
    boolean boolean0 = node0.isInstanceOf();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test272596() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isLabel();
    assertEquals(125, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test272597() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isLabel();
    assertEquals(512125, node0.getSourcePosition());
}",""
"public boolean isLabel() {
    return this.getType() == Token.LABEL;
}","public void test272598() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isLabel();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test273599() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isLabel();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isLabel() {
    return this.getType() == Token.LABEL;
}","public void test273600() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isLabel();
    assertTrue(boolean0);
}",""
"public boolean isLabelName() {
    return this.getType() == Token.LABEL_NAME;
}","public void test274601() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isLabelName();
    assertFalse(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test274602() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isLabelName();
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test274603() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isLabelName();
    assertEquals(105, node0.getType());
}",""
"public boolean isLabelName() {
    return this.getType() == Token.LABEL_NAME;
}","public void test275604() throws Throwable {
    Node node0 = new Node(153);
    boolean boolean0 = node0.isLabelName();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test275605() throws Throwable {
    Node node0 = new Node(153);
    boolean boolean0 = node0.isLabelName();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test276606() throws Throwable {
    Node node0 = Node.newNumber((-425.9));
    boolean boolean0 = node0.isName();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test276607() throws Throwable {
    Node node0 = Node.newNumber((-425.9));
    boolean boolean0 = node0.isName();
    assertEquals(39, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test276608() throws Throwable {
    Node node0 = Node.newNumber((-425.9));
    boolean boolean0 = node0.isName();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test277609() throws Throwable {
    Node node0 = Node.newString(""SFfQ\""0OkEZ}a(E"");
    assertFalse(node0.isName());
}",""
"public int getType() {
    return type;
}","public void test277610() throws Throwable {
    Node node0 = Node.newString(""SFfQ\""0OkEZ}a(E"");
    node0.setType(38);
    boolean boolean0 = node0.isName();
    assertEquals(38, node0.getType());
}",""
"public boolean isName() {
    return this.getType() == Token.NAME;
}","public void test277611() throws Throwable {
    Node node0 = Node.newString(""SFfQ\""0OkEZ}a(E"");
    node0.setType(38);
    boolean boolean0 = node0.isName();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test278612() throws Throwable {
    Node node0 = new Node(985, 985, 985);
    node0.isNE();
    assertEquals(4035545, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test278613() throws Throwable {
    Node node0 = new Node(985, 985, 985);
    node0.isNE();
    assertEquals(985, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test279614() throws Throwable {
    Node node0 = new Node(13, 13, 32);
    boolean boolean0 = node0.isNE();
    assertEquals(53280, node0.getSourcePosition());
}",""
"public boolean isNE() {
    return this.getType() == Token.NE;
}","public void test279615() throws Throwable {
    Node node0 = new Node(13, 13, 32);
    boolean boolean0 = node0.isNE();
    assertTrue(boolean0);
}",""
"public boolean isNew() {
    return this.getType() == Token.NEW;
}","public void test280616() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNew();
    assertFalse(boolean0);
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test280617() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNew();
    assertTrue(node0.isString());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test280618() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNew();
    assertEquals((-1), node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test281619() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = node0.isNew();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isNew() {
    return this.getType() == Token.NEW;
}","public void test281620() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = node0.isNew();
    assertTrue(boolean0);
}",""
"public boolean isNot() {
    return this.getType() == Token.NOT;
}","public void test282621() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNot();
    assertFalse(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test282622() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNot();
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test282623() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNot();
    assertEquals(40, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test283624() throws Throwable {
    Node node0 = new Node(26, 26, 26);
    boolean boolean0 = node0.isNot();
    assertEquals(106522, node0.getSourcePosition());
}",""
"public boolean isNot() {
    return this.getType() == Token.NOT;
}","public void test283625() throws Throwable {
    Node node0 = new Node(26, 26, 26);
    boolean boolean0 = node0.isNot();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test284626() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isNull();
    assertEquals(172074, node0.getSourcePosition());
}",""
"public boolean isNull() {
    return this.getType() == Token.NULL;
}","public void test284627() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isNull();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test284628() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isNull();
    assertEquals(42, node0.getType());
}",""
"public boolean isNull() {
    return this.getType() == Token.NULL;
}","public void test285629() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = node0.isNull();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test285630() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = node0.isNull();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test286631() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isNumber();
    assertEquals(630938, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test286632() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isNumber();
    assertEquals(154, node0.getType());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test286633() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isNumber();
    assertFalse(boolean0);
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test287634() throws Throwable {
    Node node0 = Node.newNumber((-0.8877167227904719), 131, 131);
    boolean boolean0 = node0.isNumber();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test287635() throws Throwable {
    Node node0 = Node.newNumber((-0.8877167227904719), 131, 131);
    boolean boolean0 = node0.isNumber();
    assertEquals(536707, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test288636() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    node0.isObjectLit();
    assertEquals((-3765), node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test288637() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    node0.isObjectLit();
    assertEquals((-1), node0.getCharno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test289638() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.isObjectLit();
    assertEquals(262208, node0.getSourcePosition());
}",""
"public boolean isObjectLit() {
    return this.getType() == Token.OBJECTLIT;
}","public void test289639() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.isObjectLit();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test290640() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isOr();
    assertEquals((-3765), node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test290641() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isOr();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isOr() {
    return this.getType() == Token.OR;
}","public void test290642() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isOr();
    assertFalse(boolean0);
}",""
"public boolean isOr() {
    return this.getType() == Token.OR;
}","public void test291643() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = node0.isOr();
    assertTrue(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test291644() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = node0.isOr();
    assertEquals((-1), node0.getCharno());
}",""
"public int getType() {
    return type;
}","public void test292645() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isParamList();
    assertEquals(118, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test292646() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isParamList();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isParamList() {
    return this.getType() == Token.PARAM_LIST;
}","public void test292647() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isParamList();
    assertFalse(boolean0);
}",""
"public boolean isParamList() {
    return this.getType() == Token.PARAM_LIST;
}","public void test293648() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    node0.setType(83);
    boolean boolean0 = node0.isParamList();
    assertTrue(boolean0);
}",""
"public boolean isRegExp() {
    return this.getType() == Token.REGEXP;
}","public void test294649() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isRegExp();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test294650() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isRegExp();
    assertEquals(118, node0.getType());
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test294651() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isRegExp();
    assertEquals((-1), node0.getCharno());
}",""
"public boolean isReturn() {
    return this.getType() == Token.RETURN;
}","public void test295652() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = node0.isReturn();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test295653() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = node0.isReturn();
    assertEquals(34, node0.getType());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test295654() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = node0.isReturn();
    assertEquals((-1), node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test296655() throws Throwable {
    Node node0 = Node.newString(4, ""Q7nJkxgf&!.MrtG]"", 53, 15);
    boolean boolean0 = node0.isReturn();
    assertEquals(217103, node0.getSourcePosition());
}",""
"public boolean isReturn() {
    return this.getType() == Token.RETURN;
}","public void test296656() throws Throwable {
    Node node0 = Node.newString(4, ""Q7nJkxgf&!.MrtG]"", 53, 15);
    boolean boolean0 = node0.isReturn();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test297657() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    node0.isScript();
    assertEquals(512125, node0.getSourcePosition());
}",""
"public boolean isBlock() {
    return this.getType() == Token.BLOCK;
}","public void test297658() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    node0.isScript();
    assertTrue(node0.isBlock());
}",""
"public boolean isScript() {
    return this.getType() == Token.SCRIPT;
}","public void test298659() throws Throwable {
    Node node0 = Node.newString(132, ""sBc/l"", 132, 132);
    boolean boolean0 = node0.isScript();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test298660() throws Throwable {
    Node node0 = Node.newString(132, ""sBc/l"", 132, 132);
    boolean boolean0 = node0.isScript();
    assertEquals(540804, node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test299661() throws Throwable {
    Node node0 = new Node(33, 18, 18);
    node0.isSetterDef();
    assertEquals(73746, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test299662() throws Throwable {
    Node node0 = new Node(33, 18, 18);
    node0.isSetterDef();
    assertEquals(33, node0.getType());
}",""
"public boolean isSetterDef() {
    return this.getType() == Token.SETTER_DEF;
}","public void test300663() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertFalse(node0.isSetterDef());
}",""
"public boolean isSetterDef() {
    return this.getType() == Token.SETTER_DEF;
}","public void test300664() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertTrue(boolean0);
}",""
"public boolean hasOneChild() {
    return first != null && first == last;
}","public void test300665() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertTrue(node1.hasOneChild());
}","/**
 * Check for one child more efficiently than by iterating over all the
 * children as is done with Node.getChildCount().
 *
 * @return Whether the node has exactly one child.
 */"
"public int getSourcePosition() {
    return sourcePosition;
}","public void test300666() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertEquals(206692, node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test300667() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertEquals((-3765), node0.getType());
}",""
"public int getType() {
    return type;
}","public void test301668() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = node0.isString();
    assertEquals(99, node0.getType());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test301669() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = node0.isString();
    assertFalse(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test301670() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = node0.isString();
    assertEquals((-1), node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test302671() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    boolean boolean0 = node0.isString();
    assertEquals(487809, node0.getSourcePosition());
}",""
"public boolean isString() {
    return this.getType() == Token.STRING;
}","public void test302672() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    boolean boolean0 = node0.isString();
    assertTrue(boolean0);
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test303673() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isStringKey();
    assertFalse(boolean0);
}",""
"public boolean isVar() {
    return this.getType() == Token.VAR;
}","public void test303674() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isStringKey();
    assertTrue(node0.isVar());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test303675() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isStringKey();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isStringKey() {
    return this.getType() == Token.STRING_KEY;
}","public void test304676() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isStringKey();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test304677() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isStringKey();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test305678() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    node0.isSwitch();
    assertEquals(42, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test305679() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    node0.isSwitch();
    assertEquals(172074, node0.getSourcePosition());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test306680() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = node0.isSwitch();
    assertEquals(450670, node0.getSourcePosition());
}",""
"public boolean isSwitch() {
    return this.getType() == Token.SWITCH;
}","public void test306681() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = node0.isSwitch();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test307682() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    node0.isThis();
    assertEquals(471155, node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test307683() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    node0.isThis();
    assertEquals(115, node0.getType());
}",""
"public boolean isThis() {
    return this.getType() == Token.THIS;
}","public void test308684() throws Throwable {
    Node node0 = Node.newNumber((-425.92));
    assertFalse(node0.isThis());
}",""
"public int getType() {
    return type;
}","public void test308685() throws Throwable {
    Node node0 = Node.newNumber((-425.92));
    node0.setType(42);
    boolean boolean0 = node0.isThis();
    assertEquals(42, node0.getType());
}",""
"public boolean isThis() {
    return this.getType() == Token.THIS;
}","public void test308686() throws Throwable {
    Node node0 = Node.newNumber((-425.92));
    node0.setType(42);
    boolean boolean0 = node0.isThis();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test309687() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isThrow();
    assertEquals(512125, node0.getSourcePosition());
}",""
"public boolean isThrow() {
    return this.getType() == Token.THROW;
}","public void test309688() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isThrow();
    assertFalse(boolean0);
}",""
"public boolean isBlock() {
    return this.getType() == Token.BLOCK;
}","public void test309689() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isThrow();
    assertTrue(node0.isBlock());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test310690() throws Throwable {
    Node node0 = new Node(49);
    boolean boolean0 = node0.isThrow();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isThrow() {
    return this.getType() == Token.THROW;
}","public void test310691() throws Throwable {
    Node node0 = new Node(49);
    boolean boolean0 = node0.isThrow();
    assertTrue(boolean0);
}",""
"public int getType() {
    return type;
}","public void test311692() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isTrue();
    assertEquals(30, node0.getType());
}",""
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test311693() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isTrue();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test311694() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isTrue();
    assertEquals(122910, node0.getSourcePosition());
}",""
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test312695() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertTrue(boolean0);
}",""
"public boolean isTrue() {
    return this.getType() == Token.TRUE;
}","public void test312696() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertFalse(node0.isTrue());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test312697() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertEquals(8246, node1.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test312698() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertEquals(39, node0.getType());
}",""
"public boolean isNumber() {
    return this.getType() == Token.NUMBER;
}","public void test313699() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    boolean boolean0 = node0.isTry();
    assertTrue(node0.isNumber());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test313700() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    boolean boolean0 = node0.isTry();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isTry() {
    return this.getType() == Token.TRY;
}","public void test313701() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    boolean boolean0 = node0.isTry();
    assertFalse(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test314702() throws Throwable {
    Node node0 = new Node(77, 9, 77);
    boolean boolean0 = node0.isTry();
    assertEquals(36941, node0.getSourcePosition());
}",""
"public boolean isTry() {
    return this.getType() == Token.TRY;
}","public void test314703() throws Throwable {
    Node node0 = new Node(77, 9, 77);
    boolean boolean0 = node0.isTry();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test315704() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    boolean boolean0 = node0.isTypeOf();
    assertEquals(118813, node0.getSourcePosition());
}",""
"public boolean isTypeOf() {
    return this.getType() == Token.TYPEOF;
}","public void test315705() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    boolean boolean0 = node0.isTypeOf();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test315706() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    boolean boolean0 = node0.isTypeOf();
    assertEquals(39, node0.getType());
}",""
"public boolean isTypeOf() {
    return this.getType() == Token.TYPEOF;
}","public void test316707() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertFalse(node0.isTypeOf());
}",""
"public boolean isTypeOf() {
    return this.getType() == Token.TYPEOF;
}","public void test316708() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertTrue(boolean0);
}",""
"public boolean isVoid() {
    return this.getType() == Token.VOID;
}","public void test316709() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertTrue(node0.isVoid());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test316710() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertEquals((-1), node0.getLineno());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test317711() throws Throwable {
    Node node0 = new Node(1035);
    boolean boolean0 = node0.isVar();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public int getType() {
    return type;
}","public void test317712() throws Throwable {
    Node node0 = new Node(1035);
    boolean boolean0 = node0.isVar();
    assertEquals(1035, node0.getType());
}",""
"public boolean isVar() {
    return this.getType() == Token.VAR;
}","public void test317713() throws Throwable {
    Node node0 = new Node(1035);
    boolean boolean0 = node0.isVar();
    assertFalse(boolean0);
}",""
"public boolean isVar() {
    return this.getType() == Token.VAR;
}","public void test318714() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isVar();
    assertTrue(boolean0);
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test318715() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isVar();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isVoid() {
    return this.getType() == Token.VOID;
}","public void test319716() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = node0.isVoid();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test319717() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = node0.isVoid();
    assertEquals(34, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test319718() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = node0.isVoid();
    assertEquals(139298, node0.getSourcePosition());
}",""
"public boolean isVoid() {
    return this.getType() == Token.VOID;
}","public void test320719() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    boolean boolean0 = node0.isVoid();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test320720() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    boolean boolean0 = node0.isVoid();
    assertEquals((-1), node0.getSourcePosition());
}",""
"public boolean isWhile() {
    return this.getType() == Token.WHILE;
}","public void test321721() throws Throwable {
    Node node0 = new Node(152, 152, 152);
    boolean boolean0 = node0.isWhile();
    assertFalse(boolean0);
}",""
"public int getType() {
    return type;
}","public void test321722() throws Throwable {
    Node node0 = new Node(152, 152, 152);
    boolean boolean0 = node0.isWhile();
    assertEquals(152, node0.getType());
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test321723() throws Throwable {
    Node node0 = new Node(152, 152, 152);
    boolean boolean0 = node0.isWhile();
    assertEquals(622744, node0.getSourcePosition());
}",""
"public int getLineno() {
    return extractLineno(sourcePosition);
}","public void test322724() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isWhile();
    assertEquals((-1), node0.getLineno());
}",""
"public boolean isWhile() {
    return this.getType() == Token.WHILE;
}","public void test322725() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isWhile();
    assertTrue(boolean0);
}",""
"public int getSourcePosition() {
    return sourcePosition;
}","public void test323726() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isWith();
    assertEquals(122910, node0.getSourcePosition());
}",""
"public boolean isNew() {
    return this.getType() == Token.NEW;
}","public void test323727() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isWith();
    assertTrue(node0.isNew());
}",""
"public boolean isWith() {
    return this.getType() == Token.WITH;
}","public void test324728() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = node0.isWith();
    assertTrue(boolean0);
}",""
"public int getCharno() {
    return extractCharno(sourcePosition);
}","public void test324729() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = node0.isWith();
    assertEquals((-1), node0.getCharno());
}",""
