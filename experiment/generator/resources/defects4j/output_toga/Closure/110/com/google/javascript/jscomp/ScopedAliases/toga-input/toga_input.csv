focal_method,test_prefix,docstring
"@Override
public void process(Node externs, Node root) {
    hotSwapScript(root, null);
}","public void test00() throws Throwable {
    CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
    Node node0 = new Node(770, 770, 770);
    Compiler compiler0 = new Compiler();
    PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
    ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
    scopedAliases0.process(node0, node0);
    assertEquals(57, Node.REFLECTED_OBJECT);
}",""
"@Override
public void hotSwapScript(Node root, Node originalRoot) {
    Traversal traversal = new Traversal();
    NodeTraversal.traverse(compiler, root, traversal);
    if (!traversal.hasErrors()) {
        // Apply the aliases.
        List<AliasUsage> aliasWorkQueue = Lists.newArrayList(traversal.getAliasUsages());
        while (!aliasWorkQueue.isEmpty()) {
            List<AliasUsage> newQueue = Lists.newArrayList();
            for (AliasUsage aliasUsage : aliasWorkQueue) {
                if (aliasUsage.referencesOtherAlias()) {
                    newQueue.add(aliasUsage);
                } else {
                    aliasUsage.applyAlias();
                }
            }
            // Prevent an infinite loop.
            if (newQueue.size() == aliasWorkQueue.size()) {
                Var cycleVar = newQueue.get(0).aliasVar;
                compiler.report(JSError.make(cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));
                break;
            } else {
                aliasWorkQueue = newQueue;
            }
        }
        // Remove the alias definitions.
        for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {
            if (aliasDefinition.getParent().isVar() && aliasDefinition.getParent().hasOneChild()) {
                aliasDefinition.getParent().detachFromParent();
            } else {
                aliasDefinition.detachFromParent();
            }
        }
        // Collapse the scopes.
        for (Node scopeCall : traversal.getScopeCalls()) {
            Node expressionWithScopeCall = scopeCall.getParent();
            Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();
            scopeClosureBlock.detachFromParent();
            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);
            NodeUtil.tryMergeBlock(scopeClosureBlock);
        }
        if (traversal.getAliasUsages().size() > 0 || traversal.getAliasDefinitionsInOrder().size() > 0 || traversal.getScopeCalls().size() > 0) {
            compiler.reportCodeChange();
        }
    }
}","public void test11() throws Throwable {
    CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
    Compiler compiler0 = new Compiler();
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, """");
    node0.addChildToBack(node0);
    PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);
    ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
    // Undeclared exception!
    try {
        scopedAliases0.hotSwapScript(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
