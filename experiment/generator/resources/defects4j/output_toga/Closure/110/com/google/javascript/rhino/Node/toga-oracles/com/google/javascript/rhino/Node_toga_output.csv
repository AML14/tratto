project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.siblings();
    assertEquals(630938, node0.getSourcePosition());
}",0,
project,0,test0001,"public void test0001() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.siblings();
    assertEquals(154, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test0012,"public void test0012() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.NO_SIDE_EFFECTS);
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertEquals(630938, node1.getSourcePosition());
}",0,"assertEquals(1, node1.getSourcePosition())"
project,0,test0013,"public void test0013() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.NO_SIDE_EFFECTS);
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertTrue(node1.isNumber());
}",0,assertTrue(node1.isNumber())
project,0,test0024,"public void test0024() throws Throwable {
    Node node0 = new Node((-4248), (-4248), 51);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    Set<String> set0 = jSDocInfo0.getSuppressions();
    node0.setDirectives(set0);
    // Undeclared exception!
    try {
        node0.getExistingIntProp(48);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node$ObjectPropListItem"", e);
    }
}",1,
project,0,test0035,"public void test0035() throws Throwable {
    Node[] nodeArray0 = new Node[0];
    Node node0 = new Node(46, nodeArray0);
    Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
    node_FileLevelJsDocBuilder0.append(""!"");
    node0.putProp(4095, ""!"");
    node_FileLevelJsDocBuilder0.append("",n"");
    assertEquals(46, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test0046,"public void test0046() throws Throwable {
    Node node0 = Node.newString("",n"");
    node0.setQuotedString();
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING ,n [quoted: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test0057,"public void test0057() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    boolean boolean0 = node0.isQuotedString();
    assertFalse(boolean0);
}",0,
project,0,test0058,"public void test0058() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    boolean boolean0 = node0.isQuotedString();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test0059,"public void test0059() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    boolean boolean0 = node0.isQuotedString();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test00610,"public void test00610() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(30);
    node0.setSideEffectFlags(node_SideEffectFlags0);
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // CALL 37 [side_effect_flags: com.google.javascript.rhino.Node$IntPropListItem@0000000003] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test01418,"public void test01418() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test01419,"public void test01419() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertEquals(0, node0.getChildCount());
}",0,
project,0,test01420,"public void test01420() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test01421,"public void test01421() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    boolean boolean0 = node0.isEquivalentToTyped(node0);
    assertEquals((-1), node0.getCharno());
}",0,
project,0,test01522,"public void test01522() throws Throwable {
    Node node0 = Node.newNumber((-476.30970638241644));
    node0.setDouble((-476.30970638241644));
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test01523,"public void test01523() throws Throwable {
    Node node0 = Node.newNumber((-476.30970638241644));
    node0.setDouble((-476.30970638241644));
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test01624,"public void test01624() throws Throwable {
    Node node0 = Node.newString("",n"");
    InputId inputId0 = new InputId("",n"");
    node0.setInputId(inputId0);
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING ,n [input_id: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test01725,"public void test01725() throws Throwable {
    Node node0 = new Node(172, 172, 172);
    // Undeclared exception!
    try {
        node0.srcref((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test01826,"public void test01826() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setWasEmptyNode(true);
    assertTrue(node0.isStringKey());
}",0,assertTrue(node0.isStringKey())
project,0,test01827,"public void test01827() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setWasEmptyNode(true);
    assertEquals(630938, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test01928,"public void test01928() throws Throwable {
    // Undeclared exception!
    try {
        Node.newString((String) null, (-1920), (-1920));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}",0,
project,0,test02029,"public void test02029() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    node0.addChildrenToBack(node0);
    Node node1 = null;
    try {
        node1 = new Node(57, node0, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test02130,"public void test02130() throws Throwable {
    Node node0 = Node.newString(""Y_AxCFe^0"");
    node0.getInputId();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test02131,"public void test02131() throws Throwable {
    Node node0 = Node.newString(""Y_AxCFe^0"");
    node0.getInputId();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test02232,"public void test02232() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.isSyntheticBlock();
    assertEquals(200753, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test02233,"public void test02233() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.isSyntheticBlock();
    assertEquals(49, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test02334,"public void test02334() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    Node node2 = null;
    try {
        node2 = new Node(4, node1, node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test02435,"public void test02435() throws Throwable {
    Node node0 = new Node(36);
    node0.setSourceEncodedPosition(36);
    assertEquals(36, node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test02536,"public void test02536() throws Throwable {
    Node node0 = new Node((-856), (-856), (-856));
    node0.getAncestors();
    assertEquals((-856), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test02537,"public void test02537() throws Throwable {
    Node node0 = new Node((-856), (-856), (-856));
    node0.getAncestors();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test02638,"public void test02638() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isLocalResultCall();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02639,"public void test02639() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isLocalResultCall();
    assertTrue(node0.isCast());
}",0,
project,0,test02740,"public void test02740() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    assertEquals(29, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test02741,"public void test02741() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02742,"public void test02742() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isOnlyModifiesArgumentsCall();
    assertEquals((-1), node0.getLineno());
}",1,
project,0,test02843,"public void test02843() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.setIsSyntheticBlock(false);
    assertEquals(200753, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test02844,"public void test02844() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.setIsSyntheticBlock(false);
    assertTrue(node0.isThrow());
}",0,assertTrue(node0.isThrow())
project,0,test02945,"public void test02945() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isQuotedString();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test02946,"public void test02946() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isQuotedString();
    assertEquals((-1), node0.getCharno());
}",0,
project,0,test02947,"public void test02947() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isQuotedString();
    assertTrue(node0.isWhile());
}",0,
project,0,test03048,"public void test03048() throws Throwable {
    Node node0 = new Node(1370, 1370, 1370);
    Node node1 = new Node(50, node0, 2, 42);
    Node node2 = node1.copyInformationFrom(node0);
    node1.addChildToFront(node2);
    assertEquals(1370, node1.getCharno());
}",0,"assertEquals(0, node1.getCharno())"
project,0,test03149,"public void test03149() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    Node node1 = node0.srcrefTree(node0);
    assertTrue(node1.isDefaultCase());
}",0,assertFalse(node1.isDefaultCase())
project,0,test03150,"public void test03150() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    Node node1 = node0.srcrefTree(node0);
    assertEquals((-1), node1.getLineno());
}",0,"assertEquals(0, node1.getLineno())"
project,0,test03251,"public void test03251() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.wasEmptyNode();
    assertEquals(630938, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test03252,"public void test03252() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.wasEmptyNode();
    assertEquals(154, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test03353,"public void test03353() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isNoSideEffectsCall();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test03354,"public void test03354() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isNoSideEffectsCall();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test03355,"public void test03355() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isNoSideEffectsCall();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03456,"public void test03456() throws Throwable {
    Node node0 = Node.newString(""g(k9Afw/rYOkc_Q.]J"");
    boolean boolean0 = node0.isOnlyModifiesThisCall();
    assertEquals(40, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test03457,"public void test03457() throws Throwable {
    Node node0 = Node.newString(""g(k9Afw/rYOkc_Q.]J"");
    boolean boolean0 = node0.isOnlyModifiesThisCall();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test03458,"public void test03458() throws Throwable {
    Node node0 = Node.newString(""g(k9Afw/rYOkc_Q.]J"");
    boolean boolean0 = node0.isOnlyModifiesThisCall();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test03559,"public void test03559() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    node0.getDirectives();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test03560,"public void test03560() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    node0.getDirectives();
    assertEquals(112, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test03661,"public void test03661() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setChangeTime(1636);
    int int0 = node0.getChangeTime();
    assertEquals(630938, node0.getSourcePosition());
}",0,
project,0,test03662,"public void test03662() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setChangeTime(1636);
    int int0 = node0.getChangeTime();
    assertEquals(154, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test03663,"public void test03663() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setChangeTime(1636);
    int int0 = node0.getChangeTime();
    assertEquals(1636, int0);
}",1,
project,0,test03764,"public void test03764() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    int int0 = node0.getSourcePosition();
    assertEquals(29, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test03765,"public void test03765() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    int int0 = node0.getSourcePosition();
    assertEquals(118813, int0);
}",0,
project,0,test03866,"public void test03866() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getLength();
    assertEquals(0, int0);
}",0,
project,0,test03867,"public void test03867() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getLength();
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test03868,"public void test03868() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getLength();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test03969,"public void test03969() throws Throwable {
    Node node0 = new Node(154);
    node0.setCharno(154);
    assertEquals((-1), node0.getLineno());
}",1,
project,0,test03970,"public void test03970() throws Throwable {
    Node node0 = new Node(154);
    node0.setCharno(154);
    assertTrue(node0.isStringKey());
}",0,assertTrue(node0.isStringKey())
project,0,test04071,"public void test04071() throws Throwable {
    Node node0 = new Node(37);
    // Undeclared exception!
    try {
        node0.setQuotedString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // not a StringNode
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test04172,"public void test04172() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertEquals(630938, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test04173,"public void test04173() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test04174,"public void test04174() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertTrue(node0.isStringKey());
}",0,assertFalse(node0.isStringKey())
project,0,test04175,"public void test04175() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isEquivalentTo(node0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test04276,"public void test04276() throws Throwable {
    Node node0 = new Node(154);
    node0.setLength(154);
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING_KEY [length: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test04377,"public void test04377() throws Throwable {
    Node node0 = new Node((-72));
    node0.setSourceFileForTesting(""1dB~TH'"");
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertEquals((-1), node1.getCharno());
}",0,
project,0,test04378,"public void test04378() throws Throwable {
    Node node0 = new Node((-72));
    node0.setSourceFileForTesting(""1dB~TH'"");
    Node node1 = node0.useSourceInfoIfMissingFrom(node0);
    assertEquals((-72), node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test04479,"public void test04479() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getSourceOffset();
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test04480,"public void test04480() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getSourceOffset();
    assertEquals((-1), int0);
}",0,
project,0,test04481,"public void test04481() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    int int0 = node0.getSourceOffset();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test04582,"public void test04582() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    node0.setLineno(31);
    assertEquals(31, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test04683,"public void test04683() throws Throwable {
    Node node0 = new Node(2771, 2771, 2771);
    Node node1 = new Node(56, node0, node0, 15, 4);
    Node node2 = null;
    try {
        node2 = new Node(52, node1, node0, node1, 4095, 49);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test04784,"public void test04784() throws Throwable {
    Node node0 = Node.newNumber((-460.9471936));
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NUMBER -460.9471936 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test04885,"public void test04885() throws Throwable {
    Node node0 = new Node(31);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.putProp(31, jSDocInfo0);
    // Undeclared exception!
    try {
        node0.getDouble();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 31
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test04986,"public void test04986() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(32, ""}m\""{${/lQS0b5f\""'V"");
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // STRING }m\""{${/lQS0b5f\""'V [incrdecr: com.google.javascript.rhino.Node$ObjectPropListItem@0000000002] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test05087,"public void test05087() throws Throwable {
    Node node0 = Node.newString(""!"");
    node0.putProp(33, ""!"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 33
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test05188,"public void test05188() throws Throwable {
    Node node0 = Node.newString(""Object#Element"");
    JSDocInfo jSDocInfo0 = new JSDocInfo(false);
    node0.putProp(34, jSDocInfo0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 34
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test05289,"public void test05289() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(35, ""}m\""{${/lQS0b5f\""'V"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 35
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test05390,"public void test05390() throws Throwable {
    Node node0 = new Node(29);
    node0.setIsSyntheticBlock(true);
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NEG [synthetic: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test05491,"public void test05491() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.putProp(39, ""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.toStringTree();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test05492,"public void test05492() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.putProp(39, ""setIsNoSideEffectsCall only spports CALL Knd NEW nodes,gt "");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test05593,"public void test05593() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.INFERRED_FUNCTION);
    node0.toStringTree();
    assertEquals(154, node0.getLineno());
}",0,
project,0,test05594,"public void test05594() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.INFERRED_FUNCTION);
    node0.toStringTree();
    assertEquals(630938, node0.getSourcePosition());
}",0,
project,0,test05595,"public void test05595() throws Throwable {
    Node node0 = Node.newNumber((double) 154, 154, 154);
    node0.putProp(40, node0.INFERRED_FUNCTION);
    node0.toStringTree();
    assertEquals(39, node0.getType());
}",0,
project,0,test05696,"public void test05696() throws Throwable {
    Node node0 = new Node(154);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.putProp(41, jSDocInfo0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 41
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test05797,"public void test05797() throws Throwable {
    Node node0 = Node.newString(""Y_AxDCFX^0"");
    node0.putProp(43, ""Y_AxDCFX^0"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test05798,"public void test05798() throws Throwable {
    Node node0 = Node.newString(""Y_AxDCFX^0"");
    node0.putProp(43, ""Y_AxDCFX^0"");
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test05899,"public void test05899() throws Throwable {
    Node node0 = new Node(44);
    node0.putProp(44, ""g(k9Afw/rYOkc_Q.]J"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 44
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test059100,"public void test059100() throws Throwable {
    Node node0 = new Node(45);
    Object object0 = new Object();
    node0.putProp(45, object0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 45
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test060101,"public void test060101() throws Throwable {
    Node node0 = new Node(46);
    node0.putProp(46, ""\\}Gw?L y~f)"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test060102,"public void test060102() throws Throwable {
    Node node0 = new Node(46);
    node0.putProp(46, ""\\}Gw?L y~f)"");
    node0.toStringTree();
    assertEquals(46, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test061103,"public void test061103() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(47, ""}m\""{${/lQS0b5f\""'V"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test061104,"public void test061104() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(47, ""}m\""{${/lQS0b5f\""'V"");
    node0.toStringTree();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test062105,"public void test062105() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    HashSet<String> hashSet0 = new HashSet<String>();
    node0.setDirectives(hashSet0);
    node0.toStringTree();
    assertEquals(154, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test062106,"public void test062106() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    HashSet<String> hashSet0 = new HashSet<String>();
    node0.setDirectives(hashSet0);
    node0.toStringTree();
    assertTrue(node0.isStringKey());
}",0,assertTrue(node0.isStringKey())
project,0,test062107,"public void test062107() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    HashSet<String> hashSet0 = new HashSet<String>();
    node0.setDirectives(hashSet0);
    node0.toStringTree();
    assertEquals(154, node0.getCharno());
}",0,
project,0,test063108,"public void test063108() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.putProp(49, ""incrdecr"");
    assertEquals(49, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test063109,"public void test063109() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.putProp(49, ""incrdecr"");
    node0.toStringTree();
    assertEquals(49, node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test063110,"public void test063110() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    node0.putProp(49, ""incrdecr"");
    node0.toStringTree();
    assertEquals(200753, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test064111,"public void test064111() throws Throwable {
    Node node0 = Node.newString(""D/;@/@0NG/H<^E4+T"");
    node0.putProp(50, ""D/;@/@0NG/H<^E4+T"");
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test064112,"public void test064112() throws Throwable {
    Node node0 = Node.newString(""D/;@/@0NG/H<^E4+T"");
    node0.putProp(50, ""D/;@/@0NG/H<^E4+T"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test065113,"public void test065113() throws Throwable {
    Node node0 = new Node(105, 105, 105);
    node0.setSourceFileForTesting(""W"");
    try {
        node0.getString();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // FUNCTION <invalid> 105 [source_file: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test066114,"public void test066114() throws Throwable {
    Node node0 = Node.newString(""Y_AxFe^0"");
    node0.putProp(54, node0);
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test066115,"public void test066115() throws Throwable {
    Node node0 = Node.newString(""Y_AxFe^0"");
    node0.putProp(54, node0);
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test067116,"public void test067116() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.putProp(55, ""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test067117,"public void test067117() throws Throwable {
    Node node0 = Node.newString(""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.putProp(55, ""setIsNoSideEffectsCall only supports CALL Knd NEW nodes, got "");
    node0.toStringTree();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test068118,"public void test068118() throws Throwable {
    Node node0 = new Node(13);
    node0.setChangeTime((-135));
    try {
        node0.getDouble();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NE [change_time: com.google.javascript.rhino.Node$IntPropListItem@0000000002] is not a number node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test069119,"public void test069119() throws Throwable {
    Node node0 = Node.newString(""!"");
    node0.putProp(57, ""!"");
    node0.toStringTree();
    assertEquals(40, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test069120,"public void test069120() throws Throwable {
    Node node0 = Node.newString(""!"");
    node0.putProp(57, ""!"");
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test070121,"public void test070121() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/lQS0b5f\""'V"");
    node0.putProp(2, ""}m\""{${/lQS0b5f\""'V"");
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // unexpected prop id 2
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test071122,"public void test071122() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertEquals(430185, node0.getSourcePosition());
}",0,
project,0,test071123,"public void test071123() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertEquals(0, node1.getChildCount());
}",0,"assertEquals(0, node1.getChildCount())"
project,0,test071124,"public void test071124() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test071125,"public void test071125() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(39);
    node0.checkTreeEqualsImpl(node1);
    assertTrue(node1.isNumber());
}",0,assertTrue(node1.isNumber())
project,0,test072126,"public void test072126() throws Throwable {
    Node node0 = Node.newNumber((-471.31165337815554));
    Node node1 = Node.newNumber((double) 50);
    node0.isEquivalentTo(node1);
    assertEquals(0, node1.getChildCount());
}",0,"assertEquals(0, node1.getChildCount())"
project,0,test072127,"public void test072127() throws Throwable {
    Node node0 = Node.newNumber((-471.31165337815554));
    Node node1 = Node.newNumber((double) 50);
    node0.isEquivalentTo(node1);
    assertTrue(node1.isNumber());
}",0,assertTrue(node1.isNumber())
project,0,test072128,"public void test072128() throws Throwable {
    Node node0 = Node.newNumber((-471.31165337815554));
    Node node1 = Node.newNumber((double) 50);
    node0.isEquivalentTo(node1);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(0, node0.getChildCount())"
project,0,test073129,"public void test073129() throws Throwable {
    // Undeclared exception!
    try {
        Node.newString((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}",0,
project,0,test074130,"public void test074130() throws Throwable {
    Node node0 = Node.newString(""D%Dv*"");
    node0.setString(""D%Dv*"");
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test074131,"public void test074131() throws Throwable {
    Node node0 = Node.newString(""D%Dv*"");
    node0.setString(""D%Dv*"");
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test075132,"public void test075132() throws Throwable {
    Node node0 = Node.newString("": "");
    // Undeclared exception!
    try {
        node0.setString((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // StringNode: str is null
        //
        verifyException(""com.google.javascript.rhino.Node$StringNode"", e);
    }
}",1,
project,0,test076133,"public void test076133() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test076134,"public void test076134() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertEquals(40, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test076136,"public void test076136() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertEquals(385, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test076137,"public void test076137() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    Node node1 = Node.newNumber((double) 49, 57, 38);
    String string0 = node0.checkTreeEquals(node1);
    assertEquals(38, node1.getCharno());
}",0,
project,0,test077138,"public void test077138() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(0, node1.getChildCount());
}",0,
project,0,test077139,"public void test077139() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test077140,"public void test077140() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(40, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test077141,"public void test077141() throws Throwable {
    Node node0 = Node.newString(""Y_ACFe^0"");
    Node node1 = Node.newString(""JrUO:U.h"");
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test078142,"public void test078142() throws Throwable {
    Node node0 = new Node((-894));
    Node node1 = new Node(53, node0, node0, node0, 12, 31);
    Node node2 = null;
    try {
        node2 = new Node(39, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // new child has existing parent
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test079143,"public void test079143() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(48, node0, 53, 37);
    Node node2 = null;
    try {
        node2 = new Node(32, node0, node1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // first new child has existing parent
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test080144,"public void test080144() throws Throwable {
    Node node0 = Node.newNumber((double) 112, 112, 112);
    Node node1 = new Node(112, node0, node0, node0, node0);
    Node node2 = null;
    try {
        node2 = new Node(52, node1, node0, 54, 38);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // second new child has existing parent
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test081145,"public void test081145() throws Throwable {
    Node node0 = new Node((-2748), 37, 37);
    Node node1 = new Node((-2748), node0, node0, node0);
    Node node2 = null;
    try {
        node2 = new Node(30, node0, node0, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test082146,"public void test082146() throws Throwable {
    Node node0 = new Node((-475), (-475), (-475));
    Node node1 = new Node((-475), node0, node0);
    Node node2 = null;
    try {
        node2 = new Node((-475), node1, node0, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test083147,"public void test083147() throws Throwable {
    Node node0 = Node.newString(""new child has existing parent"");
    Node node1 = new Node(47, node0, node0);
    Node node2 = null;
    try {
        node2 = new Node(38, node1, node1, node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test084148,"public void test084148() throws Throwable {
    Node node0 = Node.newString(""synh_tc"");
    Node node1 = new Node(4095, node0, node0, 52, 30);
    Node node2 = null;
    try {
        node2 = new Node(4095, node1, node1, node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test085149,"public void test085149() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    Node[] nodeArray0 = new Node[3];
    nodeArray0[0] = node0;
    nodeArray0[1] = node0;
    Node node1 = null;
    try {
        node1 = new Node(54, nodeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // duplicate child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test086150,"public void test086150() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    Node[] nodeArray0 = new Node[2];
    nodeArray0[0] = node0;
    Node node2 = null;
    try {
        node2 = new Node(2, nodeArray0, 46, 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test087151,"public void test087151() throws Throwable {
    Node node0 = new Node(154);
    Node[] nodeArray0 = new Node[2];
    nodeArray0[0] = node0;
    nodeArray0[1] = node0;
    Node node1 = null;
    try {
        node1 = new Node(32, nodeArray0, 57, 1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test088152,"public void test088152() throws Throwable {
    Node node0 = new Node((-1454));
    assertEquals((-1454), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test088153,"public void test088153() throws Throwable {
    Node node0 = new Node((-1454));
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test088154,"public void test088154() throws Throwable {
    Node node0 = new Node((-1454));
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node0;
    Node node1 = new Node(1, nodeArray0, 29, 29);
    assertEquals(1, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test088155,"public void test088155() throws Throwable {
    Node node0 = new Node((-1454));
    Node[] nodeArray0 = new Node[1];
    nodeArray0[0] = node0;
    Node node1 = new Node(1, nodeArray0, 29, 29);
    assertEquals(118813, node1.getSourcePosition());
}",0,
project,0,test089156,"public void test089156() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.hasChildren();
    assertTrue(node0.isVar());
}",0,assertFalse(node0.isVar())
project,0,test089157,"public void test089157() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.hasChildren();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test089158,"public void test089158() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.hasChildren();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test090159,"public void test090159() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test090160,"public void test090160() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertFalse(node1.hasMoreThanOneChild());
}",0,assertTrue(node1.hasMoreThanOneChild())
project,0,test090161,"public void test090161() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals(85, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test090162,"public void test090162() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test090163,"public void test090163() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test090164,"public void test090164() throws Throwable {
    Node node0 = Node.newNumber(23.15297892960499);
    Node node1 = new Node(85, node0, node0);
    boolean boolean0 = node1.hasChildren();
    assertEquals((-1), node1.getLineno());
}",0,
project,0,test091165,"public void test091165() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, (JSType) functionType0, jSType0, jSType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    // Undeclared exception!
    try {
        node0.replaceChild(node0, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // node is not a child
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test092166,"public void test092166() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = new Node(0, node0);
    // Undeclared exception!
    try {
        node1.removeChild((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test093167,"public void test093167() throws Throwable {
    Node node0 = Node.newString(""Object#Element"", (-3331), (-3331));
    Node node1 = node0.getChildAtIndex((-3331));
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test093168,"public void test093168() throws Throwable {
    Node node0 = Node.newString(""Object#Element"", (-3331), (-3331));
    Node node1 = node0.getChildAtIndex((-3331));
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test093169,"public void test093169() throws Throwable {
    Node node0 = Node.newString(""Object#Element"", (-3331), (-3331));
    Node node1 = node0.getChildAtIndex((-3331));
    assertNull(node1);
}",0,
project,0,test094170,"public void test094170() throws Throwable {
    Node node0 = Node.newString(""ALWAYS_TRUE"");
    // Undeclared exception!
    try {
        node0.getChildAtIndex(310);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test095171,"public void test095171() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    node0.addChildrenToFront(node0);
    int int0 = node0.getIndexOfChild(node0);
    assertTrue(node0.hasChildren());
}",0,assertFalse(node0.hasChildren())
project,0,test095172,"public void test095172() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    node0.addChildrenToFront(node0);
    int int0 = node0.getIndexOfChild(node0);
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test096173,"public void test096173() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertEquals(924, node1.getType());
}",0,
project,0,test096174,"public void test096174() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test096175,"public void test096175() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertTrue(node0.isParamList());
}",0,assertTrue(node0.isParamList())
project,0,test096176,"public void test096176() throws Throwable {
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
    ImmutableList<JSType> immutableList0 = ImmutableList.of();
    Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node node1 = new Node(924, node0, node0, node0, node0);
    int int0 = node1.getIndexOfChild(node1);
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test097177,"public void test097177() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    assertNotNull(node1);
}",0,
project,0,test097178,"public void test097178() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertEquals(2, node2.getChildCount());
}",0,"assertEquals(0, node2.getChildCount())"
project,0,test097179,"public void test097179() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertEquals((-1), node2.getSourcePosition());
}",0,"assertEquals(0, node2.getSourcePosition())"
project,0,test097180,"public void test097180() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertTrue(node2.isSetterDef());
}",0,assertTrue(node2.isSetterDef())
project,0,test097181,"public void test097181() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    assertTrue(node2.hasMoreThanOneChild());
}",0,assertTrue(node2.hasMoreThanOneChild())
project,0,test097182,"public void test097182() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    Node node3 = node1.getLastSibling();
    assertEquals(40, node3.getType());
}",0,"assertEquals(0, node3.getType())"
project,0,test097183,"public void test097183() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    Node node3 = node1.getLastSibling();
    assertEquals((-1), node3.getSourcePosition());
}",0,"assertEquals(0, node3.getSourcePosition())"
project,0,test097184,"public void test097184() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node(148, node1, node0);
    Node node3 = node1.getLastSibling();
    assertNotSame(node3, node1);
}",0,
project,0,test098185,"public void test098185() throws Throwable {
    Node node0 = new Node((-1718), (-1718), (-1718));
    Node node1 = new Node((-1718), node0, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.addChildToFront(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test099186,"public void test099186() throws Throwable {
    Node node0 = Node.newNumber((-1558.774296069));
    Node node1 = Node.newString(36, ""no next sibling."", 31, 36);
    Node node2 = new Node(18, node0, node0, node1, 49, 53);
    Node node3 = node2.removeChildren();
    // Undeclared exception!
    try {
        node3.addChildToFront(node3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test100187,"public void test100187() throws Throwable {
    Node node0 = new Node((-3791));
    Node node1 = new Node(57, node0);
    // Undeclared exception!
    try {
        node1.addChildToBack(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test101188,"public void test101188() throws Throwable {
    Node node0 = new Node(34);
    Node node1 = new Node(48, node0, node0, node0, 54, 4095);
    // Undeclared exception!
    try {
        node1.addChildrenToFront(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test102189,"public void test102189() throws Throwable {
    Node node0 = new Node(2635, 3033, 3033);
    Node node1 = new Node(1303, node0, node0, node0, node0);
    node1.addChildrenToFront(node1);
    assertEquals(2, node1.getChildCount());
}",0,"assertEquals(1, node1.getChildCount())"
project,0,test103190,"public void test103190() throws Throwable {
    Node node0 = Node.newString(""5."");
    // Undeclared exception!
    try {
        node0.addChildBefore((Node) null, (Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The existing child node of the parent should not be null.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test104191,"public void test104191() throws Throwable {
    Node node0 = Node.newString(""5."");
    // Undeclared exception!
    try {
        node0.addChildBefore(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The existing child node of the parent should not be null.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test105192,"public void test105192() throws Throwable {
    Node node0 = Node.newString(""FUNCKzON)^PR]]OTYP"");
    Node node1 = new Node(12, node0, node0, node0, 51, 2);
    // Undeclared exception!
    try {
        node1.addChildBefore(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node already has a parent.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test106193,"public void test106193() throws Throwable {
    Node node0 = Node.newString(""FUNCKzON)^PR]]OTYP"");
    Node node1 = new Node(51, 2, 51);
    Node node2 = new Node(12, node0, node1, node0, 51, 2);
    // Undeclared exception!
    try {
        node2.addChildBefore(node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test107194,"public void test107194() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    node1.addChildBefore(node1, node0);
    assertEquals(2, node1.getChildCount());
}",0,"assertEquals(1, node1.getChildCount())"
project,0,test108195,"public void test108195() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = Node.newNumber(4217.053478921, 2, 29);
    Node node2 = new Node(4095, node0, node0, node1);
    assertEquals(2, node2.getChildCount());
}",0,"assertEquals(0, node2.getChildCount())"
project,0,test108196,"public void test108196() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = Node.newNumber(4217.053478921, 2, 29);
    Node node2 = new Node(4095, node0, node0, node1);
    node2.addChildBefore(node2, node1);
    assertEquals(4095, node2.getType());
}",0,"assertEquals(0, node2.getType())"
project,0,test109197,"public void test109197() throws Throwable {
    Node node0 = new Node((-3752), (-3752), (-3752));
    Node node1 = new Node(103, 30, 42);
    Node node2 = new Node(392, node0, node1, node1, node1, 2545, 52);
    // Undeclared exception!
    try {
        node1.addChildAfter(node0, node2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test110198,"public void test110198() throws Throwable {
    Node node0 = Node.newNumber((double) (-1881));
    // Undeclared exception!
    try {
        node0.addChildrenAfter(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test111199,"public void test111199() throws Throwable {
    Node node0 = new Node((-2411));
    Node node1 = new Node(39, node0, node0);
    // Undeclared exception!
    try {
        node1.addChildrenToBack(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test112200,"public void test112200() throws Throwable {
    Node node0 = new Node(38);
    node0.addChildrenToBack(node0);
    Node node1 = Node.newString(""b^hA"");
    node0.addChildrenToBack(node1);
    assertTrue(node0.hasChildren());
}",0,assertTrue(node0.hasChildren())
project,0,test113201,"public void test113201() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Key"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    node0.addChildrenAfter(node0, (Node) null);
    assertEquals(2, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test114202,"public void test114202() throws Throwable {
    Node node0 = new Node(25, 25, 97);
    Node node1 = Node.newString(4095, ""8[7b(OV4q;6!`9vOqV"");
    Node node2 = new Node(97, node0, node1, 3777, 110);
    node2.removeFirstChild();
    assertEquals(1, node2.getChildCount());
}",0,"assertEquals(0, node2.getChildCount())"
project,0,test115203,"public void test115203() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = Node.newString(47, ""YimPZnfCVFn"");
    Node node2 = new Node(54, node0, node1, node1, 56, 42);
    // Undeclared exception!
    try {
        node2.replaceChild(node1, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test116204,"public void test116204() throws Throwable {
    Node node0 = new Node(65536);
    Node node1 = new Node(37, node0, node0);
    // Undeclared exception!
    try {
        node1.replaceChild(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node already has a parent.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test117205,"public void test117205() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = new Node(40, node0, node0);
    Node node2 = new Node((-3384), node1, 37, 4095);
    assertEquals(4095, node2.getCharno());
}",0,"assertEquals(0, node2.getCharno())"
project,0,test117206,"public void test117206() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = new Node(40, node0, node0);
    Node node2 = new Node((-3384), node1, 37, 4095);
    node1.replaceChild(node0, node2);
    assertEquals((-1), node2.getSourcePosition());
}",0,"assertEquals(1, node2.getSourcePosition())"
project,0,test117207,"public void test117207() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = new Node(40, node0, node0);
    Node node2 = new Node((-3384), node1, 37, 4095);
    node1.replaceChild(node0, node2);
    assertEquals((-1), node2.getLineno());
}",0,"assertEquals(1, node2.getLineno())"
project,0,test118208,"public void test118208() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node2 = new Node(40, node0, node1);
    Node node3 = new Node((-3384), node2, 37, 4095);
    node2.replaceChild(node0, node3);
    assertEquals((-1), node3.getCharno());
}",0,
project,0,test118209,"public void test118209() throws Throwable {
    Node node0 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node1 = Node.newString(""Node tree inequality:\nTree1:\n"");
    Node node2 = new Node(40, node0, node1);
    Node node3 = new Node((-3384), node2, 37, 4095);
    node2.replaceChild(node0, node3);
    assertEquals((-3384), node3.getType());
}",0,"assertEquals(0, node3.getType())"
project,0,test119210,"public void test119210() throws Throwable {
    Node node0 = Node.newString(""DEBUGGER"");
    // Undeclared exception!
    try {
        node0.replaceChildAfter(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // prev is not a child of this node.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test120211,"public void test120211() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(48, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.replaceChildAfter(node0, node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node already has a parent.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test121212,"public void test121212() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(4);
    Node node2 = new Node(48, node1, node1, node0);
    // Undeclared exception!
    try {
        node2.replaceChildAfter(node0, node1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The new child node has siblings.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test122213,"public void test122213() throws Throwable {
    Node node0 = new Node((-856));
    Node node1 = new Node(12, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.replaceChildAfter(node0, node1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test123214,"public void test123214() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.setOptionalArg(true);
    // Undeclared exception!
    try {
        node0.clonePropsFrom(node0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Node has existing properties.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test124215,"public void test124215() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = node0.clonePropsFrom(node0);
    assertEquals(630938, node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test124216,"public void test124216() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    Node node1 = node0.clonePropsFrom(node0);
    assertEquals(154, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test125217,"public void test125217() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    JSType jSType0 = modificationVisitor0.caseFunctionType(functionType0);
    assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
}",0,assertNotNull(jSType0.getPossibleToBooleanOutcomes())
project,0,test126218,"public void test126218() throws Throwable {
    Node node0 = Node.newNumber((double) 31);
    // Undeclared exception!
    try {
        node0.getExistingIntProp(4);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // missing prop: 4
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test127219,"public void test127219() throws Throwable {
    Node node0 = new Node(39, 39, 39);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Number node not created with Node.newNumber
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test128220,"public void test128220() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    try {
        node0.setDouble(118);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // VAR 118 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test129221,"public void test129221() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(39, node0, node0, node0, 39, 52);
    // Undeclared exception!
    try {
        node1.setDouble(29);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Number node not created with Node.newNumber
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test130222,"public void test130222() throws Throwable {
    Node node0 = new Node(40);
    // Undeclared exception!
    try {
        node0.getString();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // String node not created with Node.newString
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test131223,"public void test131223() throws Throwable {
    Node node0 = new Node(40, 102, 119);
    // Undeclared exception!
    try {
        node0.setString(""com.google.common.collect.Platform"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // String node not created with Node.newString
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test132224,"public void test132224() throws Throwable {
    Node node0 = new Node(51, 38, 51);
    try {
        node0.setString(""!"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // IN 38 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test133225,"public void test133225() throws Throwable {
    Node node0 = new Node(51, 38, 51);
    Node node1 = new Node(38, node0, node0);
    // Undeclared exception!
    try {
        node1.setString(""!"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // String node not created with Node.newString
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test134226,"public void test134226() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(""FUNCTION <invalid> 43\n    NUMBER 105.0 105\n"", string0);
}",0,assertNotNull(string0)
project,0,test134227,"public void test134227() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(430185, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test134228,"public void test134228() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(39, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test134229,"public void test134229() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(176180, node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test134230,"public void test134230() throws Throwable {
    Node node0 = Node.newNumber((double) 105, 105, 105);
    Node node1 = new Node(105, node0, node0, node0, node0, 43, 52);
    String string0 = node1.toStringTree();
    assertEquals(105, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test135231,"public void test135231() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    String string0 = node0.toString(false, false, false);
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test135232,"public void test135232() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    String string0 = node0.toString(false, false, false);
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test135233,"public void test135233() throws Throwable {
    Node node0 = Node.newNumber(0.0);
    String string0 = node0.toString(false, false, false);
    assertEquals(""NUMBER 0.0"", string0);
}",0,assertNotNull(string0)
project,0,test136234,"public void test136234() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType((String) null);
    JSType[] jSTypeArray0 = new JSType[6];
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[5] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
    // Undeclared exception!
    try {
        node0.toStringTree();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.jstype.JSType$1"", e);
    }
}",0,
project,0,test137235,"public void test137235() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Key"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    node0.toStringTree();
    assertEquals((-1), node0.getLineno());
}",1,
project,0,test137236,"public void test137236() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Key"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    node0.toStringTree();
    assertEquals(83, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test138237,"public void test138237() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""prev is not a child of this node."", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    String string0 = node0.getSourceFileName();
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test138238,"public void test138238() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""prev is not a child of this node."", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    String string0 = node0.getSourceFileName();
    assertTrue(node0.isVoid());
}",0,
project,0,test139239,"public void test139239() throws Throwable {
    Node node0 = new Node(118);
    node0.getSourceFileName();
    assertTrue(node0.isVar());
}",0,
project,0,test139240,"public void test139240() throws Throwable {
    Node node0 = new Node(118);
    node0.getSourceFileName();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test140241,"public void test140241() throws Throwable {
    Node node0 = new Node(2747, 2747, 2747);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""<invalid>"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    node0.isFromExterns();
    assertEquals(2747, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test140242,"public void test140242() throws Throwable {
    Node node0 = new Node(2747, 2747, 2747);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""<invalid>"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    node0.isFromExterns();
    assertEquals(11254459, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test141243,"public void test141243() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.isFromExterns();
    assertEquals(630938, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test141244,"public void test141244() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    node0.isFromExterns();
    assertTrue(node0.isStringKey());
}",0,
project,0,test142245,"public void test142245() throws Throwable {
    Node node0 = new Node((-3377), (-2084), (-3377));
    node0.setSourceFileForTesting(""`J"");
    int int0 = node0.getSourceOffset();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test142246,"public void test142246() throws Throwable {
    Node node0 = new Node((-3377), (-2084), (-3377));
    node0.setSourceFileForTesting(""`J"");
    int int0 = node0.getSourceOffset();
    assertEquals((-3377), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test142247,"public void test142247() throws Throwable {
    Node node0 = new Node((-3377), (-2084), (-3377));
    node0.setSourceFileForTesting(""`J"");
    int int0 = node0.getSourceOffset();
    assertEquals((-1), int0);
}",0,"assertEquals(0, int0)"
project,0,test143248,"public void test143248() throws Throwable {
    Node node0 = new Node(154, 1648, 1648);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Ju?o$?[fjA%S8'! O"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    int int0 = node0.getSourceOffset();
    assertEquals(1648, node0.getLineno());
}",0,
project,0,test143249,"public void test143249() throws Throwable {
    Node node0 = new Node(154, 1648, 1648);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Ju?o$?[fjA%S8'! O"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    int int0 = node0.getSourceOffset();
    assertEquals((-2147482000), int0);
}",0,"assertEquals(1, int0)"
project,0,test143250,"public void test143250() throws Throwable {
    Node node0 = new Node(154, 1648, 1648);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""Ju?o$?[fjA%S8'! O"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    int int0 = node0.getSourceOffset();
    assertTrue(node0.isStringKey());
}",0,assertTrue(node0.isStringKey())
project,0,test144251,"public void test144251() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    node0.setLineno(33);
    assertEquals(135201, node0.getSourcePosition());
}",0,
project,0,test144252,"public void test144252() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    node0.setLineno(33);
    assertEquals(33, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test145253,"public void test145253() throws Throwable {
    Node node0 = new Node(130);
    Node node1 = new Node(130, node0, node0, node0, node0, 43, 52);
    node1.setSourceEncodedPositionForTree(53);
    assertEquals(53, node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test145254,"public void test145254() throws Throwable {
    Node node0 = new Node(130);
    Node node1 = new Node(130, node0, node0, node0, node0, 43, 52);
    node1.setSourceEncodedPositionForTree(53);
    assertEquals(130, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test146255,"public void test146255() throws Throwable {
    Node node0 = new Node(47, 47, 751619276);
    boolean boolean0 = node0.isRegExp();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test146256,"public void test146256() throws Throwable {
    Node node0 = new Node(47, 47, 751619276);
    boolean boolean0 = node0.isRegExp();
    assertEquals(196607, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test147257,"public void test147257() throws Throwable {
    Node node0 = new Node(1389);
    node0.children();
    assertEquals(1389, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test147258,"public void test147258() throws Throwable {
    Node node0 = new Node(1389);
    node0.children();
    assertEquals((-1), node0.getSourcePosition());
}",0,
project,0,test148259,"public void test148259() throws Throwable {
    Node node0 = Node.newString(""79AK `an~"");
    // Undeclared exception!
    try {
        node0.getAncestor((-1671));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test149260,"public void test149260() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    Node node1 = node0.getAncestor(0);
    assertNotNull(node1);
}",1,
project,0,test149261,"public void test149261() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    Node node1 = node0.getAncestor(0);
    assertEquals(40, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test149262,"public void test149262() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    Node node1 = node0.getAncestor(0);
    assertEquals((-1), node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test150263,"public void test150263() throws Throwable {
    Node node0 = new Node(102);
    Node node1 = node0.getAncestor(102);
    assertNull(node1);
}",1,
project,0,test150264,"public void test150264() throws Throwable {
    Node node0 = new Node(102);
    Node node1 = node0.getAncestor(102);
    assertTrue(node0.isInc());
}",0,assertTrue(node0.isInc())
project,0,test151265,"public void test151265() throws Throwable {
    Node node0 = new Node(113);
    Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    node_AncestorIterable0.forEach(consumer0);
    assertTrue(node0.isWhile());
}",0,assertTrue(node0.isWhile())
project,0,test151266,"public void test151266() throws Throwable {
    Node node0 = new Node(113);
    Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    node_AncestorIterable0.forEach(consumer0);
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test151267,"public void test151267() throws Throwable {
    Node node0 = new Node(113);
    Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    node_AncestorIterable0.forEach(consumer0);
    assertEquals(113, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test152268,"public void test152268() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = node0.hasOneChild();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test152269,"public void test152269() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = node0.hasOneChild();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test152270,"public void test152270() throws Throwable {
    Node node0 = new Node(47);
    boolean boolean0 = node0.hasOneChild();
    assertEquals(47, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test153271,"public void test153271() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertEquals(217141, node1.getSourcePosition());
}",0,"assertEquals(1, node1.getSourcePosition())"
project,0,test153272,"public void test153272() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertTrue(boolean0);
}",0,
project,0,test153273,"public void test153273() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertTrue(node0.isGetProp());
}",0,assertTrue(node0.isGetProp())
project,0,test153274,"public void test153274() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0, 53, 53);
    boolean boolean0 = node1.hasOneChild();
    assertEquals(16, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test154275,"public void test154275() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(38, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test154276,"public void test154276() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(9877867, node2.getSourcePosition());
}",0,"assertEquals(0, node2.getSourcePosition())"
project,0,test154277,"public void test154277() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(1023, node2.getType());
}",0,"assertEquals(0, node2.getType())"
project,0,test154278,"public void test154278() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals(2, node2.getChildCount());
}",0,"assertEquals(1, node2.getChildCount())"
project,0,test154279,"public void test154279() throws Throwable {
    Node node0 = new Node((-29));
    Node node1 = new Node(38);
    Node node2 = new Node(1023, node1, node0, 2411, 2411);
    node2.hasOneChild();
    assertEquals((-1), node1.getLineno());
}",0,
project,0,test155280,"public void test155280() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.hasMoreThanOneChild();
    assertEquals(487809, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test155281,"public void test155281() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.hasMoreThanOneChild();
    assertEquals(40, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test156282,"public void test156282() throws Throwable {
    JSType[] jSTypeArray0 = new JSType[2];
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test156283,"public void test156283() throws Throwable {
    JSType[] jSTypeArray0 = new JSType[2];
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test156284,"public void test156284() throws Throwable {
    JSType[] jSTypeArray0 = new JSType[2];
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertTrue(node0.isParamList());
}",0,assertTrue(node0.isParamList())
project,0,test157285,"public void test157285() throws Throwable {
    Node node0 = new Node(76);
    node0.addChildrenToBack(node0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertTrue(node0.hasChildren());
}",0,assertFalse(node0.hasChildren())
project,0,test157286,"public void test157286() throws Throwable {
    Node node0 = new Node(76);
    node0.addChildrenToBack(node0);
    boolean boolean0 = node0.hasMoreThanOneChild();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test158287,"public void test158287() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test158288,"public void test158288() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertTrue(node0.isParamList());
}",0,assertTrue(node0.isParamList())
project,0,test158289,"public void test158289() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertEquals(1, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test158290,"public void test158290() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    boolean boolean0 = node0.hasChild(node0);
    assertEquals((-1), node0.getLineno());
}",1,
project,0,test159291,"public void test159291() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    node0.addChildToFront(node0);
    boolean boolean0 = node0.hasChild(node0);
    assertTrue(node0.hasChildren());
}",0,
project,0,test159292,"public void test159292() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    node0.addChildToFront(node0);
    boolean boolean0 = node0.hasChild(node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test160293,"public void test160293() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test160294,"public void test160294() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test160295,"public void test160295() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertTrue(node0.isBlock());
}",0,assertTrue(node0.isBlock())
project,0,test160296,"public void test160296() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    String string0 = node0.checkTreeEquals(node0);
    assertNull(string0);
}",0,
project,0,test161297,"public void test161297() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(1, node1.getChildCount());
}",0,"assertEquals(1, node1.getChildCount())"
project,0,test161298,"public void test161298() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(49152, node1.getSourcePosition());
}",0,"assertEquals(1, node1.getSourcePosition())"
project,0,test161299,"public void test161299() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(266305, node0.getSourcePosition());
}",0,
project,0,test161300,"public void test161300() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertTrue(node1.isInstanceOf());
}",0,assertTrue(node1.isInstanceOf())
project,0,test161301,"public void test161301() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test161302,"public void test161302() throws Throwable {
    Node node0 = new Node(65, 65, 65);
    Node node1 = new Node(52, node0, node0, 12, 0);
    Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node1);
    assertEquals(65, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test162303,"public void test162303() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals((-894), node2.getType());
}",0,"assertEquals(0, node2.getType())"
project,0,test162304,"public void test162304() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals(229433, node2.getSourcePosition());
}",0,"assertEquals(1, node2.getSourcePosition())"
project,0,test162305,"public void test162305() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertFalse(node1.hasMoreThanOneChild());
}",0,assertTrue(node1.hasMoreThanOneChild())
project,0,test162306,"public void test162306() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test162307,"public void test162307() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals((-894), node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test162308,"public void test162308() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    Node node1 = new Node((-894), node0, node0, node0, node0);
    Node node2 = new Node((-894), node1, 56, 57);
    node2.checkTreeEqualsImpl(node1);
    assertEquals(1, node2.getChildCount());
}",0,"assertEquals(1, node2.getChildCount())"
project,0,test163309,"public void test163309() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test163310,"public void test163310() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertEquals(83, node1.getType());
}",0,
project,0,test163311,"public void test163311() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertEquals(3, node1.getChildCount());
}",0,"assertEquals(0, node1.getChildCount())"
project,0,test163312,"public void test163312() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.U2U_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) functionType0);
    Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
    Node node1 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    assertEquals(83, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test164313,"public void test164313() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(29, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test164314,"public void test164314() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(29, node1.getType());
}",0,"assertEquals(1, node1.getType())"
project,0,test164315,"public void test164315() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test164316,"public void test164316() throws Throwable {
    Node node0 = new Node(29);
    Node node1 = new Node(29, node0, node0, node0, 43, 53);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertEquals(176181, node1.getSourcePosition());
}",0,"assertEquals(1, node1.getSourcePosition())"
project,0,test165317,"public void test165317() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertEquals(417894, node0.getSourcePosition());
}",0,
project,0,test165318,"public void test165318() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test165319,"public void test165319() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test165320,"public void test165320() throws Throwable {
    Node node0 = new Node(102, 102, 102);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node0);
    assertTrue(node0.isInc());
}",0,assertFalse(node0.isInc())
project,0,test166321,"public void test166321() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(421991, node0.getSourcePosition());
}",0,
project,0,test166322,"public void test166322() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test166323,"public void test166323() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(103, node0.getType());
}",0,
project,0,test166324,"public void test166324() throws Throwable {
    Node node0 = new Node(103, 103, 103);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test167325,"public void test167325() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test167326,"public void test167326() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test167327,"public void test167327() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals(37, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test167328,"public void test167328() throws Throwable {
    Node node0 = new Node(37);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node0);
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test168329,"public void test168329() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(95, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test168330,"public void test168330() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(1, node1.getChildCount());
}",0,"assertEquals(0, node1.getChildCount())"
project,0,test168331,"public void test168331() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(0, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test168332,"public void test168332() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test168333,"public void test168333() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertTrue(node0.isFunction());
}",0,assertTrue(node0.isFunction())
project,0,test169334,"public void test169334() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test169335,"public void test169335() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(1, node1.getChildCount());
}",0,"assertEquals(0, node1.getChildCount())"
project,0,test169336,"public void test169336() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(155698, node1.getSourcePosition());
}",0,"assertEquals(1, node1.getSourcePosition())"
project,0,test169337,"public void test169337() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(15, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test169338,"public void test169338() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test169339,"public void test169339() throws Throwable {
    Node node0 = Node.newNumber((double) (-885), (-885), (-885));
    Node node1 = new Node(15, node0, node0, 38, 50);
    boolean boolean0 = node1.isEquivalentToShallow(node1);
    assertEquals(39, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test170340,"public void test170340() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Element"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.isEquivalentToTyped(node1);
    assertEquals(1, node1.getChildCount());
}",0,
project,0,test170341,"public void test170341() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Element"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.isEquivalentToTyped(node1);
    assertEquals(83, node1.getType());
}",0,
project,0,test170342,"public void test170342() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Object#Element"");
    JSType[] jSTypeArray0 = new JSType[1];
    jSTypeArray0[0] = (JSType) templateType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
    boolean boolean0 = node0.isEquivalentToTyped(node1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test171343,"public void test171343() throws Throwable {
    Node node0 = new Node(38, 38, 38);
    // Undeclared exception!
    try {
        node0.getQualifiedName();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME 38 is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test172344,"public void test172344() throws Throwable {
    Node node0 = Node.newString(""n"");
    node0.setType(38);
    node0.getQualifiedName();
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test173345,"public void test173345() throws Throwable {
    Node node0 = Node.newString("""");
    node0.setType(38);
    node0.getQualifiedName();
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test174346,"public void test174346() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    Node node1 = new Node(42, node0, node0);
    node0.addChildrenToBack(node1);
    // Undeclared exception!
    try {
        node0.getQualifiedName();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // THIS is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test175347,"public void test175347() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    assertTrue(node1.hasOneChild());
}",0,assertFalse(node1.hasOneChild())
project,0,test175348,"public void test175348() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    assertEquals(16, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test175349,"public void test175349() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    node0.getQualifiedName();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(1, node0.getCharno())"
project,0,test175350,"public void test175350() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0, node0, node0, node0);
    node0.addChildrenToBack(node1);
    node0.getQualifiedName();
    assertEquals(33, node0.getType());
}",0,
project,0,test176351,"public void test176351() throws Throwable {
    Node node0 = new Node(33, 18, 18);
    // Undeclared exception!
    try {
        node0.isQualifiedName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test177352,"public void test177352() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isQualifiedName();
    assertEquals(122910, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test177353,"public void test177353() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isQualifiedName();
    assertTrue(node0.isNew());
}",0,assertTrue(node0.isNew())
project,0,test178354,"public void test178354() throws Throwable {
    Node node0 = Node.newString("""");
    assertFalse(node0.isName());
}",0,assertTrue(node0.isName())
project,0,test178355,"public void test178355() throws Throwable {
    Node node0 = Node.newString("""");
    node0.setType(38);
    node0.isQualifiedName();
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test179356,"public void test179356() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isQualifiedName();
    assertTrue(boolean0);
}",0,
project,0,test179357,"public void test179357() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isQualifiedName();
    assertEquals(172074, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test180358,"public void test180358() throws Throwable {
    Node node0 = Node.newString(""FUNCTONPROTTYPE"");
    assertFalse(node0.isName());
}",0,assertTrue(node0.isName())
project,0,test180359,"public void test180359() throws Throwable {
    Node node0 = Node.newString(""FUNCTONPROTTYPE"");
    node0.setType(38);
    boolean boolean0 = node0.isQualifiedName();
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test180360,"public void test180360() throws Throwable {
    Node node0 = Node.newString(""FUNCTONPROTTYPE"");
    node0.setType(38);
    boolean boolean0 = node0.isQualifiedName();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test181361,"public void test181361() throws Throwable {
    Node node0 = new Node(33, 33, 33);
    // Undeclared exception!
    try {
        node0.isUnscopedQualifiedName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test182362,"public void test182362() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isUnscopedQualifiedName();
    assertEquals(122910, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test182363,"public void test182363() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isUnscopedQualifiedName();
    assertTrue(node0.isNew());
}",0,assertTrue(node0.isNew())
project,0,test183364,"public void test183364() throws Throwable {
    Node node0 = new Node(38);
    // Undeclared exception!
    try {
        node0.isUnscopedQualifiedName();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",0,
project,0,test184365,"public void test184365() throws Throwable {
    Node node0 = Node.newString(""4"");
    assertFalse(node0.isName());
}",0,assertTrue(node0.isName())
project,0,test184366,"public void test184366() throws Throwable {
    Node node0 = Node.newString(""4"");
    node0.setType(38);
    boolean boolean0 = node0.isUnscopedQualifiedName();
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test184367,"public void test184367() throws Throwable {
    Node node0 = Node.newString(""4"");
    node0.setType(38);
    boolean boolean0 = node0.isUnscopedQualifiedName();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test185369,"public void test185369() throws Throwable {
    Node node0 = Node.newString("""");
    node0.setType(38);
    node0.isUnscopedQualifiedName();
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test186370,"public void test186370() throws Throwable {
    Node node0 = new Node(29, 29, 29);
    // Undeclared exception!
    try {
        node0.detachFromParent();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test187371,"public void test187371() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    assertEquals(16, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test187372,"public void test187372() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    assertTrue(node1.hasChildren());
}",0,assertFalse(node1.hasChildren())
project,0,test187373,"public void test187373() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    assertEquals((-1), node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test187374,"public void test187374() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    Node node2 = node0.detachFromParent();
    assertEquals(33, node2.getType());
}",0,"assertEquals(0, node2.getType())"
project,0,test187375,"public void test187375() throws Throwable {
    Node node0 = new Node(33);
    Node node1 = new Node(16, node0);
    Node node2 = node0.detachFromParent();
    assertEquals((-1), node2.getSourcePosition());
}",0,"assertEquals(0, node2.getSourcePosition())"
project,0,test188376,"public void test188376() throws Throwable {
    Node node0 = new Node(0, 0, 0);
    node0.removeFirstChild();
    assertEquals(0, node0.getSourcePosition());
}",0,
project,0,test188377,"public void test188377() throws Throwable {
    Node node0 = new Node(0, 0, 0);
    node0.removeFirstChild();
    assertEquals(0, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test189378,"public void test189378() throws Throwable {
    Node node0 = new Node(2792, 2792, 2792);
    Node node1 = new Node(56, node0, node0, 15, 4);
    assertTrue(node1.hasOneChild());
}",0,assertFalse(node1.hasOneChild())
project,0,test189379,"public void test189379() throws Throwable {
    Node node0 = new Node(2792, 2792, 2792);
    Node node1 = new Node(56, node0, node0, 15, 4);
    node1.detachChildren();
    assertEquals(61444, node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test190380,"public void test190380() throws Throwable {
    Node node0 = Node.newString(""}m\""{${/l7jQS0b5f\""'V"");
    // Undeclared exception!
    try {
        node0.removeChildAfter(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // prev is not a child of this node.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test191381,"public void test191381() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = new Node(56, node0, node0, node0);
    // Undeclared exception!
    try {
        node1.removeChildAfter(node0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // no next sibling.
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test192382,"public void test192382() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    assertFalse(node2.hasMoreThanOneChild());
}",0,assertTrue(node2.hasMoreThanOneChild())
project,0,test192383,"public void test192383() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    node2.removeChildAfter(node0);
    assertFalse(node2.hasOneChild());
}",0,assertTrue(node2.hasOneChild())
project,0,test193384,"public void test193384() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    assertEquals(1, node2.getChildCount());
}",0,"assertEquals(0, node2.getChildCount())"
project,0,test193385,"public void test193385() throws Throwable {
    Node node0 = Node.newString(""synh_U"");
    Node node1 = Node.newString(57, ""synh_U"", 12, 0);
    Node node2 = new Node(56, node1, node0, node1);
    node2.removeChildren();
    node2.removeChildAfter(node0);
    assertEquals(0, node1.getCharno());
}",0,
project,0,test194386,"public void test194386() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals(233503, node3.getSourcePosition());
}",0,"assertEquals(1, node3.getSourcePosition())"
project,0,test194387,"public void test194387() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals((-1695), node3.getType());
}",0,"assertEquals(0, node3.getType())"
project,0,test194388,"public void test194388() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertTrue(node2.hasChildren());
}",0,assertTrue(node2.hasChildren())
project,0,test194389,"public void test194389() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertTrue(node1.isString());
}",0,assertTrue(node1.isString())
project,0,test194390,"public void test194390() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals(2, node3.getChildCount());
}",0,"assertEquals(0, node3.getChildCount())"
project,0,test194391,"public void test194391() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    Node node1 = node0.cloneNode();
    Node node2 = new Node((-1695), node0, node1, 57, 31);
    Node node3 = node2.cloneTree();
    assertEquals((-1), node1.getLineno());
}",0,"assertEquals(0, node1.getLineno())"
project,0,test195392,"public void test195392() throws Throwable {
    Node node0 = new Node(2747, 2747, 2747);
    SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(""<invalid>"", false);
    node0.setStaticSourceFile(simpleSourceFile0);
    // Undeclared exception!
    try {
        node0.replaceChild(node0, node0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",1,
project,0,test196393,"public void test196393() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    assertFalse(node1.hasMoreThanOneChild());
}",0,assertTrue(node1.hasMoreThanOneChild())
project,0,test196394,"public void test196394() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    Node node2 = node1.copyInformationFromForTree(node0);
    assertEquals(4095, node2.getType());
}",0,"assertEquals(0, node2.getType())"
project,0,test196395,"public void test196395() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    Node node2 = node1.copyInformationFromForTree(node0);
    assertEquals(39, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test196396,"public void test196396() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    Node node1 = new Node(4095, node0, node0, node0);
    Node node2 = node1.copyInformationFromForTree(node0);
    assertEquals((-1), node2.getCharno());
}",0,
project,0,test197397,"public void test197397() throws Throwable {
    Node node0 = new Node((-894));
    Node node1 = new Node(53, node0, node0, node0, 12, 31);
    node1.useSourceInfoFromForTree(node0);
    assertEquals((-1), node1.getLineno());
}",0,"assertEquals(1, node1.getLineno())"
project,0,test198398,"public void test198398() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertEquals(95, node2.getType());
}",0,"assertEquals(1, node2.getType())"
project,0,test198399,"public void test198399() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertTrue(node2.hasOneChild());
}",0,
project,0,test198400,"public void test198400() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertEquals(105, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test198401,"public void test198401() throws Throwable {
    Node node0 = new Node(105);
    Node node1 = new Node(95, node0, node0, node0, node0);
    Node node2 = node1.useSourceInfoIfMissingFromForTree(node0);
    assertEquals((-1), node2.getSourcePosition());
}",0,"assertEquals(1, node2.getSourcePosition())"
project,0,test199402,"public void test199402() throws Throwable {
    Node node0 = new Node(619, 619, 619);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    node0.addSuppression(""setIsNoSideEffectsCall only supports CALL and NEW nodes, got "");
    assertEquals(619, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test199403,"public void test199403() throws Throwable {
    Node node0 = new Node(619, 619, 619);
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    node0.setJSDocInfo(jSDocInfo0);
    node0.addSuppression(""setIsNoSideEffectsCall only supports CALL and NEW nodes, got "");
    assertEquals(2536043, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test200404,"public void test200404() throws Throwable {
    Node node0 = new Node(61);
    node0.addSuppression((String) null);
    assertEquals(61, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test201405,"public void test201405() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    assertEquals(30, node0.getType());
}",0,
project,0,test201406,"public void test201406() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.setSideEffectFlags(119);
    boolean boolean0 = node0.mayMutateArguments();
    assertEquals(122910, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test201407,"public void test201407() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.setSideEffectFlags(119);
    boolean boolean0 = node0.mayMutateArguments();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test202408,"public void test202408() throws Throwable {
    Node node0 = Node.newNumber(1.0);
    // Undeclared exception!
    try {
        node0.setSideEffectFlags(49);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",1,
project,0,test205412,"public void test205412() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.mayMutateArguments();
    assertEquals(512125, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test205413,"public void test205413() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.mayMutateArguments();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test205414,"public void test205414() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.mayMutateArguments();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test206415,"public void test206415() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
    Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
    node0.setSideEffectFlags(node_SideEffectFlags1);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(151589, node0.getSourcePosition());
}",0,
project,0,test206416,"public void test206416() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
    Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
    node0.setSideEffectFlags(node_SideEffectFlags1);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(37, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test206417,"public void test206417() throws Throwable {
    Node node0 = new Node(37, 37, 37);
    Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(2862);
    Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
    node0.setSideEffectFlags(node_SideEffectFlags1);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test207418,"public void test207418() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test207419,"public void test207419() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(64, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test207420,"public void test207420() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
    assertEquals(262208, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test208421,"public void test208421() throws Throwable {
    Node node0 = Node.newNumber((double) 118, 118, 118);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node0);
    assertEquals(483446, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test208423,"public void test208423() throws Throwable {
    Node node0 = Node.newNumber((double) 118, 118, 118);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node0);
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test209424,"public void test209424() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(188445, node1.getSourcePosition());
}",0,"assertEquals(1, node1.getSourcePosition())"
project,0,test209425,"public void test209425() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(16, node1.getType());
}",0,"assertEquals(0, node1.getType())"
project,0,test209427,"public void test209427() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(118, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test209428,"public void test209428() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    Node node1 = new Node(16, node0, node0, node0, node0, 46, 29);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch0);
    assertEquals(483446, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test210429,"public void test210429() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertTrue(node1.hasOneChild());
}",0,assertFalse(node1.hasOneChild())
project,0,test210430,"public void test210430() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test210431,"public void test210431() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertTrue(node0.isVar());
}",0,assertTrue(node0.isVar())
project,0,test210433,"public void test210433() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node1.getLineno());
}",0,"assertEquals(0, node1.getLineno())"
project,0,test210434,"public void test210434() throws Throwable {
    Node node0 = new Node(118);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node1, node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals(15, node1.getType());
}",0,"assertEquals(1, node1.getType())"
project,0,test211435,"public void test211435() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    assertNotNull(node_NodeMismatch0);
}",0,assertNotNull(node_NodeMismatch0)
project,0,test211437,"public void test211437() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals(15, node1.getType());
}",0,"assertEquals(1, node1.getType())"
project,0,test211438,"public void test211438() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test211439,"public void test211439() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertTrue(node1.hasOneChild());
}",0,assertFalse(node1.hasOneChild())
project,0,test211440,"public void test211440() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals((-1), node1.getSourcePosition());
}",0,"assertEquals(1, node1.getSourcePosition())"
project,0,test211441,"public void test211441() throws Throwable {
    Node node0 = new Node(98);
    Node node1 = new Node(15, node0, node0, (-534), 1);
    Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
    Node.NodeMismatch node_NodeMismatch1 = new Node.NodeMismatch(node0, node0);
    boolean boolean0 = node_NodeMismatch0.equals(node_NodeMismatch1);
    assertEquals(98, node0.getType());
}",0,
project,0,test212442,"public void test212442() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = node0.isAdd();
    assertEquals(66, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test212443,"public void test212443() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = node0.isAdd();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test212444,"public void test212444() throws Throwable {
    Node node0 = new Node(66, 66, 66);
    boolean boolean0 = node0.isAdd();
    assertEquals(270402, node0.getSourcePosition());
}",0,
project,0,test213445,"public void test213445() throws Throwable {
    Node node0 = Node.newString(""Number node not created with Node.newNumber"");
    node0.setType(21);
    boolean boolean0 = node0.isAdd();
    assertEquals(21, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test213446,"public void test213446() throws Throwable {
    Node node0 = Node.newString(""Number node not created with Node.newNumber"");
    node0.setType(21);
    boolean boolean0 = node0.isAdd();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test214447,"public void test214447() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isAnd();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test214448,"public void test214448() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isAnd();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test214449,"public void test214449() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isAnd();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test215450,"public void test215450() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = node0.isAnd();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test215451,"public void test215451() throws Throwable {
    Node node0 = new Node(101);
    boolean boolean0 = node0.isAnd();
    assertEquals((-1), node0.getSourcePosition());
}",0,
project,0,test216452,"public void test216452() throws Throwable {
    Node node0 = new Node(174, 174, 174);
    boolean boolean0 = node0.isArrayLit();
    assertEquals(712878, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test216453,"public void test216453() throws Throwable {
    Node node0 = new Node(174, 174, 174);
    boolean boolean0 = node0.isArrayLit();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test216454,"public void test216454() throws Throwable {
    Node node0 = new Node(174, 174, 174);
    boolean boolean0 = node0.isArrayLit();
    assertEquals(174, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test217455,"public void test217455() throws Throwable {
    Node node0 = new Node(63, 30, 42);
    boolean boolean0 = node0.isArrayLit();
    assertEquals(122922, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test217456,"public void test217456() throws Throwable {
    Node node0 = new Node(63, 30, 42);
    boolean boolean0 = node0.isArrayLit();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test218457,"public void test218457() throws Throwable {
    Node node0 = Node.newNumber((-406.6402727316181));
    boolean boolean0 = node0.isAssign();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test218458,"public void test218458() throws Throwable {
    Node node0 = Node.newNumber((-406.6402727316181));
    boolean boolean0 = node0.isAssign();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test218459,"public void test218459() throws Throwable {
    Node node0 = Node.newNumber((-406.6402727316181));
    boolean boolean0 = node0.isAssign();
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test219460,"public void test219460() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    node0.setType(86);
    boolean boolean0 = node0.isAssign();
    assertEquals(86, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test219461,"public void test219461() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    node0.setType(86);
    boolean boolean0 = node0.isAssign();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test220462,"public void test220462() throws Throwable {
    Node node0 = Node.newString(""NK"");
    boolean boolean0 = node0.isAssignAdd();
    assertEquals(40, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test220463,"public void test220463() throws Throwable {
    Node node0 = Node.newString(""NK"");
    boolean boolean0 = node0.isAssignAdd();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test220464,"public void test220464() throws Throwable {
    Node node0 = Node.newString(""NK"");
    boolean boolean0 = node0.isAssignAdd();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test221465,"public void test221465() throws Throwable {
    Node node0 = Node.newNumber((-1.0), 43, 43);
    node0.setType(93);
    boolean boolean0 = node0.isAssignAdd();
    assertEquals(93, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test221466,"public void test221466() throws Throwable {
    Node node0 = Node.newNumber((-1.0), 43, 43);
    node0.setType(93);
    boolean boolean0 = node0.isAssignAdd();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test222467,"public void test222467() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    node0.isBlock();
    assertEquals(118813, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test222468,"public void test222468() throws Throwable {
    Node node0 = Node.newString(29, ""YPZnfVon"", 29, 29);
    node0.isBlock();
    assertEquals(29, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test223469,"public void test223469() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isBlock();
    assertEquals(512125, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test223470,"public void test223470() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isBlock();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test224471,"public void test224471() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isBreak();
    assertEquals(139298, node0.getSourcePosition());
}",0,
project,0,test224472,"public void test224472() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isBreak();
    assertEquals(34, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test225473,"public void test225473() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertTrue(node1.hasOneChild());
}",0,assertFalse(node1.hasOneChild())
project,0,test225474,"public void test225474() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertEquals((-1), node1.getLineno());
}",0,
project,0,test225475,"public void test225475() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test225476,"public void test225476() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test225477,"public void test225477() throws Throwable {
    Node node0 = Node.newString(""YimPZnfCVFn"");
    Node node1 = new Node(116, node0, node0);
    boolean boolean0 = node1.isBreak();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test226478,"public void test226478() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isCall();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test226479,"public void test226479() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isCall();
    assertTrue(node0.isIn());
}",0,
project,0,test226480,"public void test226480() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isCall();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test227481,"public void test227481() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = node0.isCall();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test227482,"public void test227482() throws Throwable {
    Node node0 = new Node(37);
    boolean boolean0 = node0.isCall();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test228483,"public void test228483() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isCase();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test228484,"public void test228484() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isCase();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test228485,"public void test228485() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isCase();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test229486,"public void test229486() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test229487,"public void test229487() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertTrue(node0.isParamList());
}",0,assertTrue(node0.isParamList())
project,0,test229488,"public void test229488() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertFalse(node1.hasMoreThanOneChild());
}",0,
project,0,test229489,"public void test229489() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
    JSType jSType0 = modificationVisitor0.caseNumberType();
    JSType jSType1 = modificationVisitor0.caseStringType();
    JSType[] jSTypeArray0 = new JSType[7];
    TemplateType templateType0 = jSTypeRegistry0.createTemplateType(""Not declared as a type name"");
    jSTypeArray0[0] = (JSType) templateType0;
    jSTypeArray0[1] = jSType1;
    jSTypeArray0[2] = jSType0;
    jSTypeArray0[3] = jSType1;
    jSTypeArray0[4] = jSType0;
    jSTypeArray0[5] = jSType1;
    jSTypeArray0[6] = jSType0;
    Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
    Node node1 = new Node(111, node0, node0, node0);
    boolean boolean0 = node1.isCase();
    assertEquals(7, node0.getChildCount());
}",0,"assertEquals(1, node0.getChildCount())"
project,0,test230490,"public void test230490() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    node0.isCast();
    assertEquals(117, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test230491,"public void test230491() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    node0.isCast();
    assertEquals(3650427, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test231492,"public void test231492() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isCast();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test231493,"public void test231493() throws Throwable {
    Node node0 = new Node(155);
    boolean boolean0 = node0.isCast();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test232494,"public void test232494() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isCatch();
    assertTrue(node0.isLabel());
}",0,assertFalse(node0.isLabel())
project,0,test232495,"public void test232495() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isCatch();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test232496,"public void test232496() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isCatch();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test233497,"public void test233497() throws Throwable {
    Node node0 = new Node(120, 120, 120);
    boolean boolean0 = node0.isCatch();
    assertEquals(491640, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test233498,"public void test233498() throws Throwable {
    Node node0 = new Node(120, 120, 120);
    boolean boolean0 = node0.isCatch();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test234499,"public void test234499() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isComma();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test234500,"public void test234500() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isComma();
    assertTrue(node0.isNew());
}",0,
project,0,test234501,"public void test234501() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isComma();
    assertEquals(122910, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test235502,"public void test235502() throws Throwable {
    Node node0 = Node.newString(118, ""\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA"");
    node0.setType(85);
    boolean boolean0 = node0.isComma();
    assertEquals(85, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test235503,"public void test235503() throws Throwable {
    Node node0 = Node.newString(118, ""\u0000\u00AD\u0600\u06DD\u070F\u1680\u180E\u2000\u2028\u205F\u206A\u3000\uD800\uFEFF\uFFF9\uFFFA"");
    node0.setType(85);
    boolean boolean0 = node0.isComma();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test236504,"public void test236504() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isContinue();
    assertEquals(122910, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test236505,"public void test236505() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isContinue();
    assertEquals(30, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test236506,"public void test236506() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isContinue();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test237507,"public void test237507() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    boolean boolean0 = node0.isContinue();
    assertEquals(3650427, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test237508,"public void test237508() throws Throwable {
    Node node0 = Node.newString(117, ""{...}"", 891, 891);
    boolean boolean0 = node0.isContinue();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test238509,"public void test238509() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    boolean boolean0 = node0.isDebugger();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test238510,"public void test238510() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    boolean boolean0 = node0.isDebugger();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test238511,"public void test238511() throws Throwable {
    Node node0 = Node.newString(125, ""!y/5/Afx"");
    boolean boolean0 = node0.isDebugger();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test239512,"public void test239512() throws Throwable {
    Node node0 = new Node(152);
    boolean boolean0 = node0.isDebugger();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test239513,"public void test239513() throws Throwable {
    Node node0 = new Node(152);
    boolean boolean0 = node0.isDebugger();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test240514,"public void test240514() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDec();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test240515,"public void test240515() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDec();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test240516,"public void test240516() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDec();
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test241517,"public void test241517() throws Throwable {
    Node node0 = new Node(103, 30, 42);
    boolean boolean0 = node0.isDec();
    assertEquals(122922, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test241518,"public void test241518() throws Throwable {
    Node node0 = new Node(103, 30, 42);
    boolean boolean0 = node0.isDec();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test242519,"public void test242519() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isDefaultCase();
    assertEquals(105, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test242520,"public void test242520() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isDefaultCase();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test242521,"public void test242521() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isDefaultCase();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test243522,"public void test243522() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    boolean boolean0 = node0.isDefaultCase();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test243523,"public void test243523() throws Throwable {
    Node node0 = new Node(112, 2761, (-18));
    boolean boolean0 = node0.isDefaultCase();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test244524,"public void test244524() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDelProp();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test244525,"public void test244525() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDelProp();
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test244526,"public void test244526() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    boolean boolean0 = node0.isDelProp();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test245527,"public void test245527() throws Throwable {
    Node node0 = new Node(31, 1547, 31);
    boolean boolean0 = node0.isDelProp();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test245528,"public void test245528() throws Throwable {
    Node node0 = new Node(31, 1547, 31);
    boolean boolean0 = node0.isDelProp();
    assertEquals(6336543, node0.getSourcePosition());
}",0,
project,0,test246529,"public void test246529() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = node0.isDo();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test246530,"public void test246530() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = node0.isDo();
    assertTrue(node0.isThrow());
}",0,assertTrue(node0.isThrow())
project,0,test246531,"public void test246531() throws Throwable {
    Node node0 = new Node(49, 49, 49);
    boolean boolean0 = node0.isDo();
    assertEquals(200753, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test247532,"public void test247532() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = node0.isDo();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test247533,"public void test247533() throws Throwable {
    Node node0 = new Node(114);
    boolean boolean0 = node0.isDo();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test248534,"public void test248534() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isEmpty();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test248535,"public void test248535() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isEmpty();
    assertEquals(105, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test248536,"public void test248536() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isEmpty();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test249537,"public void test249537() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = node0.isEmpty();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test249538,"public void test249538() throws Throwable {
    Node node0 = new Node(124);
    boolean boolean0 = node0.isEmpty();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test250539,"public void test250539() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isExprResult();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test250540,"public void test250540() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isExprResult();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test250541,"public void test250541() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isExprResult();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test251542,"public void test251542() throws Throwable {
    Node node0 = Node.newString(130, ""~XVY4[/7}"", 130, 130);
    boolean boolean0 = node0.isExprResult();
    assertEquals(532610, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test251543,"public void test251543() throws Throwable {
    Node node0 = Node.newString(130, ""~XVY4[/7}"", 130, 130);
    boolean boolean0 = node0.isExprResult();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test252544,"public void test252544() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    boolean boolean0 = node0.isFalse();
    assertFalse(boolean0);
}",0,
project,0,test252545,"public void test252545() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    boolean boolean0 = node0.isFalse();
    assertTrue(node0.isNumber());
}",0,assertFalse(node0.isNumber())
project,0,test252546,"public void test252546() throws Throwable {
    Node node0 = Node.newNumber(3292.378991876403);
    boolean boolean0 = node0.isFalse();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test253547,"public void test253547() throws Throwable {
    Node node0 = new Node(43, 43, 39);
    boolean boolean0 = node0.isFalse();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test253548,"public void test253548() throws Throwable {
    Node node0 = new Node(43, 43, 39);
    boolean boolean0 = node0.isFalse();
    assertEquals(176167, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test254549,"public void test254549() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isFor();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test254550,"public void test254550() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isFor();
    assertEquals(29, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test254551,"public void test254551() throws Throwable {
    Node node0 = new Node(29);
    boolean boolean0 = node0.isFor();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test255552,"public void test255552() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    boolean boolean0 = node0.isFor();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test255553,"public void test255553() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    boolean boolean0 = node0.isFor();
    assertEquals(471155, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test256554,"public void test256554() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isGetterDef();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test256555,"public void test256555() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isGetterDef();
    assertTrue(node0.isStringKey());
}",0,assertTrue(node0.isStringKey())
project,0,test256556,"public void test256556() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isGetterDef();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test257557,"public void test257557() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertEquals(20479, node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test257558,"public void test257558() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test257559,"public void test257559() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertEquals(536940543, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test257560,"public void test257560() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertTrue(node1.hasOneChild());
}",0,
project,0,test257561,"public void test257561() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 131088, 131088);
    Node node1 = new Node(147, node0, node0, 4, 4095);
    boolean boolean0 = node1.isGetterDef();
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test258562,"public void test258562() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isGetElem();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test258563,"public void test258563() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isGetElem();
    assertEquals(630938, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test258564,"public void test258564() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isGetElem();
    assertEquals(154, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test259565,"public void test259565() throws Throwable {
    Node node0 = Node.newNumber((double) 83, 10, 125);
    Node node1 = new Node(35, node0, node0, node0);
    boolean boolean0 = node1.isGetElem();
    assertEquals(41085, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test259566,"public void test259566() throws Throwable {
    Node node0 = Node.newNumber((double) 83, 10, 125);
    Node node1 = new Node(35, node0, node0, node0);
    boolean boolean0 = node1.isGetElem();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test259567,"public void test259567() throws Throwable {
    Node node0 = Node.newNumber((double) 83, 10, 125);
    Node node1 = new Node(35, node0, node0, node0);
    boolean boolean0 = node1.isGetElem();
    assertEquals(39, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test260568,"public void test260568() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isGetProp();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test260569,"public void test260569() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isGetProp();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test260570,"public void test260570() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isGetProp();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test261571,"public void test261571() throws Throwable {
    Node node0 = Node.newString(33, ""com.google.common.collect.Maps$ImprovedAbstractMap"", 4095, 164);
    boolean boolean0 = node0.isGetProp();
    assertEquals(16773284, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test261572,"public void test261572() throws Throwable {
    Node node0 = Node.newString(33, ""com.google.common.collect.Maps$ImprovedAbstractMap"", 4095, 164);
    boolean boolean0 = node0.isGetProp();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test262573,"public void test262573() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isHook();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test262574,"public void test262574() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isHook();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test262575,"public void test262575() throws Throwable {
    Node node0 = new Node((-3765));
    boolean boolean0 = node0.isHook();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test263576,"public void test263576() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = new Node(98, node0, node0, node0);
    boolean boolean0 = node1.isHook();
    assertEquals(37, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test263577,"public void test263577() throws Throwable {
    Node node0 = new Node(37);
    Node node1 = new Node(98, node0, node0, node0);
    boolean boolean0 = node1.isHook();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test264578,"public void test264578() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = node0.isIf();
    assertEquals(118, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test264579,"public void test264579() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = node0.isIf();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test264580,"public void test264580() throws Throwable {
    Node node0 = new Node(118, 118, 118);
    boolean boolean0 = node0.isIf();
    assertEquals(483446, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test265581,"public void test265581() throws Throwable {
    Node node0 = new Node(108, 50, 108);
    boolean boolean0 = node0.isIf();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test265582,"public void test265582() throws Throwable {
    Node node0 = new Node(108, 50, 108);
    boolean boolean0 = node0.isIf();
    assertEquals(204908, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test266583,"public void test266583() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isIn();
    assertEquals(34, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test266584,"public void test266584() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    node0.isIn();
    assertEquals(139298, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test267585,"public void test267585() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isIn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test267586,"public void test267586() throws Throwable {
    Node node0 = new Node(51);
    boolean boolean0 = node0.isIn();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test268587,"public void test268587() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.isInc();
    assertEquals(487809, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test268588,"public void test268588() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    node0.isInc();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test269589,"public void test269589() throws Throwable {
    Node node0 = new Node(102, 30, 42);
    boolean boolean0 = node0.isInc();
    assertEquals(122922, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test269590,"public void test269590() throws Throwable {
    Node node0 = new Node(102, 30, 42);
    boolean boolean0 = node0.isInc();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test270591,"public void test270591() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isInstanceOf();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test270592,"public void test270592() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isInstanceOf();
    assertEquals(105, node0.getType());
}",0,
project,0,test270593,"public void test270593() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isInstanceOf();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test271594,"public void test271594() throws Throwable {
    Node node0 = new Node(52, 52, 52);
    boolean boolean0 = node0.isInstanceOf();
    assertEquals(213044, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test271595,"public void test271595() throws Throwable {
    Node node0 = new Node(52, 52, 52);
    boolean boolean0 = node0.isInstanceOf();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test272596,"public void test272596() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isLabel();
    assertEquals(125, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test272597,"public void test272597() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isLabel();
    assertEquals(512125, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test272598,"public void test272598() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isLabel();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test273599,"public void test273599() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isLabel();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test273600,"public void test273600() throws Throwable {
    Node node0 = new Node(126);
    boolean boolean0 = node0.isLabel();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test274601,"public void test274601() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isLabelName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test274602,"public void test274602() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isLabelName();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test274603,"public void test274603() throws Throwable {
    Node node0 = new Node(105);
    boolean boolean0 = node0.isLabelName();
    assertEquals(105, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test275604,"public void test275604() throws Throwable {
    Node node0 = new Node(153);
    boolean boolean0 = node0.isLabelName();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test275605,"public void test275605() throws Throwable {
    Node node0 = new Node(153);
    boolean boolean0 = node0.isLabelName();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test276606,"public void test276606() throws Throwable {
    Node node0 = Node.newNumber((-425.9));
    boolean boolean0 = node0.isName();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test276607,"public void test276607() throws Throwable {
    Node node0 = Node.newNumber((-425.9));
    boolean boolean0 = node0.isName();
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test276608,"public void test276608() throws Throwable {
    Node node0 = Node.newNumber((-425.9));
    boolean boolean0 = node0.isName();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test277609,"public void test277609() throws Throwable {
    Node node0 = Node.newString(""SFfQ\""0OkEZ}a(E"");
    assertFalse(node0.isName());
}",0,assertTrue(node0.isName())
project,0,test277610,"public void test277610() throws Throwable {
    Node node0 = Node.newString(""SFfQ\""0OkEZ}a(E"");
    node0.setType(38);
    boolean boolean0 = node0.isName();
    assertEquals(38, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test277611,"public void test277611() throws Throwable {
    Node node0 = Node.newString(""SFfQ\""0OkEZ}a(E"");
    node0.setType(38);
    boolean boolean0 = node0.isName();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test278612,"public void test278612() throws Throwable {
    Node node0 = new Node(985, 985, 985);
    node0.isNE();
    assertEquals(4035545, node0.getSourcePosition());
}",0,
project,0,test278613,"public void test278613() throws Throwable {
    Node node0 = new Node(985, 985, 985);
    node0.isNE();
    assertEquals(985, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test279614,"public void test279614() throws Throwable {
    Node node0 = new Node(13, 13, 32);
    boolean boolean0 = node0.isNE();
    assertEquals(53280, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test279615,"public void test279615() throws Throwable {
    Node node0 = new Node(13, 13, 32);
    boolean boolean0 = node0.isNE();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test280616,"public void test280616() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNew();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test280617,"public void test280617() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNew();
    assertTrue(node0.isString());
}",0,assertTrue(node0.isString())
project,0,test280618,"public void test280618() throws Throwable {
    Node node0 = Node.newString(""FUANCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNew();
    assertEquals((-1), node0.getLineno());
}",0,
project,0,test281619,"public void test281619() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = node0.isNew();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test281620,"public void test281620() throws Throwable {
    Node node0 = new Node(30);
    boolean boolean0 = node0.isNew();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test282621,"public void test282621() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNot();
    assertFalse(boolean0);
}",0,
project,0,test282622,"public void test282622() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNot();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test282623,"public void test282623() throws Throwable {
    Node node0 = Node.newString(""FUNCTION_PROTOTYPE"");
    boolean boolean0 = node0.isNot();
    assertEquals(40, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test283624,"public void test283624() throws Throwable {
    Node node0 = new Node(26, 26, 26);
    boolean boolean0 = node0.isNot();
    assertEquals(106522, node0.getSourcePosition());
}",0,
project,0,test283625,"public void test283625() throws Throwable {
    Node node0 = new Node(26, 26, 26);
    boolean boolean0 = node0.isNot();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test284626,"public void test284626() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isNull();
    assertEquals(172074, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test284627,"public void test284627() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isNull();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test284628,"public void test284628() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    boolean boolean0 = node0.isNull();
    assertEquals(42, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test285629,"public void test285629() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = node0.isNull();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test285630,"public void test285630() throws Throwable {
    Node node0 = new Node(41);
    boolean boolean0 = node0.isNull();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test286631,"public void test286631() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isNumber();
    assertEquals(630938, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test286632,"public void test286632() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isNumber();
    assertEquals(154, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test286633,"public void test286633() throws Throwable {
    Node node0 = new Node(154, 154, 154);
    boolean boolean0 = node0.isNumber();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test287634,"public void test287634() throws Throwable {
    Node node0 = Node.newNumber((-0.8877167227904719), 131, 131);
    boolean boolean0 = node0.isNumber();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test287635,"public void test287635() throws Throwable {
    Node node0 = Node.newNumber((-0.8877167227904719), 131, 131);
    boolean boolean0 = node0.isNumber();
    assertEquals(536707, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test288636,"public void test288636() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    node0.isObjectLit();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test288637,"public void test288637() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    node0.isObjectLit();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test289638,"public void test289638() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.isObjectLit();
    assertEquals(262208, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test289639,"public void test289639() throws Throwable {
    Node node0 = new Node(64, 64, 64);
    boolean boolean0 = node0.isObjectLit();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test290640,"public void test290640() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isOr();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test290641,"public void test290641() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isOr();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test290642,"public void test290642() throws Throwable {
    Node node0 = new Node((-3765), (-3765), (-3765));
    boolean boolean0 = node0.isOr();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test291643,"public void test291643() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = node0.isOr();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test291644,"public void test291644() throws Throwable {
    Node node0 = new Node(100);
    boolean boolean0 = node0.isOr();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test292645,"public void test292645() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isParamList();
    assertEquals(118, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test292646,"public void test292646() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isParamList();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test292647,"public void test292647() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isParamList();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test293648,"public void test293648() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    node0.setType(83);
    boolean boolean0 = node0.isParamList();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test294649,"public void test294649() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isRegExp();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test294650,"public void test294650() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isRegExp();
    assertEquals(118, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test294651,"public void test294651() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isRegExp();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
project,0,test295652,"public void test295652() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = node0.isReturn();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test295653,"public void test295653() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = node0.isReturn();
    assertEquals(34, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test295654,"public void test295654() throws Throwable {
    Node node0 = new Node(34);
    boolean boolean0 = node0.isReturn();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test296655,"public void test296655() throws Throwable {
    Node node0 = Node.newString(4, ""Q7nJkxgf&!.MrtG]"", 53, 15);
    boolean boolean0 = node0.isReturn();
    assertEquals(217103, node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test296656,"public void test296656() throws Throwable {
    Node node0 = Node.newString(4, ""Q7nJkxgf&!.MrtG]"", 53, 15);
    boolean boolean0 = node0.isReturn();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test297657,"public void test297657() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    node0.isScript();
    assertEquals(512125, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test297658,"public void test297658() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    node0.isScript();
    assertTrue(node0.isBlock());
}",0,assertTrue(node0.isBlock())
project,0,test298659,"public void test298659() throws Throwable {
    Node node0 = Node.newString(132, ""sBc/l"", 132, 132);
    boolean boolean0 = node0.isScript();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test298660,"public void test298660() throws Throwable {
    Node node0 = Node.newString(132, ""sBc/l"", 132, 132);
    boolean boolean0 = node0.isScript();
    assertEquals(540804, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test299661,"public void test299661() throws Throwable {
    Node node0 = new Node(33, 18, 18);
    node0.isSetterDef();
    assertEquals(73746, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test299662,"public void test299662() throws Throwable {
    Node node0 = new Node(33, 18, 18);
    node0.isSetterDef();
    assertEquals(33, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test300663,"public void test300663() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertFalse(node0.isSetterDef());
}",0,
project,0,test300664,"public void test300664() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test300665,"public void test300665() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertTrue(node1.hasOneChild());
}",0,assertFalse(node1.hasOneChild())
project,0,test300666,"public void test300666() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertEquals(206692, node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test300667,"public void test300667() throws Throwable {
    Node node0 = new Node((-3765));
    Node node1 = new Node(148, node0, node0, 50, 1892);
    boolean boolean0 = node1.isSetterDef();
    assertEquals((-3765), node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test301668,"public void test301668() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = node0.isString();
    assertEquals(99, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test301669,"public void test301669() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = node0.isString();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test301670,"public void test301670() throws Throwable {
    Node node0 = new Node(99);
    boolean boolean0 = node0.isString();
    assertEquals((-1), node0.getLineno());
}",1,
project,0,test302671,"public void test302671() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    boolean boolean0 = node0.isString();
    assertEquals(487809, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test302672,"public void test302672() throws Throwable {
    Node node0 = Node.newString(""!"", 119, 385);
    boolean boolean0 = node0.isString();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test303673,"public void test303673() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isStringKey();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test303674,"public void test303674() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isStringKey();
    assertTrue(node0.isVar());
}",0,
project,0,test303675,"public void test303675() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isStringKey();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test304676,"public void test304676() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isStringKey();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test304677,"public void test304677() throws Throwable {
    Node node0 = new Node(154);
    boolean boolean0 = node0.isStringKey();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test305678,"public void test305678() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    node0.isSwitch();
    assertEquals(42, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test305679,"public void test305679() throws Throwable {
    Node node0 = new Node(42, 42, 42);
    node0.isSwitch();
    assertEquals(172074, node0.getSourcePosition());
}",0,
project,0,test306680,"public void test306680() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = node0.isSwitch();
    assertEquals(450670, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test306681,"public void test306681() throws Throwable {
    Node node0 = new Node(110, 110, 110);
    boolean boolean0 = node0.isSwitch();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test307682,"public void test307682() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    node0.isThis();
    assertEquals(471155, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test307683,"public void test307683() throws Throwable {
    Node node0 = Node.newString(115, ""%aNA&O; \""eqvAM]s"", 115, 115);
    node0.isThis();
    assertEquals(115, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test308684,"public void test308684() throws Throwable {
    Node node0 = Node.newNumber((-425.92));
    assertFalse(node0.isThis());
}",0,assertTrue(node0.isThis())
project,0,test308685,"public void test308685() throws Throwable {
    Node node0 = Node.newNumber((-425.92));
    node0.setType(42);
    boolean boolean0 = node0.isThis();
    assertEquals(42, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test308686,"public void test308686() throws Throwable {
    Node node0 = Node.newNumber((-425.92));
    node0.setType(42);
    boolean boolean0 = node0.isThis();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test309687,"public void test309687() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isThrow();
    assertEquals(512125, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test309688,"public void test309688() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isThrow();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test309689,"public void test309689() throws Throwable {
    Node node0 = new Node(125, 125, 125);
    boolean boolean0 = node0.isThrow();
    assertTrue(node0.isBlock());
}",0,assertFalse(node0.isBlock())
project,0,test310690,"public void test310690() throws Throwable {
    Node node0 = new Node(49);
    boolean boolean0 = node0.isThrow();
    assertEquals((-1), node0.getLineno());
}",1,
project,0,test310691,"public void test310691() throws Throwable {
    Node node0 = new Node(49);
    boolean boolean0 = node0.isThrow();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test311692,"public void test311692() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isTrue();
    assertEquals(30, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test311693,"public void test311693() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isTrue();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test311694,"public void test311694() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    boolean boolean0 = node0.isTrue();
    assertEquals(122910, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test312695,"public void test312695() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test312696,"public void test312696() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertFalse(node0.isTrue());
}",0,assertTrue(node0.isTrue())
project,0,test312697,"public void test312697() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertEquals(8246, node1.getSourcePosition());
}",0,"assertEquals(0, node1.getSourcePosition())"
project,0,test312698,"public void test312698() throws Throwable {
    Node node0 = Node.newNumber((-474.9454345372132));
    Node node1 = new Node(44, node0, 2, 54);
    boolean boolean0 = node1.isTrue();
    assertEquals(39, node0.getType());
}",0,"assertEquals(1, node0.getType())"
project,0,test313699,"public void test313699() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    boolean boolean0 = node0.isTry();
    assertTrue(node0.isNumber());
}",0,assertTrue(node0.isNumber())
project,0,test313700,"public void test313700() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    boolean boolean0 = node0.isTry();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test313701,"public void test313701() throws Throwable {
    Node node0 = Node.newNumber((double) (-894), (-894), (-894));
    boolean boolean0 = node0.isTry();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test314702,"public void test314702() throws Throwable {
    Node node0 = new Node(77, 9, 77);
    boolean boolean0 = node0.isTry();
    assertEquals(36941, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test314703,"public void test314703() throws Throwable {
    Node node0 = new Node(77, 9, 77);
    boolean boolean0 = node0.isTry();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test315704,"public void test315704() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    boolean boolean0 = node0.isTypeOf();
    assertEquals(118813, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test315705,"public void test315705() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    boolean boolean0 = node0.isTypeOf();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test315706,"public void test315706() throws Throwable {
    Node node0 = Node.newNumber((double) 29, 29, 29);
    boolean boolean0 = node0.isTypeOf();
    assertEquals(39, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test316707,"public void test316707() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertFalse(node0.isTypeOf());
}",0,assertTrue(node0.isTypeOf())
project,0,test316708,"public void test316708() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test316709,"public void test316709() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertTrue(node0.isVoid());
}",0,assertFalse(node0.isVoid())
project,0,test316710,"public void test316710() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    Node node1 = new Node(32, node0);
    boolean boolean0 = node1.isTypeOf();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test317711,"public void test317711() throws Throwable {
    Node node0 = new Node(1035);
    boolean boolean0 = node0.isVar();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test317712,"public void test317712() throws Throwable {
    Node node0 = new Node(1035);
    boolean boolean0 = node0.isVar();
    assertEquals(1035, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test317713,"public void test317713() throws Throwable {
    Node node0 = new Node(1035);
    boolean boolean0 = node0.isVar();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test318714,"public void test318714() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isVar();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test318715,"public void test318715() throws Throwable {
    Node node0 = new Node(118);
    boolean boolean0 = node0.isVar();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(0, node0.getLineno())"
project,0,test319716,"public void test319716() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = node0.isVoid();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test319717,"public void test319717() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = node0.isVoid();
    assertEquals(34, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test319718,"public void test319718() throws Throwable {
    Node node0 = new Node(34, 34, 34);
    boolean boolean0 = node0.isVoid();
    assertEquals(139298, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test320719,"public void test320719() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    boolean boolean0 = node0.isVoid();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test320720,"public void test320720() throws Throwable {
    Node node0 = Node.newString(122, ""prev is not a child of this node."");
    boolean boolean0 = node0.isVoid();
    assertEquals((-1), node0.getSourcePosition());
}",0,"assertEquals(1, node0.getSourcePosition())"
project,0,test321721,"public void test321721() throws Throwable {
    Node node0 = new Node(152, 152, 152);
    boolean boolean0 = node0.isWhile();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test321722,"public void test321722() throws Throwable {
    Node node0 = new Node(152, 152, 152);
    boolean boolean0 = node0.isWhile();
    assertEquals(152, node0.getType());
}",0,"assertEquals(0, node0.getType())"
project,0,test321723,"public void test321723() throws Throwable {
    Node node0 = new Node(152, 152, 152);
    boolean boolean0 = node0.isWhile();
    assertEquals(622744, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test322724,"public void test322724() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isWhile();
    assertEquals((-1), node0.getLineno());
}",0,"assertEquals(1, node0.getLineno())"
project,0,test322725,"public void test322725() throws Throwable {
    Node node0 = new Node(113);
    boolean boolean0 = node0.isWhile();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test323726,"public void test323726() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isWith();
    assertEquals(122910, node0.getSourcePosition());
}",0,"assertEquals(0, node0.getSourcePosition())"
project,0,test323727,"public void test323727() throws Throwable {
    Node node0 = Node.newString(30, """", 30, 30);
    node0.isWith();
    assertTrue(node0.isNew());
}",0,assertTrue(node0.isNew())
project,0,test324728,"public void test324728() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = node0.isWith();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test324729,"public void test324729() throws Throwable {
    Node node0 = new Node(119);
    boolean boolean0 = node0.isWith();
    assertEquals((-1), node0.getCharno());
}",0,"assertEquals(0, node0.getCharno())"
