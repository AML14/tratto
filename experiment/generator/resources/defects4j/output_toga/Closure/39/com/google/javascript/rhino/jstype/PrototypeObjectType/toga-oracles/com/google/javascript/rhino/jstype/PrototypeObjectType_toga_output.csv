project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
    boolean boolean0 = indexedType0.matchesObjectContext();
    assertFalse(indexedType0.isNativeObjectType());
}",0,assertFalse(indexedType0.isNativeObjectType())
project,0,test001,"public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
    boolean boolean0 = indexedType0.matchesObjectContext();
    assertFalse(indexedType0.hasReferenceName());
}",0,assertTrue(indexedType0.hasReferenceName())
project,0,test002,"public void test002() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, recordType0, recordType0);
    boolean boolean0 = indexedType0.matchesObjectContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test013,"public void test013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.canBeCalled();
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test014,"public void test014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.canBeCalled();
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test025,"public void test025() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""v-bwxk+4%tE`lkM32"", jSDocInfo0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test026,"public void test026() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""v-bwxk+4%tE`lkM32"", jSDocInfo0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertEquals(1, int0);
}",0,
project,0,test037,"public void test037() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Named type with empty name component"", 3336, 3336);
    errorFunctionType0.setImplicitPrototype(namedType0);
    errorFunctionType0.setPropertyJSDocInfo(""v-bwxk+4%tE`lkM32"", jSDocInfo0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertEquals(Integer.MAX_VALUE, int0);
}",0,"assertEquals(0, int0)"
project,0,test038,"public void test038() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    NamedType namedType0 = new NamedType(jSTypeRegistry0, ""Named type with empty name component"", ""Named type with empty name component"", 3336, 3336);
    errorFunctionType0.setImplicitPrototype(namedType0);
    errorFunctionType0.setPropertyJSDocInfo(""v-bwxk+4%tE`lkM32"", jSDocInfo0);
    int int0 = errorFunctionType0.getPropertiesCount();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test049,"public void test049() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
    hashMap0.put(""a^vr(A?hM>"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    assertTrue(jSType0.isNominalType());
}",0,
project,0,test0410,"public void test0410() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
    hashMap0.put(""a^vr(A?hM>"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    jSTypeRegistry0.createRecordType(hashMap0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test0411,"public void test0411() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
    hashMap0.put(""a^vr(A?hM>"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    jSTypeRegistry0.createRecordType(hashMap0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test0512,"public void test0512() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "", ..."");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo("", ..."", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.defineProperty("", ..."", (JSType) null, true, (Node) null);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test0513,"public void test0513() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "", ..."");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo("", ..."", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.defineProperty("", ..."", (JSType) null, true, (Node) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0614,"public void test0614() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeDeclared(""Yf:&&rzG(+6ub~50("");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test0615,"public void test0615() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeDeclared(""Yf:&&rzG(+6ub~50("");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0716,"public void test0716() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Set<String> set0 = recordType0.getPropertyNames();
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test0718,"public void test0718() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Set<String> set0 = recordType0.getPropertyNames();
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test0819,"public void test0819() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""toString"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""toString"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,
project,0,test0820,"public void test0820() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""toString"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""toString"");
    assertTrue(boolean0);
}",0,
project,0,test0921,"public void test0921() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""Yf:&&rzG(+6ub~50("");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test0922,"public void test0922() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""toString"");
    boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(""Yf:&&rzG(+6ub~50("");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1023,"public void test1023() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.isPropertyInExterns(""Named type with empty name component"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1024,"public void test1024() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.isPropertyInExterns(""Named type with empty name component"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1025,"public void test1025() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.isPropertyInExterns(""Named type with empty name component"");
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test1126,"public void test1126() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""AApvF hS+1;U"");
    boolean boolean0 = errorFunctionType0.defineDeclaredProperty("""", (JSType) null, (Node) null);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1127,"public void test1127() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""AApvF hS+1;U"");
    boolean boolean0 = errorFunctionType0.defineDeclaredProperty("""", (JSType) null, (Node) null);
    errorFunctionType0.isPropertyInExterns("""");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1228,"public void test1228() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    boolean boolean0 = errorFunctionType0.defineDeclaredProperty(""String"", errorFunctionType0, (Node) null);
    JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(errorFunctionType0);
    boolean boolean1 = errorFunctionType0.defineProperty(""String"", jSType_TypePair0.typeB, false, (Node) null);
    assertFalse(boolean1 == boolean0);
}",0,
project,0,test1229,"public void test1229() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    boolean boolean0 = errorFunctionType0.defineDeclaredProperty(""String"", errorFunctionType0, (Node) null);
    JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality(errorFunctionType0);
    boolean boolean1 = errorFunctionType0.defineProperty(""String"", jSType_TypePair0.typeB, false, (Node) null);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test1331,"public void test1331() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "",W0f6m~5KbMlm$-|"");
    boolean boolean0 = errorFunctionType0.removeProperty("",W0f6m~5KbMlm$-|"");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1332,"public void test1332() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "",W0f6m~5KbMlm$-|"");
    boolean boolean0 = errorFunctionType0.removeProperty("",W0f6m~5KbMlm$-|"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1433,"public void test1433() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""String"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.removeProperty(""String"");
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1434,"public void test1434() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""String"", jSDocInfo0);
    boolean boolean0 = errorFunctionType0.removeProperty(""String"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1535,"public void test1535() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
    indexedType0.getPropertyNode(""Unknown class name"");
    assertTrue(indexedType0.hasReferenceName());
}",0,
project,0,test1536,"public void test1536() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, errorFunctionType0);
    indexedType0.getPropertyNode(""Unknown class name"");
    assertTrue(indexedType0.isNominalConstructor());
}",0,
project,0,test1637,"public void test1637() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""SHNE"");
    Node node0 = Node.newString(""Named type with empty name component"");
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", node0, errorFunctionType0);
    boolean boolean0 = enumType0.defineProperty("""", errorFunctionType0, false, node0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1638,"public void test1638() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""SHNE"");
    Node node0 = Node.newString(""Named type with empty name component"");
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", node0, errorFunctionType0);
    boolean boolean0 = enumType0.defineProperty("""", errorFunctionType0, false, node0);
    Node node1 = enumType0.getPropertyNode("""");
    assertNotNull(node1);
}",0,
project,0,test1639,"public void test1639() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""SHNE"");
    Node node0 = Node.newString(""Named type with empty name component"");
    EnumType enumType0 = jSTypeRegistry0.createEnumType("""", node0, errorFunctionType0);
    boolean boolean0 = enumType0.defineProperty("""", errorFunctionType0, false, node0);
    Node node1 = enumType0.getPropertyNode("""");
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test1740,"public void test1740() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.getOwnPropertyJSDocInfo(""Not declared as a type name"");
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test1741,"public void test1741() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.getOwnPropertyJSDocInfo(""Not declared as a type name"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1842,"public void test1842() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""}"");
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getOwnPropertyJSDocInfo(""Not declared as a constructor"");
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test1843,"public void test1843() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""}"");
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(errorFunctionType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getOwnPropertyJSDocInfo(""Not declared as a constructor"");
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test1944,"public void test1944() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Yf:&&rzG(+6ub~50("");
    errorFunctionType0.setPropertyJSDocInfo(""Yf:&&rzG(+6ub~50("", (JSDocInfo) null);
    assertFalse(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test1945,"public void test1945() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Yf:&&rzG(+6ub~50("");
    errorFunctionType0.setPropertyJSDocInfo(""Yf:&&rzG(+6ub~50("", (JSDocInfo) null);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertFalse(errorFunctionType0.isNominalConstructor())
project,0,test2046,"public void test2046() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""vsg_G*!u^op@[q~d"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""vsg_G*!u^op@[q~d"", jSDocInfo0);
    errorFunctionType0.setPropertyJSDocInfo(""vsg_G*!u^op@[q~d"", jSDocInfo0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test2147,"public void test2147() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.setPropertyJSDocInfo(""{...}"", jSDocInfo0);
    assertTrue(recordType0.hasCachedValues());
}",0,assertFalse(recordType0.hasCachedValues())
project,0,test2248,"public void test2248() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2249,"public void test2249() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) numberType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test2350,"public void test2350() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesNumberContext();
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test2351,"public void test2351() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesNumberContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2352,"public void test2352() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesNumberContext();
    assertFalse(recordType0.isNativeObjectType());
}",0,assertTrue(recordType0.isNativeObjectType())
project,0,test2453,"public void test2453() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = Node.newString(""Unknown class name"", 843, (-521));
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, recordType0, true);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""Date"", (Node) null, arrowType0, recordType0, ""Date"", true, true);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2454,"public void test2454() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = Node.newString(""Unknown class name"", 843, (-521));
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, recordType0, true);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""Date"", (Node) null, arrowType0, recordType0, ""Date"", true, true);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test2455,"public void test2455() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = Node.newString(""Unknown class name"", 843, (-521));
    ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, recordType0, true);
    FunctionType functionType0 = new FunctionType(jSTypeRegistry0, ""Date"", (Node) null, arrowType0, recordType0, ""Date"", true, true);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test2556,"public void test2556() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesInt32Context();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2557,"public void test2557() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesInt32Context();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test2658,"public void test2658() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(instanceObjectType0.isNominalType());
}",0,assertTrue(instanceObjectType0.isNominalType())
project,0,test2659,"public void test2659() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    boolean boolean0 = instanceObjectType0.matchesNumberContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2760,"public void test2760() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""valueOf"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesNumberContext();
    assertFalse(recordType0.hasReferenceName());
}",0,assertTrue(recordType0.hasReferenceName())
project,0,test2761,"public void test2761() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(numberType0, (Node) null);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""valueOf"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesNumberContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2862,"public void test2862() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test2863,"public void test2863() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0, false);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2964,"public void test2964() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2965,"public void test2965() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test3066,"public void test3066() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3067,"public void test3067() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.DATE_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,
project,0,test3168,"public void test3168() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.matchesStringContext();
    assertTrue(jSType0.isNominalType());
}",0,assertTrue(jSType0.isNominalType())
project,0,test3169,"public void test3169() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    boolean boolean0 = jSType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3270,"public void test3270() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,
project,0,test3271,"public void test3271() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    boolean boolean0 = instanceObjectType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3372,"public void test3372() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, (Node) null);
    hashMap0.put(""toString"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesStringContext();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3373,"public void test3373() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, (Node) null);
    hashMap0.put(""toString"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    boolean boolean0 = recordType0.matchesStringContext();
    assertFalse(recordType0.hasReferenceName());
}",0,
project,0,test3474,"public void test3474() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    boolean boolean0 = errorFunctionType0.matchesStringContext();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test3475,"public void test3475() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    boolean boolean0 = errorFunctionType0.matchesStringContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3576,"public void test3576() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    boolean boolean0 = functionType0.matchesStringContext();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3677,"public void test3677() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    JSType jSType0 = errorFunctionType0.unboxesTo();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test3678,"public void test3678() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""v-bwxk+4%tE`lkM32"");
    JSType jSType0 = errorFunctionType0.unboxesTo();
    assertNull(jSType0);
}",0,
project,0,test3779,"public void test3779() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    JSType jSType0 = instanceObjectType0.unboxesTo();
    assertTrue(instanceObjectType0.isNominalType());
}",0,assertTrue(instanceObjectType0.isNominalType())
project,0,test3780,"public void test3780() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
    FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    JSType jSType0 = instanceObjectType0.unboxesTo();
    assertNotNull(jSType0);
}",0,
project,0,test3881,"public void test3881() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    BooleanType booleanType1 = (BooleanType) instanceObjectType0.unboxesTo();
    assertNotNull(booleanType1);
}",0,
project,0,test3882,"public void test3882() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) booleanType0.autoboxesTo();
    BooleanType booleanType1 = (BooleanType) instanceObjectType0.unboxesTo();
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertFalse(instanceObjectType0.hasReferenceName())
project,0,test3983,"public void test3983() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    JSType jSType1 = jSType0.unboxesTo();
    assertTrue(jSType0.isNominalType());
}",0,
project,0,test3984,"public void test3984() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    JSType jSType1 = jSType0.unboxesTo();
    assertNotNull(jSType1);
}",0,
project,0,test4085,"public void test4085() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    errorFunctionType0.toStringHelper(true);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test4186,"public void test4186() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
    hashMap0.put(""a^vr(A?hM>"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType0.toStringHelper(false);
    assertEquals(""{Unknown class name: Number, a^vr(A?hM>: Number}"", string0);
}",0,
project,0,test4288,"public void test4288() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    NumberType numberType0 = new NumberType(jSTypeRegistry0);
    JSType jSType0 = numberType0.autoboxesTo();
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
    hashMap0.put(""a^vr(A?hM>"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(jSType0, (Node) null);
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty1);
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    String string0 = recordType0.toStringHelper(false);
    assertEquals(""{Named type with empty name component: Number, Not declared as a constructor: Number, Unknown class name: Number, a^vr(A?hM>: Number, ...}"", string0);
}",0,
project,0,test4390,"public void test4390() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""\""AhCaX0 >)0-"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    instanceObjectType0.isNullable();
    // Undeclared exception!
    try {
        instanceObjectType0.setImplicitPrototype(functionType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test4491,"public void test4491() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType[] jSTypeArray0 = new JSType[1];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) recordType0, jSTypeArray0);
    assertFalse(recordType0.hasReferenceName());
}",0,assertFalse(recordType0.hasReferenceName())
project,0,test4492,"public void test4492() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType[] jSTypeArray0 = new JSType[1];
    FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) recordType0, jSTypeArray0);
    recordType0.setOwnerFunction(functionType0);
    String string0 = recordType0.toStringHelper(false);
    assertEquals(""null.prototype"", string0);
}",0,
project,0,test4593,"public void test4593() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
    boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
    assertTrue(boolean0);
}",0,
project,0,test4594,"public void test4594() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(errorFunctionType0, errorFunctionType0);
    boolean boolean0 = errorFunctionType0.isSubtype(functionType0);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test4695,"public void test4695() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.isString();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4696,"public void test4696() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    boolean boolean0 = errorFunctionType0.isString();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,
project,0,test4797,"public void test4797() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""yi=!DH/M-[<#k=cS"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertFalse(boolean0);
}",0,
project,0,test4798,"public void test4798() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""yi=!DH/M-[<#k=cS"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertTrue(instanceObjectType0.isNominalType());
}",0,assertTrue(instanceObjectType0.isNominalType())
project,0,test4799,"public void test4799() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""yi=!DH/M-[<#k=cS"", (Node) null);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = functionType0.isSubtype(instanceObjectType0);
    assertFalse(instanceObjectType0.isNativeObjectType());
}",0,assertTrue(instanceObjectType0.isNativeObjectType())
project,0,test48100,"public void test48100() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""{...}"", (Node) null);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    functionType0.setPrototypeBasedOn(unknownType0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    assertTrue(instanceObjectType0.hasReferenceName());
}",0,assertTrue(instanceObjectType0.hasReferenceName())
project,0,test48101,"public void test48101() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""{...}"", (Node) null);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    functionType0.setPrototypeBasedOn(unknownType0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    assertTrue(boolean0);
}",0,
project,0,test48102,"public void test48102() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, ""{...}"", (Node) null);
    UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
    functionType0.setPrototypeBasedOn(unknownType0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, functionType0);
    boolean boolean0 = instanceObjectType0.isSubtype(functionType0);
    assertFalse(instanceObjectType0.hasCachedValues());
}",0,assertTrue(instanceObjectType0.hasCachedValues())
project,0,test49103,"public void test49103() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""`Ec"", (Node) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    errorFunctionType0.getSuperClassConstructor();
    errorFunctionType0.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
    assertTrue(functionType0.hasCachedValues());
}",0,assertTrue(functionType0.hasCachedValues())
project,0,test49104,"public void test49104() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(""`Ec"", (Node) null);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Unknown class name"");
    errorFunctionType0.getSuperClassConstructor();
    errorFunctionType0.setPrototypeBasedOn((ObjectType) functionType0, (Node) null);
    assertFalse(functionType0.isNominalConstructor());
}",0,
project,0,test50105,"public void test50105() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    JSType[] jSTypeArray0 = new JSType[0];
    FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, true, jSTypeArray0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    recordType0.setOwnerFunction(functionType0);
    // Undeclared exception!
    try {
        recordType0.setOwnerFunction(functionType0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test51106,"public void test51106() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""String"");
    errorFunctionType0.getCtorImplementedInterfaces();
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
project,0,test52107,"public void test52107() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""j>u8@RdqZf:u[+K"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""j>u8@RdqZf:u[+K"", jSDocInfo0);
    assertTrue(errorFunctionType0.hasCachedValues());
}",0,assertTrue(errorFunctionType0.hasCachedValues())
project,0,test52108,"public void test52108() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""j>u8@RdqZf:u[+K"");
    JSDocInfo jSDocInfo0 = new JSDocInfo();
    errorFunctionType0.setPropertyJSDocInfo(""j>u8@RdqZf:u[+K"", jSDocInfo0);
    JSType.safeResolve(errorFunctionType0, simpleErrorReporter0, errorFunctionType0);
    assertTrue(errorFunctionType0.isNominalConstructor());
}",0,assertTrue(errorFunctionType0.isNominalConstructor())
