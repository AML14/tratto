focal_method,test_prefix,docstring
"@Override
public void hotSwapScript(Node scriptRoot) {
    NodeTraversal.traverse(compiler, scriptRoot, this);
}","public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, ""pI`*"", ""pI`*"");
    checkAccessControls0.hotSwapScript(node0);
    assertEquals(26, Node.DIRECTCALL_PROP);
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
}","public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""ccm.google.javasc=ipt.jscoA.ConcreteType$wo,crete=neType"", ""ccm.google.javasc=ipt.jscoA.ConcreteType$wo,crete=neType"");
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    checkAccessControls0.process(node0, node0);
    assertEquals(45, Node.IS_VAR_ARGS_PARAM);
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
}","public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    Node node0 = new Node(30);
    checkAccessControls0.process(node0, node0);
    assertEquals((-2), Node.OBJECT_IDS_PROP);
}",""
"public void visit(NodeTraversal t, Node n, Node parent) {
    switch(n.getType()) {
        case Token.NAME:
            checkNameDeprecation(t, n, parent);
            checkNameVisibility(t, n, parent);
            break;
        case Token.GETPROP:
            checkPropertyDeprecation(t, n, parent);
            checkPropertyVisibility(t, n, parent);
            checkConstantProperty(t, n);
            break;
        case Token.NEW:
            checkConstructorDeprecation(t, n, parent);
            break;
    }
}","public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    Node node0 = new Node(38);
    Node node1 = new Node(105);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
    // Undeclared exception!
    try {
        checkAccessControls0.visit(nodeTraversal0, node0, node1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public void visit(NodeTraversal t, Node n, Node parent) {
    switch(n.getType()) {
        case Token.NAME:
            checkNameDeprecation(t, n, parent);
            checkNameVisibility(t, n, parent);
            break;
        case Token.GETPROP:
            checkPropertyDeprecation(t, n, parent);
            checkPropertyVisibility(t, n, parent);
            checkConstantProperty(t, n);
            break;
        case Token.NEW:
            checkConstructorDeprecation(t, n, parent);
            break;
    }
}","public void test44() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    Node node0 = new Node(38);
    Node node1 = new Node(118);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
    // Undeclared exception!
    try {
        checkAccessControls0.visit(nodeTraversal0, node0, node1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
"public void visit(NodeTraversal t, Node n, Node parent) {
    switch(n.getType()) {
        case Token.NAME:
            checkNameDeprecation(t, n, parent);
            checkNameVisibility(t, n, parent);
            break;
        case Token.GETPROP:
            checkPropertyDeprecation(t, n, parent);
            checkPropertyVisibility(t, n, parent);
            checkConstantProperty(t, n);
            break;
        case Token.NEW:
            checkConstructorDeprecation(t, n, parent);
            break;
    }
}","public void test55() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
    Node node0 = new Node(38);
    Node node1 = new Node(30);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
    // Undeclared exception!
    try {
        checkAccessControls0.visit(nodeTraversal0, node0, node1);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // NAME is not a string node
        //
        verifyException(""com.google.javascript.rhino.Node"", e);
    }
}",""
