/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 03:29:30 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CheckAccessControls_ESTest extends CheckAccessControls_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "pI`*", "pI`*");
        checkAccessControls0.hotSwapScript(node0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("ccm.google.javasc=ipt.jscoA.ConcreteType$wo,crete=neType", "ccm.google.javasc=ipt.jscoA.ConcreteType$wo,crete=neType");
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        checkAccessControls0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        Node node0 = new Node(30);
        checkAccessControls0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        Node node0 = new Node(38);
        Node node1 = new Node(105);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        checkAccessControls0.visit(nodeTraversal0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        Node node0 = new Node(38);
        Node node1 = new Node(118);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        checkAccessControls0.visit(nodeTraversal0, node0, node1);
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Compiler compiler0 = new Compiler();
        compiler0.getErrorManager();
        CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
        Node node0 = new Node(38);
        Node node1 = new Node(30);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
        checkAccessControls0.visit(nodeTraversal0, node0, node1);
    }
}
