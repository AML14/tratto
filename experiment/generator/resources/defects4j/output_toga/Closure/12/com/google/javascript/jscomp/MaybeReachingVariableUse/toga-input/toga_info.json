{
  "test1212" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\";\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    Node node1 = new Node(114, node0, node0, node0, node0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Tb\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();\n    Node node1 = new Node(115, 45, 37);\n    maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"Tb\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();\n    Node node1 = Node.newString(108, \"/YfP>:^EV(lPK\", 1, 52);\n    maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();\n    Node node1 = new Node(113, node0, node0, node0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test1111"
  },
  "test000" : {
    "methodSignature" : "Collection<Node> getUses(String name, Node defNode)",
    "methodName" : "getUses",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\";\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    maybeReachingVariableUse0.getUses(\";\", node0);\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"TI\");\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    maybeReachingVariableUse0.analyze();\n}",
    "testName" : "test011"
  },
  "test044" : {
    "methodSignature" : "final void analyze()",
    "methodName" : "analyze",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"TI\");\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    InputId inputId0 = node0.getInputId();\n    CompilerInput compilerInput0 = compiler0.getInput(inputId0);\n    scope0.declare(\"TI\", node0, (JSType) null, compilerInput0, false);\n    maybeReachingVariableUse0.analyze();\n}",
    "testName" : "test044"
  },
  "test055" : {
    "methodSignature" : "protected L join(L latticeA, L latticeB)",
    "methodName" : "join",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\";\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = maybeReachingVariableUse0.createEntryLattice();\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = maybeReachingVariableUse0.join(maybeReachingVariableUse_ReachingUses0, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test055"
  },
  "test066" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    Node node1 = new Node(98, node0, node0, node0, node0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();\n    maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test066"
  },
  "test077" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"TI\", \"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = maybeReachingVariableUse0.createEntryLattice();\n    Node node1 = new Node(100, node0, node0, node0, node0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test077"
  },
  "test088" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"TI\");\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = maybeReachingVariableUse0.createEntryLattice();\n    Node node1 = new Node(101, node0, node0, node0, node0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test088"
  },
  "test099" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();\n    Node node1 = new Node(105, 45, 37);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test099"
  },
  "test1414" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    Node node1 = new Node(118, node0, node0, node0, node0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = new MaybeReachingVariableUse.ReachingUses();\n    maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "ReachingUses flowThrough(Node n, ReachingUses input)",
    "methodName" : "flowThrough",
    "className" : "com.google.javascript.jscomp.MaybeReachingVariableUse",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"TI\");\n    PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);\n    Compiler compiler0 = new Compiler(printStreamErrorManager0);\n    Node node0 = compiler0.parseTestCode(\"TI\");\n    ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);\n    Scope scope0 = new Scope(node0, compiler0);\n    MaybeReachingVariableUse maybeReachingVariableUse0 = new MaybeReachingVariableUse(controlFlowGraph0, scope0, compiler0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses0 = maybeReachingVariableUse0.createEntryLattice();\n    Node node1 = new Node(91, node0, node0, node0, node0);\n    MaybeReachingVariableUse.ReachingUses maybeReachingVariableUse_ReachingUses1 = maybeReachingVariableUse0.flowThrough(node1, maybeReachingVariableUse_ReachingUses0);\n}",
    "testName" : "test1515"
  }
}