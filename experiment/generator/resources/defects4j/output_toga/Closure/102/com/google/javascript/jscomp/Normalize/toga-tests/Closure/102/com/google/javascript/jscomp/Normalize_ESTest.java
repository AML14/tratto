/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 04 04:57:06 GMT 2023
 */
package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Normalize_ESTest extends Normalize_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("R", "R");
        Node node1 = new Node(4, node0);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        Node node0 = compiler0.parseSyntheticCode("", "");
        Node node1 = new Node(126, node0);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(38, "", 38, 38);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        Normalize.PropogateConstantAnnotations normalize_PropogateConstantAnnotations0 = new Normalize.PropogateConstantAnnotations(compiler0, true);
        normalize_PropogateConstantAnnotations0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.googleGjavascript.jscomp.Normalize$VerifyConstants", "com.googleGjavascript.jscomp.Normalize$VerifyConstants");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        normalize_VerifyConstants0.process(node0, node0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("com.googleGjavascript.jscomp.Normalize$VerifyConstants", "com.googleGjavascript.jscomp.Normalize$VerifyConstants");
        Node node1 = new Node(26, node0);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        normalize_VerifyConstants0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.commontcollect.LinkedListMultimap$DistincZKeyIterator");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = Node.newString(38, "", 38, 38);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        normalize_VerifyConstants0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("com.google.commontcollect.LinkedListMultimap$DistincZKeyIterator");
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
        nodeTraversal0.traverse(node0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, true);
        Node node0 = Node.newString(38, "VN%L'7\"DY", 38, 38);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
        normalize_VerifyConstants0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = Node.newString(38, "ZA7{Dx3|?d+E", 38, 38);
        Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
        NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize0);
        normalize_VerifyConstants0.visit(nodeTraversal0, node0, node0);
        normalize_VerifyConstants0.visit(nodeTraversal0, node0, node0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(113, node0, node0, 86, 5);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node0, node1);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(126, node0, 0, 49);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = new Node(126, 126, 126);
        Node node1 = new Node(126, node0);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(126, node0, 0, 49);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(115, node0, 124, 0);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(118, node0, 46, 10);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(118, node0, 46, 10);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, false);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseSyntheticCode("TightenTypes pass appears to be stuck in an infinite loop.", "TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(118, node0, 46, 10);
        node1.detachChildren();
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Compiler compiler0 = new Compiler();
        Node node0 = compiler0.parseTestCode("TightenTypes pass appears to be stuck in an infinite loop.");
        Node node1 = new Node(105, node0, 4, 42);
        node0.addChildToBack(node1);
        Normalize normalize0 = new Normalize(compiler0, true);
        normalize0.process(node1, node1);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Compiler compiler0 = new Compiler();
        Normalize normalize0 = new Normalize(compiler0, false);
        Node node0 = compiler0.parseTestCode("msg.unctionnot.found.i");
        Node node1 = new Node(105, node0, 12, 4);
        node0.addChildToBack(node1);
        normalize0.process(node1, node1);
    }
}
