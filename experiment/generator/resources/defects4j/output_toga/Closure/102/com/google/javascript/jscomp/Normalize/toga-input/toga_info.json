{
  "test1212" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize normalize0 = new Normalize(compiler0, false);\n    Node node0 = new Node(126, 126, 126);\n    Node node1 = new Node(126, node0);\n    normalize0.process(node1, node1);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(126, node0, 0, 49);\n    node0.addChildToBack(node1);\n    Normalize normalize0 = new Normalize(compiler0, true);\n    normalize0.process(node1, node1);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"TightenTypes pass appears to be stuck in an infinite loop.\", \"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(113, node0, node0, 86, 5);\n    Normalize normalize0 = new Normalize(compiler0, true);\n    normalize0.process(node0, node1);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(126, node0, 0, 49);\n    Normalize normalize0 = new Normalize(compiler0, true);\n    normalize0.process(node1, node1);\n}",
    "testName" : "test1111"
  },
  "test000" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"R\", \"R\");\n    Node node1 = new Node(4, node0);\n    Normalize normalize0 = new Normalize(compiler0, true);\n    normalize0.process(node0, node0);\n}",
    "testName" : "test000"
  },
  "test011" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize normalize0 = new Normalize(compiler0, true);\n    Node node0 = compiler0.parseSyntheticCode(\"\", \"\");\n    Node node1 = new Node(126, node0);\n    normalize0.process(node0, node1);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public void traverse(Node root)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.commontcollect.LinkedListMultimap$DistincZKeyIterator\");\n    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);\n    nodeTraversal0.traverse(node0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public void traverse(Node root)",
    "methodName" : "traverse",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"com.google.commontcollect.LinkedListMultimap$DistincZKeyIterator\");\n    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);\n    nodeTraversal0.traverse(node0);\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"TightenTypes pass appears to be stuck in an infinite loop.\", \"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(118, node0, 46, 10);\n    node0.addChildToBack(node1);\n    Normalize normalize0 = new Normalize(compiler0, false);\n    normalize0.process(node1, node1);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"TightenTypes pass appears to be stuck in an infinite loop.\", \"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(118, node0, 46, 10);\n    node1.detachChildren();\n    node0.addChildToBack(node1);\n    Normalize normalize0 = new Normalize(compiler0, true);\n    normalize0.process(node1, node0);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(115, node0, 124, 0);\n    node0.addChildToBack(node1);\n    Normalize normalize0 = new Normalize(compiler0, false);\n    normalize0.process(node1, node0);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\"TightenTypes pass appears to be stuck in an infinite loop.\", \"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(118, node0, 46, 10);\n    node0.addChildToBack(node1);\n    Normalize normalize0 = new Normalize(compiler0, true);\n    normalize0.process(node1, node0);\n}",
    "testName" : "test1515"
  },
  "test1818" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"TightenTypes pass appears to be stuck in an infinite loop.\");\n    Node node1 = new Node(105, node0, 4, 42);\n    node0.addChildToBack(node1);\n    Normalize normalize0 = new Normalize(compiler0, true);\n    normalize0.process(node1, node1);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.Normalize",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Normalize normalize0 = new Normalize(compiler0, false);\n    Node node0 = compiler0.parseTestCode(\"msg.unctionnot.found.i\");\n    Node node1 = new Node(105, node0, 12, 4);\n    node0.addChildToBack(node1);\n    normalize0.process(node1, node1);\n}",
    "testName" : "test1919"
  }
}