focal_method,test_prefix,docstring
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test000() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""R"", ""R"");
    Node node1 = new Node(4, node0);
    Normalize normalize0 = new Normalize(compiler0, true);
    normalize0.process(node0, node0);
    assertEquals(49, Node.LAST_PROP);
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test011() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize normalize0 = new Normalize(compiler0, true);
    Node node0 = compiler0.parseSyntheticCode("""", """");
    Node node1 = new Node(126, node0);
    // Undeclared exception!
    try {
        normalize0.process(node0, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Normalize constraints violated:
        // LABEL normalization
        //
        verifyException(""com.google.javascript.jscomp.Normalize"", e);
    }
}",""
"public void traverse(Node root) {
    try {
        sourceName = """";
        curNode = root;
        pushScope(root);
        traverseBranch(root, null);
        popScope();
    } catch (Exception unexpectedException) {
        throwUnexpectedException(unexpectedException);
    }
}","public void test055() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.commontcollect.LinkedListMultimap$DistincZKeyIterator"");
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, true);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
    nodeTraversal0.traverse(node0);
    assertEquals((-2), Node.OBJECT_IDS_PROP);
}","/**
 * Traverses a parse tree recursively.
 */"
"public void traverse(Node root) {
    try {
        sourceName = """";
        curNode = root;
        pushScope(root);
        traverseBranch(root, null);
        popScope();
    } catch (Exception unexpectedException) {
        throwUnexpectedException(unexpectedException);
    }
}","public void test077() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""com.google.commontcollect.LinkedListMultimap$DistincZKeyIterator"");
    Normalize.VerifyConstants normalize_VerifyConstants0 = new Normalize.VerifyConstants(compiler0, false);
    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, normalize_VerifyConstants0);
    nodeTraversal0.traverse(node0);
    assertEquals(26, Node.DIRECTCALL_PROP);
}","/**
 * Traverses a parse tree recursively.
 */"
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1010() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""TightenTypes pass appears to be stuck in an infinite loop."", ""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(113, node0, node0, 86, 5);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node0, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Normalize constraints violated:
        // WHILE node
        //
        verifyException(""com.google.javascript.jscomp.Normalize"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1111() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(126, node0, 0, 49);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1212() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize normalize0 = new Normalize(compiler0, false);
    Node node0 = new Node(126, 126, 126);
    Node node1 = new Node(126, node0);
    // Undeclared exception!
    try {
        normalize0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1313() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(126, node0, 0, 49);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1414() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(115, node0, 124, 0);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1515() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""TightenTypes pass appears to be stuck in an infinite loop."", ""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(118, node0, 46, 10);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1616() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""TightenTypes pass appears to be stuck in an infinite loop."", ""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(118, node0, 46, 10);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, false);
    // Undeclared exception!
    try {
        normalize0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1717() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseSyntheticCode(""TightenTypes pass appears to be stuck in an infinite loop."", ""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(118, node0, 46, 10);
    node1.detachChildren();
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node1, node0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // Empty VAR node.
        //
        verifyException(""com.google.javascript.jscomp.Normalize"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1818() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = compiler0.parseTestCode(""TightenTypes pass appears to be stuck in an infinite loop."");
    Node node1 = new Node(105, node0, 4, 42);
    node0.addChildToBack(node1);
    Normalize normalize0 = new Normalize(compiler0, true);
    // Undeclared exception!
    try {
        normalize0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
"@Override
public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
        NodeTraversal t = new NodeTraversal(compiler, renamer);
        t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
    new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
}","public void test1919() throws Throwable {
    Compiler compiler0 = new Compiler();
    Normalize normalize0 = new Normalize(compiler0, false);
    Node node0 = compiler0.parseTestCode(""msg.unctionnot.found.i"");
    Node node1 = new Node(105, node0, 12, 4);
    node0.addChildToBack(node1);
    // Undeclared exception!
    try {
        normalize0.process(node1, node1);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // INTERNAL COMPILER ERROR.
        // Please report this problem.
        // null
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",""
