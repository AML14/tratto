{
  "test06472" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06472() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_OPTIMIZE_LOOP_ERROR\");\n    compiler0.areNodesEqualForInlining(node0, node0);\n    compiler0.getProgress();\n}",
    "testName" : "test06472"
  },
  "test07286" : {
    "methodSignature" : "TypeValidator getTypeValidator()",
    "methodName" : "getTypeValidator",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07286() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getTypeValidator();\n}",
    "testName" : "test07286"
  },
  "test08096" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08096() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SourceFile sourceFile0 = SourceFile.fromFile(\"\\\"(|N@HT5v6B*(m$qj\");\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    vector0.add(sourceFile0);\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.optimize();\n    compiler0.getErrorCount();\n}",
    "testName" : "test08096"
  },
  "test0000" : {
    "methodSignature" : "public <T extends SourceFile> Result compileModules(List<T> externs, List<JSModule> modules, CompilerOptions options)",
    "methodName" : "compileModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();\n    compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) arrayList0, compilerOptions0);\n}",
    "testName" : "test0000"
  },
  "test0089" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0089() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.resetUniqueNameId();\n    compiler0.getProgress();\n}",
    "testName" : "test0089"
  },
  "test05663" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05663() throws Throwable {\n    Compiler.runCallable((Callable<AnalyzePrototypeProperties>) null, false, false);\n}",
    "testName" : "test05663"
  },
  "test04851" : {
    "methodSignature" : "public String getSourceFileName()",
    "methodName" : "getSourceFileName",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04851() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"!(L6\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    Node node0 = compiler0.parseSyntheticCode(\"base\", \"base\");\n    node0.getSourceFileName();\n}",
    "testName" : "test04851"
  },
  "test04852" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04852() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"!(L6\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    Node node0 = compiler0.parseSyntheticCode(\"base\", \"base\");\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test04852"
  },
  "test06473" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06473() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"JSC_OPTIMIZE_LOOP_ERROR\");\n    compiler0.areNodesEqualForInlining(node0, node0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test06473"
  },
  "test099126" : {
    "methodSignature" : "int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099126() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    errorManager0.getErrorCount();\n}",
    "testName" : "test099126"
  },
  "test01214" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01214() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();\n    compiler0.setState(compiler_IntermediateState0);\n    compiler0.getProgress();\n}",
    "testName" : "test01214"
  },
  "test03639" : {
    "methodSignature" : "public Compiler(ErrorManager errorManager)",
    "methodName" : "Compiler",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03639() throws Throwable {\n    Compiler compiler0 = null;\n    compiler0 = new Compiler((ErrorManager) null);\n}",
    "testName" : "test03639"
  },
  "test02426" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02426() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getFunctionalInformationMap();\n    compiler0.getProgress();\n}",
    "testName" : "test02426"
  },
  "test01618" : {
    "methodSignature" : "ControlFlowGraph<Node> computeCFG()",
    "methodName" : "computeCFG",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01618() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.computeCFG();\n}",
    "testName" : "test01618"
  },
  "test0011" : {
    "methodSignature" : "public String toSource(final JSModule module)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource((JSModule) null);\n}",
    "testName" : "test0011"
  },
  "test05259" : {
    "methodSignature" : "Node ensureLibraryInjected(String resourceName)",
    "methodName" : "ensureLibraryInjected",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05259() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();\n    JSModule jSModule0 = new JSModule(\"-0CBeX'\");\n    arrayList0.add(jSModule0);\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    compiler0.compileModules((List<SourceFile>) stack0, (List<JSModule>) arrayList0, compilerOptions0);\n    compiler0.ensureLibraryInjected((String) null);\n}",
    "testName" : "test05259"
  },
  "test088111" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088111() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getSourceLine((String) null, 30);\n    compiler0.getProgress();\n}",
    "testName" : "test088111"
  },
  "test03235" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03235() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getInputsForTesting();\n    compiler0.getProgress();\n}",
    "testName" : "test03235"
  },
  "test06067" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06067() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test06067"
  },
  "test04043" : {
    "methodSignature" : "void removeTryCatchFinally()",
    "methodName" : "removeTryCatchFinally",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04043() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.removeTryCatchFinally();\n}",
    "testName" : "test04043"
  },
  "test083103" : {
    "methodSignature" : "public Node getAstRoot(AbstractCompiler compiler)",
    "methodName" : "getAstRoot",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083103() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"msg.no.bracket.arg\", charset0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    jsAst0.getAstRoot(compiler0);\n}",
    "testName" : "test083103"
  },
  "test02022" : {
    "methodSignature" : "public LanguageMode languageMode()",
    "methodName" : "languageMode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.languageMode();\n}",
    "testName" : "test02022"
  },
  "test06068" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06068() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);\n    compiler0.stripCode(compilerOptions0.stripTypePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test06068"
  },
  "test096123" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    LinkedList<JSModule> linkedList1 = new LinkedList<JSModule>();\n    compiler0.compileModules((List<SourceFile>) linkedList0, (List<JSModule>) linkedList1, compilerOptions0);\n    compiler0.getNodeForCodeInsertion((JSModule) null);\n}",
    "testName" : "test096123"
  },
  "test04954" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04954() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    compilerOptions0.checkGlobalThisLevel = checkLevel0;\n    compiler0.getProgress();\n}",
    "testName" : "test04954"
  },
  "test06979" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06979() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(\"com.google.javascript.jscomp.Compiler$2\", charset0);\n    JsAst jsAst0 = new JsAst(jSSourceFile0);\n    compiler0.addNewScript(jsAst0);\n    JsAst jsAst1 = new JsAst(jSSourceFile0);\n    compiler0.replaceScript(jsAst1);\n    compiler0.hasErrors();\n}",
    "testName" : "test06979"
  },
  "test02932" : {
    "methodSignature" : "public Result compile(SourceFile extern, SourceFile input, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02932() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((SourceFile) null, (SourceFile) null, compilerOptions0);\n}",
    "testName" : "test02932"
  },
  "test04955" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04955() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    compilerOptions0.checkGlobalThisLevel = checkLevel0;\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test04955"
  },
  "test101130" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101130() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection> hashMap0 = new HashMap<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>();\n    SyntheticAst syntheticAst0 = new SyntheticAst(\"Tn'EF,tKqF)\");\n    Node node0 = syntheticAst0.getAstRoot(compiler0);\n    compiler0.updateGlobalVarReferences(hashMap0, node0);\n}",
    "testName" : "test101130"
  },
  "test091114" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091114() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getSourceRegion(\"only arrays or objects can be accessed\", (-1));\n    compiler0.getProgress();\n}",
    "testName" : "test091114"
  },
  "test08198" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08198() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"u?/==\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n    compiler0.hasErrors();\n}",
    "testName" : "test08198"
  },
  "test08199" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08199() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"u?/==\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n    compiler0.getProgress();\n}",
    "testName" : "test08199"
  },
  "test05360" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05360() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    LinkedList<JSModule> linkedList0 = new LinkedList<JSModule>();\n    compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) linkedList0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.getProgress();\n}",
    "testName" : "test05360"
  },
  "test08197" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08197() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"u?/==\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test08197"
  },
  "test093118" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093118() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"y1e=Tg(?A|a\\\"?3!9\");\n    Charset charset0 = Charset.defaultCharset();\n    SourceFile sourceFile0 = SourceFile.fromFile(\" a?C~,+xZNxDR96r\", charset0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.getSourceRegion(\" a?C~,+xZNxDR96r\", 29);\n    compiler0.getProgress();\n}",
    "testName" : "test093118"
  },
  "test093119" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093119() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"y1e=Tg(?A|a\\\"?3!9\");\n    Charset charset0 = Charset.defaultCharset();\n    SourceFile sourceFile0 = SourceFile.fromFile(\" a?C~,+xZNxDR96r\", charset0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.getSourceRegion(\" a?C~,+xZNxDR96r\", 29);\n    compiler0.getErrorCount();\n}",
    "testName" : "test093119"
  },
  "test0022" : {
    "methodSignature" : "public String[] toSourceArray()",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0022() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray();\n}",
    "testName" : "test0022"
  },
  "test03740" : {
    "methodSignature" : "public Result compile(JSSourceFile extern, JSModule[] modules, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03740() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile((JSSourceFile) null, (JSModule[]) null, compilerOptions0);\n}",
    "testName" : "test03740"
  },
  "test05764" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05764() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CleanupPasses cleanupPasses0 = new CleanupPasses((CompilerOptions) null);\n    compiler0.setPassConfig(cleanupPasses0);\n    compiler0.getProgress();\n}",
    "testName" : "test05764"
  },
  "test087110" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087110() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compilerOptions0.setIdeMode(true);\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test087110"
  },
  "test07387" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07387() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07387"
  },
  "test082102" : {
    "methodSignature" : "public boolean acceptEcmaScript5()",
    "methodName" : "acceptEcmaScript5",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082102() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    boolean boolean0 = compiler0.acceptEcmaScript5();\n}",
    "testName" : "test082102"
  },
  "test06574" : {
    "methodSignature" : "protected void removeExternInput(InputId id)",
    "methodName" : "removeExternInput",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06574() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"gq*rw<\");\n    InputId inputId0 = node0.getInputId();\n    compiler0.removeExternInput(inputId0);\n}",
    "testName" : "test06574"
  },
  "test093120" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093120() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"y1e=Tg(?A|a\\\"?3!9\");\n    Charset charset0 = Charset.defaultCharset();\n    SourceFile sourceFile0 = SourceFile.fromFile(\" a?C~,+xZNxDR96r\", charset0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.getSourceRegion(\" a?C~,+xZNxDR96r\", 29);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test093120"
  },
  "test104134" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setProgress((-2.147483648E9));\n    compiler0.getProgress();\n}",
    "testName" : "test104134"
  },
  "test02527" : {
    "methodSignature" : "void recordFunctionInformation()",
    "methodName" : "recordFunctionInformation",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02527() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.recordFunctionInformation();\n}",
    "testName" : "test02527"
  },
  "test03336" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03336() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CodeChangeHandler.RecentChange codeChangeHandler_RecentChange0 = new CodeChangeHandler.RecentChange();\n    compiler0.removeChangeHandler(codeChangeHandler_RecentChange0);\n    compiler0.getProgress();\n}",
    "testName" : "test03336"
  },
  "test01315" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSSourceFile[] inputs, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01315() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.init((JSSourceFile[]) null, (JSSourceFile[]) null, compilerOptions0);\n}",
    "testName" : "test01315"
  },
  "test01719" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01719() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getPropertyMap();\n    compiler0.getProgress();\n}",
    "testName" : "test01719"
  },
  "test0033" : {
    "methodSignature" : "public String toSource()",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSource();\n}",
    "testName" : "test0033"
  },
  "test06169" : {
    "methodSignature" : "public void optimize()",
    "methodName" : "optimize",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06169() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    ArrayList<JSModule> arrayList0 = new ArrayList<JSModule>();\n    compiler0.compileModules((List<SourceFile>) vector0, (List<JSModule>) arrayList0, compilerOptions0);\n    compiler0.startPass(\"Dp4}\");\n    compiler0.optimize();\n}",
    "testName" : "test06169"
  },
  "test085107" : {
    "methodSignature" : "void throwInternalError(String message, Exception cause)",
    "methodName" : "throwInternalError",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085107() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.throwInternalError(\"JSC_DUPLICATE_EXTERN_INPUT\", (Exception) null);\n}",
    "testName" : "test085107"
  },
  "test02123" : {
    "methodSignature" : "void setCssRenamingMap(CssRenamingMap map)",
    "methodName" : "setCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02123() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setCssRenamingMap((CssRenamingMap) null);\n}",
    "testName" : "test02123"
  },
  "test04144" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04144() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getTopScope();\n    compiler0.getProgress();\n}",
    "testName" : "test04144"
  },
  "test01820" : {
    "methodSignature" : "public void processDefines()",
    "methodName" : "processDefines",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01820() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.processDefines();\n}",
    "testName" : "test01820"
  },
  "test098125" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098125() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getAstDotGraph();\n    compiler0.getProgress();\n}",
    "testName" : "test098125"
  },
  "test03841" : {
    "methodSignature" : "public JSError[] getMessages()",
    "methodName" : "getMessages",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03841() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getMessages();\n}",
    "testName" : "test03841"
  },
  "test05865" : {
    "methodSignature" : "public void setPassConfig(PassConfig passes)",
    "methodName" : "setPassConfig",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05865() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    PassConfig passConfig0 = compiler0.getPassConfig();\n    compiler0.setPassConfig(passConfig0);\n}",
    "testName" : "test05865"
  },
  "test0044" : {
    "methodSignature" : "public void toSource(final CodeBuilder cb, final int inputSeqNum, final Node root)",
    "methodName" : "toSource",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0044() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Compiler.CodeBuilder compiler_CodeBuilder0 = new Compiler.CodeBuilder();\n    Node node0 = Node.newString(\"P\\\"DXNvWV_57W\");\n    compiler0.toSource(compiler_CodeBuilder0, 1459, node0);\n}",
    "testName" : "test0044"
  },
  "test06270" : {
    "methodSignature" : "void endPass()",
    "methodName" : "endPass",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06270() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.endPass();\n}",
    "testName" : "test06270"
  },
  "test06676" : {
    "methodSignature" : "public boolean isExtern()",
    "methodName" : "isExtern",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06676() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);\n    compiler0.getSynthesizedExternsInput();\n    CompilerInput compilerInput0 = compiler0.getSynthesizedExternsInput();\n    compilerInput0.isExtern();\n}",
    "testName" : "test06676"
  },
  "test06675" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06675() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ArrayList<SourceFile> arrayList0 = new ArrayList<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) arrayList0, (List<SourceFile>) arrayList0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test06675"
  },
  "test07489" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07489() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    compiler0.processAMDAndCommonJSModules();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07489"
  },
  "test084106" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084106() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"k9YE}RV!ie:u;R\\\"\");\n    Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();\n    CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    String[] stringArray0 = new String[2];\n    JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);\n    compiler0.report(jSError0);\n    compiler0.getProgress();\n}",
    "testName" : "test084106"
  },
  "test089112" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"I$Mkr9p qGlln\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(\"yG0aF>#M}rSP y\", sourceFile_Generator0);\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    jSSourceFileArray0[2] = jSSourceFileArray0[1];\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test089112"
  },
  "test084105" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084105() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"k9YE}RV!ie:u;R\\\"\");\n    Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();\n    CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    String[] stringArray0 = new String[2];\n    JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);\n    compiler0.report(jSError0);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test084105"
  },
  "test084104" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084104() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseTestCode(\"k9YE}RV!ie:u;R\\\"\");\n    Stack<NodeTraversal.Callback> stack0 = new Stack<NodeTraversal.Callback>();\n    CombinedCompilerPass combinedCompilerPass0 = new CombinedCompilerPass(compiler0, stack0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, combinedCompilerPass0);\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    String[] stringArray0 = new String[2];\n    JSError jSError0 = nodeTraversal0.makeError(node0, checkLevel0, compiler0.OPTIMIZE_LOOP_ERROR, stringArray0);\n    compiler0.report(jSError0);\n    compiler0.hasErrors();\n}",
    "testName" : "test084104"
  },
  "test05461" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05461() throws Throwable {\n    Compiler.runCallable((Callable<AnalyzePrototypeProperties>) null, false, true);\n}",
    "testName" : "test05461"
  },
  "test07488" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07488() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.getProgress();\n}",
    "testName" : "test07488"
  },
  "test095122" : {
    "methodSignature" : "Node ensureLibraryInjected(String resourceName)",
    "methodName" : "ensureLibraryInjected",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095122() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"RnC\");\n    compiler0.ensureLibraryInjected(\"RnC\");\n}",
    "testName" : "test095122"
  },
  "test02224" : {
    "methodSignature" : "public int getWarningCount()",
    "methodName" : "getWarningCount",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02224() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getWarningCount();\n}",
    "testName" : "test02224"
  },
  "test102131" : {
    "methodSignature" : "void updateGlobalVarReferences(Map<Var, ReferenceCollection> refMapPatch, Node collectionRoot)",
    "methodName" : "updateGlobalVarReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102131() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Node.newNumber((double) 32, 32, 32);\n    compiler0.updateGlobalVarReferences((Map<Scope.Var, ReferenceCollectingCallback.ReferenceCollection>) null, node0);\n}",
    "testName" : "test102131"
  },
  "test03437" : {
    "methodSignature" : "public Map<InputId, CompilerInput> getInputsById()",
    "methodName" : "getInputsById",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03437() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getInputsById();\n}",
    "testName" : "test03437"
  },
  "test02629" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02629() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getAstDotGraph();\n    compiler0.getProgress();\n}",
    "testName" : "test02629"
  },
  "test07080" : {
    "methodSignature" : "JSModuleGraph getDegenerateModuleGraph()",
    "methodName" : "getDegenerateModuleGraph",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07080() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getDegenerateModuleGraph();\n}",
    "testName" : "test07080"
  },
  "test02628" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02628() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.getProgress();\n}",
    "testName" : "test02628"
  },
  "test090113" : {
    "methodSignature" : "public <T1 extends SourceFile, T2 extends SourceFile> Result compile(List<T1> externs, List<T2> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"RT-\");\n    CompilerOptions compilerOptions0 = compiler0.options;\n    compiler0.compile((List<SourceFile>) null, (List<SourceFile>) null, compilerOptions0);\n}",
    "testName" : "test090113"
  },
  "test100129" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100129() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    compiler0.getProgress();\n}",
    "testName" : "test100129"
  },
  "test07591" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07591() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"q5\");\n    compiler0.parseTestCode(\"q5\");\n    compiler0.getProgress();\n}",
    "testName" : "test07591"
  },
  "test100128" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100128() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test100128"
  },
  "test092117" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092117() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"ye=Tg(?A|a\\\"?3!9\");\n    compiler0.getSourceRegion(\"externExports\", 37);\n    compiler0.getProgress();\n}",
    "testName" : "test092117"
  },
  "test0055" : {
    "methodSignature" : "public String[] toSourceArray(final JSModule module)",
    "methodName" : "toSourceArray",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0055() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.toSourceArray((JSModule) null);\n}",
    "testName" : "test0055"
  },
  "test07590" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07590() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"q5\");\n    compiler0.parseTestCode(\"q5\");\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07590"
  },
  "test01011" : {
    "methodSignature" : "CssRenamingMap getCssRenamingMap()",
    "methodName" : "getCssRenamingMap",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01011() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getCssRenamingMap();\n}",
    "testName" : "test01011"
  },
  "test05057" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05057() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    compilerOptions0.sourceMapOutputPath = \"com.google.javascript.jscomp.Compiler$IntermediateState\";\n    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test05057"
  },
  "test100127" : {
    "methodSignature" : "public ErrorManager getErrorManager()",
    "methodName" : "getErrorManager",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100127() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    ErrorManager errorManager0 = compiler0.getErrorManager();\n}",
    "testName" : "test100127"
  },
  "test03033" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03033() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getSourceMap();\n    compiler0.getProgress();\n}",
    "testName" : "test03033"
  },
  "test05056" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05056() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getProgress();\n}",
    "testName" : "test05056"
  },
  "test02730" : {
    "methodSignature" : "public Result compile(SourceFile extern, JSSourceFile[] input, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02730() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(\"N.R\", \"PassConfigs must eventually delegate to the DefaultPassConfig\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[2];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((SourceFile) jSSourceFile0, jSSourceFileArray0, compilerOptions0);\n}",
    "testName" : "test02730"
  },
  "test01921" : {
    "methodSignature" : "static <T> T runCallableWithLargeStack(final Callable<T> callable)",
    "methodName" : "runCallableWithLargeStack",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01921() throws Throwable {\n    Compiler.runCallableWithLargeStack((Callable<Scope.Var>) null);\n}",
    "testName" : "test01921"
  },
  "test03942" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03942() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getExternsForTesting();\n    compiler0.getProgress();\n}",
    "testName" : "test03942"
  },
  "test05966" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05966() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    SourceFile sourceFile0 = SourceFile.fromFile(\"\\\"(|N@HT5v6B*(m$qj\");\n    Vector<SourceFile> vector0 = new Vector<SourceFile>();\n    vector0.add(sourceFile0);\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.compile((List<SourceFile>) vector0, (List<SourceFile>) vector0, compilerOptions0);\n    compiler0.parseInputs();\n    compiler0.check();\n    compiler0.getProgress();\n}",
    "testName" : "test05966"
  },
  "test06371" : {
    "methodSignature" : "void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes, Set<String> stripTypePrefixes, Set<String> stripNamePrefixes)",
    "methodName" : "stripCode",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06371() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.reportCodeChange();\n    compiler0.stripCode(compilerOptions0.stripTypes, compilerOptions0.stripNamePrefixes, compilerOptions0.stripNameSuffixes, compilerOptions0.stripNamePrefixes);\n}",
    "testName" : "test06371"
  },
  "test07185" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07185() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\")/?cz%S:D+^?uv\", \")/?cz%S:D+^?uv\");\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    compiler0.hasErrors();\n}",
    "testName" : "test07185"
  },
  "test07184" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07184() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\")/?cz%S:D+^?uv\", \")/?cz%S:D+^?uv\");\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test07184"
  },
  "test07181" : {
    "methodSignature" : "public String getSourceFileName()",
    "methodName" : "getSourceFileName",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07181() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\")/?cz%S:D+^?uv\", \")/?cz%S:D+^?uv\");\n    node0.getSourceFileName();\n}",
    "testName" : "test07181"
  },
  "test086108" : {
    "methodSignature" : "public void check()",
    "methodName" : "check",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086108() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"computeCFG\");\n    compiler0.check();\n}",
    "testName" : "test086108"
  },
  "test0066" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0066() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    compiler0.disableThreads();\n    compiler0.getProgress();\n}",
    "testName" : "test0066"
  },
  "test07183" : {
    "methodSignature" : "public ReverseAbstractInterpreter getReverseAbstractInterpreter()",
    "methodName" : "getReverseAbstractInterpreter",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07183() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\")/?cz%S:D+^?uv\", \")/?cz%S:D+^?uv\");\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n}",
    "testName" : "test07183"
  },
  "test0067" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0067() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    LinkedList<SourceFile> linkedList0 = new LinkedList<SourceFile>();\n    compiler0.disableThreads();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) linkedList0, (List<SourceFile>) linkedList0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test0067"
  },
  "test07182" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07182() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = compiler0.parseSyntheticCode(\")/?cz%S:D+^?uv\", \")/?cz%S:D+^?uv\");\n    compiler0.getReverseAbstractInterpreter();\n    ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();\n    compiler0.getProgress();\n}",
    "testName" : "test07182"
  },
  "test04750" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04750() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.parseTestCode(\"\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[0];\n    compiler0.compile(jSSourceFileArray0, jSSourceFileArray0, compilerOptions0);\n    compiler0.getProgress();\n}",
    "testName" : "test04750"
  },
  "test06777" : {
    "methodSignature" : "void addIncrementalSourceAst(JsAst ast)",
    "methodName" : "addIncrementalSourceAst",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06777() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    File file0 = MockFile.createTempFile(\"yG0aF>#M}rSP y\", \"yG0aF>#M}rSP y\");\n    JSSourceFile[] jSSourceFileArray0 = new JSSourceFile[3];\n    SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromGenerator(\"yG0aF>#M}rSP y\", sourceFile_Generator0);\n    jSSourceFileArray0[0] = jSSourceFile0;\n    jSSourceFileArray0[1] = jSSourceFile0;\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile1 = JSSourceFile.fromFile(file0, charset0);\n    jSSourceFileArray0[2] = jSSourceFile1;\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile(jSSourceFileArray0, jSModuleArray0, compilerOptions0);\n    SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n}",
    "testName" : "test06777"
  },
  "test05562" : {
    "methodSignature" : "static <T> T runCallable(final Callable<T> callable, boolean useLargeStackThread, boolean trace)",
    "methodName" : "runCallable",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05562() throws Throwable {\n    Callable<AnalyzePrototypeProperties> callable0 = (Callable<AnalyzePrototypeProperties>) mock(Callable.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(callable0).call();\n    AnalyzePrototypeProperties analyzePrototypeProperties0 = Compiler.runCallable(callable0, false, true);\n}",
    "testName" : "test05562"
  },
  "test02325" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02325() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getVariableMap();\n    compiler0.getProgress();\n}",
    "testName" : "test02325"
  },
  "test03538" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03538() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setHasRegExpGlobalReferences(true);\n    compiler0.getProgress();\n}",
    "testName" : "test03538"
  },
  "test097124" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097124() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\"Km}F{qw=jI#5'G*L\");\n    File file0 = MockFile.createTempFile(\"Km}F{qw=jI#5'G*L\", \"recordFunctionInformation\");\n    Charset charset0 = Charset.defaultCharset();\n    JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(file0, charset0);\n    CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, true);\n    jSModule0.addFirst(compilerInput0);\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test097124"
  },
  "test01113" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01113() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n    compiler0.getProgress();\n}",
    "testName" : "test01113"
  },
  "test092115" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092115() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"ye=Tg(?A|a\\\"?3!9\");\n    compiler0.getSourceRegion(\"externExports\", 37);\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test092115"
  },
  "test01517" : {
    "methodSignature" : "public void rebuildInputsFromModules()",
    "methodName" : "rebuildInputsFromModules",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01517() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.rebuildInputsFromModules();\n}",
    "testName" : "test01517"
  },
  "test092116" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092116() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"ye=Tg(?A|a\\\"?3!9\");\n    compiler0.getSourceRegion(\"externExports\", 37);\n    compiler0.hasErrors();\n}",
    "testName" : "test092116"
  },
  "test0078" : {
    "methodSignature" : "public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options)",
    "methodName" : "init",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0078() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule[] jSModuleArray0 = new JSModule[0];\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    compiler0.init((JSSourceFile[]) null, jSModuleArray0, compilerOptions0);\n}",
    "testName" : "test0078"
  },
  "test05158" : {
    "methodSignature" : "public <T1 extends SourceFile, T2 extends SourceFile> Result compile(List<T1> externs, List<T2> inputs, CompilerOptions options)",
    "methodName" : "compile",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05158() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Stack<SourceFile> stack0 = new Stack<SourceFile>();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);\n    compiler0.compile((List<SourceFile>) stack0, (List<SourceFile>) stack0, compilerOptions0);\n}",
    "testName" : "test05158"
  },
  "test03134" : {
    "methodSignature" : "public boolean isTypeCheckingEnabled()",
    "methodName" : "isTypeCheckingEnabled",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03134() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.isTypeCheckingEnabled();\n}",
    "testName" : "test03134"
  },
  "test01112" : {
    "methodSignature" : "boolean hasRegExpGlobalReferences()",
    "methodName" : "hasRegExpGlobalReferences",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01112() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    boolean boolean0 = compiler0.hasRegExpGlobalReferences();\n}",
    "testName" : "test01112"
  },
  "test081100" : {
    "methodSignature" : "boolean isInliningForbidden()",
    "methodName" : "isInliningForbidden",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081100() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"u?/==\");\n    boolean boolean0 = compiler0.isInliningForbidden();\n}",
    "testName" : "test081100"
  },
  "test02831" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test02831() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getModuleGraph();\n    compiler0.getProgress();\n}",
    "testName" : "test02831"
  },
  "test094121" : {
    "methodSignature" : "Node getNodeForCodeInsertion(JSModule module)",
    "methodName" : "getNodeForCodeInsertion",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094121() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    JSModule jSModule0 = new JSModule(\".\\\"(jp%ACHm7%:3oY]\");\n    compiler0.getNodeForCodeInsertion(jSModule0);\n}",
    "testName" : "test094121"
  },
  "test04853" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04853() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"!(L6\");\n    Compiler compiler0 = new Compiler(mockPrintStream0);\n    Node node0 = compiler0.parseSyntheticCode(\"base\", \"base\");\n    compiler0.getProgress();\n}",
    "testName" : "test04853"
  },
  "test06878" : {
    "methodSignature" : "public void addNewScript(JsAst ast)",
    "methodName" : "addNewScript",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06878() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.parseTestCode(\"ye=Tg(?A|a\\\"?3!9\");\n    File file0 = MockFile.createTempFile(\"ye=Tg(?A|a\\\"?3!9\", \"ye=Tg(?A|a\\\"?3!9\");\n    Charset charset0 = Charset.defaultCharset();\n    SourceFile sourceFile0 = SourceFile.fromFile(file0, charset0);\n    JsAst jsAst0 = new JsAst(sourceFile0);\n    compiler0.addIncrementalSourceAst(jsAst0);\n    compiler0.addNewScript(jsAst0);\n}",
    "testName" : "test06878"
  },
  "test103133" : {
    "methodSignature" : "public double getProgress()",
    "methodName" : "getProgress",
    "className" : "com.google.javascript.jscomp.Compiler",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103133() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.setProgress(271.7341093);\n    compiler0.getProgress();\n}",
    "testName" : "test103133"
  }
}