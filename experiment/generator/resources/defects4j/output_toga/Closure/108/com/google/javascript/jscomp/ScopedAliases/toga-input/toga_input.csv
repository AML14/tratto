focal_method,test_prefix,docstring
"public int getChangeTime() {
    return getIntProp(CHANGE_TIME);
}","public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
    ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
    Node node0 = compiler0.parseSyntheticCode(""CharStreams.nullWriter()"", ""CharStreams.nullWriter()"");
    scopedAliases0.hotSwapScript(node0, node0);
    assertEquals(0, node0.getChangeTime());
}","/**
 * Returns the time of the last change for this node
 */"
"@Override
public void process(Node externs, Node root) {
    hotSwapScript(root, null);
}","public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newNumber((-1814.54392726206));
    CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
    ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
    scopedAliases0.process(node0, node0);
    assertEquals(39, Node.EMPTY_BLOCK);
}",""
"@Override
public void hotSwapScript(Node root, Node originalRoot) {
    Traversal traversal = new Traversal();
    NodeTraversal.traverse(compiler, root, traversal);
    if (!traversal.hasErrors()) {
        // Apply the aliases.
        List<AliasUsage> aliasWorkQueue = Lists.newArrayList(traversal.getAliasUsages());
        while (!aliasWorkQueue.isEmpty()) {
            List<AliasUsage> newQueue = Lists.newArrayList();
            for (AliasUsage aliasUsage : aliasWorkQueue) {
                if (aliasUsage.referencesOtherAlias()) {
                    newQueue.add(aliasUsage);
                } else {
                    aliasUsage.applyAlias();
                }
            }
            // Prevent an infinite loop.
            if (newQueue.size() == aliasWorkQueue.size()) {
                Var cycleVar = newQueue.get(0).aliasVar;
                compiler.report(JSError.make(cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));
                break;
            } else {
                aliasWorkQueue = newQueue;
            }
        }
        // Remove the alias definitions.
        for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {
            if (aliasDefinition.getParent().isVar() && aliasDefinition.getParent().hasOneChild()) {
                aliasDefinition.getParent().detachFromParent();
            } else {
                aliasDefinition.detachFromParent();
            }
        }
        // Collapse the scopes.
        for (Node scopeCall : traversal.getScopeCalls()) {
            Node expressionWithScopeCall = scopeCall.getParent();
            Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();
            scopeClosureBlock.detachFromParent();
            expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall, scopeClosureBlock);
            NodeUtil.tryMergeBlock(scopeClosureBlock);
        }
        if (traversal.getAliasUsages().size() > 0 || traversal.getAliasDefinitionsInOrder().size() > 0 || traversal.getScopeCalls().size() > 0) {
            compiler.reportCodeChange();
        }
    }
}","public void test22() throws Throwable {
    Compiler compiler0 = new Compiler();
    Node node0 = Node.newNumber(0.0);
    Node node1 = new Node(49, node0, node0, node0, node0, 0, 53);
    PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node1);
    CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
    ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, preprocessorSymbolTable0, compilerOptions_AliasTransformationHandler0);
    scopedAliases0.hotSwapScript(node0, node1);
    assertEquals(56, Node.CHANGE_TIME);
}",""
"public boolean isNew() {
    return this.getType() == Token.NEW;
}","public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    CompilerOptions.AliasTransformationHandler compilerOptions_AliasTransformationHandler0 = CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER;
    ScopedAliases scopedAliases0 = new ScopedAliases(compiler0, (PreprocessorSymbolTable) null, compilerOptions_AliasTransformationHandler0);
    Node node0 = compiler0.parseTestCode(""function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}"");
    scopedAliases0.hotSwapScript(node0, node0);
    assertFalse(node0.isNew());
}",""
