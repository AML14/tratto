focal_method,test_prefix,docstring
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test000() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType1, node0);
    recordType1.getGreatestSubtypeHelper(instanceObjectType0);
    assertTrue(recordType0.hasCachedValues());
}",""
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test001() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType1, node0);
    recordType1.getGreatestSubtypeHelper(instanceObjectType0);
    assertFalse(recordType0.equals((Object) recordType1));
}",""
"RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {
    super(registry, null, null);
    setPrettyPrint(true);
    for (String property : properties.keySet()) {
        RecordProperty prop = properties.get(property);
        if (prop == null) {
            throw new IllegalStateException(""RecordProperty associated with a property should not be null!"");
        }
        defineDeclaredProperty(property, prop.getType(), prop.getPropertyNode());
    }
    // Freeze the record type.
    isFrozen = true;
}","public void test012() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    hashMap0.put(""9"", (RecordTypeBuilder.RecordProperty) null);
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    RecordType recordType0 = null;
    try {
        recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // RecordProperty associated with a property should not be null!
        //
        verifyException(""com.google.javascript.rhino.jstype.RecordType"", e);
    }
}","/**
 * Creates a record type.
 *
 * @param registry The type registry under which this type lives.
 * @param properties A map of all the properties of this record type.
 * @throws IllegalStateException if the {@code RecordProperty} associated
 *         with a property is null.
 */"
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test023() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType0, node0);
    recordType1.getGreatestSubtypeHelper(instanceObjectType0);
    assertTrue(recordType1.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test034() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType0.getGreatestSubtypeHelper(recordType1);
    assertTrue(recordType0.hasCachedValues());
}",""
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test045() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = Node.newString(1, ""Named type with empty name component"", 0, 1);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = new RecordTypeBuilder.RecordProperty(recordType1, node0);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty1);
    RecordType recordType2 = new RecordType(jSTypeRegistry0, hashMap0);
    assertFalse(recordType2.equals((Object) recordType1));
}",""
"@Override
boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) {
    if (isFrozen) {
        return false;
    }
    if (!inferred) {
        properties.put(propertyName, type);
    }
    return super.defineProperty(propertyName, type, inferred, propertyNode);
}","public void test056() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ""Dnj|btf"");
    boolean boolean0 = recordType0.defineProperty(""Not declared as a type name"", errorFunctionType0, true, node0);
    assertFalse(boolean0);
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test067() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType1.getLeastSupertype(recordType0);
    assertTrue(recordType0.hasCachedValues());
}",""
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test068() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType1.getLeastSupertype(recordType0);
    assertFalse(recordType0.equals((Object) recordType1));
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test079() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType1, node0);
    recordType1.getLeastSupertype(recordType0);
    assertTrue(recordType1.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test0810() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType1.getLeastSupertype(recordType1);
    assertTrue(recordType1.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test0911() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType1.getGreatestSubtypeHelper(recordType0);
    assertTrue(recordType0.hasCachedValues());
}",""
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test0912() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType1.getGreatestSubtypeHelper(recordType0);
    assertTrue(jSType0.equals((Object) recordType1));
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1013() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType1, node0);
    recordType1.getGreatestSubtypeHelper(recordType0);
    assertTrue(recordType0.hasCachedValues());
}",""
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test1014() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1, 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType1, node0);
    recordType1.getGreatestSubtypeHelper(recordType0);
    assertFalse(recordType0.equals((Object) recordType1));
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1115() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
    hashMap0.put(""Named type with empty name component"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    recordType1.getGreatestSubtypeHelper(recordType1);
    assertTrue(recordType1.hasCachedValues());
}",""
"public boolean isEnumType() {
    return toMaybeEnumType() != null;
}","public void test1216() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
    JSType jSType0 = recordType0.getGreatestSubtypeHelper(noResolvedType0);
    assertFalse(jSType0.isEnumType());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1317() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, (Node) null);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType0, (Node) null);
    LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
    FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) recordType1, (List<JSType>) linkedList0);
    recordType1.getGreatestSubtypeHelper(functionType0);
    assertTrue(recordType1.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1418() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 0);
    ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
    JSType jSType0 = errorFunctionType0.getPropertyType(""N~J=@Iv"");
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, node0);
    ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, ""Not declared as a constructor"");
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType1);
    instanceObjectType0.defineDeclaredProperty(""Not declared as a type name"", jSType0, node0);
    recordType0.getGreatestSubtypeHelper(jSType0);
    assertTrue(recordType0.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1519() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = Node.newString(0, ""Not declared as a constructor"", 0, 0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Unknown class name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    InstanceObjectType instanceObjectType0 = (InstanceObjectType) recordType0.getLeastSupertype(recordType1);
    instanceObjectType0.defineDeclaredProperty(""Unknown class name"", recordType1, node0);
    recordType1.resolve(simpleErrorReporter0, recordType0);
    recordType1.getGreatestSubtypeHelper(instanceObjectType0);
    assertTrue(recordType1.hasCachedValues());
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1620() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    NullType nullType0 = new NullType(jSTypeRegistry0);
    recordType0.getLeastSupertype(nullType0);
    assertTrue(recordType0.hasCachedValues());
}",""
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test1721() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.getLeastSupertype(recordType1);
    boolean boolean0 = recordType1.removeProperty(""Not declared as a type name"");
    NoObjectType noObjectType0 = (NoObjectType) recordType1.getGreatestSubtypeHelper(jSType0);
    boolean boolean1 = RecordType.isSubtype((ObjectType) noObjectType0, recordType1);
    assertFalse(recordType1.equals((Object) recordType0));
}",""
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1722() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.getLeastSupertype(recordType1);
    boolean boolean0 = recordType1.removeProperty(""Not declared as a type name"");
    NoObjectType noObjectType0 = (NoObjectType) recordType1.getGreatestSubtypeHelper(jSType0);
    boolean boolean1 = RecordType.isSubtype((ObjectType) noObjectType0, recordType1);
    assertFalse(recordType1.hasCachedValues());
}",""
"static boolean isSubtype(ObjectType typeA, RecordType typeB) {
    // typeA is a subtype of record type typeB iff:
    // 1) typeA has all the properties declared in typeB.
    // 2) And for each property of typeB,
    //    2a) if the property of typeA is declared, it must be equal
    //        to the type of the property of typeB,
    //    2b) otherwise, it must be a subtype of the property of typeB.
    //
    // To figure out why this is true, consider the following pseudo-code:
    // /** @type {{a: (Object,null)}} */ var x;
    // /** @type {{a: !Object}} */ var y;
    // var z = {a: {}};
    // x.a = null;
    //
    // y cannot be assigned to x, because line 4 would violate y's declared
    // properties. But z can be assigned to x. Even though z and y are the
    // same type, the properties of z are inferred--and so an assignment
    // to the property of z would not violate any restrictions on it.
    for (String property : typeB.properties.keySet()) {
        if (!typeA.hasProperty(property)) {
            return false;
        }
        JSType propA = typeA.getPropertyType(property);
        JSType propB = typeB.getPropertyType(property);
        if (!propA.isUnknownType() && !propB.isUnknownType()) {
            if (typeA.isPropertyTypeDeclared(property)) {
                if (!propA.isEquivalentTo(propB)) {
                    return false;
                }
            } else {
                if (!propA.isSubtype(propB)) {
                    return false;
                }
            }
        }
    }
    return true;
}","public void test1723() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.getLeastSupertype(recordType1);
    boolean boolean0 = recordType1.removeProperty(""Not declared as a type name"");
    NoObjectType noObjectType0 = (NoObjectType) recordType1.getGreatestSubtypeHelper(jSType0);
    boolean boolean1 = RecordType.isSubtype((ObjectType) noObjectType0, recordType1);
    assertTrue(boolean1 == boolean0);
}","/**
 * Determines if typeA is a subtype of typeB
 */"
"@Override
public boolean hasCachedValues() {
    return super.hasCachedValues();
}","public void test1825() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.getLeastSupertype(recordType1);
    NoObjectType noObjectType0 = (NoObjectType) recordType1.getGreatestSubtypeHelper(jSType0);
    boolean boolean0 = RecordType.isSubtype((ObjectType) noObjectType0, recordType1);
    assertTrue(recordType0.hasCachedValues());
}",""
"static boolean isSubtype(ObjectType typeA, RecordType typeB) {
    // typeA is a subtype of record type typeB iff:
    // 1) typeA has all the properties declared in typeB.
    // 2) And for each property of typeB,
    //    2a) if the property of typeA is declared, it must be equal
    //        to the type of the property of typeB,
    //    2b) otherwise, it must be a subtype of the property of typeB.
    //
    // To figure out why this is true, consider the following pseudo-code:
    // /** @type {{a: (Object,null)}} */ var x;
    // /** @type {{a: !Object}} */ var y;
    // var z = {a: {}};
    // x.a = null;
    //
    // y cannot be assigned to x, because line 4 would violate y's declared
    // properties. But z can be assigned to x. Even though z and y are the
    // same type, the properties of z are inferred--and so an assignment
    // to the property of z would not violate any restrictions on it.
    for (String property : typeB.properties.keySet()) {
        if (!typeA.hasProperty(property)) {
            return false;
        }
        JSType propA = typeA.getPropertyType(property);
        JSType propB = typeB.getPropertyType(property);
        if (!propA.isUnknownType() && !propB.isUnknownType()) {
            if (typeA.isPropertyTypeDeclared(property)) {
                if (!propA.isEquivalentTo(propB)) {
                    return false;
                }
            } else {
                if (!propA.isSubtype(propB)) {
                    return false;
                }
            }
        }
    }
    return true;
}","public void test1826() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(0);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(recordType0, node0);
    hashMap0.put(""Not declared as a type name"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType0 = recordType0.getLeastSupertype(recordType1);
    NoObjectType noObjectType0 = (NoObjectType) recordType1.getGreatestSubtypeHelper(jSType0);
    boolean boolean0 = RecordType.isSubtype((ObjectType) noObjectType0, recordType1);
    assertTrue(boolean0);
}","/**
 * Determines if typeA is a subtype of typeB
 */"
"@Override
public boolean equals(Object jsType) {
    return (jsType instanceof JSType) ? isEquivalentTo((JSType) jsType) : false;
}","public void test1927() throws Throwable {
    SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
    JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
    HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
    RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
    Node node0 = new Node(1);
    JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) recordType0, ""Not declared as a constructor"", ""Unknown class name"", 4095, 29);
    RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(jSType0, node0);
    hashMap0.put(""Not declared as a constructor"", recordTypeBuilder_RecordProperty0);
    RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
    JSType jSType1 = recordType1.resolveInternal(simpleErrorReporter0, recordType0);
    assertFalse(jSType1.equals((Object) recordType0));
}",""
