project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test00,"public void test00() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, map0);
    disambiguateProperties0.renameProperties();
}",0,
project,0,test11,"public void test11() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;
    Node node0 = new Node(3021);
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    TightenTypes.ConcreteScope tightenTypes_ConcreteScope0 = tightenTypes0.new ConcreteScope((TightenTypes.ConcreteScope) null);
    ConcreteType concreteType0 = tightenTypes0.inferConcreteType(tightenTypes_ConcreteScope0, node0);
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, map0);
    ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty(""N"", concreteType0);
    assertNotNull(concreteType1);
}",0,assertNotNull(concreteType1)
project,0,test33,"public void test33() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    TightenTypes tightenTypes0 = new TightenTypes(compiler0);
    HashMap<String, CheckLevel> hashMap0 = new HashMap<String, CheckLevel>();
    CheckLevel checkLevel0 = CheckLevel.WARNING;
    hashMap0.put("")@J\""uNbn`YUqeO9<"", checkLevel0);
    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, hashMap0);
    assertNotNull(disambiguateProperties0);
}",0,
project,0,test44,"public void test44() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, map0);
    // Undeclared exception!
    try {
        disambiguateProperties0.process((Node) null, (Node) null);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.google.common.base.Preconditions"", e);
    }
}",0,
project,0,test55,"public void test55() throws Throwable {
    Compiler compiler0 = new Compiler();
    compiler0.getErrorManager();
    CompilerOptions compilerOptions0 = new CompilerOptions();
    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;
    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, map0);
    Multimap<String, Collection<JSType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();
    assertNotNull(multimap0);
}",0,assertNotNull(multimap0)
