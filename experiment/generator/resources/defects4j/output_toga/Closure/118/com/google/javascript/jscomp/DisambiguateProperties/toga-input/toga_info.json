{
  "test00" : {
    "methodSignature" : "void renameProperties()",
    "methodName" : "renameProperties",
    "className" : "com.google.javascript.jscomp.DisambiguateProperties",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;\n    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, map0);\n    disambiguateProperties0.renameProperties();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "T getTypeWithProperty(String field, T type)",
    "methodName" : "getTypeWithProperty",
    "className" : "com.google.javascript.jscomp.DisambiguateProperties",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;\n    Node node0 = new Node(3021);\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    TightenTypes.ConcreteScope tightenTypes_ConcreteScope0 = tightenTypes0.new ConcreteScope((TightenTypes.ConcreteScope) null);\n    ConcreteType concreteType0 = tightenTypes0.inferConcreteType(tightenTypes_ConcreteScope0, node0);\n    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, map0);\n    ConcreteType concreteType1 = disambiguateProperties0.getTypeWithProperty(\"N\", concreteType0);\n}",
    "testName" : "test11"
  },
  "test33" : {
    "methodSignature" : "static DisambiguateProperties<ConcreteType> forConcreteTypeSystem(AbstractCompiler compiler, TightenTypes tt, Map<String, CheckLevel> propertiesToErrorFor)",
    "methodName" : "forConcreteTypeSystem",
    "className" : "com.google.javascript.jscomp.DisambiguateProperties",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    TightenTypes tightenTypes0 = new TightenTypes(compiler0);\n    HashMap<String, CheckLevel> hashMap0 = new HashMap<String, CheckLevel>();\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    hashMap0.put(\")@J\\\"uNbn`YUqeO9<\", checkLevel0);\n    DisambiguateProperties<ConcreteType> disambiguateProperties0 = DisambiguateProperties.forConcreteTypeSystem(compiler0, tightenTypes0, hashMap0);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public void process(Node externs, Node root)",
    "methodName" : "process",
    "className" : "com.google.javascript.jscomp.DisambiguateProperties",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;\n    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, map0);\n    disambiguateProperties0.process((Node) null, (Node) null);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "Multimap<String, Collection<T>> getRenamedTypesForTesting()",
    "methodName" : "getRenamedTypesForTesting",
    "className" : "com.google.javascript.jscomp.DisambiguateProperties",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.getErrorManager();\n    CompilerOptions compilerOptions0 = new CompilerOptions();\n    Map<String, CheckLevel> map0 = compilerOptions0.propertyInvalidationErrors;\n    DisambiguateProperties<JSType> disambiguateProperties0 = DisambiguateProperties.forJSTypeSystem(compiler0, map0);\n    Multimap<String, Collection<JSType>> multimap0 = disambiguateProperties0.getRenamedTypesForTesting();\n}",
    "testName" : "test55"
  }
}