{
  "test01" : {
    "methodSignature" : "public boolean hasErrors()",
    "methodName" : "hasErrors",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"goog.base\");\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);\n    processClosurePrimitives0.process(node0, node0);\n    compiler0.hasErrors();\n}",
    "testName" : "test01"
  },
  "test12" : {
    "methodSignature" : "static Node parseAndNormalizeTestCode(AbstractCompiler compiler, String code)",
    "methodName" : "parseAndNormalizeTestCode",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test12() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    compiler0.newCompilerOptions();\n    Normalize.parseAndNormalizeTestCode(compiler0, \"// Input %num%\");\n}",
    "testName" : "test12"
  },
  "test34" : {
    "methodSignature" : "public int getLineno()",
    "methodName" : "getLineno",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test34() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\");\n    CheckLevel checkLevel0 = CheckLevel.OFF;\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, checkLevel0);\n    processClosurePrimitives0.process(node0, node0);\n    node0.getLineno();\n}",
    "testName" : "test34"
  },
  "test45" : {
    "methodSignature" : "public boolean hasMoreThanOneChild()",
    "methodName" : "hasMoreThanOneChild",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test45() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = new Node(37, 37, 37);\n    Node node1 = new Node(37, node0, node0, node0);\n    PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);\n    processClosurePrimitives0.visit(nodeTraversal0, node1, node0);\n    node1.hasMoreThanOneChild();\n}",
    "testName" : "test45"
  },
  "test56" : {
    "methodSignature" : "public int getChildCount()",
    "methodName" : "getChildCount",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test56() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    Node node0 = new Node(105);\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, compilerOptions0.brokenClosureRequiresLevel);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);\n    Node node1 = new Node(43, node0, node0, node0, 0, 1);\n    processClosurePrimitives0.visit(nodeTraversal0, node0, node0);\n    node0.getChildCount();\n}",
    "testName" : "test56"
  },
  "test67" : {
    "methodSignature" : "public boolean isGetElem()",
    "methodName" : "isGetElem",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test67() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"msg.invalid.iterator\");\n    CheckLevel checkLevel0 = CheckLevel.ERROR;\n    PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);\n    processClosurePrimitives0.process(node0, node0);\n    node0.isGetElem();\n}",
    "testName" : "test67"
  },
  "test78" : {
    "methodSignature" : "public void visit(NodeTraversal t, Node n, Node parent)",
    "methodName" : "visit",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test78() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();\n    Node node0 = new Node(86);\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, (PreprocessorSymbolTable) null, compilerOptions0.checkMissingReturn);\n    NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, processClosurePrimitives0);\n    processClosurePrimitives0.visit(nodeTraversal0, node0, node0);\n}",
    "testName" : "test78"
  },
  "test00" : {
    "methodSignature" : "public int getErrorCount()",
    "methodName" : "getErrorCount",
    "className" : "com.google.javascript.jscomp.ProcessClosurePrimitives",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Compiler compiler0 = new Compiler();\n    Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, \"goog.base\");\n    CheckLevel checkLevel0 = CheckLevel.WARNING;\n    PreprocessorSymbolTable preprocessorSymbolTable0 = new PreprocessorSymbolTable(node0);\n    ProcessClosurePrimitives processClosurePrimitives0 = new ProcessClosurePrimitives(compiler0, preprocessorSymbolTable0, checkLevel0);\n    processClosurePrimitives0.process(node0, node0);\n    compiler0.getErrorCount();\n}",
    "testName" : "test00"
  }
}