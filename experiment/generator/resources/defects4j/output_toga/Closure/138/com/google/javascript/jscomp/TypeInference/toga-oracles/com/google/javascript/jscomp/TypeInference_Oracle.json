[ {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0000"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0011"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "Multimap<Scope, Var> getAssignedOuterLocalVars()",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0022"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0033"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0044"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0055"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0066"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0077"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0088"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test0099"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01010"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01212"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01515"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01616"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01818"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test01919"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02020"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02121"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02222"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02424"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02828"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test02929"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03030"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03131"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03232"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03333"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03535"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03636"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03737"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test03838"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04040"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04141"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04242"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04343"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04444"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04646"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04747"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test04949"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05050"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05151"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test05252"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06161"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06464"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06767"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test06969"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test07171"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test07474"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test07575"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test08282"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test08383"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test08484"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test08585"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test08787"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test08989"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test09595"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test09797"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test09898"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test09999"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test100100"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "FlowScope flowThrough(Node n, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test101101"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test103103"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test104104"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test108108"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test110110"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test111111"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test112112"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test113113"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test114114"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test115115"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test116116"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test117117"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "List<FlowScope> branchedFlowThrough(Node source, FlowScope input)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test118118"
}, {
  "className" : "com.google.javascript.jscomp.TypeInference",
  "methodSignature" : "static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition)",
  "oracleType" : "NON_AXIOMATIC",
  "oracle" : "",
  "exception" : "",
  "testName" : "test119119"
} ]