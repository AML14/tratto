project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    try {
        cSVFormat1.validate();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('\""')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test0011,"public void test0011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,assertTrue(cSVFormat2.isCommentingEnabled())
project,0,test0012,"public void test0012() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test0013,"public void test0013() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat2.isQuoting());
}",0,assertTrue(cSVFormat2.isQuoting())
project,0,test0014,"public void test0014() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test0015,"public void test0015() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertEquals('5', (char) cSVFormat2.getEscape());
}",0,
project,0,test0016,"public void test0016() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test0017,"public void test0017() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertEquals(':', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test0018,"public void test0018() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertTrue(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test0019,"public void test0019() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat2.isNullHandling());
}",0,
project,0,test00210,"public void test00210() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test00211,"public void test00211() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test00212,"public void test00212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test00213,"public void test00213() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.equals((Object) cSVFormat1));
}",0,
project,0,test00214,"public void test00214() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('y', cSVFormat1.getDelimiter());
}",0,
project,0,test00215,"public void test00215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test00216,"public void test00216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscaping());
}",0,assertFalse(cSVFormat1.isEscaping())
project,0,test00217,"public void test00217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00218,"public void test00218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test00319,"public void test00319() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    cSVFormat0.MYSQL.validate();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test00420,"public void test00420() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test00421,"public void test00421() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertEquals(""file"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test00422,"public void test00422() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.isQuoting());
}",0,
project,0,test00423,"public void test00423() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00424,"public void test00424() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test00425,"public void test00425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test00426,"public void test00426() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00427,"public void test00427() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test00528,"public void test00528() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test00529,"public void test00529() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,
project,0,test00530,"public void test00530() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertTrue(cSVFormat3.isEscaping());
}",0,assertTrue(cSVFormat3.isEscaping())
project,0,test00531,"public void test00531() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,
project,0,test00532,"public void test00532() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertFalse(cSVFormat3.isQuoting());
}",0,
project,0,test00533,"public void test00533() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertEquals("""", cSVFormat3.getNullString());
}",0,assertNotNull(cSVFormat3.getNullString())
project,0,test00534,"public void test00534() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertEquals('\t', cSVFormat3.getDelimiter());
}",0,assertNotNull(cSVFormat3.getDelimiter())
project,0,test00535,"public void test00535() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertEquals(""C<!Ss"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test00536,"public void test00536() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(""C<!Ss"");
    assertEquals('`', (char) cSVFormat3.getCommentStart());
}",0,
project,0,test00637,"public void test00637() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertTrue(cSVFormat2.isCommentingEnabled())
project,0,test00638,"public void test00638() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00639,"public void test00639() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00640,"public void test00640() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test00641,"public void test00641() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test00642,"public void test00642() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertTrue(cSVFormat2.isQuoting())
project,0,test00643,"public void test00643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test00644,"public void test00644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00645,"public void test00645() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00646,"public void test00646() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertEquals('C', (char) cSVFormat2.getCommentStart());
}",0,
project,0,test00747,"public void test00747() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00748,"public void test00748() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test00749,"public void test00749() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00750,"public void test00750() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat2.isQuoting());
}",0,
project,0,test00751,"public void test00751() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00752,"public void test00752() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test00753,"public void test00753() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00754,"public void test00754() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test00855,"public void test00855() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00856,"public void test00856() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertFalse(cSVFormat1.isNullHandling());
}",0,
project,0,test00857,"public void test00857() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test00858,"public void test00858() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test00859,"public void test00859() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test00860,"public void test00860() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertTrue(cSVFormat1.isQuoting());
}",0,
project,0,test00861,"public void test00861() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertEquals(""@"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test00862,"public void test00862() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test00963,"public void test00963() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00964,"public void test00964() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertFalse(cSVFormat1.isEscaping());
}",0,
project,0,test00965,"public void test00965() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertEquals(""h"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test00966,"public void test00966() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test00967,"public void test00967() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertTrue(cSVFormat1.isQuoting());
}",0,
project,0,test00968,"public void test00968() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test00969,"public void test00969() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00970,"public void test00970() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test01071,"public void test01071() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertFalse(cSVFormat4.isNullHandling());
}",0,assertFalse(cSVFormat4.isNullHandling())
project,0,test01072,"public void test01072() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test01073,"public void test01073() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertFalse(cSVFormat4.isEscaping());
}",0,
project,0,test01074,"public void test01074() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test01075,"public void test01075() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test01076,"public void test01076() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertFalse(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test01077,"public void test01077() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertTrue(cSVFormat4.isQuoting());
}",0,assertFalse(cSVFormat4.isQuoting())
project,0,test01078,"public void test01078() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertEquals('c', (char) cSVFormat4.getCommentStart());
}",0,
project,0,test01079,"public void test01079() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test01080,"public void test01080() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    assertTrue(cSVFormat4.isCommentingEnabled());
}",0,assertFalse(cSVFormat4.isCommentingEnabled())
project,0,test01181,"public void test01181() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test01182,"public void test01182() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01183,"public void test01183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test01184,"public void test01184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test01185,"public void test01185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test01186,"public void test01186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test01187,"public void test01187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertTrue(cSVFormat2.isQuoting())
project,0,test01288,"public void test01288() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01289,"public void test01289() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertTrue(cSVFormat2.isQuoting())
project,0,test01290,"public void test01290() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test01291,"public void test01291() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test01292,"public void test01292() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test01293,"public void test01293() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test01294,"public void test01294() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Quote quote0 = Quote.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test01395,"public void test01395() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01396,"public void test01396() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test01397,"public void test01397() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test01398,"public void test01398() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test01399,"public void test01399() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test014100,"public void test014100() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test014101,"public void test014101() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertEquals(""Y!6-apl"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test014102,"public void test014102() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test014103,"public void test014103() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test014104,"public void test014104() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test014105,"public void test014105() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test014106,"public void test014106() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test014107,"public void test014107() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Y!6-apl"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test015108,"public void test015108() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertFalse(cSVFormat3.isEscaping());
}",0,assertTrue(cSVFormat3.isEscaping())
project,0,test015109,"public void test015109() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test015110,"public void test015110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test015111,"public void test015111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test015112,"public void test015112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,
project,0,test015113,"public void test015113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertFalse(cSVFormat3.isNullHandling());
}",0,assertTrue(cSVFormat3.isNullHandling())
project,0,test015114,"public void test015114() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test015115,"public void test015115() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('c');
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);
    assertTrue(cSVFormat3.isQuoting());
}",0,assertTrue(cSVFormat3.isQuoting())
project,0,test016116,"public void test016116() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test016117,"public void test016117() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test016118,"public void test016118() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test016119,"public void test016119() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test016120,"public void test016120() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test016121,"public void test016121() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertEquals(""F0%>FX7T#"", cSVFormat2.getNullString());
}",0,
project,0,test016122,"public void test016122() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test016123,"public void test016123() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertEquals('L', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test016124,"public void test016124() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""F0%>FX7T#"");
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test017125,"public void test017125() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test017126,"public void test017126() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test017127,"public void test017127() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertTrue(cSVFormat3.isQuoting());
}",0,assertTrue(cSVFormat3.isQuoting())
project,0,test017128,"public void test017128() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertEquals(""C"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test017129,"public void test017129() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertFalse(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test017130,"public void test017130() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertFalse(cSVFormat3.isNullHandling());
}",0,
project,0,test017131,"public void test017131() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test017132,"public void test017132() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test017133,"public void test017133() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertTrue(cSVFormat3.isCommentingEnabled());
}",0,assertTrue(cSVFormat3.isCommentingEnabled())
project,0,test017134,"public void test017134() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertEquals('C', (char) cSVFormat3.getCommentStart());
}",0,
project,0,test017135,"public void test017135() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertEquals('[', (char) cSVFormat3.getQuoteChar());
}",0,
project,0,test017136,"public void test017136() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');
    assertFalse(cSVFormat3.isEscaping());
}",0,assertTrue(cSVFormat3.isEscaping())
project,0,test018137,"public void test018137() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test018138,"public void test018138() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test018139,"public void test018139() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test018140,"public void test018140() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test018141,"public void test018141() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test018142,"public void test018142() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test018143,"public void test018143() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test018144,"public void test018144() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');
    assertEquals('4', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test019145,"public void test019145() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test020146,"public void test020146() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test020147,"public void test020147() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test020148,"public void test020148() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test020149,"public void test020149() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertFalse(cSVFormat2.isEscaping());
}",0,
project,0,test020150,"public void test020150() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test020151,"public void test020151() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test020152,"public void test020152() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertEquals(""JTw[q9vDLA7X}"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test020153,"public void test020153() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertEquals('c', (char) cSVFormat2.getCommentStart());
}",0,
project,0,test020154,"public void test020154() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test020155,"public void test020155() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""JTw[q9vDLA7X}"");
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test021156,"public void test021156() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.isEscaping());
}",0,
project,0,test021157,"public void test021157() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test021158,"public void test021158() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test021159,"public void test021159() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertEquals(""JTw[q9vDLA7X}"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test021160,"public void test021160() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test021161,"public void test021161() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test021162,"public void test021162() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test021163,"public void test021163() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test021164,"public void test021164() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test021165,"public void test021165() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""JTw[q9vDLA7X}"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test022166,"public void test022166() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertEquals(',', cSVFormat3.getDelimiter());
}",1,
project,0,test022167,"public void test022167() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertEquals(""\r\n"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test022168,"public void test022168() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertTrue(cSVFormat3.isQuoting());
}",0,assertTrue(cSVFormat3.isQuoting())
project,0,test022169,"public void test022169() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test022170,"public void test022170() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test022171,"public void test022171() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test022172,"public void test022172() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertFalse(cSVFormat3.isEscaping());
}",0,assertTrue(cSVFormat3.isEscaping())
project,0,test022173,"public void test022173() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertEquals(""JTw[q9vDLA7X}"", cSVFormat3.getNullString());
}",0,assertNotNull(cSVFormat3.getNullString())
project,0,test022174,"public void test022174() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString(""JTw[q9vDLA7X}"");
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test023175,"public void test023175() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test024176,"public void test024176() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test024177,"public void test024177() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat3.getSkipHeaderRecord());
}",0,
project,0,test024178,"public void test024178() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat3.isQuoting());
}",0,
project,0,test024179,"public void test024179() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.isNullHandling());
}",0,assertFalse(cSVFormat3.isNullHandling())
project,0,test024180,"public void test024180() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test024181,"public void test024181() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test024182,"public void test024182() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test024183,"public void test024183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat3.isCommentingEnabled());
}",0,assertTrue(cSVFormat3.isCommentingEnabled())
project,0,test024184,"public void test024184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertEquals('c', (char) cSVFormat3.getCommentStart());
}",0,
project,0,test024185,"public void test024185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test024186,"public void test024186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.isEscaping());
}",0,assertTrue(cSVFormat3.isEscaping())
project,0,test025187,"public void test025187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test025188,"public void test025188() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test025189,"public void test025189() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test025190,"public void test025190() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test025191,"public void test025191() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test025192,"public void test025192() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test025193,"public void test025193() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test025194,"public void test025194() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test025195,"public void test025195() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test026196,"public void test026196() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test026197,"public void test026197() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test026198,"public void test026198() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test026199,"public void test026199() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test026200,"public void test026200() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test026201,"public void test026201() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test026202,"public void test026202() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test026203,"public void test026203() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test026204,"public void test026204() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test026205,"public void test026205() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test027206,"public void test027206() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test027207,"public void test027207() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test027208,"public void test027208() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test027209,"public void test027209() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test027210,"public void test027210() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertFalse(cSVFormat2.isEscaping())
project,0,test027211,"public void test027211() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test027212,"public void test027212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test027213,"public void test027213() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test028214,"public void test028214() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertEquals(""e"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test028215,"public void test028215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertTrue(cSVFormat4.isQuoting());
}",0,assertTrue(cSVFormat4.isQuoting())
project,0,test028216,"public void test028216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertTrue(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test028217,"public void test028217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test028218,"public void test028218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertFalse(cSVFormat4.isEscaping());
}",0,assertTrue(cSVFormat4.isEscaping())
project,0,test028219,"public void test028219() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test028220,"public void test028220() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertFalse(cSVFormat4.isNullHandling());
}",0,assertTrue(cSVFormat4.isNullHandling())
project,0,test028221,"public void test028221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test028222,"public void test028222() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);
    assertFalse(cSVFormat3.equals((Object) cSVFormat1));
}",0,
project,0,test029223,"public void test029223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test029224,"public void test029224() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
    assertFalse(cSVFormat1.isEscaping());
}",0,assertFalse(cSVFormat1.isEscaping())
project,0,test029225,"public void test029225() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test029226,"public void test029226() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test029227,"public void test029227() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test029228,"public void test029228() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test029229,"public void test029229() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test030230,"public void test030230() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test030231,"public void test030231() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test030232,"public void test030232() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(""The header contains duplicate names: "", cSVFormat2.getNullString());
}",0,
project,0,test030233,"public void test030233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test030234,"public void test030234() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test030235,"public void test030235() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test030236,"public void test030236() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('!', (char) cSVFormat2.getEscape());
}",0,
project,0,test030237,"public void test030237() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test030238,"public void test030238() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The header contains duplicate names: "");
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test031239,"public void test031239() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertFalse(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test031240,"public void test031240() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test031241,"public void test031241() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertEquals('!', (char) cSVFormat1.getCommentStart());
}",0,
project,0,test031242,"public void test031242() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test031243,"public void test031243() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test031244,"public void test031244() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test031245,"public void test031245() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertFalse(cSVFormat2.isNullHandling());
}",0,
project,0,test031246,"public void test031246() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test032247,"public void test032247() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isNullHandling());
}",0,
project,0,test032248,"public void test032248() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test032249,"public void test032249() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test032250,"public void test032250() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\'', (char) cSVFormat2.getEscape());
}",0,
project,0,test032251,"public void test032251() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test032252,"public void test032252() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test032253,"public void test032253() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test032254,"public void test032254() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test033255,"public void test033255() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test033256,"public void test033256() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals('2', (char) cSVFormat2.getEscape());
}",0,
project,0,test033257,"public void test033257() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals('\""', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test033258,"public void test033258() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test033259,"public void test033259() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test033260,"public void test033260() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test033261,"public void test033261() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test033262,"public void test033262() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test033263,"public void test033263() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test034264,"public void test034264() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test034265,"public void test034265() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals('2', (char) cSVFormat2.getCommentStart());
}",0,
project,0,test034266,"public void test034266() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test034267,"public void test034267() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test034268,"public void test034268() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test034269,"public void test034269() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals('\""', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test034270,"public void test034270() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertTrue(cSVFormat1.isCommentingEnabled());
}",0,
project,0,test034271,"public void test034271() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test034272,"public void test034272() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals('2', (char) cSVFormat2.getEscape());
}",0,
project,0,test035273,"public void test035273() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test035274,"public void test035274() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test035275,"public void test035275() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals('\""', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test035276,"public void test035276() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test035277,"public void test035277() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,assertTrue(cSVFormat2.isCommentingEnabled())
project,0,test035278,"public void test035278() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test035279,"public void test035279() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test035280,"public void test035280() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');
    assertEquals('2', (char) cSVFormat2.getEscape());
}",0,
project,0,test036281,"public void test036281() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,
project,0,test036282,"public void test036282() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertEquals('h', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test036283,"public void test036283() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertEquals('q', (char) cSVFormat2.getEscape());
}",0,
project,0,test036284,"public void test036284() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test036285,"public void test036285() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test036286,"public void test036286() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test036287,"public void test036287() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test036288,"public void test036288() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test037289,"public void test037289() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertEquals('Q', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test037290,"public void test037290() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test037291,"public void test037291() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test037292,"public void test037292() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertTrue(cSVFormat2.isQuoting());
}",0,assertTrue(cSVFormat2.isQuoting())
project,0,test037293,"public void test037293() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test037294,"public void test037294() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertTrue(cSVFormat2.isCommentingEnabled())
project,0,test037295,"public void test037295() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test037296,"public void test037296() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertEquals('\""', (char) cSVFormat2.getCommentStart());
}",0,
project,0,test037297,"public void test037297() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\""');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test038298,"public void test038298() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test038299,"public void test038299() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test038300,"public void test038300() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test038301,"public void test038301() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test038302,"public void test038302() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test038303,"public void test038303() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
    assertEquals('o', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test038304,"public void test038304() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test039305,"public void test039305() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test039306,"public void test039306() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test039307,"public void test039307() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test039308,"public void test039308() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
    assertFalse(cSVFormat1.isNullHandling());
}",0,
project,0,test039309,"public void test039309() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test039310,"public void test039310() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test039311,"public void test039311() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');
    assertEquals('e', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test040312,"public void test040312() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test040313,"public void test040313() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test040314,"public void test040314() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertEquals(""file"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test040315,"public void test040315() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test040316,"public void test040316() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test040317,"public void test040317() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test040318,"public void test040318() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test040319,"public void test040319() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test040320,"public void test040320() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""file"");
    Character character0 = Character.valueOf('E');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test041321,"public void test041321() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test042322,"public void test042322() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test042323,"public void test042323() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test042324,"public void test042324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test042325,"public void test042325() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test042326,"public void test042326() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test042327,"public void test042327() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test042328,"public void test042328() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test042329,"public void test042329() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test043330,"public void test043330() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test043331,"public void test043331() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.isQuoting());
}",0,
project,0,test043332,"public void test043332() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test043333,"public void test043333() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertFalse(cSVFormat2.isNullHandling())
project,0,test043334,"public void test043334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test043335,"public void test043335() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test043336,"public void test043336() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test043337,"public void test043337() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('<');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test044338,"public void test044338() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test044339,"public void test044339() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test044340,"public void test044340() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test044341,"public void test044341() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertEquals('4', (char) cSVFormat2.getCommentStart());
}",0,
project,0,test044342,"public void test044342() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test044343,"public void test044343() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test044344,"public void test044344() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test044345,"public void test044345() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test044346,"public void test044346() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test045347,"public void test045347() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertTrue(cSVFormat2.isQuoting());
}",0,assertTrue(cSVFormat2.isQuoting())
project,0,test045348,"public void test045348() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test045349,"public void test045349() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test045350,"public void test045350() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test045351,"public void test045351() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertEquals('h', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test045352,"public void test045352() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test045353,"public void test045353() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test045354,"public void test045354() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test045355,"public void test045355() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertTrue(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test045356,"public void test045356() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');
    assertEquals('h', (char) cSVFormat2.getCommentStart());
}",0,
project,0,test046357,"public void test046357() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test046358,"public void test046358() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test046359,"public void test046359() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test046360,"public void test046360() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test046361,"public void test046361() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
project,0,test046362,"public void test046362() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test046363,"public void test046363() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertTrue(cSVFormat2.isNullHandling())
project,0,test046364,"public void test046364() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test046365,"public void test046365() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    StringReader stringReader0 = new StringReader(""R&Q"");
    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
    assertTrue(cSVFormat2.isQuoting());
}",0,
project,0,test047366,"public void test047366() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test047367,"public void test047367() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test047368,"public void test047368() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test047369,"public void test047369() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test047370,"public void test047370() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test047371,"public void test047371() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test047372,"public void test047372() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertEquals('e', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test048373,"public void test048373() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
    cSVFormat0.getRecordSeparator();
    assertEquals(':', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test048374,"public void test048374() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test048375,"public void test048375() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test048376,"public void test048376() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test049377,"public void test049377() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test049378,"public void test049378() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test049379,"public void test049379() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test049380,"public void test049380() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test049381,"public void test049381() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertNotNull(string0);
}",0,
project,0,test049382,"public void test049382() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test049383,"public void test049383() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertTrue(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test049384,"public void test049384() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test050385,"public void test050385() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.getQuotePolicy();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test050386,"public void test050386() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.getQuotePolicy();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test050387,"public void test050387() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.getQuotePolicy();
    assertTrue(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test050388,"public void test050388() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.getQuotePolicy();
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test050389,"public void test050389() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.getQuotePolicy();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test050390,"public void test050390() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.getQuotePolicy();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test050391,"public void test050391() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.getQuotePolicy();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test051392,"public void test051392() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = cSVFormat0.getQuoteChar();
    assertNull(character0);
}",0,
project,0,test052393,"public void test052393() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.isEscaping());
}",0,
project,0,test052394,"public void test052394() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test052395,"public void test052395() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test052396,"public void test052396() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test052397,"public void test052397() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test052398,"public void test052398() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test052399,"public void test052399() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""f)ob"", string0);
}",0,
project,0,test052400,"public void test052400() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""f)ob"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test053401,"public void test053401() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test053402,"public void test053402() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.isQuoting());
}",0,
project,0,test053403,"public void test053403() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test053404,"public void test053404() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test053405,"public void test053405() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test053406,"public void test053406() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,
project,0,test053407,"public void test053407() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals("""", string0);
}",0,
project,0,test053408,"public void test053408() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test054409,"public void test054409() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test055410,"public void test055410() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test055411,"public void test055411() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test055412,"public void test055412() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test055413,"public void test055413() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertTrue(cSVFormat1.isCommentingEnabled())
project,0,test055414,"public void test055414() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertFalse(cSVFormat1.isNullHandling());
}",0,
project,0,test055415,"public void test055415() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test055416,"public void test055416() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test055417,"public void test055417() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
    assertFalse(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test056418,"public void test056418() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test056419,"public void test056419() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test056420,"public void test056420() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test056421,"public void test056421() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test056422,"public void test056422() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test056423,"public void test056423() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test056424,"public void test056424() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test057425,"public void test057425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test057426,"public void test057426() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test057427,"public void test057427() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test057428,"public void test057428() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertFalse(cSVFormat1.isNullHandling());
}",0,
project,0,test057429,"public void test057429() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertEquals('\""', (char) cSVFormat1.getQuoteChar());
}",0,
project,0,test057430,"public void test057430() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertTrue(cSVFormat1.isCommentingEnabled())
project,0,test057431,"public void test057431() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertEquals('c', (char) character0);
}",0,
project,0,test057432,"public void test057432() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');
    Character character0 = cSVFormat1.getEscape();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test058433,"public void test058433() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test058434,"public void test058434() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test058435,"public void test058435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
    char char0 = cSVFormat0.getDelimiter();
    assertEquals('1', char0);
}",0,
project,0,test058436,"public void test058436() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test059437,"public void test059437() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test059438,"public void test059438() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
    char char0 = cSVFormat0.getDelimiter();
    assertEquals('r', char0);
}",0,
project,0,test059439,"public void test059439() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",1,
project,0,test059440,"public void test059440() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test060441,"public void test060441() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test060442,"public void test060442() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test060443,"public void test060443() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertTrue(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test060444,"public void test060444() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test060445,"public void test060445() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertNotNull(character0);
}",0,assertNotNull(character0)
project,0,test060446,"public void test060446() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test060447,"public void test060447() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test060449,"public void test060449() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');
    Character character0 = cSVFormat1.getCommentStart();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test061450,"public void test061450() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    // Undeclared exception!
    try {
        cSVFormat0.RFC4180.parse((Reader) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'reader' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test062451,"public void test062451() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    // Undeclared exception!
    try {
        cSVFormat0.format((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test063452,"public void test063452() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isQuoting();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test064453,"public void test064453() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    boolean boolean0 = cSVFormat0.isQuoting();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test065454,"public void test065454() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""\u2029"");
    boolean boolean0 = cSVFormat1.isNullHandling();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test065455,"public void test065455() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""\u2029"");
    boolean boolean0 = cSVFormat1.isNullHandling();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test065456,"public void test065456() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""\u2029"");
    boolean boolean0 = cSVFormat1.isNullHandling();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test065457,"public void test065457() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""\u2029"");
    boolean boolean0 = cSVFormat1.isNullHandling();
    assertEquals('x', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test065458,"public void test065458() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""\u2029"");
    boolean boolean0 = cSVFormat1.isNullHandling();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test066459,"public void test066459() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isNullHandling();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test067460,"public void test067460() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    boolean boolean0 = cSVFormat0.isEscaping();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test068461,"public void test068461() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isEscaping();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test069462,"public void test069462() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    boolean boolean0 = cSVFormat0.isCommentingEnabled();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test070463,"public void test070463() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test070464,"public void test070464() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test070465,"public void test070465() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertEquals('*', (char) cSVFormat1.getCommentStart());
}",0,
project,0,test070466,"public void test070466() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test070467,"public void test070467() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test070468,"public void test070468() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test070469,"public void test070469() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test070470,"public void test070470() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test070471,"public void test070471() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');
    boolean boolean0 = cSVFormat1.isCommentingEnabled();
    assertTrue(boolean0);
}",0,
project,0,test071472,"public void test071472() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = cSVFormat0.getHeader();
    assertNull(stringArray0);
}",0,
project,0,test072473,"public void test072473() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test073474,"public void test073474() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    cSVFormat0.getQuotePolicy();
}",0,
project,0,test074475,"public void test074475() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = cSVFormat0.getQuoteChar();
    assertEquals('\""', (char) character0);
}",0,
project,0,test075476,"public void test075476() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String string0 = cSVFormat0.getNullString();
    assertNull(string0);
}",0,
project,0,test076477,"public void test076477() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = cSVFormat0.getCommentStart();
    assertNull(character0);
}",0,
project,0,test077478,"public void test077478() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test078479,"public void test078479() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String string0 = cSVFormat0.getRecordSeparator();
    assertEquals(""\r\n"", string0);
}",0,
project,0,test079480,"public void test079480() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = cSVFormat0.getEscape();
    assertNull(character0);
}",0,
project,0,test080481,"public void test080481() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    char char0 = cSVFormat0.getDelimiter();
    assertEquals('\t', char0);
}",0,
project,0,test081482,"public void test081482() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    // Undeclared exception!
    try {
        cSVFormat0.withCommentStart('\r');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character cannot be a line break
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test082483,"public void test082483() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Quote quote0 = Quote.NONE;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    StringReader stringReader0 = new StringReader(""A"");
    // Undeclared exception!
    try {
        cSVFormat1.parse(stringReader0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No quotes mode set but no escape character is set
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test083484,"public void test083484() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');
    Character character0 = Character.valueOf('5');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
    StringReader stringReader0 = new StringReader("" SurroundingSpaces:ignored"");
    // Undeclared exception!
    try {
        cSVFormat2.parse(stringReader0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start and the escape character cannot be the same ('5')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test084485,"public void test084485() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    Object[] objectArray0 = new Object[9];
    // Undeclared exception!
    try {
        cSVFormat2.format(objectArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('!')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test085486,"public void test085486() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    Character character0 = Character.valueOf('{');
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    // Undeclared exception!
    try {
        cSVFormat3.format(objectArray0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the delimiter cannot be the same ('o')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test086487,"public void test086487() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    assertEquals('\""', (char) cSVFormat1.getQuoteChar());
}",0,
project,0,test086488,"public void test086488() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat1.format(objectArray0);
    assertEquals('o', (char) cSVFormat1.getCommentStart());
}",0,
project,0,test086489,"public void test086489() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat1.format(objectArray0);
    assertEquals(""\""\"","", string0);
}",0,
project,0,test086490,"public void test086490() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat1.format(objectArray0);
    assertTrue(cSVFormat1.isCommentingEnabled());
}",0,assertFalse(cSVFormat1.isCommentingEnabled())
project,0,test086491,"public void test086491() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test086492,"public void test086492() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test086493,"public void test086493() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test086494,"public void test086494() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test087495,"public void test087495() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""qtD`St}}MPE"");
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('Z');
    Quote quote0 = Quote.ALL;
    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);
    StringReader stringReader0 = new StringReader(""qtD`St}}MPE"");
    // Undeclared exception!
    try {
        cSVFormat4.parse(stringReader0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The escape character and the delimiter cannot be the same ('Z')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test088496,"public void test088496() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    Character character0 = Character.valueOf('[');
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
    StringReader stringReader0 = new StringReader("""");
    // Undeclared exception!
    try {
        cSVFormat1.parse(stringReader0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The quoteChar character and the delimiter cannot be the same ('[')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test089497,"public void test089497() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false Header:[]"", string0);
}",0,
project,0,test090498,"public void test090498() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    String string0 = cSVFormat0.toString();
    assertEquals(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"", string0);
}",0,
project,0,test091499,"public void test091499() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<\t> Escape=<\\> NullString=<qU?qMg?^#%W9> RecordSeparator=<\n> SkipHeaderRecord:false"", string0);
}",0,
project,0,test092500,"public void test092500() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    cSVFormat0.hashCode();
    assertEquals('A', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test092501,"public void test092501() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test092502,"public void test092502() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test092503,"public void test092503() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test093504,"public void test093504() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test093505,"public void test093505() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test093506,"public void test093506() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test093507,"public void test093507() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test094508,"public void test094508() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    cSVFormat0.TDF.hashCode();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test094509,"public void test094509() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    cSVFormat0.TDF.hashCode();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test094510,"public void test094510() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    cSVFormat0.TDF.hashCode();
    assertEquals('[', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test094511,"public void test094511() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    cSVFormat0.TDF.hashCode();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test095512,"public void test095512() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""FPE.2"");
    cSVFormat1.hashCode();
    assertEquals(""FPE.2"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test095513,"public void test095513() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""FPE.2"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test095514,"public void test095514() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""FPE.2"");
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test095515,"public void test095515() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""FPE.2"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test095516,"public void test095516() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""FPE.2"");
    cSVFormat1.hashCode();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test096517,"public void test096517() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test096518,"public void test096518() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    cSVFormat1.hashCode();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test096519,"public void test096519() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test096520,"public void test096520() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    cSVFormat1.hashCode();
    assertEquals('_', (char) cSVFormat1.getCommentStart());
}",0,
project,0,test096521,"public void test096521() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test097522,"public void test097522() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test097523,"public void test097523() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test097524,"public void test097524() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test097525,"public void test097525() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test097526,"public void test097526() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test098527,"public void test098527() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertNotNull(stringArray1);
}",0,assertNotNull(stringArray1)
project,0,test098528,"public void test098528() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test098529,"public void test098529() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test098530,"public void test098530() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertTrue(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test098531,"public void test098531() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test098532,"public void test098532() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertFalse(cSVFormat1.isCommentingEnabled())
project,0,test098533,"public void test098533() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test098534,"public void test098534() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test098535,"public void test098535() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);
    String[] stringArray1 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test099536,"public void test099536() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test099537,"public void test099537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test099538,"public void test099538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test099539,"public void test099539() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat0.getIgnoreEmptyLines())
project,0,test099540,"public void test099540() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(""["", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test099541,"public void test099541() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test099542,"public void test099542() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('[', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test100543,"public void test100543() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test100544,"public void test100544() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('q', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test100545,"public void test100545() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test100546,"public void test100546() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(boolean0);
}",0,
project,0,test100547,"public void test100547() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test101548,"public void test101548() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test101549,"public void test101549() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test101550,"public void test101550() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test101551,"public void test101551() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertTrue(cSVFormat1.isCommentingEnabled())
project,0,test101552,"public void test101552() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test101553,"public void test101553() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test101554,"public void test101554() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test101555,"public void test101555() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test102556,"public void test102556() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('W', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test102557,"public void test102557() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test102558,"public void test102558() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test102559,"public void test102559() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test102560,"public void test102560() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test102561,"public void test102561() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test102562,"public void test102562() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test103563,"public void test103563() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertTrue(cSVFormat1.isCommentingEnabled())
project,0,test103564,"public void test103564() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test103565,"public void test103565() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test103566,"public void test103566() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test103567,"public void test103567() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test103568,"public void test103568() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test103569,"public void test103569() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test103570,"public void test103570() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test103571,"public void test103571() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test104572,"public void test104572() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test104573,"public void test104573() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(boolean0);
}",0,
project,0,test104574,"public void test104574() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test104575,"public void test104575() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertEquals(""X"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test104576,"public void test104576() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertEquals('\t', cSVFormat2.getDelimiter());
}",1,
project,0,test104577,"public void test104577() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test104578,"public void test104578() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test104579,"public void test104579() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertTrue(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test104580,"public void test104580() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.isNullHandling());
}",0,
project,0,test104581,"public void test104581() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test104582,"public void test104582() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test105583,"public void test105583() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test105584,"public void test105584() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test105585,"public void test105585() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test105586,"public void test105586() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals("""", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test105587,"public void test105587() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test105588,"public void test105588() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test105589,"public void test105589() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isEscaping());
}",0,assertFalse(cSVFormat1.isEscaping())
project,0,test105590,"public void test105590() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test105591,"public void test105591() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test105592,"public void test105592() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertFalse(cSVFormat1.isCommentingEnabled())
project,0,test106593,"public void test106593() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test106594,"public void test106594() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test106595,"public void test106595() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test106596,"public void test106596() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test106597,"public void test106597() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertEquals(""qU?qMg?^#%W9"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test106598,"public void test106598() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.isCommentingEnabled());
}",0,assertFalse(cSVFormat2.isCommentingEnabled())
project,0,test106599,"public void test106599() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(boolean0);
}",0,
project,0,test106600,"public void test106600() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertTrue(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test106601,"public void test106601() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test106602,"public void test106602() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""qU?qMg?^#%W9"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertEquals(""<"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test107603,"public void test107603() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test107604,"public void test107604() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertTrue(cSVFormat1.isCommentingEnabled())
project,0,test107605,"public void test107605() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test107606,"public void test107606() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test107607,"public void test107607() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test107608,"public void test107608() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test107609,"public void test107609() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test107610,"public void test107610() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test107611,"public void test107611() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf('4');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test108612,"public void test108612() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertFalse(cSVFormat1.isCommentingEnabled())
project,0,test108613,"public void test108613() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test108614,"public void test108614() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test108615,"public void test108615() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test108616,"public void test108616() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test108617,"public void test108617() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test108618,"public void test108618() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test108619,"public void test108619() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test108620,"public void test108620() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\""', (char) cSVFormat1.getQuoteChar());
}",0,
project,0,test108621,"public void test108621() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('T', (char) cSVFormat1.getEscape());
}",0,
project,0,test109622,"public void test109622() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat2.isNullHandling());
}",0,assertFalse(cSVFormat2.isNullHandling())
project,0,test109623,"public void test109623() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertEquals('\""', (char) cSVFormat2.getQuoteChar());
}",0,
project,0,test109624,"public void test109624() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test109625,"public void test109625() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertTrue(boolean0);
}",0,
project,0,test109626,"public void test109626() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertTrue(cSVFormat2.isQuoting());
}",0,assertFalse(cSVFormat2.isQuoting())
project,0,test109627,"public void test109627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat2.equals((Object) cSVFormat0));
}",0,
project,0,test109628,"public void test109628() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat2.isEscaping());
}",0,assertTrue(cSVFormat2.isEscaping())
project,0,test109629,"public void test109629() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertEquals('o', (char) cSVFormat2.getCommentStart());
}",0,
project,0,test110630,"public void test110630() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test110631,"public void test110631() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test110632,"public void test110632() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test110633,"public void test110633() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test110634,"public void test110634() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test110635,"public void test110635() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test110636,"public void test110636() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\""', (char) cSVFormat1.getQuoteChar());
}",0,
project,0,test110637,"public void test110637() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test110638,"public void test110638() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscaping());
}",0,assertFalse(cSVFormat1.isEscaping())
project,0,test110639,"public void test110639() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('o', (char) cSVFormat1.getCommentStart());
}",0,
project,0,test111640,"public void test111640() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertFalse(cSVFormat1.isCommentingEnabled())
project,0,test111641,"public void test111641() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('t', (char) cSVFormat1.getQuoteChar());
}",0,
project,0,test111642,"public void test111642() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test111643,"public void test111643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test111644,"public void test111644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test111645,"public void test111645() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test111646,"public void test111646() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test111647,"public void test111647() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test111648,"public void test111648() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test111649,"public void test111649() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test112650,"public void test112650() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test112651,"public void test112651() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test112652,"public void test112652() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\\', (char) cSVFormat1.getEscape());
}",0,
project,0,test112653,"public void test112653() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test112654,"public void test112654() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test112655,"public void test112655() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test112656,"public void test112656() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test112657,"public void test112657() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('_', (char) cSVFormat1.getCommentStart());
}",0,
project,0,test112658,"public void test112658() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test112659,"public void test112659() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test113660,"public void test113660() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object object0 = new Object();
    boolean boolean0 = cSVFormat0.equals(object0);
    assertFalse(boolean0);
}",0,
project,0,test114661,"public void test114661() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(boolean0);
}",0,
project,0,test115662,"public void test115662() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertTrue(boolean0);
}",0,
project,0,test116663,"public void test116663() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test116664,"public void test116664() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test116665,"public void test116665() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertFalse(cSVFormat1.isCommentingEnabled())
project,0,test116666,"public void test116666() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test116667,"public void test116667() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscaping());
}",0,
project,0,test116668,"public void test116668() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test116669,"public void test116669() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('o', cSVFormat1.getDelimiter());
}",0,
project,0,test116670,"public void test116670() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test116671,"public void test116671() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test116672,"public void test116672() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test117673,"public void test117673() throws Throwable {
    // Undeclared exception!
    try {
        CSVFormat.newFormat('\r');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The delimiter cannot be a line break
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test118674,"public void test118674() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    // Undeclared exception!
    try {
        cSVFormat0.DEFAULT.withEscape('\r');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The escape character cannot be a line break
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test119675,"public void test119675() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[3];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(stringArray0);
    try {
        cSVFormat1.validate();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The header contains duplicate names: [null, null, null]
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test120676,"public void test120676() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.isQuoting());
}",0,assertTrue(cSVFormat1.isQuoting())
project,0,test120677,"public void test120677() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test120678,"public void test120678() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test120679,"public void test120679() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertTrue(cSVFormat1.isNullHandling())
project,0,test120680,"public void test120680() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertTrue(cSVFormat1.isCommentingEnabled())
project,0,test120681,"public void test120681() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test120682,"public void test120682() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test120683,"public void test120683() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test121684,"public void test121684() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<\t> Escape=<\\> CommentStart=<!> RecordSeparator=<\n> SkipHeaderRecord:false"", string0);
}",0,
project,0,test122685,"public void test122685() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    Quote quote0 = Quote.NONE;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test122686,"public void test122686() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    Quote quote0 = Quote.NONE;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test122687,"public void test122687() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    Quote quote0 = Quote.NONE;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('[', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test122688,"public void test122688() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    Quote quote0 = Quote.NONE;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test122689,"public void test122689() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    Quote quote0 = Quote.NONE;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test123690,"public void test123690() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,
project,0,test123691,"public void test123691() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test123692,"public void test123692() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test123693,"public void test123693() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\\', (char) cSVFormat1.getEscape());
}",0,
project,0,test123694,"public void test123694() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('_', (char) cSVFormat1.getQuoteChar());
}",0,
project,0,test123695,"public void test123695() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test123696,"public void test123696() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test123697,"public void test123697() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test123698,"public void test123698() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test123699,"public void test123699() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test123700,"public void test123700() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test124701,"public void test124701() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');
    String string0 = cSVFormat0.toString();
    assertEquals(""Delimiter=<[> SkipHeaderRecord:false"", string0);
}",0,
project,0,test125702,"public void test125702() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoting());
}",0,assertFalse(cSVFormat1.isQuoting())
project,0,test125703,"public void test125703() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscaping());
}",0,assertTrue(cSVFormat1.isEscaping())
project,0,test125704,"public void test125704() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test125705,"public void test125705() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullHandling());
}",0,assertFalse(cSVFormat1.isNullHandling())
project,0,test125706,"public void test125706() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test125707,"public void test125707() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test125708,"public void test125708() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isCommentingEnabled());
}",0,assertFalse(cSVFormat1.isCommentingEnabled())
project,0,test125709,"public void test125709() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test126710,"public void test126710() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test127711,"public void test127711() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    assertFalse(cSVFormat0.isQuoting());
}",0,assertTrue(cSVFormat0.isQuoting())
project,0,test127712,"public void test127712() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[2];
    cSVFormat0.format(objectArray0);
    assertTrue(cSVFormat0.isEscaping());
}",0,assertTrue(cSVFormat0.isEscaping())
