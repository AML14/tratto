{
  "test0000" : {
    "methodSignature" : "void validate() throws IllegalStateException",
    "methodName" : "validate",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    cSVFormat1.validate();\n}",
    "testName" : "test0000"
  },
  "test087495" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087495() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"qtD`St}}MPE\");\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('Z');\n    Quote quote0 = Quote.ALL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    StringReader stringReader0 = new StringReader(\"qtD`St}}MPE\");\n    cSVFormat4.parse(stringReader0);\n}",
    "testName" : "test087495"
  },
  "test052399" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n}",
    "testName" : "test052399"
  },
  "test052395" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052395() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test052395"
  },
  "test052396" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052396() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test052396"
  },
  "test052397" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test052397"
  },
  "test052398" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test052398"
  },
  "test052393" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052393() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test052393"
  },
  "test052394" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052394() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test052394"
  },
  "test0013" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0013() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test0013"
  },
  "test0014" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0014() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test0014"
  },
  "test065458" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065458() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\u2029\");\n    boolean boolean0 = cSVFormat1.isNullHandling();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test065458"
  },
  "test0015" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0015() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat2.getEscape();\n}",
    "testName" : "test0015"
  },
  "test065457" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065457() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\u2029\");\n    boolean boolean0 = cSVFormat1.isNullHandling();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test065457"
  },
  "test0016" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0016() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test0016"
  },
  "test065456" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065456() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\u2029\");\n    boolean boolean0 = cSVFormat1.isNullHandling();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test065456"
  },
  "test017136" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.isEscaping();\n}",
    "testName" : "test017136"
  },
  "test0011" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test0011"
  },
  "test0012" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0012() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test0012"
  },
  "test0017" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0017() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test0017"
  },
  "test065455" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065455() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\u2029\");\n    boolean boolean0 = cSVFormat1.isNullHandling();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test065455"
  },
  "test0018" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0018() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test0018"
  },
  "test065454" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065454() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\u2029\");\n    boolean boolean0 = cSVFormat1.isNullHandling();\n}",
    "testName" : "test065454"
  },
  "test0019" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter(':');\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test0019"
  },
  "test112657" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getCommentStart();\n}",
    "testName" : "test112657"
  },
  "test055417" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055417() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test055417"
  },
  "test112658" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test112658"
  },
  "test112659" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test112659"
  },
  "test055414" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test055414"
  },
  "test055413" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055413() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test055413"
  },
  "test055416" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055416() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test055416"
  },
  "test055415" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055415() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test055415"
  },
  "test017133" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.isCommentingEnabled();\n}",
    "testName" : "test017133"
  },
  "test055410" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055410() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test055410"
  },
  "test017132" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test017132"
  },
  "test112650" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test112650"
  },
  "test017135" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.getQuoteChar();\n}",
    "testName" : "test017135"
  },
  "test055412" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055412() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test055412"
  },
  "test112651" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test112651"
  },
  "test017134" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.getCommentStart();\n}",
    "testName" : "test017134"
  },
  "test055411" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055411() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test055411"
  },
  "test112652" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getEscape();\n}",
    "testName" : "test112652"
  },
  "test112653" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112653() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test112653"
  },
  "test112654" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test112654"
  },
  "test017131" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test017131"
  },
  "test112655" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test112655"
  },
  "test017130" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.isNullHandling();\n}",
    "testName" : "test017130"
  },
  "test112656" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test112656"
  },
  "test101549" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test101549"
  },
  "test017129" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test017129"
  },
  "test066459" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066459() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isNullHandling();\n}",
    "testName" : "test066459"
  },
  "test123699" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123699() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test123699"
  },
  "test123698" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123698() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test123698"
  },
  "test101548" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test101548"
  },
  "test123697" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123697() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test123697"
  },
  "test017126" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test017126"
  },
  "test043337" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test043337"
  },
  "test123696" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123696() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test123696"
  },
  "test017125" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test017125"
  },
  "test123695" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123695() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test123695"
  },
  "test017128" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test017128"
  },
  "test043335" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test043335"
  },
  "test123694" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123694() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getQuoteChar();\n}",
    "testName" : "test123694"
  },
  "test017127" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('[');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('C');\n    cSVFormat3.isQuoting();\n}",
    "testName" : "test017127"
  },
  "test043336" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test043336"
  },
  "test123693" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123693() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getEscape();\n}",
    "testName" : "test123693"
  },
  "test043333" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test043333"
  },
  "test043334" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test043334"
  },
  "test043331" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test043331"
  },
  "test043332" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test043332"
  },
  "test043330" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('<');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test043330"
  },
  "test056419" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056419() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test056419"
  },
  "test056418" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056418() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test056418"
  },
  "test031239" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031239() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test031239"
  },
  "test123692" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123692() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test123692"
  },
  "test123691" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123691() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test123691"
  },
  "test123690" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123690() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test123690"
  },
  "test101552" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test101552"
  },
  "test101553" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test101553"
  },
  "test101550" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test101550"
  },
  "test101551" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test101551"
  },
  "test126710" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126710() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test126710"
  },
  "test101554" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test101554"
  },
  "test101555" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test101555"
  },
  "test00213" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.equals((Object) cSVFormat1);\n}",
    "testName" : "test00213"
  },
  "test00214" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00214"
  },
  "test00211" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00211"
  },
  "test00212" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test00212"
  },
  "test00217" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00217"
  },
  "test00218" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test00218"
  },
  "test00215" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00215"
  },
  "test00216" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test00216"
  },
  "test031246" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031246() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test031246"
  },
  "test031245" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test031245"
  },
  "test031244" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031244() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test031244"
  },
  "test031243" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031243() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test031243"
  },
  "test031242" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031242() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test031242"
  },
  "test031241" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031241() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat1.getCommentStart();\n}",
    "testName" : "test031241"
  },
  "test031240" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031240() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test031240"
  },
  "test076477" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076477() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getCommentStart();\n}",
    "testName" : "test076477"
  },
  "test086488" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086488() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getCommentStart();\n}",
    "testName" : "test086488"
  },
  "test086489" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086489() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat1.format(objectArray0);\n}",
    "testName" : "test086489"
  },
  "test127711" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127711() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.isQuoting();\n}",
    "testName" : "test127711"
  },
  "test054409" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054409() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test054409"
  },
  "test127712" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127712() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[2];\n    cSVFormat0.format(objectArray0);\n    cSVFormat0.isEscaping();\n}",
    "testName" : "test127712"
  },
  "test00210" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('y');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test00210"
  },
  "test064453" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064453() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.isQuoting();\n}",
    "testName" : "test064453"
  },
  "test086487" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086487() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    cSVFormat1.getQuoteChar();\n}",
    "testName" : "test086487"
  },
  "test075476" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075476() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String string0 = cSVFormat0.getNullString();\n}",
    "testName" : "test075476"
  },
  "test113660" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object object0 = new Object();\n    boolean boolean0 = cSVFormat0.equals(object0);\n}",
    "testName" : "test113660"
  },
  "test086491" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086491() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test086491"
  },
  "test086492" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086492() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test086492"
  },
  "test029223" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test029223"
  },
  "test086493" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086493() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test086493"
  },
  "test029224" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test029224"
  },
  "test086494" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086494() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test086494"
  },
  "test026199" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test026199"
  },
  "test026198" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test026198"
  },
  "test026197" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test026197"
  },
  "test026196" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test026196"
  },
  "test029229" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test029229"
  },
  "test029225" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test029225"
  },
  "test029226" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test029226"
  },
  "test029227" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test029227"
  },
  "test029228" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test029228"
  },
  "test086490" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086490() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test086490"
  },
  "test018144" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test018144"
  },
  "test00319" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.MYSQL.validate();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test00319"
  },
  "test018142" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test018142"
  },
  "test038298" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test038298"
  },
  "test018143" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test018143"
  },
  "test038299" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test038299"
  },
  "test018140" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test018140"
  },
  "test018141" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test018141"
  },
  "test042328" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test042328"
  },
  "test042327" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test042327"
  },
  "test102559" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102559() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test102559"
  },
  "test042329" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test042329"
  },
  "test018139" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test018139"
  },
  "test042324" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test042324"
  },
  "test042323" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test042323"
  },
  "test018137" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test018137"
  },
  "test042326" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test042326"
  },
  "test114661" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n}",
    "testName" : "test114661"
  },
  "test018138" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('4');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test018138"
  },
  "test042325" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test042325"
  },
  "test042322" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test042322"
  },
  "test102557" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test102557"
  },
  "test102558" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test102558"
  },
  "test102556" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test102556"
  },
  "test00422" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test00422"
  },
  "test00423" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00423"
  },
  "test00420" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00420() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test00420"
  },
  "test099542" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099542() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test099542"
  },
  "test00421" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test00421"
  },
  "test099541" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test099541"
  },
  "test00426" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00426"
  },
  "test099540" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test099540"
  },
  "test00427" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00427"
  },
  "test00424" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00424"
  },
  "test00425" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test00425"
  },
  "test102562" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102562() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test102562"
  },
  "test00532" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.isQuoting();\n}",
    "testName" : "test00532"
  },
  "test00533" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.getNullString();\n}",
    "testName" : "test00533"
  },
  "test00530" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.isEscaping();\n}",
    "testName" : "test00530"
  },
  "test030238" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030238() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test030238"
  },
  "test00531" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test00531"
  },
  "test00536" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.getCommentStart();\n}",
    "testName" : "test00536"
  },
  "test030236" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030236() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getEscape();\n}",
    "testName" : "test030236"
  },
  "test102560" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102560() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test102560"
  },
  "test030237" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030237() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test030237"
  },
  "test102561" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102561() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('W');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test102561"
  },
  "test00534" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test00534"
  },
  "test030234" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030234() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test030234"
  },
  "test00535" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test00535"
  },
  "test030235" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030235() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test030235"
  },
  "test030232" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test030232"
  },
  "test030233" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test030233"
  },
  "test051392" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051392() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = cSVFormat0.getQuoteChar();\n}",
    "testName" : "test051392"
  },
  "test030230" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test030230"
  },
  "test099539" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test099539"
  },
  "test030231" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The header contains duplicate names: \");\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test030231"
  },
  "test099538" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test099538"
  },
  "test099537" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test099537"
  },
  "test099536" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test099536"
  },
  "test120683" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120683() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test120683"
  },
  "test01181" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test01181"
  },
  "test120680" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120680() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test120680"
  },
  "test120682" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120682() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test120682"
  },
  "test120681" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120681() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test120681"
  },
  "test01185" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test01185"
  },
  "test049381" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049381() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test049381"
  },
  "test01184" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test01184"
  },
  "test049380" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049380() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test049380"
  },
  "test01183" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test01183"
  },
  "test040320" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040320() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test040320"
  },
  "test049383" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049383() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test049383"
  },
  "test01182" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01182"
  },
  "test049382" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049382() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test049382"
  },
  "test049384" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049384() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test049384"
  },
  "test01187" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test01187"
  },
  "test01186" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test01186"
  },
  "test053404" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053404() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test053404"
  },
  "test053405" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053405() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test053405"
  },
  "test053406" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053406() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test053406"
  },
  "test053407" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053407() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n}",
    "testName" : "test053407"
  },
  "test053401" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053401() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test053401"
  },
  "test053402" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053402() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test053402"
  },
  "test053403" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053403() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test053403"
  },
  "test040319" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test040319"
  },
  "test040318" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040318() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test040318"
  },
  "test085486" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085486() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentStart('o');\n    Object[] objectArray0 = new Object[2];\n    cSVFormat3.format(objectArray0);\n}",
    "testName" : "test085486"
  },
  "test123700" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123700() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('_');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test123700"
  },
  "test037289" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test037289"
  },
  "test01291" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test01291"
  },
  "test015113" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat3.isNullHandling();\n}",
    "testName" : "test015113"
  },
  "test01290" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test01290"
  },
  "test015112" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test015112"
  },
  "test015115" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat3.isQuoting();\n}",
    "testName" : "test015115"
  },
  "test015114" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test015114"
  },
  "test01294" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test01294"
  },
  "test01293" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test01293"
  },
  "test01292" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test01292"
  },
  "test025187" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test025187"
  },
  "test120677" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120677() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test120677"
  },
  "test120676" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120676() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test120676"
  },
  "test120679" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120679() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test120679"
  },
  "test120678" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120678() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test120678"
  },
  "test028217" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test028217"
  },
  "test049378" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049378() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test049378"
  },
  "test110632" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110632() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test110632"
  },
  "test028218" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat4.isEscaping();\n}",
    "testName" : "test028218"
  },
  "test049377" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049377() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test049377"
  },
  "test110631" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110631() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test110631"
  },
  "test025189" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test025189"
  },
  "test028219" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test028219"
  },
  "test110630" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110630() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test110630"
  },
  "test01289" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test01289"
  },
  "test025188" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test025188"
  },
  "test049379" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049379() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test049379"
  },
  "test028214" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test028214"
  },
  "test028215" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat4.isQuoting();\n}",
    "testName" : "test028215"
  },
  "test028216" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test028216"
  },
  "test110639" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getCommentStart();\n}",
    "testName" : "test110639"
  },
  "test015111" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test015111"
  },
  "test110638" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test110638"
  },
  "test015110" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test015110"
  },
  "test110637" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test110637"
  },
  "test110636" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110636() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getQuoteChar();\n}",
    "testName" : "test110636"
  },
  "test110635" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110635() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test110635"
  },
  "test074475" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074475() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getQuoteChar();\n}",
    "testName" : "test074475"
  },
  "test110634" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110634() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test110634"
  },
  "test110633" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110633() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test110633"
  },
  "test084485" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084485() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    Object[] objectArray0 = new Object[9];\n    cSVFormat2.format(objectArray0);\n}",
    "testName" : "test084485"
  },
  "test124701" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124701() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    String string0 = cSVFormat0.toString();\n}",
    "testName" : "test124701"
  },
  "test015108" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat3.isEscaping();\n}",
    "testName" : "test015108"
  },
  "test025190" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test025190"
  },
  "test025194" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test025194"
  },
  "test028220" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat4.isNullHandling();\n}",
    "testName" : "test028220"
  },
  "test025193" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test025193"
  },
  "test028221" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test028221"
  },
  "test025192" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test025192"
  },
  "test028222" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('e');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(stringArray0);\n    cSVFormat3.equals((Object) cSVFormat1);\n}",
    "testName" : "test028222"
  },
  "test025191" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test025191"
  },
  "test01288" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01288"
  },
  "test015109" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteChar(character0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test015109"
  },
  "test025195" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test025195"
  },
  "test098532" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test098532"
  },
  "test098531" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test098531"
  },
  "test098530" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test098530"
  },
  "test01399" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test01399"
  },
  "test037290" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test037290"
  },
  "test037293" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test037293"
  },
  "test037294" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test037294"
  },
  "test050391" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050391() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.getQuotePolicy();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test050391"
  },
  "test037291" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test037291"
  },
  "test050390" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050390() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.getQuotePolicy();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test050390"
  },
  "test037292" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test037292"
  },
  "test037297" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test037297"
  },
  "test098535" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test098535"
  },
  "test037295" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test037295"
  },
  "test098534" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test098534"
  },
  "test037296" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\\\"');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Q');\n    cSVFormat2.getCommentStart();\n}",
    "testName" : "test037296"
  },
  "test073474" : {
    "methodSignature" : "public Quote getQuotePolicy()",
    "methodName" : "getQuotePolicy",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073474() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.getQuotePolicy();\n}",
    "testName" : "test073474"
  },
  "test098533" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test098533"
  },
  "test041321" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041321() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart((Character) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test041321"
  },
  "test01398" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test01398"
  },
  "test053408" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053408() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test053408"
  },
  "test063452" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063452() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isQuoting();\n}",
    "testName" : "test063452"
  },
  "test01397" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test01397"
  },
  "test01396" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01396() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test01396"
  },
  "test01395" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01395() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar((Character) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01395"
  },
  "test050389" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050389() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.getQuotePolicy();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test050389"
  },
  "test050388" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050388() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.getQuotePolicy();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test050388"
  },
  "test050387" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050387() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.getQuotePolicy();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test050387"
  },
  "test050386" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050386() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.getQuotePolicy();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test050386"
  },
  "test098529" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test098529"
  },
  "test098528" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test098528"
  },
  "test098527" : {
    "methodSignature" : "public String[] getHeader()",
    "methodName" : "getHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098527() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withHeader(stringArray0);\n    String[] stringArray1 = cSVFormat1.getHeader();\n}",
    "testName" : "test098527"
  },
  "test050385" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050385() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.getQuotePolicy();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test050385"
  },
  "test048373" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048373() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test048373"
  },
  "test048374" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048374() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test048374"
  },
  "test048375" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048375() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test048375"
  },
  "test048376" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048376() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(':');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test048376"
  },
  "test121684" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121684() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('!');\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test121684"
  },
  "test039308" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039308() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test039308"
  },
  "test016124" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test016124"
  },
  "test039307" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039307() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test039307"
  },
  "test039306" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039306() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test039306"
  },
  "test039305" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039305() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test039305"
  },
  "test039309" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039309() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test039309"
  },
  "test061450" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061450() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    cSVFormat0.RFC4180.parse((Reader) null);\n}",
    "testName" : "test061450"
  },
  "test024178" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024178() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.isQuoting();\n}",
    "testName" : "test024178"
  },
  "test111645" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test111645"
  },
  "test024179" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024179() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.isNullHandling();\n}",
    "testName" : "test024179"
  },
  "test027206" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027206() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test027206"
  },
  "test111646" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test111646"
  },
  "test024176" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024176"
  },
  "test027207" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027207() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test027207"
  },
  "test111647" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test111647"
  },
  "test024177" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test024177"
  },
  "test027208" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027208() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test027208"
  },
  "test111648" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test111648"
  },
  "test111649" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test111649"
  },
  "test016121" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test016121"
  },
  "test016120" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test016120"
  },
  "test016123" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test016123"
  },
  "test016122" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test016122"
  },
  "test111640" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test111640"
  },
  "test027209" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027209() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test027209"
  },
  "test111641" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getQuoteChar();\n}",
    "testName" : "test111641"
  },
  "test111642" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test111642"
  },
  "test111643" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test111643"
  },
  "test111644" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withQuoteChar('t');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test111644"
  },
  "test016118" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test016118"
  },
  "test036288" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test036288"
  },
  "test122687" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122687() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    Quote quote0 = Quote.NONE;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test122687"
  },
  "test016117" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test016117"
  },
  "test036287" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test036287"
  },
  "test122688" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122688() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    Quote quote0 = Quote.NONE;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test122688"
  },
  "test122685" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122685() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    Quote quote0 = Quote.NONE;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test122685"
  },
  "test016119" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test016119"
  },
  "test122686" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122686() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    Quote quote0 = Quote.NONE;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test122686"
  },
  "test016116" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"F0%>FX7T#\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('L');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test016116"
  },
  "test024181" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024181"
  },
  "test024182" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test024182"
  },
  "test027210" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test027210"
  },
  "test024180" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024180() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test024180"
  },
  "test027211" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test027211"
  },
  "test024185" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test024185"
  },
  "test062451" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062451() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.format((Object[]) null);\n}",
    "testName" : "test062451"
  },
  "test024186" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.isEscaping();\n}",
    "testName" : "test024186"
  },
  "test024183" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.isCommentingEnabled();\n}",
    "testName" : "test024183"
  },
  "test122689" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122689() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    Quote quote0 = Quote.NONE;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test122689"
  },
  "test024184" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getCommentStart();\n}",
    "testName" : "test024184"
  },
  "test027212" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test027212"
  },
  "test027213" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test027213"
  },
  "test036282" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036282() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test036282"
  },
  "test097525" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test097525"
  },
  "test036281" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036281() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test036281"
  },
  "test097526" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097526() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test097526"
  },
  "test036284" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036284() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test036284"
  },
  "test039311" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039311() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test039311"
  },
  "test097523" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097523() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test097523"
  },
  "test036283" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036283() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat2.getEscape();\n}",
    "testName" : "test036283"
  },
  "test039310" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039310() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('e');\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test039310"
  },
  "test097524" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097524() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.hashCode();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test097524"
  },
  "test036286" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036286() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test036286"
  },
  "test036285" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036285() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('q');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test036285"
  },
  "test097522" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097522() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Quote quote0 = Quote.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test097522"
  },
  "test040315" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040315() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test040315"
  },
  "test100547" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test100547"
  },
  "test125703" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125703() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test125703"
  },
  "test040314" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test040314"
  },
  "test083484" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083484() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('5');\n    Character character0 = Character.valueOf('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    StringReader stringReader0 = new StringReader(\" SurroundingSpaces:ignored\");\n    cSVFormat2.parse(stringReader0);\n}",
    "testName" : "test083484"
  },
  "test100546" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test100546"
  },
  "test125704" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125704() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test125704"
  },
  "test040317" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040317() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test040317"
  },
  "test125705" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125705() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test125705"
  },
  "test040316" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040316() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test040316"
  },
  "test125706" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125706() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test125706"
  },
  "test125707" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125707() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test125707"
  },
  "test125708" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125708() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test125708"
  },
  "test040313" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test040313"
  },
  "test125709" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125709() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test125709"
  },
  "test040312" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040312() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"file\");\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test040312"
  },
  "test100543" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100543() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test100543"
  },
  "test100545" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100545() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test100545"
  },
  "test100544" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100544() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test100544"
  },
  "test125702" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125702() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test125702"
  },
  "test052400" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052400() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"f)ob\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test052400"
  },
  "test072473" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072473() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test072473"
  },
  "test082483" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082483() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Quote quote0 = Quote.NONE;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);\n    StringReader stringReader0 = new StringReader(\"A\");\n    cSVFormat1.parse(stringReader0);\n}",
    "testName" : "test082483"
  },
  "test117673" : {
    "methodSignature" : "public static CSVFormat newFormat(final char delimiter)",
    "methodName" : "newFormat",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117673() throws Throwable {\n    CSVFormat.newFormat('\\r');\n}",
    "testName" : "test117673"
  },
  "test071472" : {
    "methodSignature" : "public String[] getHeader()",
    "methodName" : "getHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071472() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = cSVFormat0.getHeader();\n}",
    "testName" : "test071472"
  },
  "test047366" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047366() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test047366"
  },
  "test047367" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047367() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test047367"
  },
  "test047368" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047368() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test047368"
  },
  "test047369" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047369() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test047369"
  },
  "test060449" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060449() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test060449"
  },
  "test060441" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test060441"
  },
  "test060443" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test060443"
  },
  "test060442" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test060442"
  },
  "test060445" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n}",
    "testName" : "test060445"
  },
  "test096519" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096519() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test096519"
  },
  "test060444" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test060444"
  },
  "test060447" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060447() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test060447"
  },
  "test096517" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096517() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test096517"
  },
  "test060446" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060446() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('s');\n    Character character0 = cSVFormat1.getCommentStart();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test060446"
  },
  "test096518" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096518() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test096518"
  },
  "test096520" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096520() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    cSVFormat1.hashCode();\n    cSVFormat1.getCommentStart();\n}",
    "testName" : "test096520"
  },
  "test096521" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096521() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('_');\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test096521"
  },
  "test035276" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035276() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test035276"
  },
  "test038302" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038302() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test038302"
  },
  "test035275" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035275() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test035275"
  },
  "test038303" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038303() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test038303"
  },
  "test035278" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035278() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test035278"
  },
  "test038300" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038300() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test038300"
  },
  "test035277" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035277() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test035277"
  },
  "test038301" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038301() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test038301"
  },
  "test035279" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035279() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test035279"
  },
  "test038304" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038304() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test038304"
  },
  "test108617" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test108617"
  },
  "test105589" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105589() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test105589"
  },
  "test108616" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test108616"
  },
  "test105588" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105588() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test105588"
  },
  "test108619" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108619() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test108619"
  },
  "test105587" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105587() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test105587"
  },
  "test108618" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108618() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test108618"
  },
  "test108613" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108613() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test108613"
  },
  "test108612" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108612() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test108612"
  },
  "test108615" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108615() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test108615"
  },
  "test108614" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108614() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test108614"
  },
  "test026203" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026203() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test026203"
  },
  "test026202" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026202() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test026202"
  },
  "test023175" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test023175"
  },
  "test026201" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026201() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test026201"
  },
  "test026200" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026200() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test026200"
  },
  "test105586" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105586() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test105586"
  },
  "test105585" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105585() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test105585"
  },
  "test026205" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026205() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test026205"
  },
  "test105584" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105584() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test105584"
  },
  "test026204" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026204() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test026204"
  },
  "test105583" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105583() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test105583"
  },
  "test035274" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035274() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test035274"
  },
  "test035273" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035273() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test035273"
  },
  "test047370" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047370() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test047370"
  },
  "test047371" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047371() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test047371"
  },
  "test047372" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047372() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test047372"
  },
  "test108620" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108620() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getQuoteChar();\n}",
    "testName" : "test108620"
  },
  "test105592" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105592() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test105592"
  },
  "test105591" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105591() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test105591"
  },
  "test105590" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105590() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test105590"
  },
  "test108621" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108621() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getEscape();\n}",
    "testName" : "test108621"
  },
  "test035280" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035280() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getEscape();\n}",
    "testName" : "test035280"
  },
  "test095516" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095516() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"FPE.2\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test095516"
  },
  "test069462" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069462() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.isCommentingEnabled();\n}",
    "testName" : "test069462"
  },
  "test070468" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070468() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test070468"
  },
  "test070467" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070467() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test070467"
  },
  "test070466" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070466() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test070466"
  },
  "test070465" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070465() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.getCommentStart();\n}",
    "testName" : "test070465"
  },
  "test070464" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070464() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test070464"
  },
  "test070463" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070463() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test070463"
  },
  "test014104" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test014104"
  },
  "test014105" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test014105"
  },
  "test014106" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test014106"
  },
  "test081482" : {
    "methodSignature" : "public CSVFormat withCommentStart(final char commentStart)",
    "methodName" : "withCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081482() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.withCommentStart('\\r');\n}",
    "testName" : "test081482"
  },
  "test014107" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test014107"
  },
  "test014100" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test014100"
  },
  "test014101" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test014101"
  },
  "test014102" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test014102"
  },
  "test118674" : {
    "methodSignature" : "public CSVFormat withEscape(final char escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118674() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.DEFAULT.withEscape('\\r');\n}",
    "testName" : "test118674"
  },
  "test014103" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Y!6-apl\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test014103"
  },
  "test070469" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070469() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test070469"
  },
  "test046359" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046359() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test046359"
  },
  "test046358" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046358() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test046358"
  },
  "test046357" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046357() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test046357"
  },
  "test070471" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070471() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test070471"
  },
  "test070470" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070470() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentStart('*');\n    boolean boolean0 = cSVFormat1.isCommentingEnabled();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test070470"
  },
  "test095513" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095513() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"FPE.2\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test095513"
  },
  "test095512" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095512() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"FPE.2\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getNullString();\n}",
    "testName" : "test095512"
  },
  "test095515" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095515() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"FPE.2\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test095515"
  },
  "test095514" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095514() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"FPE.2\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test095514"
  },
  "test034264" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034264() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test034264"
  },
  "test059440" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test059440"
  },
  "test034265" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034265() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getCommentStart();\n}",
    "testName" : "test034265"
  },
  "test080481" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080481() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test080481"
  },
  "test034266" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034266() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test034266"
  },
  "test034267" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034267() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test034267"
  },
  "test034268" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034268() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test034268"
  },
  "test01080" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01080() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat4.isCommentingEnabled();\n}",
    "testName" : "test01080"
  },
  "test034269" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034269() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test034269"
  },
  "test119675" : {
    "methodSignature" : "void validate() throws IllegalStateException",
    "methodName" : "validate",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119675() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeader(stringArray0);\n    cSVFormat1.validate();\n}",
    "testName" : "test119675"
  },
  "test109629" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109629() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getCommentStart();\n}",
    "testName" : "test109629"
  },
  "test109628" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test109628"
  },
  "test106599" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106599() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n}",
    "testName" : "test106599"
  },
  "test109625" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109625() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n}",
    "testName" : "test109625"
  },
  "test046365" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046365() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test046365"
  },
  "test109624" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109624() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test109624"
  },
  "test046364" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046364() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test046364"
  },
  "test109627" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test109627"
  },
  "test046363" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046363() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test046363"
  },
  "test109626" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test109626"
  },
  "test046362" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046362() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test046362"
  },
  "test106595" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106595() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test106595"
  },
  "test046361" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046361() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test046361"
  },
  "test106596" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106596() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test106596"
  },
  "test022166" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test022166"
  },
  "test046360" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046360() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    StringReader stringReader0 = new StringReader(\"R&Q\");\n    CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test046360"
  },
  "test106597" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106597() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test106597"
  },
  "test109623" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109623() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test109623"
  },
  "test106598" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106598() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test106598"
  },
  "test109622" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109622() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('o');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test109622"
  },
  "test022168" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat3.isQuoting();\n}",
    "testName" : "test022168"
  },
  "test022167" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test022167"
  },
  "test106593" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106593() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test106593"
  },
  "test022169" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test022169"
  },
  "test106594" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106594() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test106594"
  },
  "test01071" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01071() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat4.isNullHandling();\n}",
    "testName" : "test01071"
  },
  "test01075" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01075() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test01075"
  },
  "test01074" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01074() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test01074"
  },
  "test01073" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01073() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat4.isEscaping();\n}",
    "testName" : "test01073"
  },
  "test01072" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01072() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test01072"
  },
  "test01079" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01079() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test01079"
  },
  "test022171" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test022171"
  },
  "test01078" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01078() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat4.getCommentStart();\n}",
    "testName" : "test01078"
  },
  "test022170" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test022170"
  },
  "test01077" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat4.isQuoting();\n}",
    "testName" : "test01077"
  },
  "test022173" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat3.getNullString();\n}",
    "testName" : "test022173"
  },
  "test01076" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01076() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    Quote quote0 = Quote.MINIMAL;\n    CSVFormat cSVFormat4 = cSVFormat3.withQuotePolicy(quote0);\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test01076"
  },
  "test022172" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat3.isEscaping();\n}",
    "testName" : "test022172"
  },
  "test022174" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test022174"
  },
  "test059439" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059439() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test059439"
  },
  "test059438" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059438() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test059438"
  },
  "test059437" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('r');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test059437"
  },
  "test034270" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034270() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test034270"
  },
  "test034271" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034271() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test034271"
  },
  "test091499" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091499() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test091499"
  },
  "test034272" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034272() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('2');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getEscape();\n}",
    "testName" : "test034272"
  },
  "test094509" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094509() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    cSVFormat0.TDF.hashCode();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test094509"
  },
  "test094508" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094508() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    cSVFormat0.TDF.hashCode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test094508"
  },
  "test00642" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test00642"
  },
  "test00643" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test00643"
  },
  "test00640" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00640"
  },
  "test00641" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test00641"
  },
  "test00646" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.getCommentStart();\n}",
    "testName" : "test00646"
  },
  "test00644" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00644"
  },
  "test00645" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00645"
  },
  "test00529" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test00529"
  },
  "test094511" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094511() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    cSVFormat0.TDF.hashCode();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test094511"
  },
  "test00528" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('`');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"C<!Ss\");\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00528"
  },
  "test094510" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094510() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    cSVFormat0.TDF.hashCode();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test094510"
  },
  "test045349" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045349() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test045349"
  },
  "test045348" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045348() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test045348"
  },
  "test079480" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079480() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = cSVFormat0.getEscape();\n}",
    "testName" : "test079480"
  },
  "test045347" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045347() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test045347"
  },
  "test00752" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00752() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test00752"
  },
  "test00753" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00753"
  },
  "test00750" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test00750"
  },
  "test00751" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00751"
  },
  "test00754" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test00754"
  },
  "test00639" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00639"
  },
  "test00637" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test00637"
  },
  "test00638" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('C');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00638"
  },
  "test057431" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n}",
    "testName" : "test057431"
  },
  "test057432" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test057432"
  },
  "test057430" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057430() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test057430"
  },
  "test033255" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033255() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test033255"
  },
  "test033256" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033256() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getEscape();\n}",
    "testName" : "test033256"
  },
  "test033257" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033257() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test033257"
  },
  "test033258" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033258() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test033258"
  },
  "test033259" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033259() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test033259"
  },
  "test103565" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103565() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test103565"
  },
  "test103566" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103566() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test103566"
  },
  "test045356" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045356() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat2.getCommentStart();\n}",
    "testName" : "test045356"
  },
  "test089497" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089497() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test089497"
  },
  "test103563" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103563() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test103563"
  },
  "test045355" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045355() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test045355"
  },
  "test103564" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103564() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test103564"
  },
  "test045354" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045354() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test045354"
  },
  "test103569" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103569() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test103569"
  },
  "test045353" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045353() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test045353"
  },
  "test045352" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045352() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test045352"
  },
  "test103567" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103567() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test103567"
  },
  "test045351" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045351() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test045351"
  },
  "test103568" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103568() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test103568"
  },
  "test00862" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00862() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test00862"
  },
  "test045350" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045350() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuoteChar('h');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('h');\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test045350"
  },
  "test00860" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00860() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test00860"
  },
  "test00861" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00861() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test00861"
  },
  "test021156" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021156() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test021156"
  },
  "test021158" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test021158"
  },
  "test021157" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021157() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test021157"
  },
  "test00749" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00749"
  },
  "test058436" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test058436"
  },
  "test021159" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test021159"
  },
  "test00747" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00747"
  },
  "test019145" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test019145"
  },
  "test058434" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test058434"
  },
  "test00748" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00748"
  },
  "test058435" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test058435"
  },
  "test058433" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test058433"
  },
  "test090498" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090498() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    String string0 = cSVFormat0.toString();\n}",
    "testName" : "test090498"
  },
  "test033262" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033262() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test033262"
  },
  "test093507" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093507() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test093507"
  },
  "test033263" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033263() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test033263"
  },
  "test093504" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093504() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test093504"
  },
  "test093505" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093505() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test093505"
  },
  "test115662" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n}",
    "testName" : "test115662"
  },
  "test093506" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093506() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test093506"
  },
  "test106600" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106600() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test106600"
  },
  "test021161" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test021161"
  },
  "test106601" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106601() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test106601"
  },
  "test021160" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test021160"
  },
  "test106602" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106602() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"qU?qMg?^#%W9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('<');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test106602"
  },
  "test021163" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test021163"
  },
  "test021162" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test021162"
  },
  "test00970" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00970() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00970"
  },
  "test021165" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test021165"
  },
  "test021164" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"JTw[q9vDLA7X}\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test021164"
  },
  "test068461" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068461() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isEscaping();\n}",
    "testName" : "test068461"
  },
  "test00855" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00855() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00855"
  },
  "test00856" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00856() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test00856"
  },
  "test103570" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103570() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test103570"
  },
  "test103571" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103571() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test103571"
  },
  "test00859" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00859() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00859"
  },
  "test00857" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00857() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00857"
  },
  "test00858" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00858() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withRecordSeparator('@');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00858"
  },
  "test033260" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033260() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test033260"
  },
  "test033261" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033261() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('2');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test033261"
  },
  "test116663" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test116663"
  },
  "test00965" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00965() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test00965"
  },
  "test00966" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00966() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00966"
  },
  "test00963" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00963() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00963"
  },
  "test00964" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00964() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test00964"
  },
  "test00969" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00969() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00969"
  },
  "test116666" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test116666"
  },
  "test116667" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116667() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test116667"
  },
  "test00967" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00967() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test00967"
  },
  "test116664" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test116664"
  },
  "test00968" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00968() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('h');\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test00968"
  },
  "test116665" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test116665"
  },
  "test116668" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116668() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test116668"
  },
  "test116669" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116669() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test116669"
  },
  "test044338" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test044338"
  },
  "test044339" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test044339"
  },
  "test056422" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test056422"
  },
  "test056421" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test056421"
  },
  "test056424" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test056424"
  },
  "test056423" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test056423"
  },
  "test078479" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078479() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String string0 = cSVFormat0.getRecordSeparator();\n}",
    "testName" : "test078479"
  },
  "test056420" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056420() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test056420"
  },
  "test092502" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092502() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test092502"
  },
  "test107608" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107608() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscaping();\n}",
    "testName" : "test107608"
  },
  "test092503" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092503() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    cSVFormat0.hashCode();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test092503"
  },
  "test107609" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107609() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test107609"
  },
  "test044345" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044345() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test044345"
  },
  "test104578" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104578() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test104578"
  },
  "test107604" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107604() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isCommentingEnabled();\n}",
    "testName" : "test107604"
  },
  "test044346" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044346() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test044346"
  },
  "test104577" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104577() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test104577"
  },
  "test107605" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107605() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test107605"
  },
  "test044343" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044343() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test044343"
  },
  "test104576" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104576() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test104576"
  },
  "test107606" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107606() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test107606"
  },
  "test044344" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044344() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test044344"
  },
  "test104575" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104575() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test104575"
  },
  "test107607" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107607() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test107607"
  },
  "test044341" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044341() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat2.getCommentStart();\n}",
    "testName" : "test044341"
  },
  "test044342" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044342() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test044342"
  },
  "test044340" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044340() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('4');\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test044340"
  },
  "test104579" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104579() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test104579"
  },
  "test107603" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107603() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test107603"
  },
  "test067460" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067460() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.isEscaping();\n}",
    "testName" : "test067460"
  },
  "test057428" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test057428"
  },
  "test104574" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104574() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test104574"
  },
  "test032249" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032249() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteChar();\n}",
    "testName" : "test032249"
  },
  "test057429" : {
    "methodSignature" : "public Character getQuoteChar()",
    "methodName" : "getQuoteChar",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n    cSVFormat1.getQuoteChar();\n}",
    "testName" : "test057429"
  },
  "test104573" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104573() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n}",
    "testName" : "test104573"
  },
  "test032248" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032248() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test032248"
  },
  "test057426" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test057426"
  },
  "test104572" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104572() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test104572"
  },
  "test020146" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020146() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test020146"
  },
  "test032247" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032247() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test032247"
  },
  "test057427" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test057427"
  },
  "test020147" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020147() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test020147"
  },
  "test020148" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020148() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test020148"
  },
  "test057425" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('c');\n    Character character0 = cSVFormat1.getEscape();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test057425"
  },
  "test020149" : {
    "methodSignature" : "public boolean isEscaping()",
    "methodName" : "isEscaping",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020149() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat2.isEscaping();\n}",
    "testName" : "test020149"
  },
  "test077478" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077478() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test077478"
  },
  "test116670" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116670() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullHandling();\n}",
    "testName" : "test116670"
  },
  "test116671" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116671() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test116671"
  },
  "test116672" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116672() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('o');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test116672"
  },
  "test088496" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088496() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('[');\n    Character character0 = Character.valueOf('[');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);\n    StringReader stringReader0 = new StringReader(\"\");\n    cSVFormat1.parse(stringReader0);\n}",
    "testName" : "test088496"
  },
  "test107611" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107611() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoting();\n}",
    "testName" : "test107611"
  },
  "test020150" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020150() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test020150"
  },
  "test104581" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104581() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test104581"
  },
  "test020151" : {
    "methodSignature" : "public boolean isQuoting()",
    "methodName" : "isQuoting",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020151() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat2.isQuoting();\n}",
    "testName" : "test020151"
  },
  "test104580" : {
    "methodSignature" : "public boolean isNullHandling()",
    "methodName" : "isNullHandling",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104580() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isNullHandling();\n}",
    "testName" : "test104580"
  },
  "test020152" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020152() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat2.getNullString();\n}",
    "testName" : "test020152"
  },
  "test020153" : {
    "methodSignature" : "public Character getCommentStart()",
    "methodName" : "getCommentStart",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020153() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat2.getCommentStart();\n}",
    "testName" : "test020153"
  },
  "test107610" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107610() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('4');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test107610"
  },
  "test020154" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020154() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test020154"
  },
  "test020155" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020155() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"JTw[q9vDLA7X}\");\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test020155"
  },
  "test104582" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104582() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withRecordSeparator('X');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test104582"
  },
  "test092500" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092500() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    cSVFormat0.hashCode();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test092500"
  },
  "test032254" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032254() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test032254"
  },
  "test092501" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092501() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test092501"
  },
  "test032253" : {
    "methodSignature" : "public boolean isCommentingEnabled()",
    "methodName" : "isCommentingEnabled",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032253() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isCommentingEnabled();\n}",
    "testName" : "test032253"
  },
  "test032252" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032252() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test032252"
  },
  "test032251" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032251() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test032251"
  },
  "test032250" : {
    "methodSignature" : "public Character getEscape()",
    "methodName" : "getEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032250() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getEscape();\n}",
    "testName" : "test032250"
  }
}