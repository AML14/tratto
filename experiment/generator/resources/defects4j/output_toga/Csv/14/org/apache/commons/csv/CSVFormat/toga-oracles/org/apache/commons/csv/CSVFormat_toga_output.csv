project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = CSVFormat.TDF;
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test0012,"public void test0012() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test0013,"public void test0013() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test0014,"public void test0014() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test0015,"public void test0015() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test0016,"public void test0016() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test0017,"public void test0017() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertEquals('\t', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test0018,"public void test0018() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test0019,"public void test0019() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test00110,"public void test00110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test00111,"public void test00111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test00212,"public void test00212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00213,"public void test00213() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00214,"public void test00214() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00215,"public void test00215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test00216,"public void test00216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat2.getTrim());
}",0,assertFalse(cSVFormat2.getTrim())
project,0,test00217,"public void test00217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test00218,"public void test00218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00219,"public void test00219() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00220,"public void test00220() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test00221,"public void test00221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00322,"public void test00322() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test00323,"public void test00323() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00324,"public void test00324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test00325,"public void test00325() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test00326,"public void test00326() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test00427,"public void test00427() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertEquals('~', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test00428,"public void test00428() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test00429,"public void test00429() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00430,"public void test00430() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test00431,"public void test00431() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00432,"public void test00432() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test00433,"public void test00433() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00434,"public void test00434() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertEquals('W', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test00435,"public void test00435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test00436,"public void test00436() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test00537,"public void test00537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    CSVFormat cSVFormat3 = cSVFormat2.withTrim();
    assertTrue(cSVFormat3.equals((Object) cSVFormat0));
}",0,
project,0,test00538,"public void test00538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    CSVFormat cSVFormat3 = cSVFormat2.withTrim();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test00539,"public void test00539() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    CSVFormat cSVFormat3 = cSVFormat2.withTrim();
    assertTrue(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test00540,"public void test00540() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    CSVFormat cSVFormat3 = cSVFormat2.withTrim();
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test00541,"public void test00541() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    CSVFormat cSVFormat3 = cSVFormat2.withTrim();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test00542,"public void test00542() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    CSVFormat cSVFormat3 = cSVFormat2.withTrim();
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test00643,"public void test00643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test00644,"public void test00644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00645,"public void test00645() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00646,"public void test00646() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test00647,"public void test00647() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test00648,"public void test00648() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00649,"public void test00649() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00650,"public void test00650() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test00651,"public void test00651() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test00652,"public void test00652() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test00753,"public void test00753() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test00754,"public void test00754() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test00755,"public void test00755() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test00756,"public void test00756() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00757,"public void test00757() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00758,"public void test00758() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test00759,"public void test00759() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test00760,"public void test00760() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrim();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test00861,"public void test00861() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test00862,"public void test00862() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test00863,"public void test00863() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00864,"public void test00864() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00865,"public void test00865() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test00866,"public void test00866() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test00867,"public void test00867() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertEquals('T', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test00868,"public void test00868() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test00969,"public void test00969() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00970,"public void test00970() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test00971,"public void test00971() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test00972,"public void test00972() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertTrue(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test00973,"public void test00973() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test01074,"public void test01074() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01075,"public void test01075() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test01076,"public void test01076() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat2.getTrim());
}",0,assertFalse(cSVFormat2.getTrim())
project,0,test01077,"public void test01077() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test01078,"public void test01078() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test01079,"public void test01079() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test01080,"public void test01080() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test01081,"public void test01081() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,
project,0,test01082,"public void test01082() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test01183,"public void test01183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test01184,"public void test01184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test01185,"public void test01185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test01186,"public void test01186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01187,"public void test01187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test01188,"public void test01188() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test01189,"public void test01189() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test01190,"public void test01190() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test01191,"public void test01191() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test01192,"public void test01192() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test01193,"public void test01193() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test01194,"public void test01194() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test01195,"public void test01195() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test01296,"public void test01296() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test01297,"public void test01297() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test01298,"public void test01298() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test01299,"public void test01299() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test012100,"public void test012100() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test012101,"public void test012101() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test012102,"public void test012102() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test012103,"public void test012103() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,
project,0,test012104,"public void test012104() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test013105,"public void test013105() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertEquals('n', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test013106,"public void test013106() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test013107,"public void test013107() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test013108,"public void test013108() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test013109,"public void test013109() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test013110,"public void test013110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test013111,"public void test013111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test013112,"public void test013112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test013113,"public void test013113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test013114,"public void test013114() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test013115,"public void test013115() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test014116,"public void test014116() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test014117,"public void test014117() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat1.getTrim());
}",0,
project,0,test014118,"public void test014118() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test014119,"public void test014119() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test014120,"public void test014120() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test014121,"public void test014121() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test014122,"public void test014122() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test014123,"public void test014123() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test015124,"public void test015124() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test015125,"public void test015125() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test015126,"public void test015126() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test015127,"public void test015127() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test015128,"public void test015128() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test015129,"public void test015129() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test015130,"public void test015130() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test015131,"public void test015131() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test015132,"public void test015132() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test015133,"public void test015133() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test015134,"public void test015134() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test015135,"public void test015135() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat2.getAllowMissingColumnNames())
project,0,test015136,"public void test015136() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test015137,"public void test015137() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test015138,"public void test015138() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test016139,"public void test016139() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test016140,"public void test016140() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test016141,"public void test016141() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test016142,"public void test016142() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test016143,"public void test016143() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test016144,"public void test016144() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test016145,"public void test016145() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test016146,"public void test016146() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test016147,"public void test016147() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    assertFalse(cSVFormat2.getTrim());
}",0,
project,0,test017148,"public void test017148() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test017149,"public void test017149() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test017150,"public void test017150() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test017151,"public void test017151() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test017152,"public void test017152() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test018153,"public void test018153() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,assertTrue(cSVFormat0.getTrailingDelimiter())
project,0,test018154,"public void test018154() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertEquals('X', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test018155,"public void test018155() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test018156,"public void test018156() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test018157,"public void test018157() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test018158,"public void test018158() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test018159,"public void test018159() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test018160,"public void test018160() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat0.getTrim());
}",0,
project,0,test019161,"public void test019161() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test019162,"public void test019162() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test019163,"public void test019163() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test019164,"public void test019164() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getTrim());
}",0,
project,0,test019165,"public void test019165() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test019166,"public void test019166() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test019167,"public void test019167() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertFalse(cSVFormat2.getTrailingDelimiter())
project,0,test019168,"public void test019168() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test019169,"public void test019169() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test019170,"public void test019170() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test019171,"public void test019171() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test019172,"public void test019172() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test019173,"public void test019173() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test019174,"public void test019174() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test019175,"public void test019175() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test019176,"public void test019176() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test019177,"public void test019177() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test020178,"public void test020178() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test020179,"public void test020179() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test020180,"public void test020180() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test020181,"public void test020181() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test020182,"public void test020182() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test020183,"public void test020183() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test021184,"public void test021184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test021185,"public void test021185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test021186,"public void test021186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test021187,"public void test021187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test021188,"public void test021188() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test021189,"public void test021189() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test022190,"public void test022190() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test022191,"public void test022191() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test022192,"public void test022192() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test022193,"public void test022193() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test022194,"public void test022194() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test023195,"public void test023195() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test023196,"public void test023196() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test023197,"public void test023197() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test023198,"public void test023198() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test023199,"public void test023199() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test023200,"public void test023200() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test024201,"public void test024201() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test024202,"public void test024202() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test024203,"public void test024203() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertEquals('|', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test024204,"public void test024204() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test024205,"public void test024205() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test024206,"public void test024206() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test024207,"public void test024207() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test024208,"public void test024208() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test024209,"public void test024209() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test024210,"public void test024210() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getTrim());
}",0,assertFalse(cSVFormat2.getTrim())
project,0,test024211,"public void test024211() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test024212,"public void test024212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test024213,"public void test024213() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test024214,"public void test024214() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test024215,"public void test024215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test025216,"public void test025216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test025217,"public void test025217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test025218,"public void test025218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test025219,"public void test025219() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test025220,"public void test025220() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test025221,"public void test025221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test025222,"public void test025222() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test025223,"public void test025223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test025224,"public void test025224() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test025225,"public void test025225() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test025226,"public void test025226() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test026227,"public void test026227() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test026228,"public void test026228() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
    assertFalse(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test026229,"public void test026229() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test026230,"public void test026230() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test026231,"public void test026231() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat3.getAllowMissingColumnNames())
project,0,test026232,"public void test026232() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test026233,"public void test026233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test027234,"public void test027234() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test027235,"public void test027235() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test027236,"public void test027236() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test027237,"public void test027237() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test027238,"public void test027238() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test027239,"public void test027239() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test027240,"public void test027240() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test027241,"public void test027241() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test027242,"public void test027242() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test027243,"public void test027243() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test027244,"public void test027244() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test027245,"public void test027245() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test028246,"public void test028246() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test028247,"public void test028247() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test028248,"public void test028248() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test028249,"public void test028249() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test028250,"public void test028250() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test029251,"public void test029251() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test029252,"public void test029252() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertFalse(cSVFormat2.getTrim());
}",0,assertFalse(cSVFormat2.getTrim())
project,0,test029253,"public void test029253() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,
project,0,test029254,"public void test029254() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test029255,"public void test029255() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test029256,"public void test029256() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test029257,"public void test029257() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test029258,"public void test029258() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertEquals('\t', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test029259,"public void test029259() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test029260,"public void test029260() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""Y"");
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test030261,"public void test030261() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test030262,"public void test030262() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test030263,"public void test030263() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test030264,"public void test030264() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test030265,"public void test030265() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test030266,"public void test030266() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test030267,"public void test030267() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test030268,"public void test030268() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test030269,"public void test030269() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test030270,"public void test030270() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test030271,"public void test030271() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""MhFw]fUdY$V{;"");
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test031272,"public void test031272() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test031273,"public void test031273() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertEquals(""|"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test031274,"public void test031274() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test031275,"public void test031275() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test031276,"public void test031276() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test031277,"public void test031277() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test031278,"public void test031278() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test031279,"public void test031279() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertEquals('Q', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test031280,"public void test031280() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test031281,"public void test031281() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test031282,"public void test031282() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test031283,"public void test031283() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test031284,"public void test031284() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test032285,"public void test032285() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test032286,"public void test032286() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test032287,"public void test032287() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test032288,"public void test032288() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test032289,"public void test032289() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
    assertEquals(""("", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test032290,"public void test032290() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test033291,"public void test033291() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertEquals(""|"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test033292,"public void test033292() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test033293,"public void test033293() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test033294,"public void test033294() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test033295,"public void test033295() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test033296,"public void test033296() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test034297,"public void test034297() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test034298,"public void test034298() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test034299,"public void test034299() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertEquals(""|"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test034300,"public void test034300() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test034301,"public void test034301() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test034302,"public void test034302() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test035303,"public void test035303() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertFalse(cSVFormat2.getTrailingDelimiter())
project,0,test035304,"public void test035304() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test035305,"public void test035305() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test035306,"public void test035306() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test035307,"public void test035307() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test035308,"public void test035308() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');
    assertEquals(""z"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test036309,"public void test036309() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test036310,"public void test036310() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals(""\\N"", cSVFormat2.getNullString());
}",0,
project,0,test036311,"public void test036311() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test036312,"public void test036312() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test036313,"public void test036313() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test036314,"public void test036314() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test036315,"public void test036315() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test036316,"public void test036316() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test036317,"public void test036317() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test036318,"public void test036318() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test036319,"public void test036319() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,
project,0,test037320,"public void test037320() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test037321,"public void test037321() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test037322,"public void test037322() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test037323,"public void test037323() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test037324,"public void test037324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals('=', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test037325,"public void test037325() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test037326,"public void test037326() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test037327,"public void test037327() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test037328,"public void test037328() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test037329,"public void test037329() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test038330,"public void test038330() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test038331,"public void test038331() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test038332,"public void test038332() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test038333,"public void test038333() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test038334,"public void test038334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test039335,"public void test039335() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat3.getTrailingDelimiter());
}",0,
project,0,test039336,"public void test039336() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test039337,"public void test039337() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test039338,"public void test039338() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test039339,"public void test039339() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test039340,"public void test039340() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test039341,"public void test039341() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test040342,"public void test040342() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test040343,"public void test040343() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test040344,"public void test040344() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test040345,"public void test040345() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test040346,"public void test040346() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test040347,"public void test040347() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test040348,"public void test040348() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test040349,"public void test040349() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test040350,"public void test040350() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test040351,"public void test040351() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test040352,"public void test040352() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test041353,"public void test041353() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test041354,"public void test041354() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test041355,"public void test041355() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test041356,"public void test041356() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test041357,"public void test041357() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test042358,"public void test042358() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test042359,"public void test042359() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test042360,"public void test042360() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test042361,"public void test042361() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test042362,"public void test042362() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    QuoteMode quoteMode0 = QuoteMode.ALL;
    cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test043363,"public void test043363() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test043364,"public void test043364() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test043365,"public void test043365() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test043366,"public void test043366() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test043367,"public void test043367() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test044368,"public void test044368() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test044369,"public void test044369() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test044370,"public void test044370() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test044371,"public void test044371() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test044372,"public void test044372() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test045373,"public void test045373() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Character character0 = new Character(';');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test045374,"public void test045374() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Character character0 = new Character(';');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test045375,"public void test045375() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Character character0 = new Character(';');
    cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test045376,"public void test045376() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Character character0 = new Character(';');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test045377,"public void test045377() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Character character0 = new Character(';');
    cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test046378,"public void test046378() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test046379,"public void test046379() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test046380,"public void test046380() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test046381,"public void test046381() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test046382,"public void test046382() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test046383,"public void test046383() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test046384,"public void test046384() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test046385,"public void test046385() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test046386,"public void test046386() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('&');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test047387,"public void test047387() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test047388,"public void test047388() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test047389,"public void test047389() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test047390,"public void test047390() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test047391,"public void test047391() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test047392,"public void test047392() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test047393,"public void test047393() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test047394,"public void test047394() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test047395,"public void test047395() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test047396,"public void test047396() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test047397,"public void test047397() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    Character character0 = new Character('m');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test048398,"public void test048398() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test048399,"public void test048399() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test048400,"public void test048400() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test048401,"public void test048401() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test048402,"public void test048402() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = new Character('&');
    cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test049403,"public void test049403() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test049404,"public void test049404() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test049405,"public void test049405() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test049406,"public void test049406() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test049407,"public void test049407() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test049408,"public void test049408() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test049409,"public void test049409() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test049410,"public void test049410() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertEquals('Z', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test049411,"public void test049411() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test049412,"public void test049412() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test049413,"public void test049413() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test050414,"public void test050414() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test050415,"public void test050415() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test050416,"public void test050416() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test050417,"public void test050417() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test050418,"public void test050418() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');
    assertEquals(',', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test050419,"public void test050419() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test051420,"public void test051420() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test051421,"public void test051421() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test051422,"public void test051422() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test051423,"public void test051423() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test051424,"public void test051424() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertEquals('T', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test051425,"public void test051425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test051426,"public void test051426() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertEquals('M', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test051427,"public void test051427() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,assertTrue(cSVFormat0.getTrailingDelimiter())
project,0,test051428,"public void test051428() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test051429,"public void test051429() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test052430,"public void test052430() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test052431,"public void test052431() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test052432,"public void test052432() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test052433,"public void test052433() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test052434,"public void test052434() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test052435,"public void test052435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test052436,"public void test052436() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test052437,"public void test052437() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test052438,"public void test052438() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test052439,"public void test052439() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test052440,"public void test052440() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');
    assertEquals('(', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test053441,"public void test053441() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test053442,"public void test053442() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertTrue(cSVFormat4.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat4.getSkipHeaderRecord())
project,0,test053443,"public void test053443() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertFalse(cSVFormat4.getTrailingDelimiter());
}",0,assertTrue(cSVFormat4.getTrailingDelimiter())
project,0,test053444,"public void test053444() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test053445,"public void test053445() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertTrue(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test053446,"public void test053446() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertEquals('_', (char) cSVFormat4.getQuoteCharacter());
}",0,
project,0,test053447,"public void test053447() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test053448,"public void test053448() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test053449,"public void test053449() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');
    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();
    assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat4.getIgnoreSurroundingSpaces())
project,0,test054450,"public void test054450() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test054451,"public void test054451() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test054452,"public void test054452() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test054453,"public void test054453() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test054454,"public void test054454() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test054455,"public void test054455() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test054456,"public void test054456() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test054457,"public void test054457() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertEquals('|', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test054458,"public void test054458() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test054459,"public void test054459() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test055460,"public void test055460() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withNullString(""JRzCqQy[GrFn>gH"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test055461,"public void test055461() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withNullString(""JRzCqQy[GrFn>gH"");
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test055462,"public void test055462() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withNullString(""JRzCqQy[GrFn>gH"");
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test055463,"public void test055463() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withNullString(""JRzCqQy[GrFn>gH"");
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test055464,"public void test055464() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withNullString(""JRzCqQy[GrFn>gH"");
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test056465,"public void test056465() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withNullString(""Up^n`W:D"");
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test056466,"public void test056466() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withNullString(""Up^n`W:D"");
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test056467,"public void test056467() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withNullString(""Up^n`W:D"");
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test056468,"public void test056468() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withNullString(""Up^n`W:D"");
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test056469,"public void test056469() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    cSVFormat1.withNullString(""Up^n`W:D"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test057470,"public void test057470() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test057471,"public void test057471() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test057472,"public void test057472() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test057473,"public void test057473() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertEquals(""url"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test057474,"public void test057474() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test057475,"public void test057475() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test057476,"public void test057476() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test057477,"public void test057477() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test057478,"public void test057478() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test057479,"public void test057479() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test057480,"public void test057480() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""url"");
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test058481,"public void test058481() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withNullString("""");
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test058482,"public void test058482() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withNullString("""");
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test058483,"public void test058483() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withNullString("""");
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test058484,"public void test058484() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withNullString("""");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test058485,"public void test058485() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withNullString("""");
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test059486,"public void test059486() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test059487,"public void test059487() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test059488,"public void test059488() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test059489,"public void test059489() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test059490,"public void test059490() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test059491,"public void test059491() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test059492,"public void test059492() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test059493,"public void test059493() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test059494,"public void test059494() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test059495,"public void test059495() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test059496,"public void test059496() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test060497,"public void test060497() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test060498,"public void test060498() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test060499,"public void test060499() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test060500,"public void test060500() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test060501,"public void test060501() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test060502,"public void test060502() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test060503,"public void test060503() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test060504,"public void test060504() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.getTrim());
}",0,assertFalse(cSVFormat2.getTrim())
project,0,test061505,"public void test061505() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test061506,"public void test061506() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test061507,"public void test061507() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test061508,"public void test061508() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test061509,"public void test061509() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat2.getAllowMissingColumnNames())
project,0,test061510,"public void test061510() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test061511,"public void test061511() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test061512,"public void test061512() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test061513,"public void test061513() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test061514,"public void test061514() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test061515,"public void test061515() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test062516,"public void test062516() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test062517,"public void test062517() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test062518,"public void test062518() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test062519,"public void test062519() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test062520,"public void test062520() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test062521,"public void test062521() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test062522,"public void test062522() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test062523,"public void test062523() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test062524,"public void test062524() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertEquals(',', cSVFormat2.getDelimiter());
}",0,
project,0,test062525,"public void test062525() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test062526,"public void test062526() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test063527,"public void test063527() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test063528,"public void test063528() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test063529,"public void test063529() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test063530,"public void test063530() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test063531,"public void test063531() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test063532,"public void test063532() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test063533,"public void test063533() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test063534,"public void test063534() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test063535,"public void test063535() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat2.getAllowMissingColumnNames())
project,0,test064536,"public void test064536() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test064537,"public void test064537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test064538,"public void test064538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test064539,"public void test064539() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test064540,"public void test064540() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test065541,"public void test065541() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test065542,"public void test065542() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test065543,"public void test065543() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test065544,"public void test065544() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test065545,"public void test065545() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test065546,"public void test065546() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test065547,"public void test065547() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test065548,"public void test065548() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test065549,"public void test065549() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test065550,"public void test065550() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test065551,"public void test065551() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test066552,"public void test066552() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test066553,"public void test066553() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test066554,"public void test066554() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test066555,"public void test066555() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test066556,"public void test066556() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test066557,"public void test066557() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test066558,"public void test066558() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test066559,"public void test066559() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,
project,0,test066560,"public void test066560() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test066561,"public void test066561() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test066562,"public void test066562() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test066563,"public void test066563() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test066564,"public void test066564() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertEquals('n', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test066565,"public void test066565() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test066566,"public void test066566() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test066567,"public void test066567() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test066568,"public void test066568() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test067569,"public void test067569() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test067570,"public void test067570() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test067571,"public void test067571() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test067572,"public void test067572() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test067573,"public void test067573() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test067574,"public void test067574() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test067575,"public void test067575() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test067576,"public void test067576() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test067577,"public void test067577() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test067578,"public void test067578() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test068579,"public void test068579() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test068580,"public void test068580() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test068581,"public void test068581() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test068582,"public void test068582() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test068583,"public void test068583() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test068584,"public void test068584() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test068585,"public void test068585() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test068586,"public void test068586() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test068587,"public void test068587() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test068588,"public void test068588() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getTrim());
}",0,assertFalse(cSVFormat2.getTrim())
project,0,test068589,"public void test068589() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test068590,"public void test068590() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test068591,"public void test068591() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test068592,"public void test068592() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test068593,"public void test068593() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test068594,"public void test068594() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test069595,"public void test069595() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test069596,"public void test069596() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test069597,"public void test069597() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test069598,"public void test069598() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test069599,"public void test069599() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test069600,"public void test069600() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test069601,"public void test069601() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test069602,"public void test069602() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test069603,"public void test069603() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test070604,"public void test070604() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test070605,"public void test070605() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test070606,"public void test070606() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test070607,"public void test070607() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test070608,"public void test070608() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test071609,"public void test071609() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test071610,"public void test071610() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test071611,"public void test071611() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test071612,"public void test071612() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test071613,"public void test071613() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test071614,"public void test071614() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test071615,"public void test071615() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test071616,"public void test071616() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test071617,"public void test071617() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test071618,"public void test071618() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test071619,"public void test071619() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""url"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test072620,"public void test072620() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test072621,"public void test072621() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertEquals('!', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test072622,"public void test072622() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test072623,"public void test072623() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test072624,"public void test072624() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test072625,"public void test072625() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test072626,"public void test072626() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test072627,"public void test072627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test072628,"public void test072628() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test072629,"public void test072629() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test072630,"public void test072630() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test073631,"public void test073631() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test073632,"public void test073632() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test073633,"public void test073633() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test073634,"public void test073634() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test073635,"public void test073635() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test074636,"public void test074636() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test074637,"public void test074637() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test074638,"public void test074638() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test074639,"public void test074639() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test074640,"public void test074640() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test075641,"public void test075641() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test075642,"public void test075642() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test075643,"public void test075643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test075644,"public void test075644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test075645,"public void test075645() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test075646,"public void test075646() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test075647,"public void test075647() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test075648,"public void test075648() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test075649,"public void test075649() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test076650,"public void test076650() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test076651,"public void test076651() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test076652,"public void test076652() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test076653,"public void test076653() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test076654,"public void test076654() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test076655,"public void test076655() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test076656,"public void test076656() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test076657,"public void test076657() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test076658,"public void test076658() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test076659,"public void test076659() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test076660,"public void test076660() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test076661,"public void test076661() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test077662,"public void test077662() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test077663,"public void test077663() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test077664,"public void test077664() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test077665,"public void test077665() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test077666,"public void test077666() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test077667,"public void test077667() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test077668,"public void test077668() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test077669,"public void test077669() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertFalse(cSVFormat2.getTrailingDelimiter())
project,0,test077670,"public void test077670() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test077671,"public void test077671() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test077672,"public void test077672() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertEquals('p', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test077673,"public void test077673() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test077674,"public void test077674() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test077675,"public void test077675() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test077676,"public void test077676() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test078677,"public void test078677() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test078678,"public void test078678() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test078679,"public void test078679() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test078680,"public void test078680() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test078681,"public void test078681() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test078682,"public void test078682() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test078683,"public void test078683() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test078684,"public void test078684() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test078685,"public void test078685() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test079686,"public void test079686() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test079687,"public void test079687() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test079688,"public void test079688() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test079689,"public void test079689() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test079690,"public void test079690() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test079691,"public void test079691() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.equals((Object) cSVFormat0));
}",0,
project,0,test079692,"public void test079692() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat2.getAllowMissingColumnNames())
project,0,test079693,"public void test079693() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test079694,"public void test079694() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test080695,"public void test080695() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test080696,"public void test080696() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test080697,"public void test080697() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test080698,"public void test080698() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test080699,"public void test080699() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test080700,"public void test080700() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test080701,"public void test080701() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test080702,"public void test080702() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test080703,"public void test080703() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test080704,"public void test080704() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test080705,"public void test080705() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test080706,"public void test080706() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test080707,"public void test080707() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test081708,"public void test081708() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test081709,"public void test081709() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test081710,"public void test081710() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test081711,"public void test081711() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test081712,"public void test081712() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test081713,"public void test081713() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test081714,"public void test081714() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test081715,"public void test081715() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test081716,"public void test081716() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('@');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test082717,"public void test082717() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test082718,"public void test082718() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test082719,"public void test082719() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test082720,"public void test082720() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test082721,"public void test082721() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test083722,"public void test083722() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test083723,"public void test083723() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test083724,"public void test083724() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test083725,"public void test083725() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test083726,"public void test083726() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test083727,"public void test083727() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test083728,"public void test083728() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test083729,"public void test083729() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test084730,"public void test084730() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test084731,"public void test084731() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test084732,"public void test084732() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test084733,"public void test084733() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test084734,"public void test084734() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(""\\N"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test084735,"public void test084735() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,
project,0,test084736,"public void test084736() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test084737,"public void test084737() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test084738,"public void test084738() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test084739,"public void test084739() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test085740,"public void test085740() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test085741,"public void test085741() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test085742,"public void test085742() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test085743,"public void test085743() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test085744,"public void test085744() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test085745,"public void test085745() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test085746,"public void test085746() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test085747,"public void test085747() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test085748,"public void test085748() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test085749,"public void test085749() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test086750,"public void test086750() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test086751,"public void test086751() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test086752,"public void test086752() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test086753,"public void test086753() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test086754,"public void test086754() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test086755,"public void test086755() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat3.getSkipHeaderRecord())
project,0,test086756,"public void test086756() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test086757,"public void test086757() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test087758,"public void test087758() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test087759,"public void test087759() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertFalse(cSVFormat2.getTrailingDelimiter())
project,0,test087760,"public void test087760() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test087761,"public void test087761() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test087762,"public void test087762() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test087763,"public void test087763() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test087764,"public void test087764() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test087765,"public void test087765() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test087766,"public void test087766() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test087767,"public void test087767() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test087768,"public void test087768() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test088769,"public void test088769() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test088770,"public void test088770() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test088771,"public void test088771() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test088772,"public void test088772() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test088773,"public void test088773() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test088774,"public void test088774() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test088775,"public void test088775() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test088776,"public void test088776() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test088777,"public void test088777() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test089778,"public void test089778() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test089779,"public void test089779() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test089780,"public void test089780() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test089781,"public void test089781() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test089782,"public void test089782() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test090783,"public void test090783() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test090784,"public void test090784() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test090785,"public void test090785() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,
project,0,test090786,"public void test090786() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test090787,"public void test090787() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test090788,"public void test090788() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test090789,"public void test090789() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test090790,"public void test090790() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test090791,"public void test090791() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test090792,"public void test090792() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test090793,"public void test090793() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test091794,"public void test091794() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test091795,"public void test091795() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test091796,"public void test091796() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test091797,"public void test091797() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test091798,"public void test091798() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test091799,"public void test091799() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test091800,"public void test091800() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertEquals('$', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test091801,"public void test091801() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test091802,"public void test091802() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test092803,"public void test092803() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""{"");
    Object[] objectArray0 = new Object[5];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat3.getAllowMissingColumnNames())
project,0,test092804,"public void test092804() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""{"");
    Object[] objectArray0 = new Object[5];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test092805,"public void test092805() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""{"");
    Object[] objectArray0 = new Object[5];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertTrue(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test092806,"public void test092806() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""{"");
    Object[] objectArray0 = new Object[5];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test092807,"public void test092807() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""{"");
    Object[] objectArray0 = new Object[5];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test093808,"public void test093808() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Object[] objectArray0 = new Object[1];
    cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test093809,"public void test093809() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Object[] objectArray0 = new Object[1];
    cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test093810,"public void test093810() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Object[] objectArray0 = new Object[1];
    cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test093811,"public void test093811() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Object[] objectArray0 = new Object[1];
    cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test093812,"public void test093812() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Object[] objectArray0 = new Object[1];
    cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test094813,"public void test094813() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test094814,"public void test094814() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test094815,"public void test094815() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test094816,"public void test094816() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test094817,"public void test094817() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test094818,"public void test094818() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test094819,"public void test094819() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test094820,"public void test094820() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test094821,"public void test094821() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test094822,"public void test094822() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test094823,"public void test094823() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[8];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test095824,"public void test095824() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertEquals(""9"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test095825,"public void test095825() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat3.getAllowMissingColumnNames())
project,0,test095826,"public void test095826() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test095827,"public void test095827() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertTrue(cSVFormat3.isNullStringSet())
project,0,test095828,"public void test095828() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test095829,"public void test095829() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test095830,"public void test095830() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test095831,"public void test095831() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test095832,"public void test095832() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test095833,"public void test095833() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertTrue(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test095834,"public void test095834() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test096835,"public void test096835() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[7];
    cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test096836,"public void test096836() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[7];
    cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test096837,"public void test096837() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[7];
    cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test096838,"public void test096838() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[7];
    cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test096839,"public void test096839() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[7];
    cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test097840,"public void test097840() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test097841,"public void test097841() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test097842,"public void test097842() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test097843,"public void test097843() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test097844,"public void test097844() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test097845,"public void test097845() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test097846,"public void test097846() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test097847,"public void test097847() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertEquals(""\\N"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test097848,"public void test097848() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test097849,"public void test097849() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test097850,"public void test097850() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test098851,"public void test098851() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test098852,"public void test098852() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test098853,"public void test098853() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat3.isQuoteCharacterSet())
project,0,test098854,"public void test098854() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test098855,"public void test098855() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test098856,"public void test098856() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test098857,"public void test098857() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test098858,"public void test098858() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test098859,"public void test098859() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test098860,"public void test098860() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test098861,"public void test098861() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""YH H,"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    assertEquals('n', (char) cSVFormat3.getCommentMarker());
}",0,
project,0,test099862,"public void test099862() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    String[] stringArray0 = new String[0];
    cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test099863,"public void test099863() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    String[] stringArray0 = new String[0];
    cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test099864,"public void test099864() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    String[] stringArray0 = new String[0];
    cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test099865,"public void test099865() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    String[] stringArray0 = new String[0];
    cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test099866,"public void test099866() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    String[] stringArray0 = new String[0];
    cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test100867,"public void test100867() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test100868,"public void test100868() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test100869,"public void test100869() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test100870,"public void test100870() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test100871,"public void test100871() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test100872,"public void test100872() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test100873,"public void test100873() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test100874,"public void test100874() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test100875,"public void test100875() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test100876,"public void test100876() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test101877,"public void test101877() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test101878,"public void test101878() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test101879,"public void test101879() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test101880,"public void test101880() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test101881,"public void test101881() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test101882,"public void test101882() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test101883,"public void test101883() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test101884,"public void test101884() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test101885,"public void test101885() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test102886,"public void test102886() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test102887,"public void test102887() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test102888,"public void test102888() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test102889,"public void test102889() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test102890,"public void test102890() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test103891,"public void test103891() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test103892,"public void test103892() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test103893,"public void test103893() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test103894,"public void test103894() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test103895,"public void test103895() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test104896,"public void test104896() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test104897,"public void test104897() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test104898,"public void test104898() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test104899,"public void test104899() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,assertFalse(cSVFormat2.getTrailingDelimiter())
project,0,test104900,"public void test104900() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test105901,"public void test105901() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test105902,"public void test105902() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test105903,"public void test105903() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test105904,"public void test105904() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test105905,"public void test105905() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test105906,"public void test105906() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test105907,"public void test105907() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test105908,"public void test105908() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test105909,"public void test105909() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test105910,"public void test105910() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test105911,"public void test105911() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test106912,"public void test106912() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test106913,"public void test106913() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test106914,"public void test106914() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test106915,"public void test106915() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test106916,"public void test106916() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test107917,"public void test107917() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test107918,"public void test107918() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test107919,"public void test107919() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test107920,"public void test107920() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test107921,"public void test107921() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test107922,"public void test107922() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test107923,"public void test107923() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test107924,"public void test107924() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test107925,"public void test107925() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test108926,"public void test108926() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test108927,"public void test108927() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test108928,"public void test108928() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test108929,"public void test108929() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test108930,"public void test108930() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test109931,"public void test109931() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test109932,"public void test109932() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test109933,"public void test109933() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test109934,"public void test109934() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test109935,"public void test109935() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test109936,"public void test109936() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test109937,"public void test109937() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals('|', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test109938,"public void test109938() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test109939,"public void test109939() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test109940,"public void test109940() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test110941,"public void test110941() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test110942,"public void test110942() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test110943,"public void test110943() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test110944,"public void test110944() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test110945,"public void test110945() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test111946,"public void test111946() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test111947,"public void test111947() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertEquals('\t', cSVFormat3.getDelimiter());
}",0,assertNotNull(cSVFormat3.getDelimiter())
project,0,test111948,"public void test111948() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertEquals("""", cSVFormat4.getNullString());
}",0,assertNotNull(cSVFormat4.getNullString())
project,0,test111949,"public void test111949() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test111950,"public void test111950() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test111951,"public void test111951() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test111952,"public void test111952() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test111953,"public void test111953() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertTrue(cSVFormat4.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat4.isEscapeCharacterSet())
project,0,test111954,"public void test111954() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertEquals(""\n"", cSVFormat4.getRecordSeparator());
}",0,assertNotNull(cSVFormat4.getRecordSeparator())
project,0,test111955,"public void test111955() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertFalse(cSVFormat4.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat4.isQuoteCharacterSet())
project,0,test111956,"public void test111956() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    Character character0 = new Character('\""');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    CSVFormat cSVFormat3 = cSVFormat2.withNullString("""");
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test112957,"public void test112957() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test112958,"public void test112958() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test112959,"public void test112959() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test112960,"public void test112960() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test112961,"public void test112961() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test113962,"public void test113962() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test113963,"public void test113963() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test113964,"public void test113964() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test113965,"public void test113965() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test113966,"public void test113966() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test114967,"public void test114967() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test114968,"public void test114968() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertEquals(',', cSVFormat2.getDelimiter());
}",0,
project,0,test114969,"public void test114969() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test114970,"public void test114970() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test114971,"public void test114971() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test114972,"public void test114972() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test114973,"public void test114973() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test114974,"public void test114974() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test115975,"public void test115975() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test115976,"public void test115976() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test115977,"public void test115977() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test115978,"public void test115978() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test115979,"public void test115979() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    cSVFormat1.withHeader(class0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test116980,"public void test116980() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test116981,"public void test116981() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertEquals('[', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test116982,"public void test116982() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test116983,"public void test116983() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test116984,"public void test116984() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test116985,"public void test116985() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test116986,"public void test116986() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat0.getTrim());
}",0,assertTrue(cSVFormat0.getTrim())
project,0,test116987,"public void test116987() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test116988,"public void test116988() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test116989,"public void test116989() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertEquals('b', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test116990,"public void test116990() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test116991,"public void test116991() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test116992,"public void test116992() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test116993,"public void test116993() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test116994,"public void test116994() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test116995,"public void test116995() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test116996,"public void test116996() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test117997,"public void test117997() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat2.getAllowMissingColumnNames())
project,0,test117998,"public void test117998() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test117999,"public void test117999() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1171000,"public void test1171000() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test1171001,"public void test1171001() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test1171002,"public void test1171002() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1171003,"public void test1171003() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1171004,"public void test1171004() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test1181005,"public void test1181005() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1181006,"public void test1181006() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test1181007,"public void test1181007() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1181008,"public void test1181008() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1181009,"public void test1181009() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1181010,"public void test1181010() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1181011,"public void test1181011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test1191012,"public void test1191012() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1191013,"public void test1191013() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1191014,"public void test1191014() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test1191015,"public void test1191015() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1191016,"public void test1191016() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test1191017,"public void test1191017() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1191018,"public void test1191018() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('p', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test1191019,"public void test1191019() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1191020,"public void test1191020() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1191021,"public void test1191021() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1191022,"public void test1191022() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1201023,"public void test1201023() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""r;FMG6%'p`{&g"");
    Character character0 = new Character('M');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test1201024,"public void test1201024() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""r;FMG6%'p`{&g"");
    Character character0 = new Character('M');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test1201025,"public void test1201025() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""r;FMG6%'p`{&g"");
    Character character0 = new Character('M');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test1201026,"public void test1201026() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""r;FMG6%'p`{&g"");
    Character character0 = new Character('M');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertTrue(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test1201027,"public void test1201027() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""r;FMG6%'p`{&g"");
    Character character0 = new Character('M');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1211028,"public void test1211028() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1211029,"public void test1211029() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1211030,"public void test1211030() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1211031,"public void test1211031() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1211032,"public void test1211032() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1211033,"public void test1211033() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1211034,"public void test1211034() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1211035,"public void test1211035() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1211036,"public void test1211036() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test1221037,"public void test1221037() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,assertTrue(cSVFormat2.getTrailingDelimiter())
project,0,test1221038,"public void test1221038() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1221039,"public void test1221039() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test1221040,"public void test1221040() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1221041,"public void test1221041() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test1221042,"public void test1221042() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(',', cSVFormat2.getDelimiter());
}",0,
project,0,test1221043,"public void test1221043() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1221044,"public void test1221044() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1221045,"public void test1221045() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test1221046,"public void test1221046() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    Character character0 = new Character('l');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1231047,"public void test1231047() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = Character.valueOf('j');
    cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1231048,"public void test1231048() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = Character.valueOf('j');
    cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1231049,"public void test1231049() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = Character.valueOf('j');
    cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1231050,"public void test1231050() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = Character.valueOf('j');
    cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1231051,"public void test1231051() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Character character0 = Character.valueOf('j');
    cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1241052,"public void test1241052() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertEquals('=', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test1241053,"public void test1241053() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test1241054,"public void test1241054() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1241055,"public void test1241055() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1241056,"public void test1241056() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1241057,"public void test1241057() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1241058,"public void test1241058() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1241059,"public void test1241059() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1241060,"public void test1241060() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1241061,"public void test1241061() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1241062,"public void test1241062() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('=');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1251063,"public void test1251063() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test1251064,"public void test1251064() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1251065,"public void test1251065() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertEquals('I', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test1251066,"public void test1251066() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1251067,"public void test1251067() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1251068,"public void test1251068() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test1251069,"public void test1251069() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1251070,"public void test1251070() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test1251071,"public void test1251071() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1251072,"public void test1251072() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1251073,"public void test1251073() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test1251074,"public void test1251074() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1261075,"public void test1261075() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1261076,"public void test1261076() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertEquals('D', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test1261077,"public void test1261077() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test1261078,"public void test1261078() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test1261079,"public void test1261079() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1261080,"public void test1261080() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1261081,"public void test1261081() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1261082,"public void test1261082() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1261083,"public void test1261083() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1261084,"public void test1261084() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');
    assertEquals('$', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test1271085,"public void test1271085() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1271086,"public void test1271086() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1271087,"public void test1271087() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1271088,"public void test1271088() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1271089,"public void test1271089() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
    assertEquals('L', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test1271090,"public void test1271090() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');
    assertTrue(cSVFormat1.getTrim());
}",0,
project,0,test1281091,"public void test1281091() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1281092,"public void test1281092() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1281093,"public void test1281093() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1281094,"public void test1281094() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1281095,"public void test1281095() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1281096,"public void test1281096() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    assertEquals('c', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test1291097,"public void test1291097() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1291098,"public void test1291098() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertEquals('c', (char) cSVFormat3.getEscapeCharacter());
}",0,
project,0,test1291099,"public void test1291099() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,
project,0,test1291100,"public void test1291100() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test1291101,"public void test1291101() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test1291102,"public void test1291102() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test1291103,"public void test1291103() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertEquals(',', cSVFormat2.getDelimiter());
}",0,
project,0,test1291104,"public void test1291104() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1291105,"public void test1291105() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,
project,0,test1291106,"public void test1291106() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test1291107,"public void test1291107() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1291108,"public void test1291108() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test1291109,"public void test1291109() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1301110,"public void test1301110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1301111,"public void test1301111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1301112,"public void test1301112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1301113,"public void test1301113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test1301114,"public void test1301114() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
    assertEquals('I', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test1301115,"public void test1301115() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1311116,"public void test1311116() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1311117,"public void test1311117() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test1311118,"public void test1311118() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1311119,"public void test1311119() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1311120,"public void test1311120() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1311121,"public void test1311121() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1311122,"public void test1311122() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1311123,"public void test1311123() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,
project,0,test1311124,"public void test1311124() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertEquals('.', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1311125,"public void test1311125() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1311126,"public void test1311126() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1311127,"public void test1311127() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
    assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test1321128,"public void test1321128() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertEquals('5', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1321129,"public void test1321129() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1321130,"public void test1321130() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1321131,"public void test1321131() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1321132,"public void test1321132() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1321133,"public void test1321133() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1321134,"public void test1321134() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test1321135,"public void test1321135() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1321136,"public void test1321136() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1321137,"public void test1321137() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test1321138,"public void test1321138() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');
    assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test1331139,"public void test1331139() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertEquals('8', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test1331140,"public void test1331140() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1331141,"public void test1331141() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1331142,"public void test1331142() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1331143,"public void test1331143() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1331144,"public void test1331144() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test1331145,"public void test1331145() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test1331146,"public void test1331146() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1331147,"public void test1331147() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1331148,"public void test1331148() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1331149,"public void test1331149() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1341150,"public void test1341150() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1341151,"public void test1341151() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1341152,"public void test1341152() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1341153,"public void test1341153() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1341154,"public void test1341154() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1341155,"public void test1341155() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');
    assertEquals('`', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test1351156,"public void test1351156() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1351157,"public void test1351157() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test1351158,"public void test1351158() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1351159,"public void test1351159() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1351160,"public void test1351160() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test1351161,"public void test1351161() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test1351162,"public void test1351162() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1351163,"public void test1351163() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1351164,"public void test1351164() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertEquals('|', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test1351165,"public void test1351165() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",1,
project,0,test1351166,"public void test1351166() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1361167,"public void test1361167() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1361168,"public void test1361168() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1361169,"public void test1361169() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1361170,"public void test1361170() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1361171,"public void test1361171() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1361172,"public void test1361172() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');
    assertEquals('M', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test1371173,"public void test1371173() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1371174,"public void test1371174() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1371175,"public void test1371175() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test1371176,"public void test1371176() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1371177,"public void test1371177() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1371178,"public void test1371178() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test1371179,"public void test1371179() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1371180,"public void test1371180() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test1371181,"public void test1371181() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test1371182,"public void test1371182() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1371183,"public void test1371183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1371184,"public void test1371184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test1371185,"public void test1371185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = new Character('a');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1381186,"public void test1381186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Character character0 = Character.valueOf(':');
    cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1381187,"public void test1381187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Character character0 = Character.valueOf(':');
    cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1381188,"public void test1381188() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Character character0 = Character.valueOf(':');
    cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1381189,"public void test1381189() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Character character0 = Character.valueOf(':');
    cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1381190,"public void test1381190() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    Character character0 = Character.valueOf(':');
    cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1391191,"public void test1391191() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    Character character0 = new Character('*');
    cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1391192,"public void test1391192() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    Character character0 = new Character('*');
    cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1391193,"public void test1391193() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    Character character0 = new Character('*');
    cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1391194,"public void test1391194() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    Character character0 = new Character('*');
    cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1391195,"public void test1391195() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    Character character0 = new Character('*');
    cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1401196,"public void test1401196() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test1401197,"public void test1401197() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test1401198,"public void test1401198() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,
project,0,test1401199,"public void test1401199() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
    assertTrue(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test1401200,"public void test1401200() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1411201,"public void test1411201() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1411202,"public void test1411202() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');
    assertEquals('R', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test1411203,"public void test1411203() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1411204,"public void test1411204() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1411205,"public void test1411205() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1411206,"public void test1411206() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1421207,"public void test1421207() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\'');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1421208,"public void test1421208() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\'');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1421209,"public void test1421209() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\'');
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1421210,"public void test1421210() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\'');
    assertEquals('\'', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test1421211,"public void test1421211() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\'');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1421212,"public void test1421212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\'');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1431213,"public void test1431213() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test1431214,"public void test1431214() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1431215,"public void test1431215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertEquals('l', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test1431216,"public void test1431216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test1431217,"public void test1431217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test1431218,"public void test1431218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1431219,"public void test1431219() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1431220,"public void test1431220() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertEquals('\t', cSVFormat2.getDelimiter());
}",1,
project,0,test1431221,"public void test1431221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertEquals(""\\N"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test1431222,"public void test1431222() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1431223,"public void test1431223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1441224,"public void test1441224() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1441225,"public void test1441225() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1441226,"public void test1441226() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1441227,"public void test1441227() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1441228,"public void test1441228() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1441229,"public void test1441229() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');
    assertEquals('o', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test1451230,"public void test1451230() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1451231,"public void test1451231() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1451232,"public void test1451232() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1451233,"public void test1451233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1451234,"public void test1451234() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1451235,"public void test1451235() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1451236,"public void test1451236() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1451237,"public void test1451237() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1451238,"public void test1451238() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test1461239,"public void test1461239() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1461240,"public void test1461240() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1461241,"public void test1461241() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1461242,"public void test1461242() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1461243,"public void test1461243() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1471244,"public void test1471244() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test1471245,"public void test1471245() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test1471246,"public void test1471246() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1471247,"public void test1471247() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test1471248,"public void test1471248() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat3.isQuoteCharacterSet())
project,0,test1471249,"public void test1471249() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test1471250,"public void test1471250() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertFalse(cSVFormat3.isNullStringSet())
project,0,test1471251,"public void test1471251() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat3.getSkipHeaderRecord());
}",0,
project,0,test1471252,"public void test1471252() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,
project,0,test1471253,"public void test1471253() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1471254,"public void test1471254() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test1471255,"public void test1471255() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('*');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test1481256,"public void test1481256() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test1481257,"public void test1481257() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1481258,"public void test1481258() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1481259,"public void test1481259() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test1481260,"public void test1481260() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1481261,"public void test1481261() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1481262,"public void test1481262() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test1481263,"public void test1481263() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test1481264,"public void test1481264() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1481265,"public void test1481265() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1481266,"public void test1481266() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1491267,"public void test1491267() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1491268,"public void test1491268() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test1491269,"public void test1491269() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1491270,"public void test1491270() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1491271,"public void test1491271() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1501272,"public void test1501272() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1501273,"public void test1501273() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1501274,"public void test1501274() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test1501275,"public void test1501275() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test1501276,"public void test1501276() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1501277,"public void test1501277() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1501278,"public void test1501278() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test1501279,"public void test1501279() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1501280,"public void test1501280() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('M');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1511281,"public void test1511281() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1511282,"public void test1511282() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test1511283,"public void test1511283() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertTrue(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test1511284,"public void test1511284() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test1511285,"public void test1511285() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertTrue(cSVFormat3.equals((Object) cSVFormat0));
}",0,
project,0,test1511286,"public void test1511286() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertTrue(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test1521287,"public void test1521287() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1521288,"public void test1521288() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1521289,"public void test1521289() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1521290,"public void test1521290() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1521291,"public void test1521291() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1521292,"public void test1521292() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1521293,"public void test1521293() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test1521294,"public void test1521294() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test1531295,"public void test1531295() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,
project,0,test1531296,"public void test1531296() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1531297,"public void test1531297() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertEquals(""z"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test1531298,"public void test1531298() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertFalse(cSVFormat3.getTrailingDelimiter());
}",0,assertTrue(cSVFormat3.getTrailingDelimiter())
project,0,test1531299,"public void test1531299() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertFalse(cSVFormat3.isNullStringSet())
project,0,test1531300,"public void test1531300() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,
project,0,test1531301,"public void test1531301() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertTrue(cSVFormat3.getSkipHeaderRecord());
}",0,
project,0,test1531302,"public void test1531302() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1531303,"public void test1531303() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test1531304,"public void test1531304() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1531305,"public void test1531305() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test1531306,"public void test1531306() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test1541307,"public void test1541307() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test1541308,"public void test1541308() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1541309,"public void test1541309() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test1541310,"public void test1541310() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1541311,"public void test1541311() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1541312,"public void test1541312() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1541313,"public void test1541313() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1541314,"public void test1541314() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1541315,"public void test1541315() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1541316,"public void test1541316() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1541317,"public void test1541317() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1551318,"public void test1551318() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1551319,"public void test1551319() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test1551320,"public void test1551320() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1551321,"public void test1551321() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1551322,"public void test1551322() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1551323,"public void test1551323() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test1551324,"public void test1551324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test1551325,"public void test1551325() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1551326,"public void test1551326() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test1561327,"public void test1561327() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    boolean boolean0 = cSVFormat1.getTrim();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1561328,"public void test1561328() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    boolean boolean0 = cSVFormat1.getTrim();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1561329,"public void test1561329() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    boolean boolean0 = cSVFormat1.getTrim();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1561330,"public void test1561330() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    boolean boolean0 = cSVFormat1.getTrim();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1561331,"public void test1561331() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withTrim();
    boolean boolean0 = cSVFormat1.getTrim();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1571332,"public void test1571332() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    boolean boolean0 = cSVFormat1.getTrailingDelimiter();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1571333,"public void test1571333() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    boolean boolean0 = cSVFormat1.getTrailingDelimiter();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1571334,"public void test1571334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    boolean boolean0 = cSVFormat1.getTrailingDelimiter();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1571335,"public void test1571335() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    boolean boolean0 = cSVFormat1.getTrailingDelimiter();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1571336,"public void test1571336() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    boolean boolean0 = cSVFormat1.getTrailingDelimiter();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1581337,"public void test1581337() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = cSVFormat0.getQuoteCharacter();
    assertNull(character0);
}",0,
project,0,test1591338,"public void test1591338() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    String string0 = cSVFormat0.getNullString();
    assertEquals(""\\N"", string0);
}",0,
project,0,test1601339,"public void test1601339() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1601340,"public void test1601340() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1601341,"public void test1601341() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1601342,"public void test1601342() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test1601343,"public void test1601343() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test1601344,"public void test1601344() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test1601345,"public void test1601345() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1601346,"public void test1601346() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test1601347,"public void test1601347() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1601348,"public void test1601348() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1601349,"public void test1601349() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1601350,"public void test1601350() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1601351,"public void test1601351() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    String string0 = cSVFormat2.getNullString();
    assertEquals("""", string0);
}",0,
project,0,test1611352,"public void test1611352() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1611353,"public void test1611353() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test1611354,"public void test1611354() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1611355,"public void test1611355() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test1611356,"public void test1611356() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1611357,"public void test1611357() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1611358,"public void test1611358() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1611359,"public void test1611359() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertEquals('|', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1611360,"public void test1611360() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test1611361,"public void test1611361() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1611362,"public void test1611362() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test1621363,"public void test1621363() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1621364,"public void test1621364() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1621365,"public void test1621365() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1621366,"public void test1621366() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1621367,"public void test1621367() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1631368,"public void test1631368() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,
project,0,test1631369,"public void test1631369() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertEquals('x', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test1631370,"public void test1631370() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(cSVFormat0.getTrim());
}",0,
project,0,test1631371,"public void test1631371() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test1631372,"public void test1631372() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1631373,"public void test1631373() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat0.getSkipHeaderRecord())
project,0,test1631374,"public void test1631374() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test1631375,"public void test1631375() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,
project,0,test1641376,"public void test1641376() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1641377,"public void test1641377() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1641378,"public void test1641378() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1641379,"public void test1641379() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,
project,0,test1641380,"public void test1641380() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1641381,"public void test1641381() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1641382,"public void test1641382() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1641383,"public void test1641383() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1641384,"public void test1641384() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1641385,"public void test1641385() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    cSVFormat1.getHeader();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1651386,"public void test1651386() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1651387,"public void test1651387() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test1651388,"public void test1651388() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1651389,"public void test1651389() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1651390,"public void test1651390() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1651391,"public void test1651391() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1651392,"public void test1651392() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1651393,"public void test1651393() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1651394,"public void test1651394() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1651395,"public void test1651395() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test1651396,"public void test1651396() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertNotNull(character0);
}",0,
project,0,test1651397,"public void test1651397() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();
    Character character0 = cSVFormat1.getEscapeCharacter();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1661398,"public void test1661398() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1661399,"public void test1661399() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test1661400,"public void test1661400() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1661401,"public void test1661401() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1661402,"public void test1661402() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1661403,"public void test1661403() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test1661404,"public void test1661404() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1661405,"public void test1661405() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1661406,"public void test1661406() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test1661407,"public void test1661407() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');
    char char0 = cSVFormat1.getDelimiter();
    assertEquals('I', char0);
}",0,
project,0,test1671408,"public void test1671408() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test1671409,"public void test1671409() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1671410,"public void test1671410() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1671411,"public void test1671411() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test1671412,"public void test1671412() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1671413,"public void test1671413() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1671414,"public void test1671414() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1671415,"public void test1671415() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1671416,"public void test1671416() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertEquals('Q', (char) character0);
}",0,
project,0,test1671417,"public void test1671417() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1671418,"public void test1671418() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');
    Character character0 = cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1681419,"public void test1681419() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1691420,"public void test1691420() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Object[] objectArray0 = new Object[0];
    String string0 = cSVFormat0.format(objectArray0);
    assertEquals("""", string0);
}",0,
project,0,test1701421,"public void test1701421() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('=');
    // Undeclared exception!
    try {
        cSVFormat0.withQuote('=');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The quoteChar character and the delimiter cannot be the same ('=')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1711422,"public void test1711422() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
    doReturn((-1575)).when(resultSetMetaData0).getColumnCount();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
    // Undeclared exception!
    try {
        cSVFormat0.withHeader(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1721423,"public void test1721423() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('B');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    // Undeclared exception!
    try {
        cSVFormat1.withEscape(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start and the escape character cannot be the same ('B')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test1731424,"public void test1731424() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('^');
    // Undeclared exception!
    try {
        cSVFormat1.withDelimiter('^');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The escape character and the delimiter cannot be the same ('^')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1741425,"public void test1741425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    // Undeclared exception!
    try {
        cSVFormat1.withCommentMarker('f');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('f')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1751426,"public void test1751426() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    // Undeclared exception!
    try {
        cSVFormat0.println((Appendable) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1761427,"public void test1761427() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) cSVFormat0;
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(44);
    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
    // Undeclared exception!
    try {
        cSVFormat0.printRecord(charBuffer0, objectArray0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.Buffer"", e);
    }
}",1,
project,0,test1771428,"public void test1771428() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CharBuffer charBuffer0 = CharBuffer.allocate(53);
    Object[] objectArray0 = new Object[7];
    objectArray0[0] = (Object) charBuffer0;
    // Undeclared exception!
    try {
        cSVFormat0.EXCEL.printRecord(charBuffer0, objectArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // 53
        //
        verifyException(""java.nio.HeapCharBuffer"", e);
    }
}",1,
project,0,test1781429,"public void test1781429() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Charset charset0 = Charset.defaultCharset();
    // Undeclared exception!
    try {
        cSVFormat0.RFC4180.print((Path) null, charset0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test1791430,"public void test1791430() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    MockFile mockFile0 = new MockFile("""");
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    try {
        cSVFormat0.TDF.print(path0, charset0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
    }
}",1,
project,0,test1801431,"public void test1801431() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Integer integer0 = new Integer(44);
    CharBuffer charBuffer0 = CharBuffer.allocate(10);
    // Undeclared exception!
    try {
        cSVFormat0.print((Object) integer0, (Appendable) charBuffer0, true);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",0,
project,0,test1811432,"public void test1811432() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    PipedWriter pipedWriter0 = new PipedWriter();
    try {
        cSVFormat0.EXCEL.print((Object) cSVFormat0, (Appendable) pipedWriter0, true);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedWriter"", e);
    }
}",0,
project,0,test1821433,"public void test1821433() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    MockFile mockFile0 = new MockFile(""cZ<"", ""cZ<"");
    // Undeclared exception!
    try {
        cSVFormat0.print((File) mockFile0, (Charset) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // charset
        //
        verifyException(""java.io.OutputStreamWriter"", e);
    }
}",0,
project,0,test1831434,"public void test1831434() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    MockFile mockFile0 = new MockFile("""");
    try {
        cSVFormat0.print((File) mockFile0, (Charset) null);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
    }
}",0,
project,0,test1841435,"public void test1841435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        cSVFormat0.parse((Reader) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'reader' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1851436,"public void test1851436() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1851437,"public void test1851437() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1851438,"public void test1851438() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1851439,"public void test1851439() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1851440,"public void test1851440() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test1871443,"public void test1871443() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    StringWriter stringWriter0 = new StringWriter();
    cSVFormat0.println(stringWriter0);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test1871444,"public void test1871444() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    StringWriter stringWriter0 = new StringWriter();
    cSVFormat0.println(stringWriter0);
    assertFalse(cSVFormat0.getTrim());
}",0,
project,0,test1871445,"public void test1871445() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    StringWriter stringWriter0 = new StringWriter();
    cSVFormat0.println(stringWriter0);
    assertEquals('T', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test1871446,"public void test1871446() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    StringWriter stringWriter0 = new StringWriter();
    cSVFormat0.println(stringWriter0);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test1871447,"public void test1871447() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    StringWriter stringWriter0 = new StringWriter();
    cSVFormat0.println(stringWriter0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test1871448,"public void test1871448() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    StringWriter stringWriter0 = new StringWriter();
    cSVFormat0.println(stringWriter0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test1871449,"public void test1871449() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    StringWriter stringWriter0 = new StringWriter();
    cSVFormat0.println(stringWriter0);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test1881450,"public void test1881450() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1156);
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
    cSVFormat0.print((Object) cSVFormat0, (Appendable) outputStreamWriter0, true);
    assertTrue(cSVFormat0.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat0.isQuoteCharacterSet())
project,0,test1901453,"public void test1901453() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    // Undeclared exception!
    try {
        cSVFormat0.print((Object) null, (Appendable) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1911454,"public void test1911454() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1921455,"public void test1921455() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1931456,"public void test1931456() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    boolean boolean0 = cSVFormat0.isNullStringSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1941457,"public void test1941457() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1951458,"public void test1951458() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1961459,"public void test1961459() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1961460,"public void test1961460() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1961461,"public void test1961461() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1961462,"public void test1961462() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1961463,"public void test1961463() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertEquals('$', (char) cSVFormat1.getCommentMarker());
}",0,
project,0,test1961464,"public void test1961464() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1961465,"public void test1961465() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test1961466,"public void test1961466() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1961467,"public void test1961467() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1961468,"public void test1961468() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1961469,"public void test1961469() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1971470,"public void test1971470() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isCommentMarkerSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1981471,"public void test1981471() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    String[] stringArray0 = cSVFormat0.getHeaderComments();
    assertNull(stringArray0);
}",0,assertNotNull(stringArray0)
project,0,test1991472,"public void test1991472() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test1991473,"public void test1991473() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test1991474,"public void test1991474() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,
project,0,test1991475,"public void test1991475() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1991476,"public void test1991476() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertEquals(0, stringArray0.length);
}",0,
project,0,test1991477,"public void test1991477() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test1991478,"public void test1991478() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1991479,"public void test1991479() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1991480,"public void test1991480() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1991481,"public void test1991481() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1991482,"public void test1991482() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();
    String[] stringArray0 = cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test2001483,"public void test2001483() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    String[] stringArray0 = cSVFormat0.getHeader();
    assertNull(stringArray0);
}",0,
project,0,test2011484,"public void test2011484() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    MockFile mockFile0 = new MockFile(""00)eAXO"", ""!/mBjw;f#YIuz#"");
    Charset charset0 = Charset.defaultCharset();
    CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);
    assertNotNull(cSVPrinter0);
}",0,
project,0,test2021485,"public void test2021485() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    cSVFormat0.getQuoteMode();
}",0,
project,0,test2031486,"public void test2031486() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    boolean boolean0 = cSVFormat0.getTrim();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2041487,"public void test2041487() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = cSVFormat0.getQuoteCharacter();
    assertEquals('\""', (char) character0);
}",0,
project,0,test2051488,"public void test2051488() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2061489,"public void test2061489() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""format"");
    cSVFormat1.println(mockPrintStream0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test2061490,"public void test2061490() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""format"");
    cSVFormat1.println(mockPrintStream0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2061491,"public void test2061491() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""format"");
    cSVFormat1.println(mockPrintStream0);
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2061492,"public void test2061492() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""format"");
    cSVFormat1.println(mockPrintStream0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2061493,"public void test2061493() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""format"");
    cSVFormat1.println(mockPrintStream0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2071494,"public void test2071494() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2071495,"public void test2071495() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2071496,"public void test2071496() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2071497,"public void test2071497() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test2071498,"public void test2071498() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2071499,"public void test2071499() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2071500,"public void test2071500() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,
project,0,test2071501,"public void test2071501() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2071502,"public void test2071502() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2071503,"public void test2071503() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2081504,"public void test2081504() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = cSVFormat0.getCommentMarker();
    assertNull(character0);
}",0,assertNotNull(character0)
project,0,test2091505,"public void test2091505() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = cSVFormat0.getEscapeCharacter();
    assertNull(character0);
}",0,
project,0,test2101506,"public void test2101506() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2111507,"public void test2111507() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2121508,"public void test2121508() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    boolean boolean0 = cSVFormat0.getTrailingDelimiter();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2131509,"public void test2131509() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    char char0 = cSVFormat0.getDelimiter();
    assertEquals(',', char0);
}",0,
project,0,test2141510,"public void test2141510() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
    doReturn(3248).when(resultSetMetaData0).getColumnCount();
    doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
    // Undeclared exception!
    try {
        cSVFormat0.withHeader(resultSet0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test2151511,"public void test2151511() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test2151512,"public void test2151512() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test2151513,"public void test2151513() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test2151514,"public void test2151514() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2151515,"public void test2151515() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2151516,"public void test2151516() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test2151517,"public void test2151517() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertEquals('8', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test2151518,"public void test2151518() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,assertTrue(cSVFormat0.getTrailingDelimiter())
project,0,test2151519,"public void test2151519() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat0.getTrim());
}",0,assertTrue(cSVFormat0.getTrim())
project,0,test2161520,"public void test2161520() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2161521,"public void test2161521() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2161522,"public void test2161522() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2161523,"public void test2161523() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2161524,"public void test2161524() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2181526,"public void test2181526() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NONE;
    // Undeclared exception!
    try {
        cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No quotes mode set but no escape character is set
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test2191527,"public void test2191527() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');
    // Undeclared exception!
    try {
        cSVFormat1.withEscape('m');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start and the escape character cannot be the same ('m')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test2201528,"public void test2201528() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('2');
    Character character0 = Character.valueOf('2');
    // Undeclared exception!
    try {
        cSVFormat1.withCommentMarker(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('2')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test2211529,"public void test2211529() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    Character character0 = new Character('8');
    // Undeclared exception!
    try {
        cSVFormat0.withCommentMarker(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the delimiter cannot be the same ('8')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test2221530,"public void test2221530() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    Character character0 = new Character('9');
    // Undeclared exception!
    try {
        cSVFormat0.withQuote(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The quoteChar character and the delimiter cannot be the same ('9')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test2231531,"public void test2231531() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2231532,"public void test2231532() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2231533,"public void test2231533() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2231534,"public void test2231534() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2231535,"public void test2231535() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test2231536,"public void test2231536() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2231537,"public void test2231537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2231538,"public void test2231538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test2231539,"public void test2231539() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2231540,"public void test2231540() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2231541,"public void test2231541() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test2241542,"public void test2241542() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2241543,"public void test2241543() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2241544,"public void test2241544() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<,> QuoteChar=<\""> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:true Header:[]"", string0);
}",0,
project,0,test2241545,"public void test2241545() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2251546,"public void test2251546() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getTrim());
}",0,
project,0,test2251547,"public void test2251547() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2251548,"public void test2251548() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<\n> IgnoreHeaderCase:ignored SkipHeaderRecord:false"", string0);
}",0,
project,0,test2251549,"public void test2251549() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2261550,"public void test2261550() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    String string0 = cSVFormat0.toString();
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,
project,0,test2261551,"public void test2261551() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    String string0 = cSVFormat0.toString();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test2261552,"public void test2261552() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    String string0 = cSVFormat0.toString();
    assertEquals(""Delimiter=<8> SkipHeaderRecord:false"", string0);
}",0,
project,0,test2261553,"public void test2261553() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    String string0 = cSVFormat0.toString();
    assertFalse(cSVFormat0.getTrim());
}",0,assertFalse(cSVFormat0.getTrim())
project,0,test2271554,"public void test2271554() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test2271555,"public void test2271555() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test2271556,"public void test2271556() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertEquals('|', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test2271557,"public void test2271557() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2271558,"public void test2271558() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertFalse(cSVFormat2.getTrim());
}",0,assertTrue(cSVFormat2.getTrim())
project,0,test2271559,"public void test2271559() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertTrue(cSVFormat2.getTrailingDelimiter());
}",0,
project,0,test2271560,"public void test2271560() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertFalse(cSVFormat2.equals((Object) cSVFormat0));
}",0,
project,0,test2271561,"public void test2271561() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Class<QuoteMode> class0 = QuoteMode.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    Path path0 = mockFile0.toPath();
    Charset charset0 = Charset.defaultCharset();
    cSVFormat2.print(path0, charset0);
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test2281562,"public void test2281562() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('[');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuote(character0);
    // Undeclared exception!
    try {
        cSVFormat1.print((Object) ""Hc.NK\""] "", (Appendable) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2291563,"public void test2291563() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    String[] stringArray0 = new String[9];
    stringArray0[3] = ""40-Y^E%,tp"";
    String string0 = cSVFormat0.RFC4180.format(stringArray0);
    assertEquals("",,,\""40-Y^E%,tp\"",,,,,"", string0);
}",0,
project,0,test2301564,"public void test2301564() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Object[] objectArray0 = new Object[8];
    objectArray0[7] = (Object) ""Delimiter=<,> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"";
    String string0 = cSVFormat0.format(objectArray0);
    assertEquals(""|||||||\""Delimiter=<,> QuoteChar=<\""\""> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"""", string0);
}",0,
project,0,test2311565,"public void test2311565() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""TDF"");
    // Undeclared exception!
    try {
        cSVFormat0.print((Object) ""TDF"", (Appendable) charBuffer0, true);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",0,
project,0,test2321566,"public void test2321566() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) """";
    String string0 = cSVFormat0.INFORMIX_UNLOAD.format(objectArray0);
    assertEquals(""\""\""|||"", string0);
}",0,
project,0,test2331567,"public void test2331567() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    String[] stringArray0 = new String[9];
    stringArray0[2] = """";
    String string0 = cSVFormat0.RFC4180.format(stringArray0);
    assertTrue(cSVFormat0.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat0.isQuoteCharacterSet())
project,0,test2331568,"public void test2331568() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    String[] stringArray0 = new String[9];
    stringArray0[2] = """";
    String string0 = cSVFormat0.RFC4180.format(stringArray0);
    assertEquals("",,,,,,,,"", string0);
}",0,
project,0,test2341569,"public void test2341569() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    Object[] objectArray0 = new Object[6];
    objectArray0[0] = (Object) cSVFormat0;
    // Undeclared exception!
    try {
        cSVFormat1.printRecord((Appendable) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test2351570,"public void test2351570() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    Object[] objectArray0 = new Object[4];
    objectArray0[1] = (Object) cSVFormat1;
    cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test2351571,"public void test2351571() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    Object[] objectArray0 = new Object[4];
    objectArray0[1] = (Object) cSVFormat1;
    cSVFormat1.format(objectArray0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test2351572,"public void test2351572() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    Object[] objectArray0 = new Object[4];
    objectArray0[1] = (Object) cSVFormat1;
    cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2351573,"public void test2351573() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    Object[] objectArray0 = new Object[4];
    objectArray0[1] = (Object) cSVFormat1;
    cSVFormat1.format(objectArray0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2351574,"public void test2351574() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    Object[] objectArray0 = new Object[4];
    objectArray0[1] = (Object) cSVFormat1;
    cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2351575,"public void test2351575() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    Object[] objectArray0 = new Object[4];
    objectArray0[1] = (Object) cSVFormat1;
    cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2361576,"public void test2361576() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Unexpected Quote value: "", true);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    cSVFormat0.MYSQL.print((Object) ""org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002"", (Appendable) mockPrintWriter0, true);
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,assertTrue(cSVFormat0.getTrailingDelimiter())
project,0,test2361577,"public void test2361577() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Unexpected Quote value: "", true);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    cSVFormat0.MYSQL.print((Object) ""org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002"", (Appendable) mockPrintWriter0, true);
    assertEquals('9', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test2361578,"public void test2361578() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Unexpected Quote value: "", true);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    cSVFormat0.MYSQL.print((Object) ""org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002"", (Appendable) mockPrintWriter0, true);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test2361579,"public void test2361579() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Unexpected Quote value: "", true);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    cSVFormat0.MYSQL.print((Object) ""org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002"", (Appendable) mockPrintWriter0, true);
    assertFalse(cSVFormat0.getTrim());
}",0,assertTrue(cSVFormat0.getTrim())
project,0,test2361580,"public void test2361580() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Unexpected Quote value: "", true);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    cSVFormat0.MYSQL.print((Object) ""org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002"", (Appendable) mockPrintWriter0, true);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test2361581,"public void test2361581() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Unexpected Quote value: "", true);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    cSVFormat0.MYSQL.print((Object) ""org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002"", (Appendable) mockPrintWriter0, true);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test2361582,"public void test2361582() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""Unexpected Quote value: "", true);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    cSVFormat0.MYSQL.print((Object) ""org.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\t\torg.apache.commons.csv.CSVFormat@0000000003\torg.apache.commons.csv.CSVFormat@0000000001\torg.apache.commons.csv.CSVFormat@0000000002"", (Appendable) mockPrintWriter0, true);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test2371583,"public void test2371583() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
    Object[] objectArray0 = new Object[6];
    String string0 = cSVFormat1.format(objectArray0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2371584,"public void test2371584() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
    Object[] objectArray0 = new Object[6];
    String string0 = cSVFormat1.format(objectArray0);
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2371585,"public void test2371585() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
    Object[] objectArray0 = new Object[6];
    String string0 = cSVFormat1.format(objectArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2371586,"public void test2371586() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
    Object[] objectArray0 = new Object[6];
    String string0 = cSVFormat1.format(objectArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2371587,"public void test2371587() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();
    Object[] objectArray0 = new Object[6];
    String string0 = cSVFormat1.format(objectArray0);
    assertEquals("",,,,,"", string0);
}",0,
project,0,test2381588,"public void test2381588() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    assertFalse(cSVFormat0.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat0.isQuoteCharacterSet())
project,0,test2381589,"public void test2381589() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    assertFalse(cSVFormat0.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat0.isEscapeCharacterSet())
project,0,test2381590,"public void test2381590() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""^Hno83gdL/?Brk5"";
    String string0 = cSVFormat0.format(stringArray0);
    assertEquals('m', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test2381591,"public void test2381591() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""^Hno83gdL/?Brk5"";
    String string0 = cSVFormat0.format(stringArray0);
    assertEquals(""^Hno83gdL/?Brk5"", string0);
}",0,
project,0,test2381592,"public void test2381592() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""^Hno83gdL/?Brk5"";
    String string0 = cSVFormat0.format(stringArray0);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test2381593,"public void test2381593() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""^Hno83gdL/?Brk5"";
    String string0 = cSVFormat0.format(stringArray0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test2381594,"public void test2381594() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""^Hno83gdL/?Brk5"";
    String string0 = cSVFormat0.format(stringArray0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test2381595,"public void test2381595() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""^Hno83gdL/?Brk5"";
    String string0 = cSVFormat0.format(stringArray0);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test2391596,"public void test2391596() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertEquals("""", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test2391597,"public void test2391597() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test2391598,"public void test2391598() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test2391599,"public void test2391599() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test2391600,"public void test2391600() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test2391601,"public void test2391601() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test2391602,"public void test2391602() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2391603,"public void test2391603() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test2391604,"public void test2391604() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertTrue(boolean0);
}",0,
project,0,test2391605,"public void test2391605() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2391606,"public void test2391606() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2391607,"public void test2391607() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test2391608,"public void test2391608() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2401609,"public void test2401609() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2401610,"public void test2401610() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2401611,"public void test2401611() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2401612,"public void test2401612() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<\t> QuoteChar=<\""> CommentStart=<8> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"", string0);
}",0,
project,0,test2411613,"public void test2411613() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,assertTrue(cSVFormat0.getTrailingDelimiter())
project,0,test2411614,"public void test2411614() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertEquals('X', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test2411615,"public void test2411615() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2411616,"public void test2411616() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test2411617,"public void test2411617() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2411618,"public void test2411618() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat0.getAllowMissingColumnNames())
project,0,test2411619,"public void test2411619() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2411620,"public void test2411620() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test2411621,"public void test2411621() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2411622,"public void test2411622() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test2411623,"public void test2411623() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test2411624,"public void test2411624() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getTrim());
}",0,assertTrue(cSVFormat0.getTrim())
project,0,test2421625,"public void test2421625() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2421626,"public void test2421626() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2421627,"public void test2421627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2421628,"public void test2421628() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2431629,"public void test2431629() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2431630,"public void test2431630() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2431631,"public void test2431631() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2431632,"public void test2431632() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2431633,"public void test2431633() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test2431634,"public void test2431634() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test2431635,"public void test2431635() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2431636,"public void test2431636() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,
project,0,test2431637,"public void test2431637() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2431638,"public void test2431638() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2441639,"public void test2441639() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    cSVFormat0.hashCode();
}",0,
project,0,test2451640,"public void test2451640() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('2');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2451641,"public void test2451641() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('2');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test2451642,"public void test2451642() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('2');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2451643,"public void test2451643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('2');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test2451644,"public void test2451644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('2');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2451645,"public void test2451645() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('2');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test2461646,"public void test2461646() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    cSVFormat0.hashCode();
    assertEquals('m', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test2461647,"public void test2461647() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test2461648,"public void test2461648() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test2461649,"public void test2461649() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test2461650,"public void test2461650() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test2461651,"public void test2461651() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getTrim());
}",0,assertTrue(cSVFormat0.getTrim())
project,0,test2471652,"public void test2471652() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    cSVFormat1.print((Appendable) charArrayWriter0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2471653,"public void test2471653() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    cSVFormat1.print((Appendable) charArrayWriter0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2471654,"public void test2471654() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    cSVFormat1.print((Appendable) charArrayWriter0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2471655,"public void test2471655() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    cSVFormat1.print((Appendable) charArrayWriter0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2471656,"public void test2471656() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    cSVFormat1.print((Appendable) charArrayWriter0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2481657,"public void test2481657() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2481658,"public void test2481658() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test2481659,"public void test2481659() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2481660,"public void test2481660() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2481661,"public void test2481661() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2481662,"public void test2481662() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2481663,"public void test2481663() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2491664,"public void test2491664() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,
project,0,test2491665,"public void test2491665() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2491666,"public void test2491666() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2491667,"public void test2491667() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2491668,"public void test2491668() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2491669,"public void test2491669() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2491670,"public void test2491670() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test2491671,"public void test2491671() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2491672,"public void test2491672() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test2491673,"public void test2491673() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2501674,"public void test2501674() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test2501675,"public void test2501675() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,
project,0,test2501676,"public void test2501676() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertFalse(cSVFormat1.getTrim())
project,0,test2501677,"public void test2501677() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2501678,"public void test2501678() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test2501679,"public void test2501679() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2501680,"public void test2501680() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test2501681,"public void test2501681() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2501682,"public void test2501682() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test2501683,"public void test2501683() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test2501684,"public void test2501684() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(""{"", cSVFormat1.getNullString());
}",0,
project,0,test2501685,"public void test2501685() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""{"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test2511686,"public void test2511686() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2511687,"public void test2511687() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2511688,"public void test2511688() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2511689,"public void test2511689() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2511690,"public void test2511690() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2511691,"public void test2511691() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2511692,"public void test2511692() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test2511693,"public void test2511693() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2511694,"public void test2511694() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    Character character0 = new Character('j');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    cSVFormat1.equals(cSVFormat0);
    assertEquals('j', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test2521695,"public void test2521695() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2521696,"public void test2521696() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test2521697,"public void test2521697() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('|', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test2521698,"public void test2521698() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2521699,"public void test2521699() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2521700,"public void test2521700() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2521701,"public void test2521701() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2521702,"public void test2521702() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test2521703,"public void test2521703() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2521704,"public void test2521704() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test2521705,"public void test2521705() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    Character character0 = Character.valueOf('n');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2531706,"public void test2531706() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2531707,"public void test2531707() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2531708,"public void test2531708() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2531709,"public void test2531709() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(boolean0);
}",0,
project,0,test2531710,"public void test2531710() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2541711,"public void test2541711() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2541712,"public void test2541712() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2541713,"public void test2541713() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2541714,"public void test2541714() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2541715,"public void test2541715() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2541716,"public void test2541716() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test2541717,"public void test2541717() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2541718,"public void test2541718() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test2541719,"public void test2541719() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2541720,"public void test2541720() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2551721,"public void test2551721() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2551722,"public void test2551722() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2551723,"public void test2551723() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2551724,"public void test2551724() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2551725,"public void test2551725() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2551726,"public void test2551726() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2551727,"public void test2551727() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2551728,"public void test2551728() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test2551729,"public void test2551729() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2551730,"public void test2551730() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test2561731,"public void test2561731() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2561732,"public void test2561732() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('|', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test2561733,"public void test2561733() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\\', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test2561734,"public void test2561734() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2561735,"public void test2561735() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2561736,"public void test2561736() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test2561737,"public void test2561737() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test2561738,"public void test2561738() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2561739,"public void test2561739() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2561740,"public void test2561740() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test2561741,"public void test2561741() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2571742,"public void test2571742() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test2571743,"public void test2571743() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2571744,"public void test2571744() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2571745,"public void test2571745() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2571746,"public void test2571746() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2571747,"public void test2571747() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2571748,"public void test2571748() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test2571749,"public void test2571749() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test2571750,"public void test2571750() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2571751,"public void test2571751() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test2581752,"public void test2581752() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getTrailingDelimiter());
}",0,assertTrue(cSVFormat0.getTrailingDelimiter())
project,0,test2581753,"public void test2581753() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test2581754,"public void test2581754() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test2581755,"public void test2581755() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertEquals('T', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test2581756,"public void test2581756() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test2581757,"public void test2581757() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(boolean0);
}",0,
project,0,test2581758,"public void test2581758() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getTrim());
}",0,assertTrue(cSVFormat0.getTrim())
project,0,test2581759,"public void test2581759() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test2581760,"public void test2581760() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test2591761,"public void test2591761() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertTrue(boolean0);
}",0,
project,0,test2601762,"public void test2601762() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Short short0 = new Short((short) (-1575));
    boolean boolean0 = cSVFormat0.equals(short0);
    assertFalse(boolean0);
}",0,
project,0,test2611763,"public void test2611763() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2611764,"public void test2611764() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2611765,"public void test2611765() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2611766,"public void test2611766() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2611767,"public void test2611767() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2621768,"public void test2621768() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test2621769,"public void test2621769() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test2621770,"public void test2621770() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2621771,"public void test2621771() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2621772,"public void test2621772() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test2621773,"public void test2621773() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2621774,"public void test2621774() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2621775,"public void test2621775() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2621776,"public void test2621776() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2621777,"public void test2621777() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test2621778,"public void test2621778() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test2621779,"public void test2621779() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2631780,"public void test2631780() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String string0 = cSVFormat0.getNullString();
    assertNull(string0);
}",0,
project,0,test2641781,"public void test2641781() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2651782,"public void test2651782() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2651783,"public void test2651783() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test2651784,"public void test2651784() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test2651785,"public void test2651785() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2651786,"public void test2651786() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test2651787,"public void test2651787() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertEquals('c', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test2651788,"public void test2651788() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2651789,"public void test2651789() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertTrue(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2651790,"public void test2651790() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2651791,"public void test2651791() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test2651792,"public void test2651792() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2661793,"public void test2661793() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String string0 = cSVFormat0.getRecordSeparator();
    assertEquals(""\n"", string0);
}",0,
project,0,test2671794,"public void test2671794() throws Throwable {
    // Undeclared exception!
    try {
        CSVFormat.valueOf("",c=4hbwO~O5"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No enum constant org.apache.commons.csv.CSVFormat.Predefined.,c=4hbwO~O5
        //
        verifyException(""java.lang.Enum"", e);
    }
}",1,
project,0,test2681795,"public void test2681795() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2681796,"public void test2681796() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2681797,"public void test2681797() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2681798,"public void test2681798() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2681799,"public void test2681799() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2691800,"public void test2691800() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test2691801,"public void test2691801() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2691802,"public void test2691802() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2691803,"public void test2691803() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertTrue(cSVFormat1.getTrailingDelimiter())
project,0,test2691804,"public void test2691804() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test2691805,"public void test2691805() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test2691806,"public void test2691806() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test2691807,"public void test2691807() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2701808,"public void test2701808() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    // Undeclared exception!
    try {
        cSVFormat1.format((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test2711809,"public void test2711809() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertTrue(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test2711810,"public void test2711810() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertFalse(cSVFormat3.getTrim());
}",0,assertTrue(cSVFormat3.getTrim())
project,0,test2711811,"public void test2711811() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.getTrailingDelimiter());
}",0,
project,0,test2711812,"public void test2711812() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test2711813,"public void test2711813() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2711814,"public void test2711814() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test2711815,"public void test2711815() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test2711816,"public void test2711816() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test2711817,"public void test2711817() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test2711818,"public void test2711818() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat3.getAllowMissingColumnNames())
project,0,test2711819,"public void test2711819() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;
    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2721820,"public void test2721820() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test2721821,"public void test2721821() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test2721822,"public void test2721822() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test2721823,"public void test2721823() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2721824,"public void test2721824() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test2721825,"public void test2721825() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test2721826,"public void test2721826() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test2721827,"public void test2721827() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getTrim());
}",0,assertTrue(cSVFormat1.getTrim())
project,0,test2721828,"public void test2721828() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getTrailingDelimiter());
}",0,assertFalse(cSVFormat1.getTrailingDelimiter())
project,0,test2721829,"public void test2721829() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test2721830,"public void test2721830() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test2731831,"public void test2731831() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        cSVFormat0.print((Appendable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'out' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test2741832,"public void test2741832() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2751833,"public void test2751833() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    PipedReader pipedReader0 = new PipedReader(1874);
    CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
