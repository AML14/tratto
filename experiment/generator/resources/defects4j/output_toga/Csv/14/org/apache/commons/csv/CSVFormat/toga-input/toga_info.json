{
  "test054456" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054456() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test054456"
  },
  "test054457" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054457() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test054457"
  },
  "test054458" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054458() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test054458"
  },
  "test054459" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054459() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test054459"
  },
  "test054452" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054452() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test054452"
  },
  "test054453" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054453() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test054453"
  },
  "test054454" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054454() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test054454"
  },
  "test054455" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054455() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test054455"
  },
  "test054450" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054450() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test054450"
  },
  "test054451" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054451() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withNullString((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test054451"
  },
  "test2551730" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551730() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2551730"
  },
  "test2641781" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641781() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2641781"
  },
  "test016147" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016147() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test016147"
  },
  "test016146" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016146() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test016146"
  },
  "test016143" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test016143"
  },
  "test016142" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test016142"
  },
  "test016145" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test016145"
  },
  "test016144" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test016144"
  },
  "test016141" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test016141"
  },
  "test016140" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test016140"
  },
  "test065547" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test065547"
  },
  "test065546" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test065546"
  },
  "test065545" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065545() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test065545"
  },
  "test065544" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065544() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test065544"
  },
  "test2401609" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401609() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2401609"
  },
  "test065549" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test065549"
  },
  "test065548" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test065548"
  },
  "test065543" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065543() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test065543"
  },
  "test065542" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065542() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test065542"
  },
  "test065541" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test065541"
  },
  "test00323" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00323"
  },
  "test00324" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00324"
  },
  "test115979" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115979() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test115979"
  },
  "test00322" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00322"
  },
  "test00325" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00325"
  },
  "test00326" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test00326"
  },
  "test115976" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115976() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test115976"
  },
  "test115975" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115975() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test115975"
  },
  "test115978" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115978() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test115978"
  },
  "test115977" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115977() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test115977"
  },
  "test2551727" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2551727"
  },
  "test2551726" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551726() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2551726"
  },
  "test2551725" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551725() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2551725"
  },
  "test2551724" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551724() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2551724"
  },
  "test2551729" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551729() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2551729"
  },
  "test2551728" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551728() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2551728"
  },
  "test1431222" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1431222"
  },
  "test2551723" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551723() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2551723"
  },
  "test1431221" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test1431221"
  },
  "test2401612" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401612() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test2401612"
  },
  "test2551722" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551722() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2551722"
  },
  "test1431220" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1431220"
  },
  "test2401611" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401611() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2401611"
  },
  "test2551721" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551721() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2551721"
  },
  "test2401610" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401610() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2401610"
  },
  "test080704" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080704() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test080704"
  },
  "test1431215" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1431215"
  },
  "test080703" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080703() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test080703"
  },
  "test1431214" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1431214"
  },
  "test080706" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080706() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test080706"
  },
  "test1431213" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1431213"
  },
  "test080705" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080705() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test080705"
  },
  "test080700" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080700() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test080700"
  },
  "test1431219" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1431219"
  },
  "test1431218" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1431218"
  },
  "test080702" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080702() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test080702"
  },
  "test1431217" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test1431217"
  },
  "test080701" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080701() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test080701"
  },
  "test1431216" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1431216"
  },
  "test080707" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080707() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test080707"
  },
  "test1581337" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = cSVFormat0.getQuoteCharacter();\n}",
    "testName" : "test1581337"
  },
  "test1431223" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('l');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1431223"
  },
  "test076660" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test076660"
  },
  "test076661" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test076661"
  },
  "test091802" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091802() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test091802"
  },
  "test091800" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091800() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test091800"
  },
  "test091801" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091801() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test091801"
  },
  "test065550" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getNullString();\n}",
    "testName" : "test065550"
  },
  "test065551" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test065551"
  },
  "test1191014" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191014() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1191014"
  },
  "test1191013" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191013() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1191013"
  },
  "test1191016" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191016() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test1191016"
  },
  "test1521294" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1521294"
  },
  "test1191015" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191015() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1191015"
  },
  "test1191018" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191018() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1191018"
  },
  "test1191017" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191017() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1191017"
  },
  "test1191019" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1191019"
  },
  "test1521292" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1521292"
  },
  "test1521293" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1521293"
  },
  "test1191012" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191012() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1191012"
  },
  "test1521290" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1521290"
  },
  "test1521291" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1521291"
  },
  "test027238" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027238() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test027238"
  },
  "test027239" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027239() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test027239"
  },
  "test027234" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027234() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test027234"
  },
  "test027235" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027235() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test027235"
  },
  "test027236" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027236() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test027236"
  },
  "test027237" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027237() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test027237"
  },
  "test2571751" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2571751"
  },
  "test1521289" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1521289"
  },
  "test2571750" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2571750"
  },
  "test1521287" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1521287"
  },
  "test1521288" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1521288"
  },
  "test027241" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027241() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test027241"
  },
  "test027242" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027242() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test027242"
  },
  "test027243" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027243() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test027243"
  },
  "test027244" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027244() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test027244"
  },
  "test01299" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test01299"
  },
  "test1191021" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191021() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1191021"
  },
  "test01298" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test01298"
  },
  "test1191020" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191020() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1191020"
  },
  "test01297" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test01297"
  },
  "test01296" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test01296"
  },
  "test027240" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027240() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test027240"
  },
  "test1191022" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191022() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1191022"
  },
  "test076656" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test076656"
  },
  "test076657" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test076657"
  },
  "test076654" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test076654"
  },
  "test076655" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test076655"
  },
  "test027245" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test027245"
  },
  "test076658" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test076658"
  },
  "test076659" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test076659"
  },
  "test076652" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test076652"
  },
  "test076653" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076653() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test076653"
  },
  "test076650" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test076650"
  },
  "test076651" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test076651"
  },
  "test2571743" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571743() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2571743"
  },
  "test2571742" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571742() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2571742"
  },
  "test1471249" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471249() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1471249"
  },
  "test087758" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087758() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test087758"
  },
  "test087759" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087759() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test087759"
  },
  "test1471245" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1471245"
  },
  "test1471246" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471246() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1471246"
  },
  "test1471247" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471247() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test1471247"
  },
  "test2571749" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2571749"
  },
  "test1471248" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471248() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test1471248"
  },
  "test2571748" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2571748"
  },
  "test2571747" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2571747"
  },
  "test2571746" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571746() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2571746"
  },
  "test2571745" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571745() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2571745"
  },
  "test1471244" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471244() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test1471244"
  },
  "test2571744" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571744() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2571744"
  },
  "test1321135" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1321135"
  },
  "test1321136" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1321136"
  },
  "test1321137" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1321137"
  },
  "test1471250" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471250() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test1471250"
  },
  "test1321138" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1321138"
  },
  "test1471251" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471251() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test1471251"
  },
  "test087764" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087764() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test087764"
  },
  "test087765" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087765() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test087765"
  },
  "test2381589" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381589() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test2381589"
  },
  "test087766" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087766() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test087766"
  },
  "test100868" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100868() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test100868"
  },
  "test2381588" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381588() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test2381588"
  },
  "test087767" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087767() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test087767"
  },
  "test100867" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100867() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test100867"
  },
  "test087768" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087768() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test087768"
  },
  "test2421627" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2421627"
  },
  "test100869" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100869() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test100869"
  },
  "test2421628" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2421628"
  },
  "test2421625" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421625() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2421625"
  },
  "test2421626" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2421626"
  },
  "test087760" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087760() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test087760"
  },
  "test1471252" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471252() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1471252"
  },
  "test087761" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087761() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test087761"
  },
  "test1471253" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471253() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1471253"
  },
  "test087762" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087762() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test087762"
  },
  "test1471254" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471254() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1471254"
  },
  "test087763" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087763() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test087763"
  },
  "test1471255" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471255() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(false);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1471255"
  },
  "test016139" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test016139"
  },
  "test100876" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100876() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test100876"
  },
  "test1301111" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1301111"
  },
  "test1301112" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1301112"
  },
  "test100871" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100871() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test100871"
  },
  "test1301113" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1301113"
  },
  "test100870" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100870() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test100870"
  },
  "test1301114" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1301114"
  },
  "test100873" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100873() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test100873"
  },
  "test100872" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100872() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test100872"
  },
  "test100875" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100875() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test100875"
  },
  "test100874" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100874() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test100874"
  },
  "test1301110" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1301110"
  },
  "test038333" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test038333"
  },
  "test038334" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test038334"
  },
  "test098861" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098861() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getCommentMarker();\n}",
    "testName" : "test098861"
  },
  "test098860" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098860() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test098860"
  },
  "test038331" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test038331"
  },
  "test038332" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test038332"
  },
  "test038330" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test038330"
  },
  "test2511686" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511686() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2511686"
  },
  "test098851" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098851() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test098851"
  },
  "test1451232" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1451232"
  },
  "test1451233" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1451233"
  },
  "test1451234" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451234() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1451234"
  },
  "test1451235" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451235() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1451235"
  },
  "test1451236" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451236() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1451236"
  },
  "test1451237" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451237() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1451237"
  },
  "test1451238" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451238() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1451238"
  },
  "test098859" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098859() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test098859"
  },
  "test098858" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098858() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test098858"
  },
  "test098857" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098857() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test098857"
  },
  "test098856" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098856() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test098856"
  },
  "test098855" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098855() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test098855"
  },
  "test098854" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098854() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test098854"
  },
  "test098853" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098853() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test098853"
  },
  "test098852" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098852() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"YH H,\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test098852"
  },
  "test2511692" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511692() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2511692"
  },
  "test2511693" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511693() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2511693"
  },
  "test2511690" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511690() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2511690"
  },
  "test2511691" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511691() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2511691"
  },
  "test1451230" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1451230"
  },
  "test2511694" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511694() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test2511694"
  },
  "test2661793" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661793() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String string0 = cSVFormat0.getRecordSeparator();\n}",
    "testName" : "test2661793"
  },
  "test1451231" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1451231"
  },
  "test2511689" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511689() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2511689"
  },
  "test2511687" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511687() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2511687"
  },
  "test2511688" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511688() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('j');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2511688"
  },
  "test1301115" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('I');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1301115"
  },
  "test1651392" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651392() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1651392"
  },
  "test1651391" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651391() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1651391"
  },
  "test1651394" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651394() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1651394"
  },
  "test1651393" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651393() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1651393"
  },
  "test1651396" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651396() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1651396"
  },
  "test1171004" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171004() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1171004"
  },
  "test1651395" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651395() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test1651395"
  },
  "test1651397" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651397() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1651397"
  },
  "test1171001" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171001() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1171001"
  },
  "test1171000" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1171000"
  },
  "test1171003" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171003() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1171003"
  },
  "test1711422" : {
    "methodSignature" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
    "methodName" : "withHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());\n    doReturn((-1575)).when(resultSetMetaData0).getColumnCount();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();\n    cSVFormat0.withHeader(resultSet0);\n}",
    "testName" : "test1711422"
  },
  "test1171002" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171002() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1171002"
  },
  "test046386" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046386() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test046386"
  },
  "test1651390" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651390() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1651390"
  },
  "test046385" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046385() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test046385"
  },
  "test046384" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046384() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test046384"
  },
  "test046383" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046383() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test046383"
  },
  "test046382" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046382() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test046382"
  },
  "test046381" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046381() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test046381"
  },
  "test046380" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046380() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test046380"
  },
  "test050415" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050415() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test050415"
  },
  "test050414" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test050414"
  },
  "test1651389" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651389() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1651389"
  },
  "test1651388" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651388() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1651388"
  },
  "test1871449" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871449() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    StringWriter stringWriter0 = new StringWriter();\n    cSVFormat0.println(stringWriter0);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1871449"
  },
  "test1871448" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871448() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    StringWriter stringWriter0 = new StringWriter();\n    cSVFormat0.println(stringWriter0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1871448"
  },
  "test1871447" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871447() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    StringWriter stringWriter0 = new StringWriter();\n    cSVFormat0.println(stringWriter0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1871447"
  },
  "test1871446" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871446() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    StringWriter stringWriter0 = new StringWriter();\n    cSVFormat0.println(stringWriter0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1871446"
  },
  "test1871445" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    StringWriter stringWriter0 = new StringWriter();\n    cSVFormat0.println(stringWriter0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test1871445"
  },
  "test1871444" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    StringWriter stringWriter0 = new StringWriter();\n    cSVFormat0.println(stringWriter0);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test1871444"
  },
  "test1871443" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    StringWriter stringWriter0 = new StringWriter();\n    cSVFormat0.println(stringWriter0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1871443"
  },
  "test1341155" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341155() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1341155"
  },
  "test049411" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049411() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test049411"
  },
  "test049410" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049410() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test049410"
  },
  "test049413" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049413() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test049413"
  },
  "test049412" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049412() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test049412"
  },
  "test1341152" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341152() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1341152"
  },
  "test1341151" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341151() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1341151"
  },
  "test1341154" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341154() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1341154"
  },
  "test1341153" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341153() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1341153"
  },
  "test1341150" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341150() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('`');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1341150"
  },
  "test012101" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test012101"
  },
  "test012100" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test012100"
  },
  "test012104" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test012104"
  },
  "test012103" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test012103"
  },
  "test012102" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test012102"
  },
  "test050419" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050419() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test050419"
  },
  "test050418" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050418() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test050418"
  },
  "test050417" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050417() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test050417"
  },
  "test050416" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050416() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(',');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test050416"
  },
  "test1411206" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411206() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1411206"
  },
  "test1411205" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411205() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1411205"
  },
  "test1411204" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411204() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1411204"
  },
  "test1411203" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411203() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1411203"
  },
  "test057480" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057480() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test057480"
  },
  "test1961459" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961459() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1961459"
  },
  "test1411202" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411202() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1411202"
  },
  "test2381593" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381593() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"^Hno83gdL/?Brk5\";\n    String string0 = cSVFormat0.format(stringArray0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2381593"
  },
  "test1411201" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411201() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('R');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1411201"
  },
  "test2381592" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381592() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"^Hno83gdL/?Brk5\";\n    String string0 = cSVFormat0.format(stringArray0);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2381592"
  },
  "test2381591" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381591() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"^Hno83gdL/?Brk5\";\n    String string0 = cSVFormat0.format(stringArray0);\n}",
    "testName" : "test2381591"
  },
  "test2381590" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381590() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"^Hno83gdL/?Brk5\";\n    String string0 = cSVFormat0.format(stringArray0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2381590"
  },
  "test2361582" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361582() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Unexpected Quote value: \", true);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    cSVFormat0.MYSQL.print((Object) \"org.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\t\\torg.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\torg.apache.commons.csv.CSVFormat@0000000002\", (Appendable) mockPrintWriter0, true);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2361582"
  },
  "test2381595" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381595() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"^Hno83gdL/?Brk5\";\n    String string0 = cSVFormat0.format(stringArray0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2381595"
  },
  "test2361581" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361581() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Unexpected Quote value: \", true);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    cSVFormat0.MYSQL.print((Object) \"org.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\t\\torg.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\torg.apache.commons.csv.CSVFormat@0000000002\", (Appendable) mockPrintWriter0, true);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2361581"
  },
  "test2381594" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381594() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    String[] stringArray0 = new String[1];\n    stringArray0[0] = \"^Hno83gdL/?Brk5\";\n    String string0 = cSVFormat0.format(stringArray0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2381594"
  },
  "test1281095" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281095() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1281095"
  },
  "test1281096" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281096() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1281096"
  },
  "test1961465" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961465() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1961465"
  },
  "test1961466" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961466() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1961466"
  },
  "test1961463" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961463() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getCommentMarker();\n}",
    "testName" : "test1961463"
  },
  "test1961464" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961464() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n}",
    "testName" : "test1961464"
  },
  "test1961461" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961461() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1961461"
  },
  "test1961462" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961462() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1961462"
  },
  "test1961460" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961460() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1961460"
  },
  "test057471" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057471() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test057471"
  },
  "test057472" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057472() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test057472"
  },
  "test057470" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057470() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test057470"
  },
  "test1961469" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961469() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1961469"
  },
  "test1961467" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961467() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1961467"
  },
  "test2361579" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361579() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Unexpected Quote value: \", true);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    cSVFormat0.MYSQL.print((Object) \"org.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\t\\torg.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\torg.apache.commons.csv.CSVFormat@0000000002\", (Appendable) mockPrintWriter0, true);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2361579"
  },
  "test1961468" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961468() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1961468"
  },
  "test2361578" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361578() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Unexpected Quote value: \", true);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    cSVFormat0.MYSQL.print((Object) \"org.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\t\\torg.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\torg.apache.commons.csv.CSVFormat@0000000002\", (Appendable) mockPrintWriter0, true);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2361578"
  },
  "test2361577" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361577() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Unexpected Quote value: \", true);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    cSVFormat0.MYSQL.print((Object) \"org.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\t\\torg.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\torg.apache.commons.csv.CSVFormat@0000000002\", (Appendable) mockPrintWriter0, true);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2361577"
  },
  "test2361576" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361576() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Unexpected Quote value: \", true);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    cSVFormat0.MYSQL.print((Object) \"org.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\t\\torg.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\torg.apache.commons.csv.CSVFormat@0000000002\", (Appendable) mockPrintWriter0, true);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2361576"
  },
  "test1321130" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1321130"
  },
  "test1281091" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281091() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1281091"
  },
  "test1321131" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1321131"
  },
  "test1281092" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281092() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1281092"
  },
  "test1321132" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1321132"
  },
  "test1281093" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281093() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1281093"
  },
  "test1321133" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1321133"
  },
  "test1281094" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281094() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1281094"
  },
  "test1321134" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test1321134"
  },
  "test2361580" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361580() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Unexpected Quote value: \", true);\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    cSVFormat0.MYSQL.print((Object) \"org.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\t\\torg.apache.commons.csv.CSVFormat@0000000003\\torg.apache.commons.csv.CSVFormat@0000000001\\torg.apache.commons.csv.CSVFormat@0000000002\", (Appendable) mockPrintWriter0, true);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2361580"
  },
  "test1321128" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1321128"
  },
  "test1321129" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withDelimiter('5');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1321129"
  },
  "test057479" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057479() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test057479"
  },
  "test057477" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057477() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test057477"
  },
  "test057478" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057478() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test057478"
  },
  "test057475" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057475() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test057475"
  },
  "test057476" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057476() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test057476"
  },
  "test057473" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057473() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat2.getNullString();\n}",
    "testName" : "test057473"
  },
  "test057474" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057474() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"url\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test057474"
  },
  "test2001483" : {
    "methodSignature" : "public String[] getHeader()",
    "methodName" : "getHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2001483() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    String[] stringArray0 = cSVFormat0.getHeader();\n}",
    "testName" : "test2001483"
  },
  "test2181526" : {
    "methodSignature" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
    "methodName" : "withQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181526() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n}",
    "testName" : "test2181526"
  },
  "test072620" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072620() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test072620"
  },
  "test049404" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049404() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test049404"
  },
  "test072621" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072621() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test072621"
  },
  "test049403" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049403() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test049403"
  },
  "test072622" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072622() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test072622"
  },
  "test049406" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049406() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test049406"
  },
  "test072623" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072623() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test072623"
  },
  "test049405" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049405() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test049405"
  },
  "test072624" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072624() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test072624"
  },
  "test049408" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049408() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test049408"
  },
  "test049407" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049407() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test049407"
  },
  "test061515" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061515() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test061515"
  },
  "test049409" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049409() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test049409"
  },
  "test1851437" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1851437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1851437"
  },
  "test1851436" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1851436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1851436"
  },
  "test061510" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061510() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test061510"
  },
  "test01192" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test01192"
  },
  "test061512" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061512() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test061512"
  },
  "test01191" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test01191"
  },
  "test061511" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061511() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test061511"
  },
  "test1801431" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Integer integer0 = new Integer(44);\n    CharBuffer charBuffer0 = CharBuffer.allocate(10);\n    cSVFormat0.print((Object) integer0, (Appendable) charBuffer0, true);\n}",
    "testName" : "test1801431"
  },
  "test01190" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test01190"
  },
  "test061514" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061514() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test061514"
  },
  "test1651387" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651387() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getNullString();\n}",
    "testName" : "test1651387"
  },
  "test1851439" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1851439() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1851439"
  },
  "test061513" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061513() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test061513"
  },
  "test1651386" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651386() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreHeaderCase();\n    Character character0 = cSVFormat1.getEscapeCharacter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1651386"
  },
  "test1851438" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1851438() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1851438"
  },
  "test072625" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072625() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test072625"
  },
  "test01195" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test01195"
  },
  "test072626" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test072626"
  },
  "test01194" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test01194"
  },
  "test046379" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046379() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test046379"
  },
  "test072627" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test072627"
  },
  "test01193" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test01193"
  },
  "test046378" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046378() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('&');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test046378"
  },
  "test072628" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test072628"
  },
  "test072629" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072629() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test072629"
  },
  "test2201528" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final Character commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2201528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('2');\n    Character character0 = Character.valueOf('2');\n    cSVFormat1.withCommentMarker(character0);\n}",
    "testName" : "test2201528"
  },
  "test072630" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072630() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test072630"
  },
  "test061505" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061505() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test061505"
  },
  "test1851440" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1851440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1851440"
  },
  "test061507" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061507() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test061507"
  },
  "test061506" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061506() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test061506"
  },
  "test061509" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061509() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test061509"
  },
  "test061508" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061508() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test061508"
  },
  "test068579" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068579() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test068579"
  },
  "test019161" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test019161"
  },
  "test019162" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test019162"
  },
  "test083728" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083728() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test083728"
  },
  "test083729" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083729() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test083729"
  },
  "test083726" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083726() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test083726"
  },
  "test080699" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080699() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test080699"
  },
  "test083727" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test083727"
  },
  "test083724" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083724() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test083724"
  },
  "test083725" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083725() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test083725"
  },
  "test019169" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test019169"
  },
  "test019167" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test019167"
  },
  "test019168" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test019168"
  },
  "test019165" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test019165"
  },
  "test019166" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test019166"
  },
  "test019163" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test019163"
  },
  "test019164" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test019164"
  },
  "test1631375" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631375() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1631375"
  },
  "test1631372" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631372() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1631372"
  },
  "test107917" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107917() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test107917"
  },
  "test1631371" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631371() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1631371"
  },
  "test107918" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107918() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test107918"
  },
  "test1631374" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631374() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1631374"
  },
  "test107919" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107919() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test107919"
  },
  "test1631373" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631373() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1631373"
  },
  "test1631370" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631370() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test1631370"
  },
  "test00760" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00760() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test00760"
  },
  "test00753" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00753"
  },
  "test023200" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023200() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test023200"
  },
  "test00756" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00756() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00756"
  },
  "test00757" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00757() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00757"
  },
  "test00754" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00754"
  },
  "test020178" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020178() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test020178"
  },
  "test00755" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00755() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00755"
  },
  "test020179" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020179() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test020179"
  },
  "test00758" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00758() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00758"
  },
  "test00759" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00759() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00759"
  },
  "test1631369" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631369() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test1631369"
  },
  "test1631368" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631368() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test1631368"
  },
  "test079692" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079692() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test079692"
  },
  "test079691" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079691() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test079691"
  },
  "test079690" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079690() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test079690"
  },
  "test104897" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104897() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test104897"
  },
  "test107923" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107923() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test107923"
  },
  "test2621772" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621772() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2621772"
  },
  "test104896" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104896() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test104896"
  },
  "test107924" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107924() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test107924"
  },
  "test2621771" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621771() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2621771"
  },
  "test107925" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107925() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test107925"
  },
  "test2621774" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621774() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2621774"
  },
  "test2621773" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621773() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2621773"
  },
  "test068594" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068594() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test068594"
  },
  "test020180" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020180() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test020180"
  },
  "test107920" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107920() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test107920"
  },
  "test020181" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020181() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test020181"
  },
  "test104899" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104899() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test104899"
  },
  "test107921" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107921() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test107921"
  },
  "test2621770" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621770() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2621770"
  },
  "test020182" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020182() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test020182"
  },
  "test104898" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104898() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test104898"
  },
  "test107922" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107922() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test107922"
  },
  "test020183" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020183() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test020183"
  },
  "test068590" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068590() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test068590"
  },
  "test2621769" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621769() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2621769"
  },
  "test068591" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068591() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test068591"
  },
  "test1691420" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691420() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Object[] objectArray0 = new Object[0];\n    String string0 = cSVFormat0.format(objectArray0);\n}",
    "testName" : "test1691420"
  },
  "test2621768" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621768() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2621768"
  },
  "test068592" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068592() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test068592"
  },
  "test068593" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068593() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test068593"
  },
  "test079694" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079694() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test079694"
  },
  "test079693" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079693() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test079693"
  },
  "test068587" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068587() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test068587"
  },
  "test080696" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080696() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test080696"
  },
  "test083722" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083722() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test083722"
  },
  "test068588" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068588() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test068588"
  },
  "test080695" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080695() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test080695"
  },
  "test083723" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083723() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test083723"
  },
  "test068589" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068589() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test068589"
  },
  "test080698" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080698() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test080698"
  },
  "test080697" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080697() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test080697"
  },
  "test068583" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068583() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test068583"
  },
  "test068584" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068584() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test068584"
  },
  "test068585" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068585() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test068585"
  },
  "test068586" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068586() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test068586"
  },
  "test068580" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068580() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test068580"
  },
  "test2621779" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621779() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2621779"
  },
  "test068581" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068581() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test068581"
  },
  "test068582" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068582() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test068582"
  },
  "test2621776" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621776() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2621776"
  },
  "test2621775" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621775() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2621775"
  },
  "test2621778" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621778() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2621778"
  },
  "test2621777" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621777() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2621777"
  },
  "test091798" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091798() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test091798"
  },
  "test091799" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091799() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test091799"
  },
  "test094823" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094823() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test094823"
  },
  "test1821433" : {
    "methodSignature" : "public CSVPrinter print(final File out, Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    MockFile mockFile0 = new MockFile(\"cZ<\", \"cZ<\");\n    cSVFormat0.print((File) mockFile0, (Charset) null);\n}",
    "testName" : "test1821433"
  },
  "test1981471" : {
    "methodSignature" : "public String[] getHeaderComments()",
    "methodName" : "getHeaderComments",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1981471() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = cSVFormat0.getHeaderComments();\n}",
    "testName" : "test1981471"
  },
  "test094817" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094817() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test094817"
  },
  "test094816" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094816() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test094816"
  },
  "test094819" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094819() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test094819"
  },
  "test094818" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094818() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test094818"
  },
  "test094813" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094813() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test094813"
  },
  "test094815" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094815() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test094815"
  },
  "test094814" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094814() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test094814"
  },
  "test091794" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091794() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test091794"
  },
  "test094820" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094820() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test094820"
  },
  "test091795" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091795() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test091795"
  },
  "test091796" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091796() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test091796"
  },
  "test094822" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094822() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test094822"
  },
  "test091797" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091797() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test091797"
  },
  "test094821" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094821() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[8];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test094821"
  },
  "test079689" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079689() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test079689"
  },
  "test079688" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079688() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test079688"
  },
  "test079687" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079687() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test079687"
  },
  "test079686" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079686() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test079686"
  },
  "test034300" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034300() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test034300"
  },
  "test034301" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034301() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test034301"
  },
  "test2601762" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601762() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Short short0 = new Short((short) (-1575));\n    boolean boolean0 = cSVFormat0.equals(short0);\n}",
    "testName" : "test2601762"
  },
  "test034302" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034302() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test034302"
  },
  "test031279" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031279() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test031279"
  },
  "test031278" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031278() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test031278"
  },
  "test031277" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031277() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test031277"
  },
  "test031276" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031276() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test031276"
  },
  "test031275" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031275() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test031275"
  },
  "test031274" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031274() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test031274"
  },
  "test031273" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031273() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test031273"
  },
  "test031272" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031272() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test031272"
  },
  "test031281" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031281() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test031281"
  },
  "test031280" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031280() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test031280"
  },
  "test1361167" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1361167"
  },
  "test1361169" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1361169"
  },
  "test1361168" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1361168"
  },
  "test019172" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test019172"
  },
  "test019173" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test019173"
  },
  "test019170" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test019170"
  },
  "test1361170" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1361170"
  },
  "test019171" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test019171"
  },
  "test1361172" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1361172"
  },
  "test1361171" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('M');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1361171"
  },
  "test2341569" : {
    "methodSignature" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
    "methodName" : "printRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2341569() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    cSVFormat1.printRecord((Appendable) null, objectArray0);\n}",
    "testName" : "test2341569"
  },
  "test019176" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test019176"
  },
  "test019177" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test019177"
  },
  "test031284" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031284() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test031284"
  },
  "test019174" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test019174"
  },
  "test031283" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031283() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test031283"
  },
  "test019175" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test019175"
  },
  "test031282" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031282() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test031282"
  },
  "test1381189" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf(':');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1381189"
  },
  "test1381188" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf(':');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1381188"
  },
  "test1381187" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf(':');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1381187"
  },
  "test1381186" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf(':');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1381186"
  },
  "test101882" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101882() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test101882"
  },
  "test101883" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101883() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test101883"
  },
  "test101880" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101880() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test101880"
  },
  "test101881" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101881() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test101881"
  },
  "test101884" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101884() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test101884"
  },
  "test101885" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101885() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test101885"
  },
  "test1381190" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf(':');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1381190"
  },
  "test1601340" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601340() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1601340"
  },
  "test042359" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042359() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test042359"
  },
  "test042358" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042358() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test042358"
  },
  "test1601344" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601344() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1601344"
  },
  "test1601343" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601343() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1601343"
  },
  "test1601342" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601342() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test1601342"
  },
  "test1601341" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601341() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1601341"
  },
  "test1601348" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601348() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1601348"
  },
  "test1601347" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601347() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1601347"
  },
  "test1601346" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601346() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1601346"
  },
  "test1601345" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601345() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1601345"
  },
  "test1601339" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1601339"
  },
  "test2481660" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2481660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2481660"
  },
  "test2481661" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2481661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2481661"
  },
  "test2481662" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2481662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2481662"
  },
  "test2481663" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2481663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2481663"
  },
  "test042360" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042360() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test042360"
  },
  "test042362" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042362() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test042362"
  },
  "test042361" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042361() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test042361"
  },
  "test2021485" : {
    "methodSignature" : "public QuoteMode getQuoteMode()",
    "methodName" : "getQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021485() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    cSVFormat0.getQuoteMode();\n}",
    "testName" : "test2021485"
  },
  "test1661405" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661405() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1661405"
  },
  "test2331567" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2331567() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    String[] stringArray0 = new String[9];\n    stringArray0[2] = \"\";\n    String string0 = cSVFormat0.RFC4180.format(stringArray0);\n    cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test2331567"
  },
  "test1661404" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661404() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1661404"
  },
  "test1661403" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661403() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1661403"
  },
  "test1661402" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661402() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1661402"
  },
  "test2331568" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2331568() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    String[] stringArray0 = new String[9];\n    stringArray0[2] = \"\";\n    String string0 = cSVFormat0.RFC4180.format(stringArray0);\n}",
    "testName" : "test2331568"
  },
  "test1661401" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661401() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1661401"
  },
  "test1661400" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661400() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1661400"
  },
  "test1751426" : {
    "methodSignature" : "public void println(final Appendable out) throws IOException",
    "methodName" : "println",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.println((Appendable) null);\n}",
    "testName" : "test1751426"
  },
  "test00220" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00220"
  },
  "test00221" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00221"
  },
  "test1661407" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661407() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n}",
    "testName" : "test1661407"
  },
  "test1661406" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661406() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1661406"
  },
  "test00213" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00213"
  },
  "test1291108" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1291108"
  },
  "test00214" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00214"
  },
  "test1291109" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1291109"
  },
  "test1291106" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1291106"
  },
  "test00212" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00212"
  },
  "test1291107" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1291107"
  },
  "test00217" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test00217"
  },
  "test1291104" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1291104"
  },
  "test00218" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00218"
  },
  "test1291105" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test1291105"
  },
  "test00215" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00215"
  },
  "test1291102" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1291102"
  },
  "test00216" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00216"
  },
  "test1291103" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1291103"
  },
  "test1291100" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1291100"
  },
  "test1291101" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1291101"
  },
  "test00219" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00219"
  },
  "test2081504" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081504() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = cSVFormat0.getCommentMarker();\n}",
    "testName" : "test2081504"
  },
  "test053448" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053448() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test053448"
  },
  "test053449" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053449() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat4.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test053449"
  },
  "test053444" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test053444"
  },
  "test053445" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test053445"
  },
  "test1841435" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    cSVFormat0.parse((Reader) null);\n}",
    "testName" : "test1841435"
  },
  "test053446" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053446() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat4.getQuoteCharacter();\n}",
    "testName" : "test053446"
  },
  "test053447" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053447() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test053447"
  },
  "test053441" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test053441"
  },
  "test053442" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat4.getSkipHeaderRecord();\n}",
    "testName" : "test053442"
  },
  "test053443" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('_');\n    CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord();\n    cSVFormat4.getTrailingDelimiter();\n}",
    "testName" : "test053443"
  },
  "test2391606" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391606() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2391606"
  },
  "test2391605" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391605() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2391605"
  },
  "test2391608" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391608() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2391608"
  },
  "test2391607" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391607() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2391607"
  },
  "test2391600" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391600() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2391600"
  },
  "test2391602" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391602() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2391602"
  },
  "test2711818" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711818() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test2711818"
  },
  "test1921455" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921455() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test1921455"
  },
  "test2391601" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391601() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2391601"
  },
  "test2711819" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711819() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2711819"
  },
  "test2391604" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391604() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2391604"
  },
  "test2391603" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391603() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test2391603"
  },
  "test2711814" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711814() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test2711814"
  },
  "test2711815" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711815() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2711815"
  },
  "test2711816" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711816() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test2711816"
  },
  "test2711817" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711817() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2711817"
  },
  "test2711810" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711810() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test2711810"
  },
  "test2711811" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711811() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2711811"
  },
  "test2711812" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711812() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2711812"
  },
  "test2711813" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711813() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2711813"
  },
  "test1601351" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601351() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n}",
    "testName" : "test1601351"
  },
  "test1601350" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601350() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1601350"
  },
  "test2461650" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2461650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.hashCode();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2461650"
  },
  "test2461651" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2461651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.hashCode();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2461651"
  },
  "test1601349" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601349() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    String string0 = cSVFormat2.getNullString();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1601349"
  },
  "test2711809" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711809() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test2711809"
  },
  "test2251549" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2251549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2251549"
  },
  "test2251546" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2251546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2251546"
  },
  "test2251547" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2251547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2251547"
  },
  "test2251548" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2251548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test2251548"
  },
  "test1231047" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231047() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('j');\n    cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1231047"
  },
  "test2461649" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2461649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2461649"
  },
  "test1231048" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231048() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('j');\n    cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1231048"
  },
  "test2461646" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2461646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.hashCode();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2461646"
  },
  "test1231049" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231049() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('j');\n    cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1231049"
  },
  "test2461647" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2461647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.hashCode();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2461647"
  },
  "test2461648" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2461648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('m');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2461648"
  },
  "test1231050" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231050() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('j');\n    cSVFormat1.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1231050"
  },
  "test1231051" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231051() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('j');\n    cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1231051"
  },
  "test00651" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00651"
  },
  "test00652" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00652"
  },
  "test015128" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test015128"
  },
  "test015127" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test015127"
  },
  "test015129" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test015129"
  },
  "test015124" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test015124"
  },
  "test064539" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test064539"
  },
  "test064538" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test064538"
  },
  "test015126" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test015126"
  },
  "test064537" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test064537"
  },
  "test015125" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test015125"
  },
  "test064536" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test064536"
  },
  "test01185" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test01185"
  },
  "test2311565" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2311565() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) \"TDF\");\n    cSVFormat0.print((Object) \"TDF\", (Appendable) charBuffer0, true);\n}",
    "testName" : "test2311565"
  },
  "test01184" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test01184"
  },
  "test01183" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test01183"
  },
  "test01189" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test01189"
  },
  "test01188" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test01188"
  },
  "test01187" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test01187"
  },
  "test01186" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01186"
  },
  "test1731424" : {
    "methodSignature" : "public CSVFormat withDelimiter(final char delimiter)",
    "methodName" : "withDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('^');\n    cSVFormat1.withDelimiter('^');\n}",
    "testName" : "test1731424"
  },
  "test2141510" : {
    "methodSignature" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
    "methodName" : "withHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2141510() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());\n    doReturn(3248).when(resultSetMetaData0).getColumnCount();\n    doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();\n    cSVFormat0.withHeader(resultSet0);\n}",
    "testName" : "test2141510"
  },
  "test1251069" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251069() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1251069"
  },
  "test1251067" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251067() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1251067"
  },
  "test1251068" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251068() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1251068"
  },
  "test1251065" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251065() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1251065"
  },
  "test1251066" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251066() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1251066"
  },
  "test1251074" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251074() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1251074"
  },
  "test1251072" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251072() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1251072"
  },
  "test112960" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112960() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test112960"
  },
  "test1251073" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251073() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1251073"
  },
  "test112961" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112961() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test112961"
  },
  "test1251070" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251070() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test1251070"
  },
  "test1251071" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251071() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1251071"
  },
  "test064540" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test064540"
  },
  "test2041487" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041487() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = cSVFormat0.getQuoteCharacter();\n}",
    "testName" : "test2041487"
  },
  "test112957" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112957() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test112957"
  },
  "test112958" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112958() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test112958"
  },
  "test112959" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112959() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test112959"
  },
  "test023195" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test023195"
  },
  "test023196" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test023196"
  },
  "test023199" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test023199"
  },
  "test023197" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test023197"
  },
  "test023198" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test023198"
  },
  "test026229" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test026229"
  },
  "test026228" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test026228"
  },
  "test1941457" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1941457() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test1941457"
  },
  "test026227" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test026227"
  },
  "test2441639" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2441639() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    cSVFormat0.hashCode();\n}",
    "testName" : "test2441639"
  },
  "test026232" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test026232"
  },
  "test026231" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test026231"
  },
  "test026230" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test026230"
  },
  "test075643" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test075643"
  },
  "test075642" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test075642"
  },
  "test075645" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test075645"
  },
  "test026233" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test026233"
  },
  "test075644" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test075644"
  },
  "test2231531" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2231531"
  },
  "test075647" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test075647"
  },
  "test2231532" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2231532"
  },
  "test075646" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test075646"
  },
  "test2231533" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2231533"
  },
  "test075649" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test075649"
  },
  "test2231534" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2231534"
  },
  "test075648" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test075648"
  },
  "test2231535" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2231535"
  },
  "test1251063" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251063() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getNullString();\n}",
    "testName" : "test1251063"
  },
  "test2231536" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2231536"
  },
  "test1251064" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251064() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('I');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1251064"
  },
  "test2231537" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2231537"
  },
  "test2231538" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2231538"
  },
  "test2231539" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2231539"
  },
  "test075641" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test075641"
  },
  "test2231540" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2231540"
  },
  "test2231541" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[6];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withHeaderComments(objectArray0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2231541"
  },
  "test086752" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086752() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test086752"
  },
  "test101879" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101879() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test101879"
  },
  "test015138" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test015138"
  },
  "test086753" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test086753"
  },
  "test086754" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test086754"
  },
  "test101877" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101877() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test101877"
  },
  "test2161520" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2161520() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2161520"
  },
  "test086755" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086755() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test086755"
  },
  "test101878" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101878() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test101878"
  },
  "test015135" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test015135"
  },
  "test086756" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086756() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test086756"
  },
  "test015134" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test015134"
  },
  "test086757" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086757() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test086757"
  },
  "test015137" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test015137"
  },
  "test015136" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test015136"
  },
  "test2161522" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2161522() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2161522"
  },
  "test104900" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104900() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test104900"
  },
  "test2161521" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2161521() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2161521"
  },
  "test086750" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test086750"
  },
  "test2161524" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2161524() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2161524"
  },
  "test086751" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord(false);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test086751"
  },
  "test2161523" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2161523() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2161523"
  },
  "test015131" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test015131"
  },
  "test015130" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test015130"
  },
  "test015133" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test015133"
  },
  "test015132" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test015132"
  },
  "test1501280" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501280() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1501280"
  },
  "test2061489" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2061489() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"format\");\n    cSVFormat1.println(mockPrintStream0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2061489"
  },
  "test037323" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test037323"
  },
  "test034297" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test034297"
  },
  "test037324" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test037324"
  },
  "test034298" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test034298"
  },
  "test037321" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037321() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test037321"
  },
  "test034299" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test034299"
  },
  "test037322" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test037322"
  },
  "test037327" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test037327"
  },
  "test037328" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test037328"
  },
  "test037325" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test037325"
  },
  "test097848" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097848() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test097848"
  },
  "test037326" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test037326"
  },
  "test097849" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097849() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test097849"
  },
  "test037329" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test037329"
  },
  "test2061491" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2061491() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"format\");\n    cSVFormat1.println(mockPrintStream0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2061491"
  },
  "test097850" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097850() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test097850"
  },
  "test2061490" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2061490() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"format\");\n    cSVFormat1.println(mockPrintStream0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2061490"
  },
  "test2061493" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2061493() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"format\");\n    cSVFormat1.println(mockPrintStream0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2061493"
  },
  "test1561331" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat1.getTrim();\n}",
    "testName" : "test1561331"
  },
  "test2061492" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2061492() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"format\");\n    cSVFormat1.println(mockPrintStream0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2061492"
  },
  "test037320" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037320() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('=');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test037320"
  },
  "test1561330" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat1.getTrim();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1561330"
  },
  "test1561327" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat1.getTrim();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1561327"
  },
  "test097846" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097846() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test097846"
  },
  "test097847" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097847() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test097847"
  },
  "test097844" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097844() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test097844"
  },
  "test1561329" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat1.getTrim();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1561329"
  },
  "test097845" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097845() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test097845"
  },
  "test1561328" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat1.getTrim();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1561328"
  },
  "test097842" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097842() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test097842"
  },
  "test097843" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097843() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test097843"
  },
  "test097840" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097840() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test097840"
  },
  "test097841" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097841() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withIgnoreEmptyLines(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test097841"
  },
  "test2121508" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121508() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    boolean boolean0 = cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2121508"
  },
  "test2291563" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2291563() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    String[] stringArray0 = new String[9];\n    stringArray0[3] = \"40-Y^E%,tp\";\n    String string0 = cSVFormat0.RFC4180.format(stringArray0);\n}",
    "testName" : "test2291563"
  },
  "test2671794" : {
    "methodSignature" : "public static CSVFormat valueOf(final String format)",
    "methodName" : "valueOf",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671794() throws Throwable {\n    CSVFormat.valueOf(\",c=4hbwO~O5\");\n}",
    "testName" : "test2671794"
  },
  "test045377" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045377() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = new Character(';');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test045377"
  },
  "test045376" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045376() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = new Character(';');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test045376"
  },
  "test045375" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045375() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = new Character(';');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test045375"
  },
  "test045374" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045374() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = new Character(';');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test045374"
  },
  "test045373" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045373() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = new Character(';');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test045373"
  },
  "test1481264" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481264() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1481264"
  },
  "test1481265" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481265() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1481265"
  },
  "test2731831" : {
    "methodSignature" : "public CSVPrinter print(final Appendable out) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731831() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    cSVFormat0.print((Appendable) null);\n}",
    "testName" : "test2731831"
  },
  "test1481262" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481262() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1481262"
  },
  "test1481263" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481263() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1481263"
  },
  "test1481266" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481266() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1481266"
  },
  "test048400" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048400() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test048400"
  },
  "test048401" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048401() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test048401"
  },
  "test048402" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048402() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test048402"
  },
  "test01082" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01082() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test01082"
  },
  "test01081" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01081() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test01081"
  },
  "test01080" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01080() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test01080"
  },
  "test1791430" : {
    "methodSignature" : "public CSVPrinter print(final Path out, Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791430() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    MockFile mockFile0 = new MockFile(\"\");\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat0.TDF.print(path0, charset0);\n}",
    "testName" : "test1791430"
  },
  "test1501278" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501278() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1501278"
  },
  "test1501279" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501279() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1501279"
  },
  "test1481260" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481260() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1481260"
  },
  "test1501276" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501276() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1501276"
  },
  "test1481261" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481261() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1481261"
  },
  "test1501277" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501277() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1501277"
  },
  "test1501274" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501274() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1501274"
  },
  "test1501275" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501275() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1501275"
  },
  "test01075" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01075() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test01075"
  },
  "test1501272" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501272() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1501272"
  },
  "test01074" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01074() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01074"
  },
  "test1501273" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501273() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1501273"
  },
  "test01079" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01079() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test01079"
  },
  "test01078" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01078() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test01078"
  },
  "test01077" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test01077"
  },
  "test01076" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01076() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test01076"
  },
  "test1481259" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481259() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1481259"
  },
  "test1481257" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481257() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1481257"
  },
  "test1481258" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481258() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1481258"
  },
  "test1481256" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481256() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1481256"
  },
  "test2521700" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521700() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2521700"
  },
  "test116981" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116981() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test116981"
  },
  "test2521701" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521701() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2521701"
  },
  "test116982" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116982() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test116982"
  },
  "test2521702" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521702() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2521702"
  },
  "test2521703" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521703() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2521703"
  },
  "test116980" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116980() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test116980"
  },
  "test2521704" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521704() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test2521704"
  },
  "test2521705" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521705() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2521705"
  },
  "test00650" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00650"
  },
  "test00643" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00643"
  },
  "test00646" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00646"
  },
  "test00647" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00647"
  },
  "test00644" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00644"
  },
  "test00645" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00645"
  },
  "test116985" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116985() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test116985"
  },
  "test2101506" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2101506() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2101506"
  },
  "test116986" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116986() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test116986"
  },
  "test00648" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00648"
  },
  "test116983" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116983() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test116983"
  },
  "test00649" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00649"
  },
  "test116984" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116984() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test116984"
  },
  "test116989" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116989() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test116989"
  },
  "test116987" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116987() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test116987"
  },
  "test116988" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116988() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test116988"
  },
  "test056469" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056469() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withNullString(\"Up^n`W:D\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test056469"
  },
  "test056466" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056466() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withNullString(\"Up^n`W:D\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test056466"
  },
  "test056465" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056465() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withNullString(\"Up^n`W:D\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test056465"
  },
  "test056468" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056468() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withNullString(\"Up^n`W:D\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test056468"
  },
  "test056467" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056467() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withNullString(\"Up^n`W:D\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test056467"
  },
  "test071609" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071609() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test071609"
  },
  "test1771428" : {
    "methodSignature" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
    "methodName" : "printRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CharBuffer charBuffer0 = CharBuffer.allocate(53);\n    Object[] objectArray0 = new Object[7];\n    objectArray0[0] = (Object) charBuffer0;\n    cSVFormat0.EXCEL.printRecord(charBuffer0, objectArray0);\n}",
    "testName" : "test1771428"
  },
  "test1901453" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901453() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.print((Object) null, (Appendable) null, true);\n}",
    "testName" : "test1901453"
  },
  "test2271560" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271560() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test2271560"
  },
  "test2271561" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271561() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test2271561"
  },
  "test1541317" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541317() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1541317"
  },
  "test1541315" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541315() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1541315"
  },
  "test1541316" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541316() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1541316"
  },
  "test1541313" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1541313"
  },
  "test1541314" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1541314"
  },
  "test1541311" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541311() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1541311"
  },
  "test1541312" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541312() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1541312"
  },
  "test060504" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060504() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test060504"
  },
  "test071612" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071612() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test071612"
  },
  "test060503" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060503() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test060503"
  },
  "test071611" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071611() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test071611"
  },
  "test071610" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071610() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test071610"
  },
  "test071619" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071619() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test071619"
  },
  "test071618" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071618() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test071618"
  },
  "test071617" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test071617"
  },
  "test060500" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060500() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test060500"
  },
  "test071616" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test071616"
  },
  "test116992" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116992() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test116992"
  },
  "test071615" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071615() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test071615"
  },
  "test116993" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116993() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test116993"
  },
  "test060502" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060502() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test060502"
  },
  "test071614" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071614() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test071614"
  },
  "test116990" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116990() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test116990"
  },
  "test060501" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060501() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test060501"
  },
  "test071613" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071613() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"url\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test071613"
  },
  "test116991" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116991() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test116991"
  },
  "test018160" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test018160"
  },
  "test116996" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116996() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test116996"
  },
  "test116994" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116994() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test116994"
  },
  "test116995" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116995() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('b');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withCommentMarker('[');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test116995"
  },
  "test067569" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067569() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test067569"
  },
  "test082721" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082721() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test082721"
  },
  "test1211029" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211029() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1211029"
  },
  "test082720" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082720() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test082720"
  },
  "test1211028" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211028() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1211028"
  },
  "test082718" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082718() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test082718"
  },
  "test1211033" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211033() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1211033"
  },
  "test082719" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082719() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test082719"
  },
  "test1211032" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211032() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1211032"
  },
  "test1211035" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211035() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1211035"
  },
  "test082717" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082717() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test082717"
  },
  "test1211034" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211034() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1211034"
  },
  "test1211031" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211031() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1211031"
  },
  "test1211030" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211030() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1211030"
  },
  "test2271554" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test2271554"
  },
  "test2271555" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test2271555"
  },
  "test2271556" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test2271556"
  },
  "test2271557" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2271557"
  },
  "test108929" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108929() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test108929"
  },
  "test2271558" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test2271558"
  },
  "test108928" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108928() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test108928"
  },
  "test2271559" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271559() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat2.print(path0, charset0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test2271559"
  },
  "test1541310" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541310() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1541310"
  },
  "test108927" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108927() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test108927"
  },
  "test108926" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108926() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test108926"
  },
  "test2481657" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2481657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2481657"
  },
  "test2481658" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2481658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2481658"
  },
  "test1211036" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211036() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('8');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1211036"
  },
  "test2481659" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2481659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2481659"
  },
  "test1541307" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541307() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1541307"
  },
  "test2751833" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2751833() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    PipedReader pipedReader0 = new PipedReader(1874);\n    CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2751833"
  },
  "test1541308" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541308() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1541308"
  },
  "test1541309" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541309() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1541309"
  },
  "test078680" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078680() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test078680"
  },
  "test108930" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108930() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test108930"
  },
  "test078684" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078684() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test078684"
  },
  "test078683" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078683() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test078683"
  },
  "test078682" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078682() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test078682"
  },
  "test078681" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078681() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test078681"
  },
  "test078685" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078685() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test078685"
  },
  "test067575" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067575() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test067575"
  },
  "test067576" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067576() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test067576"
  },
  "test067577" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067577() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test067577"
  },
  "test067578" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067578() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test067578"
  },
  "test067571" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067571() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test067571"
  },
  "test067572" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067572() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test067572"
  },
  "test067573" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067573() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test067573"
  },
  "test067574" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067574() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test067574"
  },
  "test067570" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067570() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test067570"
  },
  "test090789" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090789() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test090789"
  },
  "test090788" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090788() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test090788"
  },
  "test090787" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090787() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test090787"
  },
  "test090786" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090786() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test090786"
  },
  "test093811" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093811() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[1];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test093811"
  },
  "test093812" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093812() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[1];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test093812"
  },
  "test029254" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029254() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test029254"
  },
  "test029255" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029255() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test029255"
  },
  "test029256" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029256() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test029256"
  },
  "test029257" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029257() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test029257"
  },
  "test029251" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029251() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test029251"
  },
  "test1991472" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991472() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getNullString();\n}",
    "testName" : "test1991472"
  },
  "test029252" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029252() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.getTrim();\n}",
    "testName" : "test029252"
  },
  "test1991473" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991473() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1991473"
  },
  "test029253" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029253() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test029253"
  },
  "test1991474" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991474() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1991474"
  },
  "test029258" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029258() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test029258"
  },
  "test029259" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029259() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test029259"
  },
  "test090792" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090792() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test090792"
  },
  "test090791" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090791() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test090791"
  },
  "test090790" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090790() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test090790"
  },
  "test090793" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090793() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test090793"
  },
  "test029260" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029260() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"Y\");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test029260"
  },
  "test2691806" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691806() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2691806"
  },
  "test2691807" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691807() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2691807"
  },
  "test093808" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093808() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[1];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test093808"
  },
  "test093809" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093809() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[1];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test093809"
  },
  "test078678" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078678() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test078678"
  },
  "test2691800" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691800() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2691800"
  },
  "test078679" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078679() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test078679"
  },
  "test2691801" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691801() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2691801"
  },
  "test2691802" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691802() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2691802"
  },
  "test2691803" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691803() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2691803"
  },
  "test2691804" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691804() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2691804"
  },
  "test2691805" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691805() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2691805"
  },
  "test093810" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093810() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[1];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test093810"
  },
  "test090785" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090785() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test090785"
  },
  "test078677" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078677() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test078677"
  },
  "test090784" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090784() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test090784"
  },
  "test090783" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090783() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test090783"
  },
  "test089778" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089778() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test089778"
  },
  "test105906" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105906() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test105906"
  },
  "test105905" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105905() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test105905"
  },
  "test105904" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105904() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test105904"
  },
  "test089779" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089779() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test089779"
  },
  "test105903" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105903() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test105903"
  },
  "test105909" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105909() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test105909"
  },
  "test105908" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105908() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test105908"
  },
  "test105907" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105907() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test105907"
  },
  "test00110" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00110"
  },
  "test105902" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105902() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test105902"
  },
  "test00111" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00111"
  },
  "test105901" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105901() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test105901"
  },
  "test030269" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030269() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test030269"
  },
  "test030267" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030267() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test030267"
  },
  "test030268" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030268() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test030268"
  },
  "test1591338" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591338() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    String string0 = cSVFormat0.getNullString();\n}",
    "testName" : "test1591338"
  },
  "test030265" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030265() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test030265"
  },
  "test030266" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030266() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test030266"
  },
  "test030263" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030263() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test030263"
  },
  "test030264" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030264() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test030264"
  },
  "test030261" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030261() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test030261"
  },
  "test030262" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030262() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test030262"
  },
  "test2541720" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541720() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2541720"
  },
  "test102889" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102889() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test102889"
  },
  "test1441225" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1441225"
  },
  "test1441224" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1441224"
  },
  "test1441227" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1441227"
  },
  "test1441226" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1441226"
  },
  "test1441229" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1441229"
  },
  "test1441228" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('o');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1441228"
  },
  "test089781" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089781() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test089781"
  },
  "test089780" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089780() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test089780"
  },
  "test089782" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089782() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test089782"
  },
  "test102887" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102887() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test102887"
  },
  "test102888" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102888() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test102888"
  },
  "test105911" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105911() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test105911"
  },
  "test102886" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102886() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test102886"
  },
  "test105910" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105910() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test105910"
  },
  "test2541719" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541719() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2541719"
  },
  "test2541718" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541718() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2541718"
  },
  "test2541715" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541715() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2541715"
  },
  "test2541714" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541714() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2541714"
  },
  "test2541717" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541717() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2541717"
  },
  "test2541716" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541716() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2541716"
  },
  "test2541711" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541711() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2541711"
  },
  "test2541713" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541713() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2541713"
  },
  "test2541712" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541712() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2541712"
  },
  "test030270" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030270() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test030270"
  },
  "test030271" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030271() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"MhFw]fUdY$V{;\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test030271"
  },
  "test018159" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test018159"
  },
  "test102890" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102890() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test102890"
  },
  "test018157" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018157() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test018157"
  },
  "test018158" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test018158"
  },
  "test018155" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018155() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test018155"
  },
  "test018156" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018156() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test018156"
  },
  "test018153" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018153() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test018153"
  },
  "test018154" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018154() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test018154"
  },
  "test1401197" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1401197"
  },
  "test1401196" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1401196"
  },
  "test1401199" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1401199"
  },
  "test1401198" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1401198"
  },
  "test041356" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041356() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test041356"
  },
  "test041355" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041355() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test041355"
  },
  "test041357" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041357() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test041357"
  },
  "test041354" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041354() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test041354"
  },
  "test041353" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041353() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test041353"
  },
  "test2561735" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561735() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2561735"
  },
  "test2561734" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561734() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2561734"
  },
  "test00541" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00541"
  },
  "test2561737" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561737() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2561737"
  },
  "test00542" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00542() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test00542"
  },
  "test2561736" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561736() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2561736"
  },
  "test2561739" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561739() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2561739"
  },
  "test2561738" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561738() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2561738"
  },
  "test2631780" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631780() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String string0 = cSVFormat0.getNullString();\n}",
    "testName" : "test2631780"
  },
  "test2411624" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411624() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2411624"
  },
  "test2411621" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411621() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2411621"
  },
  "test2561731" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561731() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2561731"
  },
  "test2411620" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411620() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2411620"
  },
  "test2411623" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411623() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2411623"
  },
  "test2561733" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561733() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test2561733"
  },
  "test2411622" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411622() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2411622"
  },
  "test2561732" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561732() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2561732"
  },
  "test00540" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test00540"
  },
  "test00537" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    cSVFormat3.equals((Object) cSVFormat0);\n}",
    "testName" : "test00537"
  },
  "test00538" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00538"
  },
  "test2561740" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561740() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2561740"
  },
  "test00539" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test00539"
  },
  "test2561741" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561741() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2561741"
  },
  "test1311116" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1311116"
  },
  "test1311117" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1311117"
  },
  "test1311118" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1311118"
  },
  "test1311119" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1311119"
  },
  "test052436" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test052436"
  },
  "test2391598" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391598() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2391598"
  },
  "test052437" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test052437"
  },
  "test2391597" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391597() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2391597"
  },
  "test052438" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052438() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test052438"
  },
  "test052439" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052439() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test052439"
  },
  "test2391599" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391599() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2391599"
  },
  "test052432" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test052432"
  },
  "test052433" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test052433"
  },
  "test052434" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.getTrim();\n}",
    "testName" : "test052434"
  },
  "test052435" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test052435"
  },
  "test1311120" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1311120"
  },
  "test052430" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052430() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test052430"
  },
  "test052431" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test052431"
  },
  "test1311123" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test1311123"
  },
  "test1311124" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1311124"
  },
  "test1311121" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1311121"
  },
  "test2391596" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391596() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getNullString();\n}",
    "testName" : "test2391596"
  },
  "test1311122" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1311122"
  },
  "test1311127" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getNullString();\n}",
    "testName" : "test1311127"
  },
  "test1311125" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1311125"
  },
  "test1311126" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1311126"
  },
  "test2411618" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411618() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2411618"
  },
  "test2411617" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2411617"
  },
  "test2411619" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411619() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2411619"
  },
  "test2411614" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411614() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2411614"
  },
  "test2411613" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411613() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2411613"
  },
  "test2501674" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501674() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2501674"
  },
  "test2411616" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2411616"
  },
  "test2501675" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501675() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2501675"
  },
  "test2411615" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411615() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('X');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2411615"
  },
  "test2501676" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501676() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2501676"
  },
  "test2651782" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651782() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2651782"
  },
  "test1461240" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461240() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1461240"
  },
  "test2651783" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651783() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test2651783"
  },
  "test1461241" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461241() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1461241"
  },
  "test2651784" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651784() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test2651784"
  },
  "test2651785" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651785() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2651785"
  },
  "test2651786" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651786() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test2651786"
  },
  "test2501677" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501677() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2501677"
  },
  "test2651787" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651787() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test2651787"
  },
  "test2501678" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501678() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2501678"
  },
  "test2651788" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651788() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2651788"
  },
  "test2501679" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501679() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2501679"
  },
  "test2651789" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651789() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2651789"
  },
  "test1461239" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461239() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1461239"
  },
  "test2501684" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501684() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test2501684"
  },
  "test2501685" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501685() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2501685"
  },
  "test2501680" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501680() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test2501680"
  },
  "test2651790" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651790() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2651790"
  },
  "test2501681" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501681() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2501681"
  },
  "test2651791" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651791() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2651791"
  },
  "test2501682" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501682() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2501682"
  },
  "test2651792" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651792() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('c');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2651792"
  },
  "test2501683" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501683() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"{\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2501683"
  },
  "test014122" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test014122"
  },
  "test014123" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test014123"
  },
  "test052440" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('(');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test052440"
  },
  "test014120" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test014120"
  },
  "test014121" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test014121"
  },
  "test060498" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060498() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test060498"
  },
  "test060497" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060497() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test060497"
  },
  "test060499" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060499() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test060499"
  },
  "test063527" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063527() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test063527"
  },
  "test1181006" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181006() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1181006"
  },
  "test1181005" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181005() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1181005"
  },
  "test1181009" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181009() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1181009"
  },
  "test1181008" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181008() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1181008"
  },
  "test2581760" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581760() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2581760"
  },
  "test1181007" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181007() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1181007"
  },
  "test059496" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059496() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test059496"
  },
  "test2521697" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521697() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2521697"
  },
  "test059495" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059495() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test059495"
  },
  "test2521698" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521698() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2521698"
  },
  "test059494" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059494() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test059494"
  },
  "test2521699" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521699() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2521699"
  },
  "test059493" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059493() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test059493"
  },
  "test059492" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059492() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test059492"
  },
  "test059491" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059491() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test059491"
  },
  "test059490" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059490() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test059490"
  },
  "test1881450" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881450() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1156);\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);\n    cSVFormat0.print((Object) cSVFormat0, (Appendable) outputStreamWriter0, true);\n    cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test1881450"
  },
  "test2581753" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2581753"
  },
  "test2581752" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581752() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2581752"
  },
  "test2581759" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581759() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2581759"
  },
  "test2581758" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581758() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2581758"
  },
  "test2581755" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581755() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2581755"
  },
  "test2581754" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2581754"
  },
  "test1461242" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461242() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1461242"
  },
  "test2581757" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581757() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n}",
    "testName" : "test2581757"
  },
  "test1461243" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461243() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1461243"
  },
  "test2581756" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581756() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2581756"
  },
  "test074639" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test074639"
  },
  "test074638" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test074638"
  },
  "test048398" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test048398"
  },
  "test048399" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test048399"
  },
  "test2431637" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2431637"
  },
  "test2431638" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2431638"
  },
  "test2431631" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431631() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2431631"
  },
  "test2431632" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431632() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2431632"
  },
  "test2431630" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431630() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2431630"
  },
  "test2431635" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431635() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2431635"
  },
  "test2431636" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431636() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2431636"
  },
  "test074640" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test074640"
  },
  "test2431633" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431633() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2431633"
  },
  "test2431634" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431634() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2431634"
  },
  "test063533" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test063533"
  },
  "test063534" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test063534"
  },
  "test063531" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test063531"
  },
  "test063532" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test063532"
  },
  "test063535" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test063535"
  },
  "test063530" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test063530"
  },
  "test113966" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113966() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test113966"
  },
  "test2431629" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431629() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2431629"
  },
  "test1531295" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test1531295"
  },
  "test1531296" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1531296"
  },
  "test1531297" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test1531297"
  },
  "test1531298" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1531298"
  },
  "test1531299" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test1531299"
  },
  "test063528" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test063528"
  },
  "test063529" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test063529"
  },
  "test113963" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113963() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test113963"
  },
  "test113962" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113962() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test113962"
  },
  "test113965" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113965() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test113965"
  },
  "test1181011" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1181011"
  },
  "test113964" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113964() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test113964"
  },
  "test1181010" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181010() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1181010"
  },
  "test025217" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test025217"
  },
  "test025216" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test025216"
  },
  "test1401200" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401200() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1401200"
  },
  "test085749" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test085749"
  },
  "test085748" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test085748"
  },
  "test2371585" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2371585() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();\n    Object[] objectArray0 = new Object[6];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2371585"
  },
  "test2371584" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2371584() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();\n    Object[] objectArray0 = new Object[6];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2371584"
  },
  "test025219" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test025219"
  },
  "test2371587" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2371587() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();\n    Object[] objectArray0 = new Object[6];\n    String string0 = cSVFormat1.format(objectArray0);\n}",
    "testName" : "test2371587"
  },
  "test025218" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test025218"
  },
  "test2371586" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2371586() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();\n    Object[] objectArray0 = new Object[6];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2371586"
  },
  "test2371583" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2371583() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrim();\n    Object[] objectArray0 = new Object[6];\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2371583"
  },
  "test1271087" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271087() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1271087"
  },
  "test1271088" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271088() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1271088"
  },
  "test1271085" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271085() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1271085"
  },
  "test1271086" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271086() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1271086"
  },
  "test1271089" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271089() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1271089"
  },
  "test109937" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109937() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test109937"
  },
  "test109936" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109936() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test109936"
  },
  "test022191" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test022191"
  },
  "test109939" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109939() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test109939"
  },
  "test022190" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test022190"
  },
  "test109938" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109938() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test109938"
  },
  "test022193" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test022193"
  },
  "test025220" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test025220"
  },
  "test109933" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109933() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test109933"
  },
  "test022192" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test022192"
  },
  "test109932" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109932() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test109932"
  },
  "test109935" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109935() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test109935"
  },
  "test022194" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test022194"
  },
  "test109934" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109934() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test109934"
  },
  "test025224" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test025224"
  },
  "test025223" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test025223"
  },
  "test025222" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test025222"
  },
  "test109931" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109931() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test109931"
  },
  "test025221" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test025221"
  },
  "test025226" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test025226"
  },
  "test074637" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test074637"
  },
  "test025225" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test025225"
  },
  "test074636" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074636() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test074636"
  },
  "test1271090" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271090() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('L');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1271090"
  },
  "test2191527" : {
    "methodSignature" : "public CSVFormat withEscape(final char escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2191527() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('m');\n    cSVFormat1.withEscape('m');\n}",
    "testName" : "test2191527"
  },
  "test109940" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109940() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test109940"
  },
  "test1641377" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641377() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1641377"
  },
  "test1641376" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641376() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1641376"
  },
  "test110945" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110945() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test110945"
  },
  "test059489" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059489() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test059489"
  },
  "test110944" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110944() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test110944"
  },
  "test059488" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059488() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test059488"
  },
  "test110943" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110943() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test110943"
  },
  "test059487" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059487() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test059487"
  },
  "test110942" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110942() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test110942"
  },
  "test2521695" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521695() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2521695"
  },
  "test059486" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059486() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test059486"
  },
  "test110941" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110941() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test110941"
  },
  "test2521696" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521696() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('n');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2521696"
  },
  "test085747" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test085747"
  },
  "test085746" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085746() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test085746"
  },
  "test085745" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085745() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test085745"
  },
  "test1641379" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641379() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1641379"
  },
  "test085744" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085744() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test085744"
  },
  "test1641378" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641378() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1641378"
  },
  "test085743" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085743() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test085743"
  },
  "test085742" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085742() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test085742"
  },
  "test085741" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085741() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test085741"
  },
  "test085740" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085740() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test085740"
  },
  "test1641384" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641384() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1641384"
  },
  "test1641383" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641383() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1641383"
  },
  "test1641382" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641382() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1641382"
  },
  "test1641381" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641381() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1641381"
  },
  "test1641385" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641385() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1641385"
  },
  "test1951458" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951458() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test1951458"
  },
  "test1641380" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641380() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1641380"
  },
  "test2211529" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final Character commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2211529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    Character character0 = new Character('8');\n    cSVFormat0.withCommentMarker(character0);\n}",
    "testName" : "test2211529"
  },
  "test014116" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test014116"
  },
  "test014117" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test014117"
  },
  "test014118" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test014118"
  },
  "test1661399" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1661399"
  },
  "test1661398" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withDelimiter('I');\n    char char0 = cSVFormat1.getDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1661398"
  },
  "test036309" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036309() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test036309"
  },
  "test014119" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test014119"
  },
  "test1701421" : {
    "methodSignature" : "public CSVFormat withQuote(final char quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('=');\n    cSVFormat0.withQuote('=');\n}",
    "testName" : "test1701421"
  },
  "test036310" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036310() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test036310"
  },
  "test036312" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036312() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test036312"
  },
  "test036311" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036311() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test036311"
  },
  "test036314" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test036314"
  },
  "test096838" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096838() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[7];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test096838"
  },
  "test036313" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test036313"
  },
  "test096839" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096839() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[7];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test096839"
  },
  "test036316" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036316() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test036316"
  },
  "test096836" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096836() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[7];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test096836"
  },
  "test036315" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036315() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test036315"
  },
  "test096837" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096837() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[7];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test096837"
  },
  "test036318" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036318() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test036318"
  },
  "test036317" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036317() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test036317"
  },
  "test036319" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withHeaderComments(objectArray0);\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test036319"
  },
  "test033295" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test033295"
  },
  "test1331144" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1331144"
  },
  "test033296" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test033296"
  },
  "test1331143" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1331143"
  },
  "test1331142" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1331142"
  },
  "test1331141" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1331141"
  },
  "test1331140" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1331140"
  },
  "test096835" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096835() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[7];\n    cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test096835"
  },
  "test1331139" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1331139"
  },
  "test033291" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test033291"
  },
  "test033292" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test033292"
  },
  "test033293" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test033293"
  },
  "test033294" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test033294"
  },
  "test1331149" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331149() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1331149"
  },
  "test1331148" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331148() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1331148"
  },
  "test1331147" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331147() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1331147"
  },
  "test1331146" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331146() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1331146"
  },
  "test1331145" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('8');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1331145"
  },
  "test1421207" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421207() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\'');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1421207"
  },
  "test1421209" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421209() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\'');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1421209"
  },
  "test1421208" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421208() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\'');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1421208"
  },
  "test044369" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044369() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test044369"
  },
  "test044368" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044368() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test044368"
  },
  "test1811432" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    PipedWriter pipedWriter0 = new PipedWriter();\n    cSVFormat0.EXCEL.print((Object) cSVFormat0, (Appendable) pipedWriter0, true);\n}",
    "testName" : "test1811432"
  },
  "test1421210" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\'');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1421210"
  },
  "test1291098" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291098() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat3.getEscapeCharacter();\n}",
    "testName" : "test1291098"
  },
  "test1421212" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\'');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1421212"
  },
  "test1291099" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291099() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1291099"
  },
  "test1421211" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\'');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1421211"
  },
  "test1291097" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291097() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('c');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1291097"
  },
  "test2351572" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2351572() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    Object[] objectArray0 = new Object[4];\n    objectArray0[1] = (Object) cSVFormat1;\n    cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2351572"
  },
  "test2351571" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2351571() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    Object[] objectArray0 = new Object[4];\n    objectArray0[1] = (Object) cSVFormat1;\n    cSVFormat1.format(objectArray0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2351571"
  },
  "test2351574" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2351574() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    Object[] objectArray0 = new Object[4];\n    objectArray0[1] = (Object) cSVFormat1;\n    cSVFormat1.format(objectArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2351574"
  },
  "test2351573" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2351573() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    Object[] objectArray0 = new Object[4];\n    objectArray0[1] = (Object) cSVFormat1;\n    cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2351573"
  },
  "test2351575" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2351575() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    Object[] objectArray0 = new Object[4];\n    objectArray0[1] = (Object) cSVFormat1;\n    cSVFormat1.format(objectArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2351575"
  },
  "test1681419" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681419() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1681419"
  },
  "test1971470" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1971470() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isCommentMarkerSet();\n}",
    "testName" : "test1971470"
  },
  "test044372" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044372() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test044372"
  },
  "test044370" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044370() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test044370"
  },
  "test044371" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044371() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    Character character0 = new Character('&');\n    cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test044371"
  },
  "test2611764" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611764() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2611764"
  },
  "test2611763" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611763() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2611763"
  },
  "test2351570" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2351570() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    Object[] objectArray0 = new Object[4];\n    objectArray0[1] = (Object) cSVFormat1;\n    cSVFormat1.format(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2351570"
  },
  "test00972" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00972() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00972"
  },
  "test00973" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00973() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00973"
  },
  "test00970" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00970() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00970"
  },
  "test00971" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00971() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00971"
  },
  "test1371184" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1371184"
  },
  "test1371183" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1371183"
  },
  "test1371182" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1371182"
  },
  "test1371181" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1371181"
  },
  "test1371180" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371180() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1371180"
  },
  "test1371179" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371179() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1371179"
  },
  "test1371178" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371178() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1371178"
  },
  "test1371177" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1371177"
  },
  "test1371176" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1371176"
  },
  "test1371175" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test1371175"
  },
  "test1371174" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1371174"
  },
  "test00969" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00969() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00969"
  },
  "test117997" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117997() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test117997"
  },
  "test055464" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055464() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withNullString(\"JRzCqQy[GrFn>gH\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test055464"
  },
  "test117998" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117998() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test117998"
  },
  "test1351166" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1351166"
  },
  "test1351165" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1351165"
  },
  "test055461" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055461() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withNullString(\"JRzCqQy[GrFn>gH\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test055461"
  },
  "test055460" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055460() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withNullString(\"JRzCqQy[GrFn>gH\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test055460"
  },
  "test055463" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055463() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withNullString(\"JRzCqQy[GrFn>gH\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test055463"
  },
  "test117999" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117999() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test117999"
  },
  "test055462" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055462() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    cSVFormat1.withNullString(\"JRzCqQy[GrFn>gH\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test055462"
  },
  "test1351160" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1351160"
  },
  "test1351164" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1351164"
  },
  "test1351163" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1351163"
  },
  "test1351162" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1351162"
  },
  "test1351161" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1351161"
  },
  "test1371185" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1371185"
  },
  "test1351157" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351157() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1351157"
  },
  "test1351156" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351156() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1351156"
  },
  "test1351159" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1351159"
  },
  "test1351158" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('|');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1351158"
  },
  "test2611767" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611767() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2611767"
  },
  "test2611766" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611766() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2611766"
  },
  "test2611765" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611765() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2611765"
  },
  "test1621367" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621367() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1621367"
  },
  "test1621366" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621366() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1621366"
  },
  "test1621365" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621365() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1621365"
  },
  "test1621364" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621364() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1621364"
  },
  "test1621363" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621363() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1621363"
  },
  "test070608" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070608() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test070608"
  },
  "test070607" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070607() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test070607"
  },
  "test070606" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070606() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test070606"
  },
  "test070605" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070605() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test070605"
  },
  "test070604" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070604() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test070604"
  },
  "test1991480" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991480() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1991480"
  },
  "test1991481" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991481() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1991481"
  },
  "test1991482" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991482() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1991482"
  },
  "test1991475" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991475() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1991475"
  },
  "test1991476" : {
    "methodSignature" : "public String[] getHeader()",
    "methodName" : "getHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991476() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n}",
    "testName" : "test1991476"
  },
  "test1991477" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991477() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1991477"
  },
  "test1991478" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991478() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1991478"
  },
  "test1991479" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991479() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    String[] stringArray0 = cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1991479"
  },
  "test066559" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066559() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test066559"
  },
  "test066558" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test066558"
  },
  "test066557" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test066557"
  },
  "test066556" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test066556"
  },
  "test017148" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017148() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test017148"
  },
  "test0000" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = CSVFormat.TDF;\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test0000"
  },
  "test017149" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017149() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test017149"
  },
  "test081710" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081710() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test081710"
  },
  "test066555" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test066555"
  },
  "test066554" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test066554"
  },
  "test066553" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test066553"
  },
  "test066552" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test066552"
  },
  "test114968" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114968() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test114968"
  },
  "test114967" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114967() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test114967"
  },
  "test114969" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114969() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test114969"
  },
  "test081709" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081709() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test081709"
  },
  "test081708" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081708() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test081708"
  },
  "test0013" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0013() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test0013"
  },
  "test1221042" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221042() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1221042"
  },
  "test0014" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0014() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test0014"
  },
  "test1221043" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221043() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1221043"
  },
  "test0015" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0015() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test0015"
  },
  "test1221044" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221044() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1221044"
  },
  "test0016" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0016() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test0016"
  },
  "test1221045" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221045() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test1221045"
  },
  "test0011" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test0011"
  },
  "test1221040" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221040() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1221040"
  },
  "test0012" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0012() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test0012"
  },
  "test1221041" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221041() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1221041"
  },
  "test0017" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0017() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test0017"
  },
  "test0018" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0018() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test0018"
  },
  "test0019" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test0019"
  },
  "test081716" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081716() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test081716"
  },
  "test081715" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081715() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test081715"
  },
  "test081712" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081712() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test081712"
  },
  "test081711" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081711() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test081711"
  },
  "test081714" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081714() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test081714"
  },
  "test081713" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081713() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test081713"
  },
  "test1221039" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221039() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1221039"
  },
  "test1831434" : {
    "methodSignature" : "public CSVPrinter print(final File out, Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    MockFile mockFile0 = new MockFile(\"\");\n    cSVFormat0.print((File) mockFile0, (Charset) null);\n}",
    "testName" : "test1831434"
  },
  "test1221037" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221037() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1221037"
  },
  "test1221038" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221038() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1221038"
  },
  "test1611359" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611359() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1611359"
  },
  "test069603" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069603() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test069603"
  },
  "test2701808" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2701808() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.format((Object[]) null);\n}",
    "testName" : "test2701808"
  },
  "test069600" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069600() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test069600"
  },
  "test069602" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069602() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test069602"
  },
  "test069601" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069601() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test069601"
  },
  "test2471653" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471653() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    cSVFormat1.print((Appendable) charArrayWriter0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2471653"
  },
  "test2471654" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    cSVFormat1.print((Appendable) charArrayWriter0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2471654"
  },
  "test1611361" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611361() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1611361"
  },
  "test1611360" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611360() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1611360"
  },
  "test2471652" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    cSVFormat1.print((Appendable) charArrayWriter0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2471652"
  },
  "test077671" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077671() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test077671"
  },
  "test2241544" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2241544() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test2241544"
  },
  "test077672" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077672() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test077672"
  },
  "test1611362" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611362() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test1611362"
  },
  "test2241545" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2241545() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2241545"
  },
  "test2241542" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2241542() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2241542"
  },
  "test2471655" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    cSVFormat1.print((Appendable) charArrayWriter0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2471655"
  },
  "test077670" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077670() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test077670"
  },
  "test2241543" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2241543() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2241543"
  },
  "test2471656" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    cSVFormat1.print((Appendable) charArrayWriter0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2471656"
  },
  "test077675" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077675() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test077675"
  },
  "test1221046" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221046() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Character character0 = new Character('l');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1221046"
  },
  "test077676" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077676() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test077676"
  },
  "test077673" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077673() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test077673"
  },
  "test077674" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077674() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test077674"
  },
  "test066568" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066568() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test066568"
  },
  "test066567" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066567() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test066567"
  },
  "test066562" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066562() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test066562"
  },
  "test1371173" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1371173"
  },
  "test066561" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066561() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test066561"
  },
  "test066560" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066560() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test066560"
  },
  "test066566" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066566() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test066566"
  },
  "test066565" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066565() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test066565"
  },
  "test066564" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066564() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test066564"
  },
  "test066563" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066563() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test066563"
  },
  "test114971" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114971() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test114971"
  },
  "test1611352" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611352() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1611352"
  },
  "test114970" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114970() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test114970"
  },
  "test114973" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114973() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test114973"
  },
  "test1611354" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611354() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1611354"
  },
  "test114972" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114972() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test114972"
  },
  "test1611353" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611353() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1611353"
  },
  "test1611356" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611356() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1611356"
  },
  "test114974" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114974() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test114974"
  },
  "test1611355" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611355() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1611355"
  },
  "test1611358" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611358() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1611358"
  },
  "test1611357" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611357() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1611357"
  },
  "test092803" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092803() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"{\");\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test092803"
  },
  "test092804" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092804() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"{\");\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test092804"
  },
  "test092805" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092805() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"{\");\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test092805"
  },
  "test092806" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092806() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"{\");\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test092806"
  },
  "test092807" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092807() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"{\");\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test092807"
  },
  "test1391193" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    Character character0 = new Character('*');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1391193"
  },
  "test1391192" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    Character character0 = new Character('*');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1391192"
  },
  "test1391191" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    Character character0 = new Character('*');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1391191"
  },
  "test028246" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028246() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test028246"
  },
  "test2321566" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2321566() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Object[] objectArray0 = new Object[4];\n    objectArray0[0] = (Object) \"\";\n    String string0 = cSVFormat0.INFORMIX_UNLOAD.format(objectArray0);\n}",
    "testName" : "test2321566"
  },
  "test028247" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028247() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test028247"
  },
  "test028248" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028248() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test028248"
  },
  "test028249" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028249() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test028249"
  },
  "test028250" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028250() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test028250"
  },
  "test00433" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00433"
  },
  "test077668" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077668() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test077668"
  },
  "test00434" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test00434"
  },
  "test077669" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077669() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test077669"
  },
  "test00431" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00431"
  },
  "test077666" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test077666"
  },
  "test00432" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00432"
  },
  "test077667" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077667() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test077667"
  },
  "test00435" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00435"
  },
  "test00436" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00436"
  },
  "test077664" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test077664"
  },
  "test077665" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test077665"
  },
  "test077662" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test077662"
  },
  "test077663" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('p');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test077663"
  },
  "test106915" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106915() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test106915"
  },
  "test088769" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088769() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test088769"
  },
  "test106916" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106916() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test106916"
  },
  "test1911454" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911454() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test1911454"
  },
  "test106912" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106912() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test106912"
  },
  "test106913" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106913() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test106913"
  },
  "test2011484" : {
    "methodSignature" : "public CSVPrinter print(final File out, Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2011484() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    MockFile mockFile0 = new MockFile(\"00)eAXO\", \"!/mBjw;f#YIuz#\");\n    Charset charset0 = Charset.defaultCharset();\n    CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);\n}",
    "testName" : "test2011484"
  },
  "test106914" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106914() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test106914"
  },
  "test00430" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00430() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00430"
  },
  "test1671413" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671413() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1671413"
  },
  "test1671412" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671412() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1671412"
  },
  "test2071503" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071503() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2071503"
  },
  "test1671415" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671415() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1671415"
  },
  "test2071502" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071502() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2071502"
  },
  "test1671414" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1671414"
  },
  "test2071501" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071501() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2071501"
  },
  "test2071500" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071500() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2071500"
  },
  "test00427" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test00427"
  },
  "test1671411" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671411() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1671411"
  },
  "test1671410" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671410() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1671410"
  },
  "test00428" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00428"
  },
  "test00429" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00429"
  },
  "test1671417" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671417() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1671417"
  },
  "test1671416" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671416() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n}",
    "testName" : "test1671416"
  },
  "test1671418" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671418() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1671418"
  },
  "test088777" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088777() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test088777"
  },
  "test088776" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088776() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test088776"
  },
  "test1741425" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final char commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    cSVFormat1.withCommentMarker('f');\n}",
    "testName" : "test1741425"
  },
  "test103895" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103895() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test103895"
  },
  "test088771" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088771() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test088771"
  },
  "test103893" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103893() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test103893"
  },
  "test088770" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088770() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test088770"
  },
  "test103894" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103894() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test103894"
  },
  "test088773" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088773() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test088773"
  },
  "test088772" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088772() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test088772"
  },
  "test088775" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088775() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test088775"
  },
  "test088774" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088774() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test088774"
  },
  "test1391195" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    Character character0 = new Character('*');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1391195"
  },
  "test1391194" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    Character character0 = new Character('*');\n    cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1391194"
  },
  "test103891" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103891() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test103891"
  },
  "test103892" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103892() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test103892"
  },
  "test1671409" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671409() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1671409"
  },
  "test017151" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017151() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test017151"
  },
  "test017150" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017150() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test017150"
  },
  "test1671408" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671408() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Q');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1671408"
  },
  "test017152" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017152() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test017152"
  },
  "test039337" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test039337"
  },
  "test039336" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test039336"
  },
  "test039335" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test039335"
  },
  "test039339" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test039339"
  },
  "test039338" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test039338"
  },
  "test1931456" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931456() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.isNullStringSet();\n}",
    "testName" : "test1931456"
  },
  "test2221530" : {
    "methodSignature" : "public CSVFormat withQuote(final Character quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2221530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('9');\n    Character character0 = new Character('9');\n    cSVFormat0.withQuote(character0);\n}",
    "testName" : "test2221530"
  },
  "test039340" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039340() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test039340"
  },
  "test039341" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039341() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test039341"
  },
  "test040348" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040348() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test040348"
  },
  "test040347" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040347() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test040347"
  },
  "test1241060" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241060() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1241060"
  },
  "test040349" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040349() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test040349"
  },
  "test1241061" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241061() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1241061"
  },
  "test040344" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040344() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test040344"
  },
  "test1241062" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241062() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1241062"
  },
  "test040343" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040343() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test040343"
  },
  "test040346" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040346() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test040346"
  },
  "test040345" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040345() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test040345"
  },
  "test040342" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040342() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test040342"
  },
  "test099863" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099863() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    String[] stringArray0 = new String[0];\n    cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test099863"
  },
  "test2451644" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('2');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2451644"
  },
  "test099862" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099862() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    String[] stringArray0 = new String[0];\n    cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test099862"
  },
  "test2451645" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('2');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.hashCode();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2451645"
  },
  "test2451642" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('2');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2451642"
  },
  "test2451643" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('2');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2451643"
  },
  "test2451640" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('2');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2451640"
  },
  "test2451641" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('2');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2451641"
  },
  "test1241055" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241055() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1241055"
  },
  "test1241056" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241056() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1241056"
  },
  "test1241057" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241057() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1241057"
  },
  "test1241058" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241058() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1241058"
  },
  "test1241059" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241059() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1241059"
  },
  "test099866" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099866() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    String[] stringArray0 = new String[0];\n    cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test099866"
  },
  "test099865" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099865() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    String[] stringArray0 = new String[0];\n    cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test099865"
  },
  "test099864" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099864() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    String[] stringArray0 = new String[0];\n    cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test099864"
  },
  "test1241052" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241052() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1241052"
  },
  "test1241053" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241053() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test1241053"
  },
  "test1241054" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241054() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('=');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1241054"
  },
  "test040351" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040351() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test040351"
  },
  "test040350" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040350() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test040350"
  },
  "test040352" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040352() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test040352"
  },
  "test2301564" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301564() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[8];\n    objectArray0[7] = (Object) \"Delimiter=<,> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SkipHeaderRecord:false\";\n    String string0 = cSVFormat0.format(objectArray0);\n}",
    "testName" : "test2301564"
  },
  "test051423" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test051423"
  },
  "test051422" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test051422"
  },
  "test051421" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test051421"
  },
  "test051420" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051420() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat2.getTrim();\n}",
    "testName" : "test051420"
  },
  "test051427" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test051427"
  },
  "test051426" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test051426"
  },
  "test051425" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test051425"
  },
  "test051424" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test051424"
  },
  "test2151519" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151519() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2151519"
  },
  "test047390" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047390() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test047390"
  },
  "test047391" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047391() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test047391"
  },
  "test047392" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047392() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test047392"
  },
  "test047393" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047393() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test047393"
  },
  "test047394" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047394() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test047394"
  },
  "test047395" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047395() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test047395"
  },
  "test047396" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047396() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test047396"
  },
  "test047397" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test047397"
  },
  "test2151518" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151518() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2151518"
  },
  "test2151517" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151517() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2151517"
  },
  "test1721423" : {
    "methodSignature" : "public CSVFormat withEscape(final Character escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('B');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withEscape(character0);\n}",
    "testName" : "test1721423"
  },
  "test2151516" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151516() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2151516"
  },
  "test2151515" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151515() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2151515"
  },
  "test2151514" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151514() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2151514"
  },
  "test2151513" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151513() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2151513"
  },
  "test2151512" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151512() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2151512"
  },
  "test2151511" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151511() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2151511"
  },
  "test2031486" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2031486() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.getTrim();\n}",
    "testName" : "test2031486"
  },
  "test2591761" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2591761() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n}",
    "testName" : "test2591761"
  },
  "test1261082" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261082() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1261082"
  },
  "test1261083" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261083() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1261083"
  },
  "test2091505" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2091505() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getEscapeCharacter();\n}",
    "testName" : "test2091505"
  },
  "test051429" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test051429"
  },
  "test1261084" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261084() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1261084"
  },
  "test051428" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('M');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test051428"
  },
  "test1261080" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261080() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1261080"
  },
  "test1261081" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261081() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1261081"
  },
  "test1261079" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261079() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1261079"
  },
  "test1261075" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261075() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1261075"
  },
  "test1261076" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261076() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1261076"
  },
  "test1261077" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1261077"
  },
  "test1261078" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261078() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('$');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('D');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1261078"
  },
  "test013105" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test013105"
  },
  "test013106" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test013106"
  },
  "test013107" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test013107"
  },
  "test013108" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test013108"
  },
  "test013109" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test013109"
  },
  "test058483" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058483() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withNullString(\"\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test058483"
  },
  "test1491269" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491269() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1491269"
  },
  "test058484" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058484() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withNullString(\"\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test058484"
  },
  "test058481" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058481() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withNullString(\"\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test058481"
  },
  "test058482" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058482() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withNullString(\"\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test058482"
  },
  "test2741832" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741832() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2741832"
  },
  "test1491267" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491267() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1491267"
  },
  "test1491268" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491268() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1491268"
  },
  "test1491270" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491270() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1491270"
  },
  "test1491271" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491271() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1491271"
  },
  "test058485" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058485() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.withNullString(\"\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test058485"
  },
  "test047387" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047387() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test047387"
  },
  "test047388" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047388() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test047388"
  },
  "test073631" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073631() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test073631"
  },
  "test047389" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047389() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    Character character0 = new Character('m');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test047389"
  },
  "test073632" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073632() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test073632"
  },
  "test073633" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073633() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test073633"
  },
  "test073634" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073634() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test073634"
  },
  "test073635" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073635() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test073635"
  },
  "test062521" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062521() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test062521"
  },
  "test062522" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062522() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test062522"
  },
  "test062520" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062520() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test062520"
  },
  "test062525" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test062525"
  },
  "test062526" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062526() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test062526"
  },
  "test062523" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062523() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test062523"
  },
  "test062524" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062524() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test062524"
  },
  "test062518" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062518() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test062518"
  },
  "test062519" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062519() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test062519"
  },
  "test062516" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062516() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test062516"
  },
  "test062517" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062517() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test062517"
  },
  "test2051488" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2051488() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2051488"
  },
  "test024201" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024201() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test024201"
  },
  "test024204" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024204() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test024204"
  },
  "test084739" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084739() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test084739"
  },
  "test024205" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024205() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test024205"
  },
  "test084738" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084738() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test084738"
  },
  "test024202" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024202() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test024202"
  },
  "test084737" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084737() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test084737"
  },
  "test024203" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024203() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test024203"
  },
  "test084736" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084736() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test084736"
  },
  "test024208" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024208() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test024208"
  },
  "test024209" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024209() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024209"
  },
  "test024206" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024206() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test024206"
  },
  "test024207" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024207() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test024207"
  },
  "test021185" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test021185"
  },
  "test024211" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test024211"
  },
  "test021184" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test021184"
  },
  "test024212" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test024212"
  },
  "test021187" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test021187"
  },
  "test021186" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test021186"
  },
  "test024210" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test024210"
  },
  "test021189" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test021189"
  },
  "test024215" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test024215"
  },
  "test1511284" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511284() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1511284"
  },
  "test021188" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test021188"
  },
  "test1511285" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511285() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.equals((Object) cSVFormat0);\n}",
    "testName" : "test1511285"
  },
  "test024213" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024213"
  },
  "test1511286" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511286() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1511286"
  },
  "test024214" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('i');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test024214"
  },
  "test1511281" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511281() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1511281"
  },
  "test1511282" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511282() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1511282"
  },
  "test1511283" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511283() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1511283"
  },
  "test2681799" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681799() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2681799"
  },
  "test2681797" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681797() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2681797"
  },
  "test2681798" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681798() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2681798"
  },
  "test2681795" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681795() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2681795"
  },
  "test2681796" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681796() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2681796"
  },
  "test111953" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111953() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat4.isEscapeCharacterSet();\n}",
    "testName" : "test111953"
  },
  "test111954" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111954() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat4.getRecordSeparator();\n}",
    "testName" : "test111954"
  },
  "test111955" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111955() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat4.isQuoteCharacterSet();\n}",
    "testName" : "test111955"
  },
  "test1781429" : {
    "methodSignature" : "public CSVPrinter print(final Path out, Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat0.RFC4180.print((Path) null, charset0);\n}",
    "testName" : "test1781429"
  },
  "test111956" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111956() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test111956"
  },
  "test111950" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111950() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test111950"
  },
  "test111951" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111951() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test111951"
  },
  "test111952" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111952() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test111952"
  },
  "test013114" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test013114"
  },
  "test013115" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test013115"
  },
  "test2721828" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721828() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2721828"
  },
  "test2721829" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721829() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2721829"
  },
  "test013110" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test013110"
  },
  "test013111" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test013111"
  },
  "test013112" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test013112"
  },
  "test013113" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('n');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test013113"
  },
  "test084735" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084735() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test084735"
  },
  "test2721822" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721822() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2721822"
  },
  "test069599" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069599() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test069599"
  },
  "test084734" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084734() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test084734"
  },
  "test2721823" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721823() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2721823"
  },
  "test084733" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084733() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test084733"
  },
  "test2721820" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721820() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2721820"
  },
  "test084732" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084732() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test084732"
  },
  "test2721821" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721821() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2721821"
  },
  "test069596" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069596() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test069596"
  },
  "test084731" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084731() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test084731"
  },
  "test2721826" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721826() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2721826"
  },
  "test069595" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069595() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test069595"
  },
  "test084730" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084730() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test084730"
  },
  "test2721827" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721827() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2721827"
  },
  "test069598" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069598() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test069598"
  },
  "test2721824" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721824() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2721824"
  },
  "test069597" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069597() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test069597"
  },
  "test2721825" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721825() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2721825"
  },
  "test111946" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111946() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test111946"
  },
  "test2131509" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2131509() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test2131509"
  },
  "test111947" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111947() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test111947"
  },
  "test2721830" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721830() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2721830"
  },
  "test111948" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111948() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat4.getNullString();\n}",
    "testName" : "test111948"
  },
  "test111949" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111949() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    Character character0 = new Character('\\\"');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"\");\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat4 = cSVFormat3.withHeader(class0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test111949"
  },
  "test1201025" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201025() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"r;FMG6%'p`{&g\");\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1201025"
  },
  "test1201024" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201024() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"r;FMG6%'p`{&g\");\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1201024"
  },
  "test1201023" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201023() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"r;FMG6%'p`{&g\");\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1201023"
  },
  "test1531300" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531300() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test1531300"
  },
  "test095829" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095829() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test095829"
  },
  "test095828" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095828() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test095828"
  },
  "test095825" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095825() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test095825"
  },
  "test095824" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095824() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test095824"
  },
  "test035304" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035304() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test035304"
  },
  "test095827" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095827() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test095827"
  },
  "test035303" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035303() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test035303"
  },
  "test095826" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095826() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test095826"
  },
  "test035306" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035306() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test035306"
  },
  "test1531301" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531301() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test1531301"
  },
  "test035305" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035305() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test035305"
  },
  "test1531302" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531302() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1531302"
  },
  "test035308" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035308() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test035308"
  },
  "test1531303" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531303() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1531303"
  },
  "test035307" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035307() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('z');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test035307"
  },
  "test1531304" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531304() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1531304"
  },
  "test1531305" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531305() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1531305"
  },
  "test1531306" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531306() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('z');\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1531306"
  },
  "test095832" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095832() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test095832"
  },
  "test095831" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095831() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test095831"
  },
  "test095834" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095834() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test095834"
  },
  "test095833" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095833() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test095833"
  },
  "test095830" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095830() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('9');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat3 = cSVFormat2.withHeaderComments(objectArray0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test095830"
  },
  "test1571333" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    boolean boolean0 = cSVFormat1.getTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1571333"
  },
  "test1571332" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    boolean boolean0 = cSVFormat1.getTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1571332"
  },
  "test1571335" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    boolean boolean0 = cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1571335"
  },
  "test1571334" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    boolean boolean0 = cSVFormat1.getTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1571334"
  },
  "test1571336" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    boolean boolean0 = cSVFormat1.getTrailingDelimiter();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1571336"
  },
  "test00862" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00862() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00862"
  },
  "test00863" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00863() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00863"
  },
  "test00861" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00861() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00861"
  },
  "test00866" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00866() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test00866"
  },
  "test00867" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00867() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test00867"
  },
  "test00864" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00864() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00864"
  },
  "test00865" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00865() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00865"
  },
  "test032289" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test032289"
  },
  "test2261550" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2261550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2261550"
  },
  "test00868" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00868() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00868"
  },
  "test032288" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test032288"
  },
  "test032287" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test032287"
  },
  "test032286" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032286() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test032286"
  },
  "test2261553" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2261553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2261553"
  },
  "test032285" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032285() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test032285"
  },
  "test2261551" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2261551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2261551"
  },
  "test2261552" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2261552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    String string0 = cSVFormat0.toString();\n}",
    "testName" : "test2261552"
  },
  "test032290" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('(');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test032290"
  },
  "test2531709" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531709() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2531709"
  },
  "test2531708" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531708() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2531708"
  },
  "test2531707" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531707() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2531707"
  },
  "test2531706" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531706() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2531706"
  },
  "test2111507" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2111507() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2111507"
  },
  "test043366" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043366() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test043366"
  },
  "test043367" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043367() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test043367"
  },
  "test043364" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043364() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test043364"
  },
  "test043365" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043365() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test043365"
  },
  "test043363" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043363() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test043363"
  },
  "test2071499" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071499() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2071499"
  },
  "test2071498" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071498() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2071498"
  },
  "test2071497" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071497() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2071497"
  },
  "test2071496" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071496() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2071496"
  },
  "test2071495" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071495() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2071495"
  },
  "test2071494" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2071494() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2071494"
  },
  "test1551325" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1551325"
  },
  "test1551326" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1551326"
  },
  "test2491668" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491668() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2491668"
  },
  "test2491669" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491669() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2491669"
  },
  "test1551321" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551321() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1551321"
  },
  "test2491666" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2491666"
  },
  "test1551322" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1551322"
  },
  "test2491667" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491667() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2491667"
  },
  "test1551323" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1551323"
  },
  "test2491664" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2491664"
  },
  "test1551324" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1551324"
  },
  "test2491665" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2491665"
  },
  "test2281562" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2281562() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    Character character0 = new Character('[');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withQuote(character0);\n    cSVFormat1.print((Object) \"Hc.NK\\\"] \", (Appendable) null, true);\n}",
    "testName" : "test2281562"
  },
  "test2491673" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491673() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2491673"
  },
  "test2491671" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491671() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2491671"
  },
  "test2491672" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491672() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2491672"
  },
  "test1551318" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551318() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1551318"
  },
  "test2531710" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531710() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2531710"
  },
  "test1551319" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1551319"
  },
  "test2491670" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2491670() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2491670"
  },
  "test1761427" : {
    "methodSignature" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
    "methodName" : "printRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Object[] objectArray0 = new Object[4];\n    objectArray0[0] = (Object) cSVFormat0;\n    Charset charset0 = Charset.defaultCharset();\n    ByteBuffer byteBuffer0 = ByteBuffer.allocate(44);\n    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);\n    cSVFormat0.printRecord(charBuffer0, objectArray0);\n}",
    "testName" : "test1761427"
  },
  "test1551320" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551320() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1551320"
  },
  "test1201027" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201027() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"r;FMG6%'p`{&g\");\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1201027"
  },
  "test1201026" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201026() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"r;FMG6%'p`{&g\");\n    Character character0 = new Character('M');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1201026"
  }
}