focal_method,test_prefix,docstring
"public long getRecordNumber() {
    return recordNumber;
}","public void test000() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(2494);
    hashMap0.put(""tblJU6"", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""ox~i"", (-750L));
    boolean boolean0 = cSVRecord0.isSet(""tblJU6"");
    assertEquals((-750L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public boolean isSet(final String name) {
    return isMapped(name) && mapping.get(name).intValue() < values.length;
}","public void test001() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(2494);
    hashMap0.put(""tblJU6"", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""ox~i"", (-750L));
    boolean boolean0 = cSVRecord0.isSet(""tblJU6"");
    assertFalse(boolean0);
}","/**
 * Checks whether a given columns is mapped and has a value.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return whether a given columns is mapped.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test012() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-1));
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ""]9rX"", 82L);
    boolean boolean0 = cSVRecord0.isConsistent();
    assertEquals(82L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public boolean isConsistent() {
    return mapping == null ? true : mapping.size() == values.length;
}","public void test013() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer((-1));
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ""]9rX"", 82L);
    boolean boolean0 = cSVRecord0.isConsistent();
    assertFalse(boolean0);
}","/**
 * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to
 * the header size. Some programs can export files that fails this test but still produce parsable files.
 *
 * @return true of this record is valid, false if not
 * @see CSVParserTest#org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()
 */"
"String[] values() {
    return values;
}","public void test024() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, """", 0L);
    String[] stringArray0 = cSVRecord0.values();
    assertEquals(0, stringArray0.length);
}",""
"public long getRecordNumber() {
    return recordNumber;
}","public void test035() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, """", (-1L));
    cSVRecord0.size();
    assertEquals((-1L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test046() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""24G>O&M1HLKqj"", 0L);
    long long0 = cSVRecord0.getRecordNumber();
    assertEquals(0L, long0);
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test057() throws Throwable {
    String[] stringArray0 = new String[4];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""'V"", 570L);
    long long0 = cSVRecord0.getRecordNumber();
    assertEquals(570L, long0);
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test068() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, (-1L));
    cSVRecord0.getComment();
    assertEquals((-1L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public String getComment() {
    return comment;
}","public void test079() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, """", 0L);
    String string0 = cSVRecord0.getComment();
    assertEquals("""", string0);
}","/**
 * Returns the comment for this record, if any.
 *
 * @return the comment for this record, or null if no comment for this
 *         record is available.
 */"
"public String get(final String name) {
    if (mapping == null) {
        throw new IllegalStateException(""No header mapping was specified, the record values can't be accessed by name"");
    }
    final Integer index = mapping.get(name);
    return index != null ? values[index.intValue()] : null;
}","public void test0810() throws Throwable {
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""24G>O&M1HLKqj"";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put(""24G>O&M1HLKqj"", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""24G>O&M1HLKqj"", 0L);
    String string0 = cSVRecord0.get(""24G>O&M1HLKqj"");
    assertEquals(""24G>O&M1HLKqj"", string0);
}","/**
 * Returns a value by name.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return the column value, or {@code null} if the column name is not found
 * @throws IllegalStateException
 *             if no header mapping was provided
 * @throws IllegalArgumentException
 *             if the record is inconsistent
 * @see #isConsistent()
 */"
"public String get(final String name) {
    if (mapping == null) {
        throw new IllegalStateException(""No header mapping was specified, the record values can't be accessed by name"");
    }
    final Integer index = mapping.get(name);
    return index != null ? values[index.intValue()] : null;
}","public void test0911() throws Throwable {
    String[] stringArray0 = new String[3];
    stringArray0[0] = """";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 0L);
    String string0 = cSVRecord0.get("""");
    assertEquals("""", string0);
}","/**
 * Returns a value by name.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return the column value, or {@code null} if the column name is not found
 * @throws IllegalStateException
 *             if no header mapping was provided
 * @throws IllegalArgumentException
 *             if the record is inconsistent
 * @see #isConsistent()
 */"
"public String get(final int i) {
    return values[i];
}","public void test1012() throws Throwable {
    String[] stringArray0 = new String[3];
    stringArray0[1] = ""d_tp*3?d"";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1, 1578.9357F);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""!"", 0L);
    String string0 = cSVRecord0.get(1);
    assertEquals(""d_tp*3?d"", string0);
}","/**
 * Returns a value by index.
 *
 * @param i
 *            a column index (0-based)
 * @return the String at the given index
 */"
"public String get(final int i) {
    return values[i];
}","public void test1113() throws Throwable {
    String[] stringArray0 = new String[3];
    stringArray0[0] = """";
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 0L);
    String string0 = cSVRecord0.get(0);
    assertEquals("""", string0);
}","/**
 * Returns a value by index.
 *
 * @param i
 *            a column index (0-based)
 * @return the String at the given index
 */"
"public boolean isSet(final String name) {
    return isMapped(name) && mapping.get(name).intValue() < values.length;
}","public void test1214() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    hashMap0.put("""", (Integer) null);
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, (-1L));
    // Undeclared exception!
    try {
        cSVRecord0.isSet("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}","/**
 * Checks whether a given columns is mapped and has a value.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return whether a given columns is mapped.
 */"
"public String get(final String name) {
    if (mapping == null) {
        throw new IllegalStateException(""No header mapping was specified, the record values can't be accessed by name"");
    }
    final Integer index = mapping.get(name);
    return index != null ? values[index.intValue()] : null;
}","public void test1315() throws Throwable {
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, """", 2103L);
    // Undeclared exception!
    try {
        cSVRecord0.get("""");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}","/**
 * Returns a value by name.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return the column value, or {@code null} if the column name is not found
 * @throws IllegalStateException
 *             if no header mapping was provided
 * @throws IllegalArgumentException
 *             if the record is inconsistent
 * @see #isConsistent()
 */"
"public String get(final int i) {
    return values[i];
}","public void test1416() throws Throwable {
    String[] stringArray0 = new String[10];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""h8B|J=>/"", (-24));
    // Undeclared exception!
    try {
        cSVRecord0.get((-24));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -24
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}","/**
 * Returns a value by index.
 *
 * @param i
 *            a column index (0-based)
 * @return the String at the given index
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test1517() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""zf3"", (-734L));
    cSVRecord0.isMapped(""zf3"");
    assertEquals((-734L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test1618() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""@A~]A"", 1L);
    boolean boolean0 = cSVRecord0.isMapped("""");
    assertEquals(1L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public boolean isMapped(final String name) {
    return mapping != null ? mapping.containsKey(name) : false;
}","public void test1619() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    Integer integer0 = new Integer(0);
    hashMap0.put("""", integer0);
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""@A~]A"", 1L);
    boolean boolean0 = cSVRecord0.isMapped("""");
    assertTrue(boolean0);
}","/**
 * Checks whether a given column is mapped.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return whether a given columns is mapped.
 */"
"public boolean isSet(final String name) {
    return isMapped(name) && mapping.get(name).intValue() < values.length;
}","public void test1720() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""zf3"", (-734L));
    Integer integer0 = new Integer(0);
    hashMap0.put((String) null, integer0);
    boolean boolean0 = cSVRecord0.isSet((String) null);
    assertFalse(boolean0);
}","/**
 * Checks whether a given columns is mapped and has a value.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return whether a given columns is mapped.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test1721() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""zf3"", (-734L));
    Integer integer0 = new Integer(0);
    hashMap0.put((String) null, integer0);
    boolean boolean0 = cSVRecord0.isSet((String) null);
    assertEquals((-734L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public boolean isSet(final String name) {
    return isMapped(name) && mapping.get(name).intValue() < values.length;
}","public void test1822() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    Integer integer0 = new Integer(0);
    hashMap0.put(""Ki=[~{)k5vRN|Uq=a\""H"", integer0);
    boolean boolean0 = cSVRecord0.isSet(""Ki=[~{)k5vRN|Uq=a\""H"");
    assertTrue(boolean0);
}","/**
 * Checks whether a given columns is mapped and has a value.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return whether a given columns is mapped.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test1823() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    Integer integer0 = new Integer(0);
    hashMap0.put(""Ki=[~{)k5vRN|Uq=a\""H"", integer0);
    boolean boolean0 = cSVRecord0.isSet(""Ki=[~{)k5vRN|Uq=a\""H"");
    assertEquals(2032L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public boolean isSet(final String name) {
    return isMapped(name) && mapping.get(name).intValue() < values.length;
}","public void test1924() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    boolean boolean0 = cSVRecord0.isSet(""Ki=[~{)k5vRN|Uq=a\""H"");
    assertFalse(boolean0);
}","/**
 * Checks whether a given columns is mapped and has a value.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return whether a given columns is mapped.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test1925() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    boolean boolean0 = cSVRecord0.isSet(""Ki=[~{)k5vRN|Uq=a\""H"");
    assertEquals(2032L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test2026() throws Throwable {
    String[] stringArray0 = new String[8];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, """", 2512L);
    boolean boolean0 = cSVRecord0.isMapped("""");
    assertEquals(2512L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public boolean isMapped(final String name) {
    return mapping != null ? mapping.containsKey(name) : false;
}","public void test2027() throws Throwable {
    String[] stringArray0 = new String[8];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, """", 2512L);
    boolean boolean0 = cSVRecord0.isMapped("""");
    assertFalse(boolean0);
}","/**
 * Checks whether a given column is mapped.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return whether a given columns is mapped.
 */"
"public boolean isConsistent() {
    return mapping == null ? true : mapping.size() == values.length;
}","public void test2128() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    assertFalse(cSVRecord0.isConsistent());
}","/**
 * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to
 * the header size. Some programs can export files that fails this test but still produce parsable files.
 *
 * @return true of this record is valid, false if not
 * @see CSVParserTest#org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()
 */"
"public boolean isConsistent() {
    return mapping == null ? true : mapping.size() == values.length;
}","public void test2129() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    Integer integer0 = new Integer(0);
    hashMap0.put(""Ki=[~{)k5vRN|Uq=a\""H"", integer0);
    boolean boolean0 = cSVRecord0.isConsistent();
    assertTrue(boolean0);
}","/**
 * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to
 * the header size. Some programs can export files that fails this test but still produce parsable files.
 *
 * @return true of this record is valid, false if not
 * @see CSVParserTest#org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()
 */"
"public boolean isConsistent() {
    return mapping == null ? true : mapping.size() == values.length;
}","public void test2230() throws Throwable {
    String[] stringArray0 = new String[30];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, stringArray0[8], 0L);
    boolean boolean0 = cSVRecord0.isConsistent();
    assertTrue(boolean0);
}","/**
 * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to
 * the header size. Some programs can export files that fails this test but still produce parsable files.
 *
 * @return true of this record is valid, false if not
 * @see CSVParserTest#org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test2331() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    boolean boolean0 = cSVRecord0.isConsistent();
    assertEquals(2032L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public boolean isConsistent() {
    return mapping == null ? true : mapping.size() == values.length;
}","public void test2332() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    boolean boolean0 = cSVRecord0.isConsistent();
    assertFalse(boolean0);
}","/**
 * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to
 * the header size. Some programs can export files that fails this test but still produce parsable files.
 *
 * @return true of this record is valid, false if not
 * @see CSVParserTest#org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test2433() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    Integer integer0 = new Integer(0);
    hashMap0.put(""Ki=[~{)k5vRN|Uq=a\""H"", integer0);
    cSVRecord0.get(""Ki=[~{)k5vRN|Uq=a\""H"");
    assertEquals(2032L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public String get(final String name) {
    if (mapping == null) {
        throw new IllegalStateException(""No header mapping was specified, the record values can't be accessed by name"");
    }
    final Integer index = mapping.get(name);
    return index != null ? values[index.intValue()] : null;
}","public void test2534() throws Throwable {
    String[] stringArray0 = new String[8];
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, """", 2512L);
    // Undeclared exception!
    try {
        cSVRecord0.get("""");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // No header mapping was specified, the record values can't be accessed by name
        //
        verifyException(""org.apache.commons.csv.CSVRecord"", e);
    }
}","/**
 * Returns a value by name.
 *
 * @param name
 *            the name of the column to be retrieved.
 * @return the column value, or {@code null} if the column name is not found
 * @throws IllegalStateException
 *             if no header mapping was provided
 * @throws IllegalArgumentException
 *             if the record is inconsistent
 * @see #isConsistent()
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test2635() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""zf3"", (-734L));
    cSVRecord0.get(""org.apache.commons.csv.CSVRecord"");
    assertEquals((-734L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test2736() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""ox~i"", (-750L));
    cSVRecord0.size();
    assertEquals((-750L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test2837() throws Throwable {
    String[] stringArray0 = new String[10];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""h8B|J=>/"", (-24));
    long long0 = cSVRecord0.getRecordNumber();
    assertEquals((-24L), long0);
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public String get(final int i) {
    return values[i];
}","public void test2938() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, """", 0L);
    String string0 = cSVRecord0.get(1);
    assertNull(string0);
}","/**
 * Returns a value by index.
 *
 * @param i
 *            a column index (0-based)
 * @return the String at the given index
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test3039() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""ox~i"", (-750L));
    String[] stringArray1 = cSVRecord0.values();
    assertEquals((-750L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"String[] values() {
    return values;
}","public void test3040() throws Throwable {
    String[] stringArray0 = new String[2];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""ox~i"", (-750L));
    String[] stringArray1 = cSVRecord0.values();
    assertEquals(2, stringArray1.length);
}",""
"public long getRecordNumber() {
    return recordNumber;
}","public void test3141() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""zf3"", (-734L));
    cSVRecord0.toString();
    assertEquals((-734L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test3242() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    cSVRecord0.getComment();
    assertEquals(2032L, cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
"public int size() {
    return values.length;
}","public void test3243() throws Throwable {
    String[] stringArray0 = new String[1];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""Ki=[~{)k5vRN|Uq=a\""H"", 2032L);
    cSVRecord0.getComment();
    assertEquals(1, cSVRecord0.size());
}","/**
 * Returns the number of values in this record.
 *
 * @return the number of values.
 */"
"public long getRecordNumber() {
    return recordNumber;
}","public void test3344() throws Throwable {
    String[] stringArray0 = new String[0];
    HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
    CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ""zf3"", (-734L));
    cSVRecord0.iterator();
    assertEquals((-734L), cSVRecord0.getRecordNumber());
}","/**
 * Returns the number of this record in the parsed CSV file.
 *
 * @return the number of this record.
 */"
