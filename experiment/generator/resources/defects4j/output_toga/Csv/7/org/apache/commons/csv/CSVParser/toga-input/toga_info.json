{
  "test1212" : {
    "methodSignature" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Character character0 = Character.valueOf('f');\n    Quote quote0 = Quote.MINIMAL;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat0 = new CSVFormat('d', character0, quote0, character0, character0, false, true, \"C;Sb^XM}1e(abVox2Zo\", (String) null, stringArray0, false);\n    CSVParser.parse(\"C;Sb^XM}1e(abVox2Zo\", cSVFormat0);\n}",
    "testName" : "test1212"
  },
  "test3335" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3335() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"bO\");\n    Character character0 = Character.valueOf('*');\n    Quote quote0 = Quote.ALL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat0 = new CSVFormat('$', character0, quote0, (Character) '\\u0000', character0, true, true, \"bO\", \"Bl\", stringArray0, true);\n    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);\n    Map<String, Integer> map0 = cSVParser0.getHeaderMap();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3335"
  },
  "test1313" : {
    "methodSignature" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    CSVParser.parse(\"Q$OInPz[|:#B#1.dwn\", (CSVFormat) null);\n}",
    "testName" : "test1313"
  },
  "test3436" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3436() throws Throwable {\n    Character character0 = new Character('d');\n    Quote quote0 = Quote.NONE;\n    CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, true, true, \"R3XhkI<Ri}R{/A1Kq\", \"R3XhkI<Ri}R{/A1Kq\", (String[]) null, true);\n    CSVParser cSVParser0 = CSVParser.parse(\"R3XhkI<Ri}R{/A1Kq\", cSVFormat0);\n    cSVParser0.getRecords();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3436"
  },
  "test1010" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVParser.parse((URL) null, charset0, cSVFormat0);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"Parameter '\", \"MINIMAL\");\n    File file0 = MockFile.createTempFile(\" ?g\", \" ?g\", (File) mockFile0);\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    cSVParser0.close();\n}",
    "testName" : "test2121"
  },
  "test3232" : {
    "methodSignature" : "public <T extends Collection<CSVRecord>> T getRecords(T records) throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"bO\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.close();\n    cSVParser0.getRecords((LinkedList<CSVRecord>) null);\n}",
    "testName" : "test3232"
  },
  "test1111" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('2');\n    URL uRL0 = MockURL.getHttpExample();\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test1111"
  },
  "test3334" : {
    "methodSignature" : "public Map<String, Integer> getHeaderMap()",
    "methodName" : "getHeaderMap",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3334() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"bO\");\n    Character character0 = Character.valueOf('*');\n    Quote quote0 = Quote.ALL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat0 = new CSVFormat('$', character0, quote0, (Character) '\\u0000', character0, true, true, \"bO\", \"Bl\", stringArray0, true);\n    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);\n    Map<String, Integer> map0 = cSVParser0.getHeaderMap();\n}",
    "testName" : "test3334"
  },
  "test011" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    URL uRL0 = MockURL.getHttpExample();\n    Charset charset0 = Charset.defaultCharset();\n    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(\"http://www.someFakeButWellFormedURL.org/fooExample\");\n    NetworkHandling.createRemoteTextFile(evoSuiteURL0, \"bzosynjay]c\\\"<cjji\");\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('%');\n    CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\", cSVFormat1);\n    cSVParser0.nextRecord();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public boolean isClosed()",
    "methodName" : "isClosed",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\";97;ZK9g9W%|~dI.B\", cSVFormat0);\n    cSVParser0.close();\n    boolean boolean0 = cSVParser0.isClosed();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse(\"org.apache.commons.csv.CSVParser\", cSVFormat0);\n    cSVParser0.nextRecord();\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public long getCurrentLineNumber()",
    "methodName" : "getCurrentLineNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('8');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);\n    StringReader stringReader0 = new StringReader(\"8K:uH!LAFS\\\"L~maJ\");\n    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);\n    cSVParser0.getRecords();\n    long long0 = cSVParser0.getCurrentLineNumber();\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public static CSVParser parse(final File file, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser.parse((File) null, cSVFormat0);\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "public boolean isClosed()",
    "methodName" : "isClosed",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"bO\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    boolean boolean0 = cSVParser0.isClosed();\n}",
    "testName" : "test2727"
  },
  "test3739" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3739() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    File file0 = MockFile.createTempFile(\"c79\\nYt$6%kn.\", \"c79\\nYt$6%kn.\");\n    URL uRL0 = file0.toURL();\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test3739"
  },
  "test1717" : {
    "methodSignature" : "public static CSVParser parse(final File file, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    File file0 = MockFile.createTempFile(\") invalid char between encapsulated token and delimiter\", \") invalid char between encapsulated token and delimiter\");\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    CSVParser.parse(file0, cSVFormat1);\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"bO\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.close();\n    cSVParser0.forEach(consumer0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    char[] charArray0 = new char[7];\n    charArray0[0] = ')';\n    Quote quote0 = Quote.ALL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat0 = new CSVFormat('#', (Character) charArray0[1], quote0, (Character) charArray0[0], (Character) charArray0[1], true, true, \"(line \", \"il\", stringArray0, true);\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('g');\n    CSVParser.parse(\"g`~\", cSVFormat1);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public <T extends Collection<CSVRecord>> T getRecords(T records) throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\"CbX0>ls{(uW\\\"U(3Kh\", cSVFormat0);\n    cSVParser0.getRecords((LinkedList<CSVRecord>) null);\n}",
    "testName" : "test2525"
  },
  "test3537" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse(\"c79\\nYt$6%kn.\", cSVFormat0);\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test3537"
  },
  "test1515" : {
    "methodSignature" : "public static CSVParser parse(final File file, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    File file0 = MockFile.createTempFile(\"+'9,vz!Fg?*B'\", \"50na=\");\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('T');\n    CSVParser.parse(file0, cSVFormat1);\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "public <T extends Collection<CSVRecord>> T getRecords(T records) throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    Collection<CSVRecord> collection0 = cSVParser0.getRecords((Collection<CSVRecord>) null);\n}",
    "testName" : "test2626"
  },
  "test3638" : {
    "methodSignature" : "public long getCurrentLineNumber()",
    "methodName" : "getCurrentLineNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"charset\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    long long0 = cSVParser0.getCurrentLineNumber();\n}",
    "testName" : "test3638"
  },
  "test3030" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\"Delimiter=<,> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SkipHeaderRecord:false\", cSVFormat1);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "public List<CSVRecord> getRecords() throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"5_`>{\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.close();\n    cSVParser0.getRecords();\n}",
    "testName" : "test2020"
  },
  "test3131" : {
    "methodSignature" : "public Map<String, Integer> getHeaderMap()",
    "methodName" : "getHeaderMap",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse(\"c79\\nYt$6%kn.\", cSVFormat0);\n    Map<String, Integer> map0 = cSVParser0.getHeaderMap();\n}",
    "testName" : "test3131"
  },
  "test3840" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3840() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"bO\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3840"
  },
  "test022" : {
    "methodSignature" : "CSVRecord nextRecord() throws IOException",
    "methodName" : "nextRecord",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    CSVRecord cSVRecord0 = cSVParser0.nextRecord();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public Iterator<CSVRecord> iterator()",
    "methodName" : "iterator",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"6l'ZbrAb(756\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    Iterator<CSVRecord> iterator0 = cSVParser0.iterator();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public <T extends Collection<CSVRecord>> T getRecords(T records) throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse(\"7?5Gy( ^zNH,zj\\\"c\", cSVFormat0);\n    LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();\n    LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);\n}",
    "testName" : "test066"
  },
  "test1818" : {
    "methodSignature" : "public static CSVParser parse(final File file, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"\");\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser.parse((File) mockFile0, cSVFormat0);\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\";97;ZK9g9W%|~dI.B\", cSVFormat1);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "CSVRecord nextRecord() throws IOException",
    "methodName" : "nextRecord",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\";97;ZK9g9W%|~dI.B\", cSVFormat0);\n    cSVParser0.close();\n    cSVParser0.nextRecord();\n}",
    "testName" : "test1919"
  }
}