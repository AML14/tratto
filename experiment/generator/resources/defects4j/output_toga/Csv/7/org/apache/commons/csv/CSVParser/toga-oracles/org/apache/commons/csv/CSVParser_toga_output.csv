project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Charset charset0 = Charset.defaultCharset();
    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""http://www.someFakeButWellFormedURL.org/fooExample"");
    NetworkHandling.createRemoteTextFile(evoSuiteURL0, ""bzosynjay]c\""<cjji"");
    CSVFormat cSVFormat0 = CSVFormat.newFormat('%');
    CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,
project,0,test022,"public void test022() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader("""");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    assertNull(cSVRecord0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = CSVParser.parse(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"", cSVFormat1);
    cSVParser0.nextRecord();
    assertEquals(2L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test044,"public void test044() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""6l'ZbrAb(756"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
    assertNotNull(iterator0);
}",1,
project,0,test055,"public void test055() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVParser cSVParser0 = CSVParser.parse("";97;ZK9g9W%|~dI.B"", cSVFormat0);
    cSVParser0.close();
    boolean boolean0 = cSVParser0.isClosed();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test066,"public void test066() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVParser cSVParser0 = CSVParser.parse(""7?5Gy( ^zNH,zj\""c"", cSVFormat0);
    LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();
    LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);
    assertSame(linkedList0, linkedList1);
}",0,
project,0,test077,"public void test077() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVParser cSVParser0 = CSVParser.parse(""org.apache.commons.csv.CSVParser"", cSVFormat0);
    cSVParser0.nextRecord();
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test099,"public void test099() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('8');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar((Character) null);
    StringReader stringReader0 = new StringReader(""8K:uH!LAFS\""L~maJ"");
    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat2);
    cSVParser0.getRecords();
    long long0 = cSVParser0.getCurrentLineNumber();
    assertEquals(1L, long0);
}",0,"assertEquals(1, long0)"
project,0,test1010,"public void test1010() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    // Undeclared exception!
    try {
        CSVParser.parse((URL) null, charset0, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'url' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('2');
    URL uRL0 = MockURL.getHttpExample();
    Charset charset0 = Charset.defaultCharset();
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not find: www.someFakeButWellFormedURL.org
        //
        verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    Character character0 = Character.valueOf('f');
    Quote quote0 = Quote.MINIMAL;
    String[] stringArray0 = new String[4];
    CSVFormat cSVFormat0 = new CSVFormat('d', character0, quote0, character0, character0, false, true, ""C;Sb^XM}1e(abVox2Zo"", (String) null, stringArray0, false);
    // Undeclared exception!
    try {
        CSVParser.parse(""C;Sb^XM}1e(abVox2Zo"", cSVFormat0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('f')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    // Undeclared exception!
    try {
        CSVParser.parse(""Q$OInPz[|:#B#1.dwn"", (CSVFormat) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'format' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    char[] charArray0 = new char[7];
    charArray0[0] = ')';
    Quote quote0 = Quote.ALL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat0 = new CSVFormat('#', (Character) charArray0[1], quote0, (Character) charArray0[0], (Character) charArray0[1], true, true, ""(line "", ""il"", stringArray0, true);
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('g');
    try {
        CSVParser.parse(""g`~"", cSVFormat1);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (startline 1) EOF reached before encapsulated token finished
        //
        verifyException(""org.apache.commons.csv.Lexer"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    File file0 = MockFile.createTempFile(""+'9,vz!Fg?*B'"", ""50na="");
    CSVFormat cSVFormat0 = CSVFormat.newFormat('T');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('T');
    // Undeclared exception!
    try {
        CSVParser.parse(file0, cSVFormat1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The escape character and the delimiter cannot be the same ('T')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        CSVParser.parse((File) null, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'file' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    File file0 = MockFile.createTempFile("") invalid char between encapsulated token and delimiter"", "") invalid char between encapsulated token and delimiter"");
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    FileSystemHandling.shouldAllThrowIOExceptions();
    try {
        CSVParser.parse(file0, cSVFormat1);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Simulated IOException
        //
        verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    try {
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",1,
project,0,test1919,"public void test1919() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVParser cSVParser0 = CSVParser.parse("";97;ZK9g9W%|~dI.B"", cSVFormat0);
    cSVParser0.close();
    try {
        cSVParser0.nextRecord();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedReader"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    StringReader stringReader0 = new StringReader(""5_`>{"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.close();
    try {
        cSVParser0.getRecords();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedReader"", e);
    }
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    MockFile mockFile0 = new MockFile(""Parameter '"", ""MINIMAL"");
    File file0 = MockFile.createTempFile("" ?g"", "" ?g"", (File) mockFile0);
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
    FileSystemHandling.shouldAllThrowIOExceptions();
    try {
        cSVParser0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Simulated IOException
        //
        verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
    }
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVParser cSVParser0 = CSVParser.parse(""CbX0>ls{(uW\""U(3Kh"", cSVFormat0);
    // Undeclared exception!
    try {
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVParser"", e);
    }
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    Collection<CSVRecord> collection0 = cSVParser0.getRecords((Collection<CSVRecord>) null);
    assertNull(collection0);
}",0,assertNotNull(collection0)
project,0,test2727,"public void test2727() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""bO"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    boolean boolean0 = cSVParser0.isClosed();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2828,"public void test2828() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""bO"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.close();
    cSVParser0.forEach(consumer0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test2929,"public void test2929() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = CSVParser.parse("";97;ZK9g9W%|~dI.B"", cSVFormat1);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,"assertEquals(1, cSVParser0.getRecordNumber())"
project,0,test3030,"public void test3030() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = CSVParser.parse(""Delimiter=<,> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"", cSVFormat1);
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test3131,"public void test3131() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVParser cSVParser0 = CSVParser.parse(""c79\nYt$6%kn."", cSVFormat0);
    Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    assertNull(map0);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""bO"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.close();
    try {
        cSVParser0.getRecords((LinkedList<CSVRecord>) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedReader"", e);
    }
}",0,
project,0,test3334,"public void test3334() throws Throwable {
    StringReader stringReader0 = new StringReader(""bO"");
    Character character0 = Character.valueOf('*');
    Quote quote0 = Quote.ALL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat0 = new CSVFormat('$', character0, quote0, (Character) '\u0000', character0, true, true, ""bO"", ""Bl"", stringArray0, true);
    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
    Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    assertNotNull(map0);
}",0,assertNotNull(map0)
project,0,test3335,"public void test3335() throws Throwable {
    StringReader stringReader0 = new StringReader(""bO"");
    Character character0 = Character.valueOf('*');
    Quote quote0 = Quote.ALL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat0 = new CSVFormat('$', character0, quote0, (Character) '\u0000', character0, true, true, ""bO"", ""Bl"", stringArray0, true);
    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
    Map<String, Integer> map0 = cSVParser0.getHeaderMap();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test3436,"public void test3436() throws Throwable {
    Character character0 = new Character('d');
    Quote quote0 = Quote.NONE;
    CSVFormat cSVFormat0 = new CSVFormat('s', character0, quote0, (Character) null, character0, true, true, ""R3XhkI<Ri}R{/A1Kq"", ""R3XhkI<Ri}R{/A1Kq"", (String[]) null, true);
    CSVParser cSVParser0 = CSVParser.parse(""R3XhkI<Ri}R{/A1Kq"", cSVFormat0);
    cSVParser0.getRecords();
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
project,0,test3537,"public void test3537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVParser cSVParser0 = CSVParser.parse(""c79\nYt$6%kn."", cSVFormat0);
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(0L, long0);
}",0,"assertEquals(1, long0)"
project,0,test3638,"public void test3638() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    StringReader stringReader0 = new StringReader(""charset"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    long long0 = cSVParser0.getCurrentLineNumber();
    assertEquals(0L, long0);
}",1,
project,0,test3739,"public void test3739() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    File file0 = MockFile.createTempFile(""c79\nYt$6%kn."", ""c79\nYt$6%kn."");
    URL uRL0 = file0.toURL();
    Charset charset0 = Charset.defaultCharset();
    // Undeclared exception!
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}",0,
project,0,test3840,"public void test3840() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    StringReader stringReader0 = new StringReader(""bO"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}",0,"assertEquals(0, cSVParser0.getRecordNumber())"
