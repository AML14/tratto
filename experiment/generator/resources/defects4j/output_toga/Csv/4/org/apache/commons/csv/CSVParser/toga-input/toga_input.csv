focal_method,test_prefix,docstring
"CSVRecord nextRecord() throws IOException {
    CSVRecord result = null;
    this.record.clear();
    StringBuilder sb = null;
    do {
        this.reusableToken.reset();
        this.lexer.nextToken(this.reusableToken);
        switch(this.reusableToken.type) {
            case TOKEN:
                this.addRecordValue();
                break;
            case EORECORD:
                this.addRecordValue();
                break;
            case EOF:
                if (this.reusableToken.isReady) {
                    this.addRecordValue();
                }
                break;
            case INVALID:
                throw new IOException(""(line "" + this.getCurrentLineNumber() + "") invalid parse sequence"");
            case // Ignored currently
            COMMENT:
                if (sb == null) {
                    // first comment for this record
                    sb = new StringBuilder();
                } else {
                    sb.append(Constants.LF);
                }
                sb.append(this.reusableToken.content);
                // Read another token
                this.reusableToken.type = TOKEN;
                break;
        }
    } while (this.reusableToken.type == TOKEN);
    if (!this.record.isEmpty()) {
        this.recordNumber++;
        final String comment = sb == null ? null : sb.toString();
        result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment, this.recordNumber);
    }
    return result;
}","public void test011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    assertNull(cSVRecord0);
}","/**
 * Parses the next record from the current point in the stream.
 *
 * @return the record as an array of values, or <tt>null</tt> if the end of the stream has been reached
 * @throws IOException
 *             on parse error or input read-failure
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test022() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""p@q=v?idwm|ufx"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = CSVParser.parse(""p@q=v?idwm|ufx"", cSVFormat1);
    assertEquals(0L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public boolean isConsistent() {
    return mapping == null ? true : mapping.size() == values.length;
}","public void test023() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""p@q=v?idwm|ufx"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVParser cSVParser0 = CSVParser.parse(""p@q=v?idwm|ufx"", cSVFormat1);
    CSVRecord cSVRecord0 = cSVParser0.nextRecord();
    assertFalse(cSVRecord0.isConsistent());
}","/**
 * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to
 * the header size. Some programs can export files that fails this test but still produce parsable files.
 *
 * @return true of this record is valid, false if not
 */"
"public boolean isClosed() {
    return this.lexer.isClosed();
}","public void test034() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    cSVParser0.close();
    boolean boolean0 = cSVParser0.isClosed();
    assertTrue(boolean0);
}",""
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test056() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    StringReader stringReader0 = new StringReader(""`r`JjOw"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    cSVParser0.getRecords();
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(1L, long0);
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public long getCurrentLineNumber() {
    return this.lexer.getCurrentLineNumber();
}","public void test089() throws Throwable {
    Character character0 = Character.valueOf('4');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, """", """", stringArray0, false);
    CSVParser cSVParser0 = CSVParser.parse(""CSVParser has been closed"", cSVFormat0);
    long long0 = cSVParser0.getCurrentLineNumber();
    assertEquals(1L, long0);
}","/**
 * Returns the current line number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the record number.
 *
 * @return current line number
 */"
"public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException {
    Assertions.notNull(url, ""url"");
    Assertions.notNull(charset, ""charset"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new InputStreamReader(url.openStream(), charset == null ? Charset.forName(""UTF-8"") : charset), format);
}","public void test0910() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    URL uRL0 = MockURL.getFileExample();
    Charset charset0 = Charset.defaultCharset();
    // Undeclared exception!
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.net.URL"", e);
    }
}","/**
 * Creates a parser for the given URL.
 *
 * <p>
 * If you do not read all records from the given {@code url}, you should call {@link #close()} on the parser, unless
 * you close the {@code url}.
 * </p>
 *
 * @param url
 *            a URL. Must not be null.
 * @param charset
 *            the charset for the resource. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either url, charset or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException {
    Assertions.notNull(url, ""url"");
    Assertions.notNull(charset, ""charset"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new InputStreamReader(url.openStream(), charset == null ? Charset.forName(""UTF-8"") : charset), format);
}","public void test1011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    URL uRL0 = MockURL.getFtpExample();
    // Undeclared exception!
    try {
        CSVParser.parse(uRL0, (Charset) null, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'charset' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}","/**
 * Creates a parser for the given URL.
 *
 * <p>
 * If you do not read all records from the given {@code url}, you should call {@link #close()} on the parser, unless
 * you close the {@code url}.
 * </p>
 *
 * @param url
 *            a URL. Must not be null.
 * @param charset
 *            the charset for the resource. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either url, charset or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException {
    Assertions.notNull(url, ""url"");
    Assertions.notNull(charset, ""charset"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new InputStreamReader(url.openStream(), charset == null ? Charset.forName(""UTF-8"") : charset), format);
}","public void test1112() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Charset charset0 = Charset.defaultCharset();
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    try {
        CSVParser.parse(uRL0, charset0, cSVFormat0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not find: www.someFakeButWellFormedURL.org
        //
        verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
    }
}","/**
 * Creates a parser for the given URL.
 *
 * <p>
 * If you do not read all records from the given {@code url}, you should call {@link #close()} on the parser, unless
 * you close the {@code url}.
 * </p>
 *
 * @param url
 *            a URL. Must not be null.
 * @param charset
 *            the charset for the resource. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either url, charset or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public static CSVParser parse(String string, final CSVFormat format) throws IOException {
    Assertions.notNull(string, ""string"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new StringReader(string), format);
}","public void test1213() throws Throwable {
    Character character0 = new Character('W');
    Quote quote0 = Quote.MINIMAL;
    String[] stringArray0 = new String[6];
    CSVFormat cSVFormat0 = new CSVFormat(']', character0, quote0, character0, character0, false, false, ""Escape=<"", ""reader"", stringArray0, false);
    // Undeclared exception!
    try {
        CSVParser.parse(""No more CSV records available"", cSVFormat0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('W')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}","/**
 * Creates a parser for the given {@link String}.
 *
 * @param string
 *            a CSV string. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either string or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public static CSVParser parse(String string, final CSVFormat format) throws IOException {
    Assertions.notNull(string, ""string"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new StringReader(string), format);
}","public void test1314() throws Throwable {
    // Undeclared exception!
    try {
        CSVParser.parse("""", (CSVFormat) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'format' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}","/**
 * Creates a parser for the given {@link String}.
 *
 * @param string
 *            a CSV string. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either string or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public static CSVParser parse(String string, final CSVFormat format) throws IOException {
    Assertions.notNull(string, ""string"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new StringReader(string), format);
}","public void test1415() throws Throwable {
    Character character0 = Character.valueOf('\'');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, """", """", stringArray0, false);
    try {
        CSVParser.parse(""'LRS;)z"", cSVFormat0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (startline 1) EOF reached before encapsulated token finished
        //
        verifyException(""org.apache.commons.csv.Lexer"", e);
    }
}","/**
 * Creates a parser for the given {@link String}.
 *
 * @param string
 *            a CSV string. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either string or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public static CSVParser parse(File file, final CSVFormat format) throws IOException {
    Assertions.notNull(file, ""file"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new FileReader(file), format);
}","public void test1516() throws Throwable {
    File file0 = MockFile.createTempFile(""qivQG~Ob6"", """");
    Character character0 = Character.valueOf('3');
    Quote quote0 = Quote.ALL;
    String[] stringArray0 = new String[4];
    CSVFormat cSVFormat0 = new CSVFormat('k', character0, quote0, character0, character0, true, true, ""qivQG~Ob6"", """", stringArray0, false);
    // Undeclared exception!
    try {
        CSVParser.parse(file0, cSVFormat0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('3')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}","/**
 * Creates a parser for the given {@link File}.
 *
 * @param file
 *            a CSV file. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either file or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public static CSVParser parse(File file, final CSVFormat format) throws IOException {
    Assertions.notNull(file, ""file"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new FileReader(file), format);
}","public void test1617() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    // Undeclared exception!
    try {
        CSVParser.parse((File) null, cSVFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'file' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}","/**
 * Creates a parser for the given {@link File}.
 *
 * @param file
 *            a CSV file. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either file or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"CSVRecord nextRecord() throws IOException {
    CSVRecord result = null;
    this.record.clear();
    StringBuilder sb = null;
    do {
        this.reusableToken.reset();
        this.lexer.nextToken(this.reusableToken);
        switch(this.reusableToken.type) {
            case TOKEN:
                this.addRecordValue();
                break;
            case EORECORD:
                this.addRecordValue();
                break;
            case EOF:
                if (this.reusableToken.isReady) {
                    this.addRecordValue();
                }
                break;
            case INVALID:
                throw new IOException(""(line "" + this.getCurrentLineNumber() + "") invalid parse sequence"");
            case // Ignored currently
            COMMENT:
                if (sb == null) {
                    // first comment for this record
                    sb = new StringBuilder();
                } else {
                    sb.append(Constants.LF);
                }
                sb.append(this.reusableToken.content);
                // Read another token
                this.reusableToken.type = TOKEN;
                break;
        }
    } while (this.reusableToken.type == TOKEN);
    if (!this.record.isEmpty()) {
        this.recordNumber++;
        final String comment = sb == null ? null : sb.toString();
        result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment, this.recordNumber);
    }
    return result;
}","public void test1718() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);
    cSVParser0.close();
    try {
        cSVParser0.nextRecord();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedReader"", e);
    }
}","/**
 * Parses the next record from the current point in the stream.
 *
 * @return the record as an array of values, or <tt>null</tt> if the end of the stream has been reached
 * @throws IOException
 *             on parse error or input read-failure
 */"
"public List<CSVRecord> getRecords() throws IOException {
    final List<CSVRecord> records = new ArrayList<CSVRecord>();
    CSVRecord rec;
    while ((rec = this.nextRecord()) != null) {
        records.add(rec);
    }
    return records;
}","public void test1819() throws Throwable {
    Character character0 = Character.valueOf('4');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, ""string"", """", stringArray0, false);
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    cSVParser0.close();
    try {
        cSVParser0.getRecords();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedReader"", e);
    }
}","/**
 * Parses the CSV input according to the given format and returns the content as a list of
 * {@link CSVRecord CSVRecords}.
 * <p/>
 * The returned content starts at the current parse-position in the stream.
 *
 * @return list of {@link CSVRecord CSVRecords}, may be empty
 * @throws IOException
 *             on parse error or input read-failure
 */"
"public void close() throws IOException {
    if (this.lexer != null) {
        this.lexer.close();
    }
}","public void test1920() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""g8MZtXg1E)E1@qzx{/t@{gJT,0?|"");
    FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    MockFile mockFile0 = new MockFile(""g8MZtXg1E)E1@qzx{"");
    File file0 = MockFile.createTempFile(""t@{gJT,"", ""?|"", (File) mockFile0);
    CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);
    try {
        cSVParser0.close();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Simulated IOException
        //
        verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
    }
}","/**
 * Closes resources.
 *
 * @throws IOException
 *             If an I/O error occurs
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test2223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""V ykN~%xg'G"";
    stringArray0[1] = ""org.apache.commons.csv.csvrecord"";
    stringArray0[2] = ""string"";
    stringArray0[3] = ""@ms]N[hd"";
    stringArray0[4] = ""[qYO"";
    stringArray0[5] = ""IN;%,-Nk/E*ed=&`F "";
    stringArray0[7] = ""="";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
    StringReader stringReader0 = new StringReader(""\r\n"");
    CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test2425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat0);
    cSVParser0.close();
    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test2526() throws Throwable {
    Character character0 = Character.valueOf(',');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, """", """", stringArray0, false);
    StringReader stringReader0 = new StringReader(""l"");
    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test2627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""string"");
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat1);
    cSVParser0.nextRecord();
    assertEquals(1L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test2728() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""http://www.someFakeButWellFormedURL.org/fooExample"");
    NetworkHandling.createRemoteTextFile(evoSuiteURL0, ""(line "");
    URL uRL0 = MockURL.getHttpExample();
    Charset charset0 = Charset.defaultCharset();
    CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test2829() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVParser cSVParser0 = CSVParser.parse(""E0=S!pi@iL"", cSVFormat0);
    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());
    cSVParser0.forEach(consumer0);
    assertEquals(1L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public Map<String, Integer> getHeaderMap() {
    return new LinkedHashMap<String, Integer>(this.headerMap);
}","public void test2930() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat0);
    // Undeclared exception!
    try {
        cSVParser0.getHeaderMap();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.HashMap"", e);
    }
}","/**
 * Returns a copy of the header map that iterates in column order.
 * <p>
 * The map keys are column names. The map values are 0-based indices.
 * </p>
 * @return a copy of the header map that iterates in column order.
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test3031() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVParser cSVParser0 = CSVParser.parse(""nthi"", cSVFormat0);
    long long0 = cSVParser0.getRecordNumber();
    assertEquals(0L, long0);
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public long getRecordNumber() {
    return this.recordNumber;
}","public void test3132() throws Throwable {
    Character character0 = Character.valueOf('4');
    Quote quote0 = Quote.MINIMAL;
    Character character1 = new Character('C');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, ""string"", """", stringArray0, false);
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    cSVParser0.getCurrentLineNumber();
    assertEquals(0L, cSVParser0.getRecordNumber());
}","/**
 * Returns the current record number in the input stream.
 * <p/>
 * ATTENTION: If your CSV input has multi-line values, the returned number does not correspond to the line number.
 *
 * @return current line number
 */"
"public static CSVParser parse(File file, final CSVFormat format) throws IOException {
    Assertions.notNull(file, ""file"");
    Assertions.notNull(format, ""format"");
    return new CSVParser(new FileReader(file), format);
}","public void test3233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    MockFile mockFile0 = new MockFile(""E0=S!pi@iL"");
    try {
        CSVParser.parse((File) mockFile0, cSVFormat0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}","/**
 * Creates a parser for the given {@link File}.
 *
 * @param file
 *            a CSV file. Must not be null.
 * @param format
 *            the CSVFormat used for CSV parsing. Must not be null.
 * @return a new parser
 * @throws IllegalArgumentException
 *             If the parameters of the format are inconsistent or if either file or format are null.
 * @throws IOException
 *             If an I/O error occurs
 */"
"public boolean isClosed() {
    return this.lexer.isClosed();
}","public void test3334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    boolean boolean0 = cSVParser0.isClosed();
    assertFalse(boolean0);
}",""
"public Iterator<CSVRecord> iterator() {
    return new Iterator<CSVRecord>() {

        private CSVRecord current;

        private CSVRecord getNextRecord() {
            try {
                return CSVParser.this.nextRecord();
            } catch (final IOException e) {
                // TODO: This is not great, throw an ISE instead?
                throw new RuntimeException(e);
            }
        }

        public boolean hasNext() {
            if (CSVParser.this.isClosed()) {
                return false;
            }
            if (this.current == null) {
                this.current = this.getNextRecord();
            }
            return this.current != null;
        }

        public CSVRecord next() {
            if (CSVParser.this.isClosed()) {
                throw new NoSuchElementException(""CSVParser has been closed"");
            }
            CSVRecord next = this.current;
            this.current = null;
            if (next == null) {
                // hasNext() wasn't called before
                next = this.getNextRecord();
                if (next == null) {
                    throw new NoSuchElementException(""No more CSV records available"");
                }
            }
            return next;
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }
    };
}","public void test3435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVParser cSVParser0 = CSVParser.parse("""", cSVFormat0);
    Iterator<CSVRecord> iterator0 = cSVParser0.iterator();
    assertNotNull(iterator0);
}","/**
 * Returns an iterator on the records.
 *
 * <p>IOExceptions occurring during the iteration are wrapped in a
 * RuntimeException.
 * If the parser is closed a call to {@code next()} will throw a
 * NoSuchElementException.</p>
 */"
