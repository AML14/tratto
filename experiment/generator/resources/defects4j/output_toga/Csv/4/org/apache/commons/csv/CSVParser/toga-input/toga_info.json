{
  "test3435" : {
    "methodSignature" : "public Iterator<CSVRecord> iterator()",
    "methodName" : "iterator",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    Iterator<CSVRecord> iterator0 = cSVParser0.iterator();\n}",
    "testName" : "test3435"
  },
  "test1213" : {
    "methodSignature" : "public static CSVParser parse(String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    Character character0 = new Character('W');\n    Quote quote0 = Quote.MINIMAL;\n    String[] stringArray0 = new String[6];\n    CSVFormat cSVFormat0 = new CSVFormat(']', character0, quote0, character0, character0, false, false, \"Escape=<\", \"reader\", stringArray0, false);\n    CSVParser.parse(\"No more CSV records available\", cSVFormat0);\n}",
    "testName" : "test1213"
  },
  "test2425" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVParser cSVParser0 = CSVParser.parse(\"nthi\", cSVFormat0);\n    cSVParser0.close();\n    Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2425"
  },
  "test1314" : {
    "methodSignature" : "public static CSVParser parse(String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    CSVParser.parse(\"\", (CSVFormat) null);\n}",
    "testName" : "test1314"
  },
  "test3233" : {
    "methodSignature" : "public static CSVParser parse(File file, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    MockFile mockFile0 = new MockFile(\"E0=S!pi@iL\");\n    CSVParser.parse((File) mockFile0, cSVFormat0);\n}",
    "testName" : "test3233"
  },
  "test1011" : {
    "methodSignature" : "public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    URL uRL0 = MockURL.getFtpExample();\n    CSVParser.parse(uRL0, (Charset) null, cSVFormat0);\n}",
    "testName" : "test1011"
  },
  "test2223" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"V ykN~%xg'G\";\n    stringArray0[1] = \"org.apache.commons.csv.csvrecord\";\n    stringArray0[2] = \"string\";\n    stringArray0[3] = \"@ms]N[hd\";\n    stringArray0[4] = \"[qYO\";\n    stringArray0[5] = \"IN;%,-Nk/E*ed=&`F \";\n    stringArray0[7] = \"=\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    StringReader stringReader0 = new StringReader(\"\\r\\n\");\n    CSVParser cSVParser0 = cSVFormat3.parse(stringReader0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2223"
  },
  "test3334" : {
    "methodSignature" : "public boolean isClosed()",
    "methodName" : "isClosed",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    boolean boolean0 = cSVParser0.isClosed();\n}",
    "testName" : "test3334"
  },
  "test1112" : {
    "methodSignature" : "public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    URL uRL0 = MockURL.getHttpExample();\n    Charset charset0 = Charset.defaultCharset();\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test1112"
  },
  "test011" : {
    "methodSignature" : "CSVRecord nextRecord() throws IOException",
    "methodName" : "nextRecord",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    CSVRecord cSVRecord0 = cSVParser0.nextRecord();\n}",
    "testName" : "test011"
  },
  "test2728" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(\"http://www.someFakeButWellFormedURL.org/fooExample\");\n    NetworkHandling.createRemoteTextFile(evoSuiteURL0, \"(line \");\n    URL uRL0 = MockURL.getHttpExample();\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2728"
  },
  "test034" : {
    "methodSignature" : "public boolean isClosed()",
    "methodName" : "isClosed",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    cSVParser0.close();\n    boolean boolean0 = cSVParser0.isClosed();\n}",
    "testName" : "test034"
  },
  "test056" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringReader stringReader0 = new StringReader(\"`r`JjOw\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.getRecords();\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test056"
  },
  "test1617" : {
    "methodSignature" : "public static CSVParser parse(File file, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser.parse((File) null, cSVFormat0);\n}",
    "testName" : "test1617"
  },
  "test2829" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2829() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\"E0=S!pi@iL\", cSVFormat0);\n    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2829"
  },
  "test1718" : {
    "methodSignature" : "CSVRecord nextRecord() throws IOException",
    "methodName" : "nextRecord",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\");\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);\n    cSVParser0.close();\n    cSVParser0.nextRecord();\n}",
    "testName" : "test1718"
  },
  "test2526" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    Character character0 = Character.valueOf(',');\n    Quote quote0 = Quote.MINIMAL;\n    Character character1 = new Character('C');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, \"\", \"\", stringArray0, false);\n    StringReader stringReader0 = new StringReader(\"l\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2526"
  },
  "test1415" : {
    "methodSignature" : "public static CSVParser parse(String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    Character character0 = Character.valueOf('\\'');\n    Quote quote0 = Quote.MINIMAL;\n    Character character1 = new Character('C');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, \"\", \"\", stringArray0, false);\n    CSVParser.parse(\"'LRS;)z\", cSVFormat0);\n}",
    "testName" : "test1415"
  },
  "test2627" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"string\");\n    CSVParser cSVParser0 = CSVParser.parse(\"nthi\", cSVFormat1);\n    cSVParser0.nextRecord();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2627"
  },
  "test1516" : {
    "methodSignature" : "public static CSVParser parse(File file, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    File file0 = MockFile.createTempFile(\"qivQG~Ob6\", \"\");\n    Character character0 = Character.valueOf('3');\n    Quote quote0 = Quote.ALL;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat0 = new CSVFormat('k', character0, quote0, character0, character0, true, true, \"qivQG~Ob6\", \"\", stringArray0, false);\n    CSVParser.parse(file0, cSVFormat0);\n}",
    "testName" : "test1516"
  },
  "test3031" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3031() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVParser cSVParser0 = CSVParser.parse(\"nthi\", cSVFormat0);\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test3031"
  },
  "test3132" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3132() throws Throwable {\n    Character character0 = Character.valueOf('4');\n    Quote quote0 = Quote.MINIMAL;\n    Character character1 = new Character('C');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, \"string\", \"\", stringArray0, false);\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    cSVParser0.getCurrentLineNumber();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3132"
  },
  "test2930" : {
    "methodSignature" : "public Map<String, Integer> getHeaderMap()",
    "methodName" : "getHeaderMap",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2930() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVParser cSVParser0 = CSVParser.parse(\"nthi\", cSVFormat0);\n    cSVParser0.getHeaderMap();\n}",
    "testName" : "test2930"
  },
  "test022" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"p@q=v?idwm|ufx\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\"p@q=v?idwm|ufx\", cSVFormat1);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test022"
  },
  "test023" : {
    "methodSignature" : "public boolean isConsistent()",
    "methodName" : "isConsistent",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"p@q=v?idwm|ufx\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\"p@q=v?idwm|ufx\", cSVFormat1);\n    CSVRecord cSVRecord0 = cSVParser0.nextRecord();\n    cSVRecord0.isConsistent();\n}",
    "testName" : "test023"
  },
  "test089" : {
    "methodSignature" : "public long getCurrentLineNumber()",
    "methodName" : "getCurrentLineNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    Character character0 = Character.valueOf('4');\n    Quote quote0 = Quote.MINIMAL;\n    Character character1 = new Character('C');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat0 = new CSVFormat('l', character0, quote0, character1, character0, false, false, \"\", \"\", stringArray0, false);\n    CSVParser cSVParser0 = CSVParser.parse(\"CSVParser has been closed\", cSVFormat0);\n    long long0 = cSVParser0.getCurrentLineNumber();\n}",
    "testName" : "test089"
  },
  "test1920" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"g8MZtXg1E)E1@qzx{/t@{gJT,0?|\");\n    FileSystemHandling.shouldThrowIOException(evoSuiteFile0);\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    MockFile mockFile0 = new MockFile(\"g8MZtXg1E)E1@qzx{\");\n    File file0 = MockFile.createTempFile(\"t@{gJT,\", \"?|\", (File) mockFile0);\n    CSVParser cSVParser0 = CSVParser.parse(file0, cSVFormat0);\n    cSVParser0.close();\n}",
    "testName" : "test1920"
  },
  "test0910" : {
    "methodSignature" : "public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    URL uRL0 = MockURL.getFileExample();\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test0910"
  },
  "test1819" : {
    "methodSignature" : "public List<CSVRecord> getRecords() throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    Character character0 = Character.valueOf('4');\n    Quote quote0 = Quote.MINIMAL;\n    Character character1 = new Character('C');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat0 = new CSVFormat('z', character0, quote0, character1, character0, false, false, \"string\", \"\", stringArray0, false);\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    cSVParser0.close();\n    cSVParser0.getRecords();\n}",
    "testName" : "test1819"
  }
}