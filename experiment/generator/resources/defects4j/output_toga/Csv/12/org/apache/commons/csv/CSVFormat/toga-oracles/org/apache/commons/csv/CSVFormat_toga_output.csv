project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test0001,"public void test0001() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test0002,"public void test0002() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test0003,"public void test0003() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test0004,"public void test0004() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test0005,"public void test0005() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test0006,"public void test0006() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.equals((Object) cSVFormat1));
}",0,
project,0,test0007,"public void test0007() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test0008,"public void test0008() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('B', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test0019,"public void test0019() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test00110,"public void test00110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00111,"public void test00111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test00112,"public void test00112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test00113,"public void test00113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00114,"public void test00114() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00115,"public void test00115() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00116,"public void test00116() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test00117,"public void test00117() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00118,"public void test00118() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test00119,"public void test00119() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test00120,"public void test00120() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""epV!DihL0*h.t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals(""epV!DihL0*h.t"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test00221,"public void test00221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00222,"public void test00222() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals('z', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test00223,"public void test00223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00224,"public void test00224() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test00225,"public void test00225() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00226,"public void test00226() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test00227,"public void test00227() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00228,"public void test00228() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00229,"public void test00229() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00230,"public void test00230() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test00231,"public void test00231() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00332,"public void test00332() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test00333,"public void test00333() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat2.getAllowMissingColumnNames())
project,0,test00334,"public void test00334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00335,"public void test00335() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00336,"public void test00336() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test00337,"public void test00337() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00338,"public void test00338() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00339,"public void test00339() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00340,"public void test00340() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00441,"public void test00441() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00442,"public void test00442() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00443,"public void test00443() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00444,"public void test00444() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test00445,"public void test00445() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test00546,"public void test00546() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test00547,"public void test00547() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00548,"public void test00548() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00549,"public void test00549() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00550,"public void test00550() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00551,"public void test00551() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00552,"public void test00552() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00553,"public void test00553() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test00654,"public void test00654() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test00655,"public void test00655() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00656,"public void test00656() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test00657,"public void test00657() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00658,"public void test00658() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00659,"public void test00659() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00660,"public void test00660() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00661,"public void test00661() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00662,"public void test00662() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""|mabLp4"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00763,"public void test00763() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertEquals(""#"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test00764,"public void test00764() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00765,"public void test00765() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00766,"public void test00766() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00767,"public void test00767() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00768,"public void test00768() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertEquals(""y"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test00769,"public void test00769() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00770,"public void test00770() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""y"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00871,"public void test00871() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test00872,"public void test00872() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00873,"public void test00873() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test00874,"public void test00874() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertEquals(""Q"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test00875,"public void test00875() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00876,"public void test00876() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test00877,"public void test00877() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00878,"public void test00878() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test00979,"public void test00979() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00980,"public void test00980() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test00981,"public void test00981() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test00982,"public void test00982() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00983,"public void test00983() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00984,"public void test00984() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00985,"public void test00985() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00986,"public void test00986() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertEquals(""K"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test00987,"public void test00987() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = Character.valueOf('!');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test01088,"public void test01088() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test01089,"public void test01089() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test01090,"public void test01090() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01091,"public void test01091() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test01092,"public void test01092() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test01093,"public void test01093() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertEquals(""t"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test01094,"public void test01094() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test01095,"public void test01095() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test01096,"public void test01096() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test01097,"public void test01097() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test01198,"public void test01198() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test01199,"public void test01199() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertEquals(""t"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test011100,"public void test011100() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test012101,"public void test012101() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals('z', (char) cSVFormat3.getCommentMarker());
}",0,
project,0,test012102,"public void test012102() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test012103,"public void test012103() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test012104,"public void test012104() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test012105,"public void test012105() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test012106,"public void test012106() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertTrue(cSVFormat3.isNullStringSet())
project,0,test012107,"public void test012107() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test012108,"public void test012108() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test012109,"public void test012109() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""format"");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat3.isQuoteCharacterSet())
project,0,test013110,"public void test013110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test013111,"public void test013111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test013112,"public void test013112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test013113,"public void test013113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test013114,"public void test013114() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test013115,"public void test013115() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test013116,"public void test013116() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test013117,"public void test013117() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test014118,"public void test014118() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test014119,"public void test014119() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test015120,"public void test015120() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test015121,"public void test015121() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertEquals(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test015122,"public void test015122() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertEquals('Y', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test015123,"public void test015123() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test015124,"public void test015124() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test015125,"public void test015125() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test015126,"public void test015126() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test015127,"public void test015127() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test015128,"public void test015128() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test015129,"public void test015129() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test015130,"public void test015130() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test015131,"public void test015131() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"");
    Character character0 = Character.valueOf('Y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test016132,"public void test016132() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test016133,"public void test016133() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test016134,"public void test016134() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertEquals('7', (char) cSVFormat3.getCommentMarker());
}",0,
project,0,test016135,"public void test016135() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertFalse(cSVFormat3.isNullStringSet())
project,0,test016136,"public void test016136() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test016137,"public void test016137() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test016138,"public void test016138() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertEquals('X', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test016139,"public void test016139() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');
    Character character0 = new Character('X');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
    assertEquals('\t', cSVFormat3.getDelimiter());
}",0,assertNotNull(cSVFormat3.getDelimiter())
project,0,test017140,"public void test017140() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test017141,"public void test017141() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test017142,"public void test017142() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test017143,"public void test017143() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test017144,"public void test017144() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test017145,"public void test017145() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test017146,"public void test017146() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test017147,"public void test017147() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = new Character('x');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test018148,"public void test018148() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    Character character0 = new Character('y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test018149,"public void test018149() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    Character character0 = new Character('y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test018150,"public void test018150() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    Character character0 = new Character('y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test018151,"public void test018151() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    Character character0 = new Character('y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test018152,"public void test018152() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    Character character0 = new Character('y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test018153,"public void test018153() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    Character character0 = new Character('y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test018154,"public void test018154() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    Character character0 = new Character('y');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test019155,"public void test019155() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test019156,"public void test019156() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test019157,"public void test019157() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test019158,"public void test019158() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test019159,"public void test019159() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test019160,"public void test019160() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test019161,"public void test019161() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test019162,"public void test019162() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertEquals('p', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test019163,"public void test019163() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test020164,"public void test020164() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test020165,"public void test020165() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertEquals('\\', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test020166,"public void test020166() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test020167,"public void test020167() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test020168,"public void test020168() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test020169,"public void test020169() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test020170,"public void test020170() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertEquals('<', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test020171,"public void test020171() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test021172,"public void test021172() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test021173,"public void test021173() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test021174,"public void test021174() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertEquals(""CommentStart=<"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test021175,"public void test021175() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test021176,"public void test021176() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test021177,"public void test021177() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test021178,"public void test021178() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test021179,"public void test021179() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""CommentStart=<"");
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test022180,"public void test022180() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test022181,"public void test022181() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test022182,"public void test022182() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test022183,"public void test022183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertEquals(""QJWto;q]bY]?r+,Y"", cSVFormat2.getNullString());
}",0,
project,0,test022184,"public void test022184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test022185,"public void test022185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test022186,"public void test022186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test022187,"public void test022187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test022188,"public void test022188() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""QJWto;q]bY]?r+,Y"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test023189,"public void test023189() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    cSVFormat1.withNullString(""mlg\""F"");
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test023190,"public void test023190() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    cSVFormat1.withNullString(""mlg\""F"");
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test024191,"public void test024191() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test024192,"public void test024192() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test024193,"public void test024193() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test024194,"public void test024194() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test024195,"public void test024195() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test024196,"public void test024196() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test024197,"public void test024197() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test024198,"public void test024198() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test025199,"public void test025199() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test025200,"public void test025200() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test025201,"public void test025201() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test025202,"public void test025202() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test026203,"public void test026203() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(""CommentStart=<"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test026204,"public void test026204() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test026205,"public void test026205() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test026206,"public void test026206() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test026207,"public void test026207() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test026208,"public void test026208() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test026209,"public void test026209() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test026210,"public void test026210() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test027211,"public void test027211() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test027212,"public void test027212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertTrue(cSVFormat3.isNullStringSet())
project,0,test027213,"public void test027213() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test027214,"public void test027214() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test027215,"public void test027215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test027216,"public void test027216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,
project,0,test027217,"public void test027217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
    assertEquals('U', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test028218,"public void test028218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test028219,"public void test028219() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test028220,"public void test028220() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test028221,"public void test028221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test028222,"public void test028222() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test028223,"public void test028223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test028224,"public void test028224() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test028225,"public void test028225() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test028226,"public void test028226() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test028227,"public void test028227() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test028228,"public void test028228() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test029229,"public void test029229() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test029230,"public void test029230() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test029231,"public void test029231() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test029232,"public void test029232() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test029233,"public void test029233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test029234,"public void test029234() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test029235,"public void test029235() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test030236,"public void test030236() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test030237,"public void test030237() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test030238,"public void test030238() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test030239,"public void test030239() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test031240,"public void test031240() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test031241,"public void test031241() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(""O{x<Z~@"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test031242,"public void test031242() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test031243,"public void test031243() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test031244,"public void test031244() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test031245,"public void test031245() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test031246,"public void test031246() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,
project,0,test031247,"public void test031247() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(""O{x<Z~@"");
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test032248,"public void test032248() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test032249,"public void test032249() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test032250,"public void test032250() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test032251,"public void test032251() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test032252,"public void test032252() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test032253,"public void test032253() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test032254,"public void test032254() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test032255,"public void test032255() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals('*', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test033256,"public void test033256() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test033257,"public void test033257() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test033258,"public void test033258() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test033259,"public void test033259() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test033260,"public void test033260() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test033261,"public void test033261() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test033262,"public void test033262() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test033263,"public void test033263() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    String[] stringArray0 = new String[6];
    stringArray0[0] = "":"";
    stringArray0[1] = ""8`0&40-Y^E%,tpsSa"";
    stringArray0[2] = ""~dD/GUYR "";
    stringArray0[3] = ""ON7::V\""j@@DK"";
    stringArray0[4] = ""MINIMAL"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test034264,"public void test034264() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test034265,"public void test034265() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("""");
    assertTrue(cSVFormat3.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat3.getAllowMissingColumnNames())
project,0,test035266,"public void test035266() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test035267,"public void test035267() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(""Delimiter=<"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test035268,"public void test035268() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test035269,"public void test035269() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test035270,"public void test035270() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test035271,"public void test035271() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test035272,"public void test035272() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test035273,"public void test035273() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('R');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test036274,"public void test036274() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test036275,"public void test036275() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test036276,"public void test036276() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test036277,"public void test036277() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test036278,"public void test036278() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('S', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test036279,"public void test036279() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test036280,"public void test036280() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test036281,"public void test036281() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    Character character0 = Character.valueOf('S');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test037282,"public void test037282() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    Character character0 = new Character('s');
    cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test037283,"public void test037283() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    Character character0 = new Character('s');
    cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test038284,"public void test038284() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals(""\r\n"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test038285,"public void test038285() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test038286,"public void test038286() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test038287,"public void test038287() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals('\""', (char) cSVFormat3.getQuoteCharacter());
}",0,
project,0,test038288,"public void test038288() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals(""Jyv!x"", cSVFormat3.getNullString());
}",0,assertNotNull(cSVFormat3.getNullString())
project,0,test038289,"public void test038289() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,
project,0,test038290,"public void test038290() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals(' ', (char) cSVFormat3.getEscapeCharacter());
}",0,
project,0,test038291,"public void test038291() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Jyv!x"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test039292,"public void test039292() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test039293,"public void test039293() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test039294,"public void test039294() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertEquals('6', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test039295,"public void test039295() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test039296,"public void test039296() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test039297,"public void test039297() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test039298,"public void test039298() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test039299,"public void test039299() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');
    assertEquals('!', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test040300,"public void test040300() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test040301,"public void test040301() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test040302,"public void test040302() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test040303,"public void test040303() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test040304,"public void test040304() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test040305,"public void test040305() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test040306,"public void test040306() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test040307,"public void test040307() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');
    assertEquals(':', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test041308,"public void test041308() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\""');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test041309,"public void test041309() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\""');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test041310,"public void test041310() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\""');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test041311,"public void test041311() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\""');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test041312,"public void test041312() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\""');
    assertEquals('\""', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test041313,"public void test041313() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\""');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test042314,"public void test042314() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test042315,"public void test042315() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test042316,"public void test042316() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');
    assertEquals('M', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test043317,"public void test043317() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test043318,"public void test043318() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test043319,"public void test043319() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test043320,"public void test043320() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test043321,"public void test043321() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertEquals(""CommentStart=<"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test043322,"public void test043322() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertEquals('U', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test043323,"public void test043323() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test043324,"public void test043324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""CommentStart=<"");
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test044325,"public void test044325() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test044326,"public void test044326() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test044327,"public void test044327() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test044328,"public void test044328() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
    assertEquals('S', cSVFormat1.getDelimiter());
}",0,
project,0,test044329,"public void test044329() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test044330,"public void test044330() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test044331,"public void test044331() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test045332,"public void test045332() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test045333,"public void test045333() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals(""Delimiter=<"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test045334,"public void test045334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test045335,"public void test045335() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test045336,"public void test045336() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test045337,"public void test045337() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test045338,"public void test045338() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test045339,"public void test045339() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""Delimiter=<"");
    Character character0 = Character.valueOf('W');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test046340,"public void test046340() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test046341,"public void test046341() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test046342,"public void test046342() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test046343,"public void test046343() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test046344,"public void test046344() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test046345,"public void test046345() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test046346,"public void test046346() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test047347,"public void test047347() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test047348,"public void test047348() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test047349,"public void test047349() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test047350,"public void test047350() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test047351,"public void test047351() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test047352,"public void test047352() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test047353,"public void test047353() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test047354,"public void test047354() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('N');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test048355,"public void test048355() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test048356,"public void test048356() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test048357,"public void test048357() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test048358,"public void test048358() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test048359,"public void test048359() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test048360,"public void test048360() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test048361,"public void test048361() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test049362,"public void test049362() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    Character character0 = Character.valueOf('*');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\""');
    assertEquals('L', (char) cSVFormat4.getQuoteCharacter());
}",0,
project,0,test049363,"public void test049363() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    Character character0 = Character.valueOf('*');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\""');
    assertTrue(cSVFormat3.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat3.getAllowMissingColumnNames())
project,0,test049364,"public void test049364() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    Character character0 = Character.valueOf('*');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\""');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test049365,"public void test049365() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    Character character0 = Character.valueOf('*');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\""');
    assertEquals('\""', cSVFormat4.getDelimiter());
}",0,assertNotNull(cSVFormat4.getDelimiter())
project,0,test050366,"public void test050366() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test050367,"public void test050367() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertEquals('0', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test050368,"public void test050368() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test050369,"public void test050369() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test050370,"public void test050370() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test050371,"public void test050371() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test050372,"public void test050372() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test050373,"public void test050373() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test050374,"public void test050374() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test051375,"public void test051375() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test051376,"public void test051376() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
    assertEquals('|', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test051377,"public void test051377() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test052378,"public void test052378() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test052379,"public void test052379() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat4.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat4.isQuoteCharacterSet())
project,0,test052380,"public void test052380() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat4.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat4.isEscapeCharacterSet())
project,0,test052381,"public void test052381() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat4.equals((Object) cSVFormat3));
}",0,
project,0,test052382,"public void test052382() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat4.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat4.getAllowMissingColumnNames())
project,0,test052383,"public void test052383() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertEquals(""\r\n"", cSVFormat4.getRecordSeparator());
}",0,assertNotNull(cSVFormat4.getRecordSeparator())
project,0,test052384,"public void test052384() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test052385,"public void test052385() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertEquals('B', (char) cSVFormat4.getCommentMarker());
}",0,
project,0,test052386,"public void test052386() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test052387,"public void test052387() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""rcKJs'S9{B9"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
    assertEquals(""rcKJs'S9{B9"", cSVFormat4.getNullString());
}",0,assertNotNull(cSVFormat4.getNullString())
project,0,test053388,"public void test053388() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test053389,"public void test053389() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertEquals('k', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test053390,"public void test053390() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test053391,"public void test053391() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test053392,"public void test053392() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test053393,"public void test053393() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test053394,"public void test053394() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test054395,"public void test054395() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test054396,"public void test054396() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test054397,"public void test054397() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test054398,"public void test054398() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test054399,"public void test054399() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test054400,"public void test054400() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test054401,"public void test054401() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test054402,"public void test054402() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test055403,"public void test055403() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test055404,"public void test055404() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test055405,"public void test055405() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test055406,"public void test055406() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertEquals('r', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test055407,"public void test055407() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test055408,"public void test055408() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test055409,"public void test055409() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test055410,"public void test055410() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');
    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test056411,"public void test056411() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test056412,"public void test056412() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    cSVFormat0.getRecordSeparator();
    assertEquals('8', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test056413,"public void test056413() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test056414,"public void test056414() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test056415,"public void test056415() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",1,
project,0,test057416,"public void test057416() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test057417,"public void test057417() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test057418,"public void test057418() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test057419,"public void test057419() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test057420,"public void test057420() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test057421,"public void test057421() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test057422,"public void test057422() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test057423,"public void test057423() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    String string0 = cSVFormat1.getRecordSeparator();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test058424,"public void test058424() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test058425,"public void test058425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test058426,"public void test058426() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test058427,"public void test058427() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test058428,"public void test058428() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test058429,"public void test058429() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test058430,"public void test058430() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test059431,"public void test059431() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = cSVFormat0.getQuoteCharacter();
    assertNull(character0);
}",0,
project,0,test060432,"public void test060432() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test060433,"public void test060433() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,
project,0,test060434,"public void test060434() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test060435,"public void test060435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test060436,"public void test060436() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test060437,"public void test060437() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test060438,"public void test060438() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test060439,"public void test060439() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""QJWto;q]bY]?r+,Y"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""QJWto;q]bY]?r+,Y"", string0);
}",0,
project,0,test061440,"public void test061440() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test061441,"public void test061441() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test061442,"public void test061442() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test061443,"public void test061443() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test061444,"public void test061444() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test061445,"public void test061445() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test061446,"public void test061446() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test061447,"public void test061447() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test062448,"public void test062448() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test062449,"public void test062449() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test062450,"public void test062450() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test062451,"public void test062451() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,
project,0,test062452,"public void test062452() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test062453,"public void test062453() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test062454,"public void test062454() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test063455,"public void test063455() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test064456,"public void test064456() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""bapp*>~N]>qej~6vX"";
    stringArray0[1] = ""org.apache.commons.csv.ExtendedBufferedReader"";
    stringArray0[2] = ""The header contains a duplicate entry: '"";
    stringArray0[3] = ""783"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test064457,"public void test064457() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""bapp*>~N]>qej~6vX"";
    stringArray0[1] = ""org.apache.commons.csv.ExtendedBufferedReader"";
    stringArray0[2] = ""The header contains a duplicate entry: '"";
    stringArray0[3] = ""783"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test064458,"public void test064458() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""bapp*>~N]>qej~6vX"";
    stringArray0[1] = ""org.apache.commons.csv.ExtendedBufferedReader"";
    stringArray0[2] = ""The header contains a duplicate entry: '"";
    stringArray0[3] = ""783"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test064459,"public void test064459() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""bapp*>~N]>qej~6vX"";
    stringArray0[1] = ""org.apache.commons.csv.ExtendedBufferedReader"";
    stringArray0[2] = ""The header contains a duplicate entry: '"";
    stringArray0[3] = ""783"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test064460,"public void test064460() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""bapp*>~N]>qej~6vX"";
    stringArray0[1] = ""org.apache.commons.csv.ExtendedBufferedReader"";
    stringArray0[2] = ""The header contains a duplicate entry: '"";
    stringArray0[3] = ""783"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test064461,"public void test064461() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""bapp*>~N]>qej~6vX"";
    stringArray0[1] = ""org.apache.commons.csv.ExtendedBufferedReader"";
    stringArray0[2] = ""The header contains a duplicate entry: '"";
    stringArray0[3] = ""783"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test064462,"public void test064462() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""bapp*>~N]>qej~6vX"";
    stringArray0[1] = ""org.apache.commons.csv.ExtendedBufferedReader"";
    stringArray0[2] = ""The header contains a duplicate entry: '"";
    stringArray0[3] = ""783"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test065463,"public void test065463() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = cSVFormat0.getEscapeCharacter();
    assertEquals('\\', (char) character0);
}",0,
project,0,test066464,"public void test066464() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    char char0 = cSVFormat0.getDelimiter();
    assertEquals(',', char0);
}",0,
project,0,test067465,"public void test067465() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    char char0 = cSVFormat0.getDelimiter();
    assertEquals('8', char0);
}",0,
project,0,test067466,"public void test067466() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,
project,0,test067467,"public void test067467() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test067468,"public void test067468() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test067469,"public void test067469() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test068470,"public void test068470() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test068471,"public void test068471() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test068472,"public void test068472() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test068473,"public void test068473() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test068474,"public void test068474() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test068475,"public void test068475() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test068476,"public void test068476() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test069477,"public void test069477() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test069478,"public void test069478() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test070479,"public void test070479() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('k');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    // Undeclared exception!
    try {
        cSVFormat1.withEscape('k');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start and the escape character cannot be the same ('k')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test071480,"public void test071480() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('T');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    // Undeclared exception!
    try {
        cSVFormat1.withDelimiter('T');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the delimiter cannot be the same ('T')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test072481,"public void test072481() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        cSVFormat0.DEFAULT.print((Appendable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'out' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test073482,"public void test073482() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        cSVFormat0.parse((Reader) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'reader' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test074483,"public void test074483() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    // Undeclared exception!
    try {
        cSVFormat0.format((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test075484,"public void test075484() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
    cSVFormat1.isQuoteCharacterSet();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test075485,"public void test075485() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
    cSVFormat1.isQuoteCharacterSet();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test075486,"public void test075486() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
    cSVFormat1.isQuoteCharacterSet();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test075487,"public void test075487() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
    cSVFormat1.isQuoteCharacterSet();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test075488,"public void test075488() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);
    cSVFormat1.isQuoteCharacterSet();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test076489,"public void test076489() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test076490,"public void test076490() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test076491,"public void test076491() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test076492,"public void test076492() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test076493,"public void test076493() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test076494,"public void test076494() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test076495,"public void test076495() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test077496,"public void test077496() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test077497,"public void test077497() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,
project,0,test077498,"public void test077498() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test077499,"public void test077499() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test077500,"public void test077500() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test077501,"public void test077501() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test077502,"public void test077502() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test077503,"public void test077503() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test077504,"public void test077504() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$VALUES"");
    boolean boolean0 = cSVFormat1.isNullStringSet();
    assertEquals(""$VALUES"", cSVFormat1.getNullString());
}",0,
project,0,test078505,"public void test078505() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    boolean boolean0 = cSVFormat0.isNullStringSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test079506,"public void test079506() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test080507,"public void test080507() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test080508,"public void test080508() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test080509,"public void test080509() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test080510,"public void test080510() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test080511,"public void test080511() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test080512,"public void test080512() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test080513,"public void test080513() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = new Character('f');
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);
    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test081514,"public void test081514() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test081515,"public void test081515() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test081516,"public void test081516() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test081517,"public void test081517() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test081518,"public void test081518() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test081519,"public void test081519() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test081520,"public void test081520() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test081521,"public void test081521() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('e');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test082522,"public void test082522() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test082523,"public void test082523() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test082524,"public void test082524() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test082525,"public void test082525() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test082526,"public void test082526() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test082527,"public void test082527() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test082528,"public void test082528() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test083529,"public void test083529() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = cSVFormat0.getHeader();
    assertNull(stringArray0);
}",0,assertNotNull(stringArray0)
project,0,test084530,"public void test084530() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test085531,"public void test085531() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = cSVFormat0.getCommentMarker();
    assertNull(character0);
}",0,
project,0,test086532,"public void test086532() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String string0 = cSVFormat0.getNullString();
    assertNull(string0);
}",0,
project,0,test087533,"public void test087533() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    cSVFormat0.getQuoteMode();
}",0,
project,0,test088534,"public void test088534() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = cSVFormat0.getEscapeCharacter();
    assertNull(character0);
}",0,
project,0,test089535,"public void test089535() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test090536,"public void test090536() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String string0 = cSVFormat0.getRecordSeparator();
    assertEquals(""\r\n"", string0);
}",0,
project,0,test091537,"public void test091537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = cSVFormat0.getQuoteCharacter();
    assertEquals('\""', (char) character0);
}",0,
project,0,test092538,"public void test092538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",1,
project,0,test092539,"public void test092539() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    char char0 = cSVFormat0.getDelimiter();
    assertEquals('p', char0);
}",0,
project,0,test092540,"public void test092540() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test092541,"public void test092541() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test092542,"public void test092542() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test093543,"public void test093543() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    QuoteMode quoteMode0 = QuoteMode.NONE;
    // Undeclared exception!
    try {
        cSVFormat0.withQuoteMode(quoteMode0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No quotes mode set but no escape character is set
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test094544,"public void test094544() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
    Character character0 = new Character('r');
    // Undeclared exception!
    try {
        cSVFormat1.withCommentMarker(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start and the escape character cannot be the same ('r')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test095545,"public void test095545() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('s');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    // Undeclared exception!
    try {
        cSVFormat1.withQuote('s');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('s')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test096546,"public void test096546() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        cSVFormat0.EXCEL.withCommentMarker(',');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the delimiter cannot be the same (',')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test097547,"public void test097547() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('U');
    Character character0 = new Character('U');
    // Undeclared exception!
    try {
        cSVFormat0.withEscape(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The escape character and the delimiter cannot be the same ('U')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test098548,"public void test098548() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('(');
    Character character0 = new Character('(');
    // Undeclared exception!
    try {
        cSVFormat0.withQuote(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The quoteChar character and the delimiter cannot be the same ('(')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test099549,"public void test099549() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test099550,"public void test099550() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<,> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[vE7j|07, ]G7;, w5%hol.RC'kWi, The header contains a duplicate entry: ', 1q#6hb?%~+|gP, (line , \r\n, null]"", string0);
}",0,
project,0,test100551,"public void test100551() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    String string0 = cSVFormat0.toString();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test100552,"public void test100552() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    String string0 = cSVFormat0.toString();
    assertEquals(""Delimiter=<p> SkipHeaderRecord:false"", string0);
}",0,
project,0,test101553,"public void test101553() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<,> Escape=<r> QuoteChar=<\""> RecordSeparator=<\r\n> SkipHeaderRecord:false"", string0);
}",0,
project,0,test101554,"public void test101554() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test102555,"public void test102555() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""IUgG1T[MPmf6/yGLlvX"");
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test102556,"public void test102556() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""IUgG1T[MPmf6/yGLlvX"");
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<\t> QuoteChar=<\""> NullString=<IUgG1T[MPmf6/yGLlvX> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"", string0);
}",0,
project,0,test103557,"public void test103557() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    assertFalse(cSVFormat0.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat0.isQuoteCharacterSet())
project,0,test103558,"public void test103558() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[7];
    cSVFormat0.format(objectArray0);
    assertTrue(cSVFormat0.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat0.isEscapeCharacterSet())
project,0,test104559,"public void test104559() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('1');
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<,> QuoteChar=<\""> CommentStart=<1> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"", string0);
}",0,
project,0,test104560,"public void test104560() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('1');
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test105561,"public void test105561() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat0.isCommentMarkerSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test106562,"public void test106562() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test106563,"public void test106563() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test106564,"public void test106564() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test106565,"public void test106565() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test106566,"public void test106566() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    cSVFormat1.hashCode();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test107567,"public void test107567() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    cSVFormat0.TDF.hashCode();
}",0,
project,0,test108568,"public void test108568() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""WL__2JE"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test108569,"public void test108569() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""WL__2JE"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test108570,"public void test108570() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""WL__2JE"");
    cSVFormat1.hashCode();
    assertEquals('F', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test108571,"public void test108571() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""WL__2JE"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test109572,"public void test109572() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test109573,"public void test109573() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test109574,"public void test109574() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test109575,"public void test109575() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test109576,"public void test109576() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test110577,"public void test110577() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test110578,"public void test110578() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test110579,"public void test110579() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test110580,"public void test110580() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test110581,"public void test110581() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test110582,"public void test110582() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test111583,"public void test111583() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.format(stringArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test111584,"public void test111584() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.format(stringArray0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test111585,"public void test111585() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.format(stringArray0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test111586,"public void test111586() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.format(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test111587,"public void test111587() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.format(stringArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test111588,"public void test111588() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.format(stringArray0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test111589,"public void test111589() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""vE7j|07"";
    stringArray0[1] = ""]G7;"";
    stringArray0[2] = ""w5%hol.RC'kWi"";
    stringArray0[3] = ""The header contains a duplicate entry: '"";
    stringArray0[4] = ""1q#6hb?%~+|gP"";
    stringArray0[5] = ""(line "";
    stringArray0[6] = ""\r\n"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    cSVFormat1.format(stringArray0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test112590,"public void test112590() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test112591,"public void test112591() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test112592,"public void test112592() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test112593,"public void test112593() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test112594,"public void test112594() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test112595,"public void test112595() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test112596,"public void test112596() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test113597,"public void test113597() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test113598,"public void test113598() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test113599,"public void test113599() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test113600,"public void test113600() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test113601,"public void test113601() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test113602,"public void test113602() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test113603,"public void test113603() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test114604,"public void test114604() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = CSVFormat.EXCEL;
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test115605,"public void test115605() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test115606,"public void test115606() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test115607,"public void test115607() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test115608,"public void test115608() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test115609,"public void test115609() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test115610,"public void test115610() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test115611,"public void test115611() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test115612,"public void test115612() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(""\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test115613,"public void test115613() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""r,&,Izl?x01`c1z8"");
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(""r,&,Izl?x01`c1z8"", cSVFormat1.getNullString());
}",0,
project,0,test116614,"public void test116614() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test116615,"public void test116615() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test116616,"public void test116616() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test116617,"public void test116617() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test116618,"public void test116618() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test116619,"public void test116619() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(""org.apache.commons.csv.ExtendedBufferedReader"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test116620,"public void test116620() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test116621,"public void test116621() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test116622,"public void test116622() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""org.apache.commons.csv.ExtendedBufferedReader"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test117623,"public void test117623() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test117624,"public void test117624() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test117625,"public void test117625() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('?', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test117626,"public void test117626() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test117627,"public void test117627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test117628,"public void test117628() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test117629,"public void test117629() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test117630,"public void test117630() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('?');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test118631,"public void test118631() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    CSVFormat cSVFormat2 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test118632,"public void test118632() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    CSVFormat cSVFormat2 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test118633,"public void test118633() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    CSVFormat cSVFormat2 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test118634,"public void test118634() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    CSVFormat cSVFormat2 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertEquals('7', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test118635,"public void test118635() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    CSVFormat cSVFormat2 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test118636,"public void test118636() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    CSVFormat cSVFormat2 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test118637,"public void test118637() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    CSVFormat cSVFormat2 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test119638,"public void test119638() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test119639,"public void test119639() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test119640,"public void test119640() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('?', (char) cSVFormat1.getCommentMarker());
}",0,
project,0,test119641,"public void test119641() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test119642,"public void test119642() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test119643,"public void test119643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test119644,"public void test119644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test119645,"public void test119645() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test119646,"public void test119646() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test120647,"public void test120647() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test120648,"public void test120648() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test120649,"public void test120649() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test120650,"public void test120650() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test120651,"public void test120651() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('K', (char) cSVFormat1.getCommentMarker());
}",0,
project,0,test120652,"public void test120652() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test120653,"public void test120653() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test120654,"public void test120654() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test120655,"public void test120655() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test121656,"public void test121656() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertEquals('5', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test121657,"public void test121657() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test121658,"public void test121658() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test121659,"public void test121659() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test121660,"public void test121660() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test121661,"public void test121661() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test121662,"public void test121662() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test121663,"public void test121663() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test121664,"public void test121664() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test121665,"public void test121665() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    boolean boolean0 = cSVFormat2.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test122666,"public void test122666() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test122667,"public void test122667() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test122668,"public void test122668() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test122669,"public void test122669() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test122670,"public void test122670() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.equals((Object) cSVFormat1));
}",0,
project,0,test122671,"public void test122671() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test122672,"public void test122672() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test122673,"public void test122673() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test122674,"public void test122674() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character('r');
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test123675,"public void test123675() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = CSVFormat.TDF;
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test124676,"public void test124676() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(boolean0);
}",0,
project,0,test124677,"public void test124677() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('A', cSVFormat1.getDelimiter());
}",0,
project,0,test124678,"public void test124678() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test124679,"public void test124679() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test124680,"public void test124680() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test125681,"public void test125681() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test125682,"public void test125682() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test125683,"public void test125683() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test125684,"public void test125684() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test125685,"public void test125685() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test125686,"public void test125686() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test125687,"public void test125687() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test125688,"public void test125688() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test126689,"public void test126689() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    Object object0 = new Object();
    boolean boolean0 = cSVFormat0.equals(object0);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test126690,"public void test126690() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    Object object0 = new Object();
    boolean boolean0 = cSVFormat0.equals(object0);
    assertFalse(boolean0);
}",0,
project,0,test126691,"public void test126691() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    Object object0 = new Object();
    boolean boolean0 = cSVFormat0.equals(object0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test126692,"public void test126692() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    Object object0 = new Object();
    boolean boolean0 = cSVFormat0.equals(object0);
    assertEquals('p', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test126693,"public void test126693() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    Object object0 = new Object();
    boolean boolean0 = cSVFormat0.equals(object0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test126694,"public void test126694() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    Object object0 = new Object();
    boolean boolean0 = cSVFormat0.equals(object0);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test127695,"public void test127695() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(boolean0);
}",0,
project,0,test128696,"public void test128696() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertTrue(boolean0);
}",0,
project,0,test128697,"public void test128697() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test128698,"public void test128698() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat0.getSkipHeaderRecord())
project,0,test128699,"public void test128699() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertEquals('A', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test128700,"public void test128700() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat0.getIgnoreEmptyLines())
project,0,test128701,"public void test128701() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test129702,"public void test129702() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    String[] stringArray0 = new String[3];
    // Undeclared exception!
    try {
        cSVFormat0.withHeader(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The header contains a duplicate entry: 'null' in [null, null, null]
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test130703,"public void test130703() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test130704,"public void test130704() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(boolean0);
}",0,
project,0,test131705,"public void test131705() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test131706,"public void test131706() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertEquals(""7"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test131707,"public void test131707() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test131708,"public void test131708() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test131709,"public void test131709() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test131710,"public void test131710() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test131711,"public void test131711() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test131712,"public void test131712() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test132713,"public void test132713() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test132714,"public void test132714() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test132715,"public void test132715() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('7', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test132716,"public void test132716() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test132717,"public void test132717() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test132718,"public void test132718() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test132719,"public void test132719() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test132720,"public void test132720() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test132721,"public void test132721() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test132722,"public void test132722() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test133723,"public void test133723() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test134724,"public void test134724() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test134725,"public void test134725() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test135726,"public void test135726() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test135727,"public void test135727() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertEquals('b', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test135728,"public void test135728() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test135729,"public void test135729() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test135730,"public void test135730() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test135731,"public void test135731() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test135732,"public void test135732() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test135733,"public void test135733() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test136734,"public void test136734() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test136735,"public void test136735() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test136736,"public void test136736() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertEquals('A', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test136737,"public void test136737() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test136738,"public void test136738() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test136739,"public void test136739() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test136740,"public void test136740() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test136741,"public void test136741() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test136742,"public void test136742() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test136743,"public void test136743() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test136744,"public void test136744() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test137745,"public void test137745() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    MockPrintStream mockPrintStream0 = new MockPrintStream(""GWS,4YX@?"");
    cSVFormat0.print(mockPrintStream0);
    assertEquals('p', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test137746,"public void test137746() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    MockPrintStream mockPrintStream0 = new MockPrintStream(""GWS,4YX@?"");
    cSVFormat0.print(mockPrintStream0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test137747,"public void test137747() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    MockPrintStream mockPrintStream0 = new MockPrintStream(""GWS,4YX@?"");
    cSVFormat0.print(mockPrintStream0);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test137748,"public void test137748() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    MockPrintStream mockPrintStream0 = new MockPrintStream(""GWS,4YX@?"");
    cSVFormat0.print(mockPrintStream0);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test137749,"public void test137749() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');
    MockPrintStream mockPrintStream0 = new MockPrintStream(""GWS,4YX@?"");
    cSVFormat0.print(mockPrintStream0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test138750,"public void test138750() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test139751,"public void test139751() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    PipedReader pipedReader0 = new PipedReader(1);
    CSVParser cSVParser0 = cSVFormat0.TDF.parse(pipedReader0);
    assertEquals(0L, cSVParser0.getRecordNumber());
}",0,
