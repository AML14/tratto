{
  "test0002" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0002() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test0002"
  },
  "test043319" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test043319"
  },
  "test0003" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0003() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test0003"
  },
  "test0004" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0004() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test0004"
  },
  "test043317" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043317() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test043317"
  },
  "test0005" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0005() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test0005"
  },
  "test043318" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043318() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test043318"
  },
  "test123675" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123675() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = CSVFormat.TDF;\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test123675"
  },
  "test017147" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017147() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test017147"
  },
  "test0000" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test0000"
  },
  "test0001" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0001() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test0001"
  },
  "test100552" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    String string0 = cSVFormat0.toString();\n}",
    "testName" : "test100552"
  },
  "test100551" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test100551"
  },
  "test0006" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0006() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.equals((Object) cSVFormat1);\n}",
    "testName" : "test0006"
  },
  "test0007" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0007() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test0007"
  },
  "test0008" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0008() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('B');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test0008"
  },
  "test065463" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065463() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = cSVFormat0.getEscapeCharacter();\n}",
    "testName" : "test065463"
  },
  "test114604" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114604() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test114604"
  },
  "test076489" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076489() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test076489"
  },
  "test039292" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test039292"
  },
  "test017144" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test017144"
  },
  "test039296" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test039296"
  },
  "test017143" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test017143"
  },
  "test039295" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test039295"
  },
  "test017146" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017146() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test017146"
  },
  "test039294" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test039294"
  },
  "test017145" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test017145"
  },
  "test039293" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test039293"
  },
  "test017140" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test017140"
  },
  "test039299" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test039299"
  },
  "test017142" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test017142"
  },
  "test039298" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test039298"
  },
  "test017141" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test017141"
  },
  "test039297" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('!');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test039297"
  },
  "test090536" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String string0 = cSVFormat0.getRecordSeparator();\n}",
    "testName" : "test090536"
  },
  "test076490" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076490() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test076490"
  },
  "test076491" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076491() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test076491"
  },
  "test043324" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test043324"
  },
  "test043322" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test043322"
  },
  "test043323" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test043323"
  },
  "test043320" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043320() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test043320"
  },
  "test080511" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080511() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);\n    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test080511"
  },
  "test043321" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043321() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test043321"
  },
  "test080510" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080510() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);\n    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test080510"
  },
  "test0019" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test0019"
  },
  "test00120" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test00120"
  },
  "test00114" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00114"
  },
  "test00115" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00115"
  },
  "test00112" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00112"
  },
  "test080508" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080508() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);\n    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test080508"
  },
  "test00113" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00113"
  },
  "test080507" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080507() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);\n    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test080507"
  },
  "test00118" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test00118"
  },
  "test00119" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00119"
  },
  "test00116" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00116"
  },
  "test00117" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00117"
  },
  "test052384" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052384() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test052384"
  },
  "test055410" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055410() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test055410"
  },
  "test076494" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076494() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test076494"
  },
  "test052385" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052385() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat4.getCommentMarker();\n}",
    "testName" : "test052385"
  },
  "test076495" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076495() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test076495"
  },
  "test052386" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052386() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test052386"
  },
  "test076492" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076492() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test076492"
  },
  "test052387" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052387() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat4.getNullString();\n}",
    "testName" : "test052387"
  },
  "test076493" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076493() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test076493"
  },
  "test052380" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052380() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat4.isEscapeCharacterSet();\n}",
    "testName" : "test052380"
  },
  "test052381" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052381() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat4.equals((Object) cSVFormat3);\n}",
    "testName" : "test052381"
  },
  "test080509" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080509() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);\n    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test080509"
  },
  "test052382" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052382() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat4.getAllowMissingColumnNames();\n}",
    "testName" : "test052382"
  },
  "test052383" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052383() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat4.getRecordSeparator();\n}",
    "testName" : "test052383"
  },
  "test089535" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test089535"
  },
  "test00110" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00110"
  },
  "test00231" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00231"
  },
  "test00111" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"epV!DihL0*h.t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00111"
  },
  "test00230" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00230"
  },
  "test00224" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00224"
  },
  "test136734" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136734() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test136734"
  },
  "test00225" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00225"
  },
  "test136735" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136735() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test136735"
  },
  "test00222" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test00222"
  },
  "test00223" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00223"
  },
  "test00228" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00228"
  },
  "test053389" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053389() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test053389"
  },
  "test056415" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056415() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test056415"
  },
  "test00229" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00229"
  },
  "test056414" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test056414"
  },
  "test00226" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00226"
  },
  "test00227" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00227"
  },
  "test056411" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056411() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test056411"
  },
  "test056413" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056413() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test056413"
  },
  "test053388" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053388() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test053388"
  },
  "test056412" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056412() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test056412"
  },
  "test136738" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136738() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test136738"
  },
  "test136739" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136739() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test136739"
  },
  "test136736" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136736() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test136736"
  },
  "test136737" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136737() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test136737"
  },
  "test101553" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test101553"
  },
  "test00221" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00221"
  },
  "test101554" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test101554"
  },
  "test00340" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00340() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00340"
  },
  "test00334" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00334"
  },
  "test079506" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079506() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test079506"
  },
  "test00335" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00335"
  },
  "test00332" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00332"
  },
  "test136743" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136743() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test136743"
  },
  "test00333" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00333"
  },
  "test136744" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136744() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test136744"
  },
  "test00338" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00338"
  },
  "test136741" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136741() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test136741"
  },
  "test00339" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00339"
  },
  "test136742" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136742() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test136742"
  },
  "test00336" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00336"
  },
  "test031247" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031247() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test031247"
  },
  "test00337" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00337"
  },
  "test031246" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031246() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test031246"
  },
  "test136740" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136740() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreEmptyLines(true);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test136740"
  },
  "test031245" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test031245"
  },
  "test031244" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031244() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test031244"
  },
  "test111583" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111583() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test111583"
  },
  "test031243" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031243() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test031243"
  },
  "test111584" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111584() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test111584"
  },
  "test031242" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031242() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test031242"
  },
  "test111585" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111585() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test111585"
  },
  "test031241" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031241() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test031241"
  },
  "test111586" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111586() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test111586"
  },
  "test031240" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031240() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withNullString(\"O{x<Z~@\");\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test031240"
  },
  "test111587" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111587() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test111587"
  },
  "test111588" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111588() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test111588"
  },
  "test111589" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111589() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test111589"
  },
  "test064458" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064458() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[5];\n    stringArray0[0] = \"bapp*>~N]>qej~6vX\";\n    stringArray0[1] = \"org.apache.commons.csv.ExtendedBufferedReader\";\n    stringArray0[2] = \"The header contains a duplicate entry: '\";\n    stringArray0[3] = \"783\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test064458"
  },
  "test064457" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064457() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[5];\n    stringArray0[0] = \"bapp*>~N]>qej~6vX\";\n    stringArray0[1] = \"org.apache.commons.csv.ExtendedBufferedReader\";\n    stringArray0[2] = \"The header contains a duplicate entry: '\";\n    stringArray0[3] = \"783\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test064457"
  },
  "test038289" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test038289"
  },
  "test064456" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064456() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[5];\n    stringArray0[0] = \"bapp*>~N]>qej~6vX\";\n    stringArray0[1] = \"org.apache.commons.csv.ExtendedBufferedReader\";\n    stringArray0[2] = \"The header contains a duplicate entry: '\";\n    stringArray0[3] = \"783\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test064456"
  },
  "test064459" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064459() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[5];\n    stringArray0[0] = \"bapp*>~N]>qej~6vX\";\n    stringArray0[1] = \"org.apache.commons.csv.ExtendedBufferedReader\";\n    stringArray0[2] = \"The header contains a duplicate entry: '\";\n    stringArray0[3] = \"783\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test064459"
  },
  "test00444" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00444"
  },
  "test00445" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00445"
  },
  "test018150" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018150() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    Character character0 = new Character('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test018150"
  },
  "test078505" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078505() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.isNullStringSet();\n}",
    "testName" : "test078505"
  },
  "test00442" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00442"
  },
  "test00443" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00443"
  },
  "test038284" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038284() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test038284"
  },
  "test115611" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115611() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test115611"
  },
  "test124680" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124680() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test124680"
  },
  "test115610" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115610() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test115610"
  },
  "test018153" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018153() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    Character character0 = new Character('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test018153"
  },
  "test038287" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getQuoteCharacter();\n}",
    "testName" : "test038287"
  },
  "test115613" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115613() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test115613"
  },
  "test018154" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018154() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    Character character0 = new Character('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test018154"
  },
  "test038288" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getNullString();\n}",
    "testName" : "test038288"
  },
  "test115612" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115612() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test115612"
  },
  "test018151" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018151() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    Character character0 = new Character('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test018151"
  },
  "test038285" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038285() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test038285"
  },
  "test018152" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018152() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    Character character0 = new Character('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test018152"
  },
  "test038286" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038286() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test038286"
  },
  "test124679" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124679() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test124679"
  },
  "test042316" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042316() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test042316"
  },
  "test124678" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124678() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test124678"
  },
  "test124677" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124677() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test124677"
  },
  "test124676" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124676() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test124676"
  },
  "test018148" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018148() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    Character character0 = new Character('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test018148"
  },
  "test042315" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042315() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test042315"
  },
  "test018149" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018149() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withAllowMissingColumnNames(true);\n    Character character0 = new Character('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test018149"
  },
  "test042314" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('M');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test042314"
  },
  "test00441" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00441"
  },
  "test029229" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test029229"
  },
  "test115606" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115606() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test115606"
  },
  "test075488" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075488() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test075488"
  },
  "test115605" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115605() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test115605"
  },
  "test00552" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00552"
  },
  "test051377" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051377() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test051377"
  },
  "test115608" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115608() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test115608"
  },
  "test00553" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00553"
  },
  "test051376" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051376() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test051376"
  },
  "test115607" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115607() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test115607"
  },
  "test038290" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getEscapeCharacter();\n}",
    "testName" : "test038290"
  },
  "test054401" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054401() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test054401"
  },
  "test038291" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Jyv!x\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(' ');\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test038291"
  },
  "test054402" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054402() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test054402"
  },
  "test099550" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test099550"
  },
  "test115609" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115609() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test115609"
  },
  "test054400" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054400() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test054400"
  },
  "test051375" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051375() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('|');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test051375"
  },
  "test075485" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075485() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test075485"
  },
  "test075484" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075484() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test075484"
  },
  "test075487" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075487() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test075487"
  },
  "test075486" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075486() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuote((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test075486"
  },
  "test029232" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test029232"
  },
  "test029233" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test029233"
  },
  "test029234" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029234() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test029234"
  },
  "test128701" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128701() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test128701"
  },
  "test029235" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029235() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test029235"
  },
  "test128700" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128700() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test128700"
  },
  "test00550" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00550"
  },
  "test00551" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00551"
  },
  "test029230" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test029230"
  },
  "test102555" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"IUgG1T[MPmf6/yGLlvX\");\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test102555"
  },
  "test029231" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreEmptyLines(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test029231"
  },
  "test102556" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"IUgG1T[MPmf6/yGLlvX\");\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test102556"
  },
  "test055407" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055407() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test055407"
  },
  "test137747" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"GWS,4YX@?\");\n    cSVFormat0.print(mockPrintStream0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test137747"
  },
  "test055406" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055406() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test055406"
  },
  "test137746" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137746() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"GWS,4YX@?\");\n    cSVFormat0.print(mockPrintStream0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test137746"
  },
  "test00662" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00662"
  },
  "test055409" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055409() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test055409"
  },
  "test137745" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137745() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"GWS,4YX@?\");\n    cSVFormat0.print(mockPrintStream0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test137745"
  },
  "test055408" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055408() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test055408"
  },
  "test00547" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00547"
  },
  "test055403" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055403() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test055403"
  },
  "test00548" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00548"
  },
  "test052378" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052378() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test052378"
  },
  "test052379" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052379() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"rcKJs'S9{B9\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('B');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);\n    cSVFormat4.isQuoteCharacterSet();\n}",
    "testName" : "test052379"
  },
  "test055405" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055405() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test055405"
  },
  "test00546" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test00546"
  },
  "test055404" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055404() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    boolean boolean0 = cSVFormat2.getSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test055404"
  },
  "test00549" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00549"
  },
  "test099549" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"vE7j|07\";\n    stringArray0[1] = \"]G7;\";\n    stringArray0[2] = \"w5%hol.RC'kWi\";\n    stringArray0[3] = \"The header contains a duplicate entry: '\";\n    stringArray0[4] = \"1q#6hb?%~+|gP\";\n    stringArray0[5] = \"(line \";\n    stringArray0[6] = \"\\r\\n\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test099549"
  },
  "test074483" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074483() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.format((Object[]) null);\n}",
    "testName" : "test074483"
  },
  "test137749" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"GWS,4YX@?\");\n    cSVFormat0.print(mockPrintStream0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test137749"
  },
  "test137748" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"GWS,4YX@?\");\n    cSVFormat0.print(mockPrintStream0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test137748"
  },
  "test088534" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getEscapeCharacter();\n}",
    "testName" : "test088534"
  },
  "test112590" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112590() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test112590"
  },
  "test112591" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112591() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test112591"
  },
  "test112592" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112592() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test112592"
  },
  "test112593" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112593() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test112593"
  },
  "test064461" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064461() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[5];\n    stringArray0[0] = \"bapp*>~N]>qej~6vX\";\n    stringArray0[1] = \"org.apache.commons.csv.ExtendedBufferedReader\";\n    stringArray0[2] = \"The header contains a duplicate entry: '\";\n    stringArray0[3] = \"783\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test064461"
  },
  "test064460" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064460() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[5];\n    stringArray0[0] = \"bapp*>~N]>qej~6vX\";\n    stringArray0[1] = \"org.apache.commons.csv.ExtendedBufferedReader\";\n    stringArray0[2] = \"The header contains a duplicate entry: '\";\n    stringArray0[3] = \"783\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test064460"
  },
  "test00660" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00660"
  },
  "test00661" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00661"
  },
  "test064462" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064462() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[5];\n    stringArray0[0] = \"bapp*>~N]>qej~6vX\";\n    stringArray0[1] = \"org.apache.commons.csv.ExtendedBufferedReader\";\n    stringArray0[2] = \"The header contains a duplicate entry: '\";\n    stringArray0[3] = \"783\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test064462"
  },
  "test00654" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00654"
  },
  "test030238" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030238() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test030238"
  },
  "test030239" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030239() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test030239"
  },
  "test00657" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00657"
  },
  "test030236" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030236() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test030236"
  },
  "test00658" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00658"
  },
  "test030237" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030237() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test030237"
  },
  "test00655" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00655"
  },
  "test00656" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00656"
  },
  "test112594" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112594() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test112594"
  },
  "test112595" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112595() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test112595"
  },
  "test00659" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"|mabLp4\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00659"
  },
  "test112596" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112596() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"r,&,Izl?x01`c1z8\");\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test112596"
  },
  "test015128" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test015128"
  },
  "test087533" : {
    "methodSignature" : "public QuoteMode getQuoteMode()",
    "methodName" : "getQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.getQuoteMode();\n}",
    "testName" : "test087533"
  },
  "test015127" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test015127"
  },
  "test015129" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test015129"
  },
  "test015124" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test015124"
  },
  "test015123" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test015123"
  },
  "test015126" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test015126"
  },
  "test015125" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test015125"
  },
  "test121659" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test121659"
  },
  "test121657" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test121657"
  },
  "test121658" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test121658"
  },
  "test121656" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test121656"
  },
  "test015120" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test015120"
  },
  "test050370" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050370() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test050370"
  },
  "test015122" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test015122"
  },
  "test015121" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test015121"
  },
  "test050374" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050374() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test050374"
  },
  "test050373" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050373() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test050373"
  },
  "test050372" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050372() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test050372"
  },
  "test050371" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050371() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test050371"
  },
  "test108569" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108569() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"WL__2JE\");\n    cSVFormat1.hashCode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test108569"
  },
  "test108568" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108568() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"WL__2JE\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test108568"
  },
  "test050367" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050367() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test050367"
  },
  "test077503" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077503() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test077503"
  },
  "test028218" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test028218"
  },
  "test050366" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050366() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test050366"
  },
  "test077504" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077504() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getNullString();\n}",
    "testName" : "test077504"
  },
  "test028219" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test028219"
  },
  "test077501" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077501() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test077501"
  },
  "test077502" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077502() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test077502"
  },
  "test050369" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050369() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test050369"
  },
  "test050368" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050368() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('0');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test050368"
  },
  "test037282" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037282() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    Character character0 = new Character('s');\n    cSVFormat1.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test037282"
  },
  "test037283" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037283() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    Character character0 = new Character('s');\n    cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test037283"
  },
  "test098548" : {
    "methodSignature" : "public CSVFormat withQuote(final Character quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('(');\n    Character character0 = new Character('(');\n    cSVFormat0.withQuote(character0);\n}",
    "testName" : "test098548"
  },
  "test077500" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077500() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test077500"
  },
  "test041312" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041312() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\\\"');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test041312"
  },
  "test041311" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041311() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\\\"');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test041311"
  },
  "test041313" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\\\"');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test041313"
  },
  "test028220" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test028220"
  },
  "test028221" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test028221"
  },
  "test028222" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test028222"
  },
  "test041310" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041310() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\\\"');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test041310"
  },
  "test028223" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test028223"
  },
  "test028228" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test028228"
  },
  "test025199" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test025199"
  },
  "test028224" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test028224"
  },
  "test028225" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test028225"
  },
  "test108571" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108571() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"WL__2JE\");\n    cSVFormat1.hashCode();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test108571"
  },
  "test028226" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test028226"
  },
  "test028227" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test028227"
  },
  "test108570" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108570() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('F');\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"WL__2JE\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test108570"
  },
  "test041309" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041309() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\\\"');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test041309"
  },
  "test041308" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041308() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape('\\\"');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test041308"
  },
  "test121664" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test121664"
  },
  "test121665" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n}",
    "testName" : "test121665"
  },
  "test121662" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test121662"
  },
  "test063455" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063455() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test063455"
  },
  "test121663" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test121663"
  },
  "test121660" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test121660"
  },
  "test121661" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('5');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test121661"
  },
  "test073482" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073482() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    cSVFormat0.parse((Reader) null);\n}",
    "testName" : "test073482"
  },
  "test134724" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134724() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test134724"
  },
  "test134725" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134725() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test134725"
  },
  "test016139" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test016139"
  },
  "test122666" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test122666"
  },
  "test016136" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test016136"
  },
  "test016135" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test016135"
  },
  "test016138" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test016138"
  },
  "test016137" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test016137"
  },
  "test023190" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.withNullString(\"mlg\\\"F\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test023190"
  },
  "test122669" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122669() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test122669"
  },
  "test122667" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122667() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test122667"
  },
  "test122668" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122668() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test122668"
  },
  "test016132" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test016132"
  },
  "test016134" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getCommentMarker();\n}",
    "testName" : "test016134"
  },
  "test097547" : {
    "methodSignature" : "public CSVFormat withEscape(final Character escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('U');\n    Character character0 = new Character('U');\n    cSVFormat0.withEscape(character0);\n}",
    "testName" : "test097547"
  },
  "test016133" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('7');\n    Character character0 = new Character('X');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test016133"
  },
  "test072481" : {
    "methodSignature" : "public CSVPrinter print(final Appendable out) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072481() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    cSVFormat0.DEFAULT.print((Appendable) null);\n}",
    "testName" : "test072481"
  },
  "test036277" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036277() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test036277"
  },
  "test086532" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String string0 = cSVFormat0.getNullString();\n}",
    "testName" : "test086532"
  },
  "test036276" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036276() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test036276"
  },
  "test036279" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036279() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test036279"
  },
  "test036278" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036278() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test036278"
  },
  "test048360" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048360() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test048360"
  },
  "test048361" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048361() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test048361"
  },
  "test109576" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109576() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test109576"
  },
  "test109573" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109573() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test109573"
  },
  "test109572" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109572() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');\n    cSVFormat1.hashCode();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test109572"
  },
  "test109575" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109575() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test109575"
  },
  "test109574" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109574() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('-');\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test109574"
  },
  "test036275" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036275() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test036275"
  },
  "test036274" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036274() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test036274"
  },
  "test040304" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040304() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test040304"
  },
  "test040303" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040303() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test040303"
  },
  "test040306" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040306() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test040306"
  },
  "test062453" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062453() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test062453"
  },
  "test040305" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040305() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test040305"
  },
  "test062454" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062454() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test062454"
  },
  "test040300" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040300() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test040300"
  },
  "test040302" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040302() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test040302"
  },
  "test040301" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040301() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test040301"
  },
  "test110580" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110580() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test110580"
  },
  "test027211" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test027211"
  },
  "test049363" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049363() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    Character character0 = Character.valueOf('*');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\\\"');\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test049363"
  },
  "test062451" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062451() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test062451"
  },
  "test049362" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049362() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    Character character0 = Character.valueOf('*');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\\\"');\n    cSVFormat4.getQuoteCharacter();\n}",
    "testName" : "test049362"
  },
  "test062452" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062452() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test062452"
  },
  "test049365" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049365() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    Character character0 = Character.valueOf('*');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\\\"');\n    cSVFormat4.getDelimiter();\n}",
    "testName" : "test049365"
  },
  "test049364" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049364() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    Character character0 = Character.valueOf('*');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('L');\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\\\"');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test049364"
  },
  "test062450" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062450() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test062450"
  },
  "test085531" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getCommentMarker();\n}",
    "testName" : "test085531"
  },
  "test027216" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test027216"
  },
  "test027217" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test027217"
  },
  "test027212" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test027212"
  },
  "test027213" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test027213"
  },
  "test027214" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test027214"
  },
  "test110582" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110582() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test110582"
  },
  "test027215" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test027215"
  },
  "test110581" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110581() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test110581"
  },
  "test036280" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036280() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test036280"
  },
  "test135728" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135728() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test135728"
  },
  "test036281" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036281() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    Character character0 = Character.valueOf('S');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test036281"
  },
  "test135729" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135729() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test135729"
  },
  "test135726" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135726() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test135726"
  },
  "test135727" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test135727"
  },
  "test122674" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122674() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test122674"
  },
  "test062448" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062448() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test062448"
  },
  "test122672" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122672() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test122672"
  },
  "test062449" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062449() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test062449"
  },
  "test122673" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122673() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test122673"
  },
  "test122670" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122670() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.equals((Object) cSVFormat1);\n}",
    "testName" : "test122670"
  },
  "test122671" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122671() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character('r');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuote(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test122671"
  },
  "test024192" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test024192"
  },
  "test024193" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024193"
  },
  "test024191" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test024191"
  },
  "test024196" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test024196"
  },
  "test024197" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test024197"
  },
  "test024194" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test024194"
  },
  "test024195" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test024195"
  },
  "test110577" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110577() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test110577"
  },
  "test135733" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135733() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test135733"
  },
  "test113603" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113603() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test113603"
  },
  "test024198" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test024198"
  },
  "test135731" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135731() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test135731"
  },
  "test135732" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135732() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test135732"
  },
  "test135730" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135730() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('b');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test135730"
  },
  "test015131" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test015131"
  },
  "test015130" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withNullString(\"Delimiter=<\\t> QuoteChar=<\\\"> RecordSeparator=<\\r\\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false\");\n    Character character0 = Character.valueOf('Y');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test015130"
  },
  "test096546" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final char commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    cSVFormat0.EXCEL.withCommentMarker(',');\n}",
    "testName" : "test096546"
  },
  "test113600" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113600() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test113600"
  },
  "test040307" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040307() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(':');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test040307"
  },
  "test110579" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110579() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test110579"
  },
  "test113602" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113602() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test113602"
  },
  "test110578" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110578() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test110578"
  },
  "test113601" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113601() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test113601"
  },
  "test022180" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022180() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test022180"
  },
  "test022182" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test022182"
  },
  "test022181" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test022181"
  },
  "test022184" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test022184"
  },
  "test022183" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat2.getNullString();\n}",
    "testName" : "test022183"
  },
  "test022186" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test022186"
  },
  "test022185" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test022185"
  },
  "test022188" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test022188"
  },
  "test022187" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"QJWto;q]bY]?r+,Y\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test022187"
  },
  "test105561" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105561() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat0.isCommentMarkerSet();\n}",
    "testName" : "test105561"
  },
  "test132714" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132714() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test132714"
  },
  "test132715" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132715() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test132715"
  },
  "test132716" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132716() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test132716"
  },
  "test132717" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132717() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test132717"
  },
  "test132713" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132713() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test132713"
  },
  "test035267" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035267() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test035267"
  },
  "test035266" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035266() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test035266"
  },
  "test035269" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035269() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test035269"
  },
  "test118632" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118632() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    CSVFormat cSVFormat2 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test118632"
  },
  "test132718" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132718() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test132718"
  },
  "test035268" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035268() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test035268"
  },
  "test118631" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118631() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    CSVFormat cSVFormat2 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n}",
    "testName" : "test118631"
  },
  "test132719" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132719() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test132719"
  },
  "test047350" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047350() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test047350"
  },
  "test047351" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047351() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test047351"
  },
  "test047352" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047352() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test047352"
  },
  "test047353" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047353() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test047353"
  },
  "test047354" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047354() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test047354"
  },
  "test071480" : {
    "methodSignature" : "public CSVFormat withDelimiter(final char delimiter)",
    "methodName" : "withDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071480() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('T');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withDelimiter('T');\n}",
    "testName" : "test071480"
  },
  "test132720" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132720() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test132720"
  },
  "test060438" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060438() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test060438"
  },
  "test118636" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118636() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    CSVFormat cSVFormat2 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test118636"
  },
  "test060437" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test060437"
  },
  "test118635" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118635() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    CSVFormat cSVFormat2 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test118635"
  },
  "test118634" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118634() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    CSVFormat cSVFormat2 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test118634"
  },
  "test060439" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060439() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n}",
    "testName" : "test060439"
  },
  "test118633" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118633() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    CSVFormat cSVFormat2 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test118633"
  },
  "test132721" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132721() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test132721"
  },
  "test132722" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132722() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test132722"
  },
  "test118637" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape('7');\n    CSVFormat cSVFormat2 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test118637"
  },
  "test061442" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test061442"
  },
  "test061441" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test061441"
  },
  "test061444" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test061444"
  },
  "test061443" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test061443"
  },
  "test061446" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061446() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test061446"
  },
  "test061445" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n}",
    "testName" : "test061445"
  },
  "test061447" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061447() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test061447"
  },
  "test061440" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test061440"
  },
  "test026203" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026203() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test026203"
  },
  "test048355" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048355() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test048355"
  },
  "test048356" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048356() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test048356"
  },
  "test048357" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048357() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test048357"
  },
  "test026207" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026207() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test026207"
  },
  "test048358" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048358() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test048358"
  },
  "test026206" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026206() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test026206"
  },
  "test048359" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048359() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test048359"
  },
  "test026205" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026205() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test026205"
  },
  "test026204" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026204() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test026204"
  },
  "test095545" : {
    "methodSignature" : "public CSVFormat withQuote(final char quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095545() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('s');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withQuote('s');\n}",
    "testName" : "test095545"
  },
  "test026209" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026209() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test026209"
  },
  "test035270" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035270() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test035270"
  },
  "test026208" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026208() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test026208"
  },
  "test035272" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035272() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test035272"
  },
  "test035271" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035271() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test035271"
  },
  "test119639" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test119639"
  },
  "test035273" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035273() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('R');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test035273"
  },
  "test119638" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test119638"
  },
  "test012101" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getCommentMarker();\n}",
    "testName" : "test012101"
  },
  "test012105" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test012105"
  },
  "test012104" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test012104"
  },
  "test012103" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test012103"
  },
  "test012102" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test012102"
  },
  "test012109" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test012109"
  },
  "test128699" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128699() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test128699"
  },
  "test012108" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test012108"
  },
  "test128698" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128698() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test128698"
  },
  "test012107" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test012107"
  },
  "test012106" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"format\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test012106"
  },
  "test026210" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"CommentStart=<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test026210"
  },
  "test106566" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106566() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test106566"
  },
  "test084530" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test084530"
  },
  "test106562" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106562() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test106562"
  },
  "test023189" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.withNullString(\"mlg\\\"F\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test023189"
  },
  "test106563" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106563() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test106563"
  },
  "test106564" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106564() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test106564"
  },
  "test106565" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106565() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test106565"
  },
  "test128697" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128697() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test128697"
  },
  "test128696" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128696() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('A');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n}",
    "testName" : "test128696"
  },
  "test014118" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test014118"
  },
  "test120648" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test120648"
  },
  "test120647" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test120647"
  },
  "test046346" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046346() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test046346"
  },
  "test046345" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046345() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test046345"
  },
  "test120649" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test120649"
  },
  "test014119" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test014119"
  },
  "test046344" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046344() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test046344"
  },
  "test046343" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046343() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test046343"
  },
  "test021172" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test021172"
  },
  "test046342" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046342() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test046342"
  },
  "test046341" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046341() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test046341"
  },
  "test021174" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat2.getNullString();\n}",
    "testName" : "test021174"
  },
  "test046340" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046340() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withCommentMarker((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test046340"
  },
  "test021173" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test021173"
  },
  "test021176" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test021176"
  },
  "test021175" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test021175"
  },
  "test021178" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021178() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test021178"
  },
  "test021177" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test021177"
  },
  "test083529" : {
    "methodSignature" : "public String[] getHeader()",
    "methodName" : "getHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = cSVFormat0.getHeader();\n}",
    "testName" : "test083529"
  },
  "test021179" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021179() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"CommentStart=<\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test021179"
  },
  "test133723" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133723() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test133723"
  },
  "test119640" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getCommentMarker();\n}",
    "testName" : "test119640"
  },
  "test01093" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01093() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test01093"
  },
  "test119644" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test119644"
  },
  "test01092" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01092() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test01092"
  },
  "test119643" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test119643"
  },
  "test01091" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01091() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test01091"
  },
  "test119642" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test119642"
  },
  "test01090" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01090() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01090"
  },
  "test119641" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test119641"
  },
  "test01097" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01097() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test01097"
  },
  "test01096" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01096() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test01096"
  },
  "test01095" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01095() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test01095"
  },
  "test01094" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01094() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test01094"
  },
  "test070479" : {
    "methodSignature" : "public CSVFormat withEscape(final char escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070479() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('k');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withEscape('k');\n}",
    "testName" : "test070479"
  },
  "test094544" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final Character commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094544() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('r');\n    Character character0 = new Character('r');\n    cSVFormat1.withCommentMarker(character0);\n}",
    "testName" : "test094544"
  },
  "test119646" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test119646"
  },
  "test119645" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('?');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test119645"
  },
  "test034264" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034264() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test034264"
  },
  "test034265" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034265() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"\");\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test034265"
  },
  "test060432" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test060432"
  },
  "test060434" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test060434"
  },
  "test060433" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test060433"
  },
  "test060436" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test060436"
  },
  "test060435" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"QJWto;q]bY]?r+,Y\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test060435"
  },
  "test107567" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107567() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    cSVFormat0.TDF.hashCode();\n}",
    "testName" : "test107567"
  },
  "test01089" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01089() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test01089"
  },
  "test01088" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01088() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test01088"
  },
  "test047347" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047347() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test047347"
  },
  "test047348" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047348() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test047348"
  },
  "test047349" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047349() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('N');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test047349"
  },
  "test013114" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test013114"
  },
  "test120651" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getCommentMarker();\n}",
    "testName" : "test120651"
  },
  "test013115" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test013115"
  },
  "test120650" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test120650"
  },
  "test013116" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test013116"
  },
  "test120653" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120653() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test120653"
  },
  "test013117" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test013117"
  },
  "test120652" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test120652"
  },
  "test013110" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test013110"
  },
  "test013111" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test013111"
  },
  "test013112" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test013112"
  },
  "test013113" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test013113"
  },
  "test069478" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069478() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test069478"
  },
  "test120655" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test120655"
  },
  "test01199" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test01199"
  },
  "test120654" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('K');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test120654"
  },
  "test01198" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test01198"
  },
  "test069477" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069477() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test069477"
  },
  "test025202" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025202() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test025202"
  },
  "test025201" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025201() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test025201"
  },
  "test025200" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025200() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test025200"
  },
  "test059431" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = cSVFormat0.getQuoteCharacter();\n}",
    "testName" : "test059431"
  },
  "test045339" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test045339"
  },
  "test045338" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test045338"
  },
  "test045337" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test045337"
  },
  "test045336" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test045336"
  },
  "test082523" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082523() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test082523"
  },
  "test045335" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test045335"
  },
  "test082524" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082524() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test082524"
  },
  "test045334" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test045334"
  },
  "test045333" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test045333"
  },
  "test082522" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082522() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test082522"
  },
  "test00770" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00770() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00770"
  },
  "test045332" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"Delimiter=<\");\n    Character character0 = Character.valueOf('W');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test045332"
  },
  "test00763" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00763() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test00763"
  },
  "test019161" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test019161"
  },
  "test00764" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00764() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00764"
  },
  "test019162" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test019162"
  },
  "test019160" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test019160"
  },
  "test020164" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test020164"
  },
  "test00767" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00767() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00767"
  },
  "test020165" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test020165"
  },
  "test00768" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00768() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test00768"
  },
  "test020166" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test020166"
  },
  "test00765" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00765() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00765"
  },
  "test020167" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test020167"
  },
  "test00766" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00766() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00766"
  },
  "test020168" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test020168"
  },
  "test020169" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test020169"
  },
  "test093543" : {
    "methodSignature" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
    "methodName" : "withQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093543() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    cSVFormat0.withQuoteMode(quoteMode0);\n}",
    "testName" : "test093543"
  },
  "test116622" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116622() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test116622"
  },
  "test00769" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00769() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"y\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('#');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00769"
  },
  "test113598" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113598() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test113598"
  },
  "test116620" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116620() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test116620"
  },
  "test113597" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113597() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test113597"
  },
  "test116621" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116621() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test116621"
  },
  "test113599" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113599() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test113599"
  },
  "test019163" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test019163"
  },
  "test125684" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125684() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test125684"
  },
  "test125685" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125685() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test125685"
  },
  "test139751" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    PipedReader pipedReader0 = new PipedReader(1);\n    CSVParser cSVParser0 = cSVFormat0.TDF.parse(pipedReader0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test139751"
  },
  "test125686" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125686() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test125686"
  },
  "test125687" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125687() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test125687"
  },
  "test103558" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[7];\n    cSVFormat0.format(objectArray0);\n    cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test103558"
  },
  "test125688" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125688() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test125688"
  },
  "test020170" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test020170"
  },
  "test020171" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('<');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test020171"
  },
  "test103557" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test103557"
  },
  "test00873" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00873() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test00873"
  },
  "test116619" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116619() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test116619"
  },
  "test00874" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00874() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test00874"
  },
  "test00871" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00871() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00871"
  },
  "test116617" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test116617"
  },
  "test00872" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00872() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00872"
  },
  "test116618" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116618() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test116618"
  },
  "test00877" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00877() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00877"
  },
  "test082527" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082527() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test082527"
  },
  "test00878" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00878() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test00878"
  },
  "test082528" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test082528"
  },
  "test125681" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125681() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test125681"
  },
  "test00875" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00875() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00875"
  },
  "test082525" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test082525"
  },
  "test125682" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125682() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test125682"
  },
  "test00876" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00876() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('Q');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test00876"
  },
  "test082526" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082526() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test082526"
  },
  "test125683" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125683() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test125683"
  },
  "test019158" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test019158"
  },
  "test019159" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test019159"
  },
  "test019156" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019156() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test019156"
  },
  "test019157" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019157() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test019157"
  },
  "test116615" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116615() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test116615"
  },
  "test130704" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130704() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test130704"
  },
  "test019155" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019155() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('p');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test019155"
  },
  "test116616" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test116616"
  },
  "test130703" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130703() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test130703"
  },
  "test116614" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116614() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"org.apache.commons.csv.ExtendedBufferedReader\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test116614"
  },
  "test033256" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033256() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test033256"
  },
  "test033257" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033257() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test033257"
  },
  "test033258" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033258() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test033258"
  },
  "test033259" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033259() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test033259"
  },
  "test138750" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test138750"
  },
  "test068473" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068473() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test068473"
  },
  "test126689" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126689() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    Object object0 = new Object();\n    boolean boolean0 = cSVFormat0.equals(object0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test126689"
  },
  "test068474" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068474() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test068474"
  },
  "test068475" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068475() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test068475"
  },
  "test068476" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068476() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test068476"
  },
  "test00983" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00983() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00983"
  },
  "test00984" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00984() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00984"
  },
  "test068470" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068470() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test068470"
  },
  "test00981" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00981() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00981"
  },
  "test068471" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068471() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test068471"
  },
  "test00982" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00982() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00982"
  },
  "test068472" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068472() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test068472"
  },
  "test00987" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00987() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00987"
  },
  "test00985" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00985() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00985"
  },
  "test00986" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00986() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test00986"
  },
  "test058430" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058430() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test058430"
  },
  "test033262" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033262() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test033262"
  },
  "test092539" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test092539"
  },
  "test033263" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033263() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test033263"
  },
  "test092538" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test092538"
  },
  "test129702" : {
    "methodSignature" : "public CSVFormat withHeader(final String... header)",
    "methodName" : "withHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129702() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[3];\n    cSVFormat0.withHeader(stringArray0);\n}",
    "testName" : "test129702"
  },
  "test00980" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00980() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00980"
  },
  "test058429" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test058429"
  },
  "test058427" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test058427"
  },
  "test058428" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test058428"
  },
  "test058425" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test058425"
  },
  "test092542" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092542() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test092542"
  },
  "test058426" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test058426"
  },
  "test00979" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00979() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = Character.valueOf('!');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00979"
  },
  "test058424" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test058424"
  },
  "test033260" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033260() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test033260"
  },
  "test092540" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test092540"
  },
  "test033261" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033261() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    String[] stringArray0 = new String[6];\n    stringArray0[0] = \":\";\n    stringArray0[1] = \"8`0&40-Y^E%,tpsSa\";\n    stringArray0[2] = \"~dD/GUYR \";\n    stringArray0[3] = \"ON7::V\\\"j@@DK\";\n    stringArray0[4] = \"MINIMAL\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test033261"
  },
  "test092541" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test092541"
  },
  "test044329" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test044329"
  },
  "test044327" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test044327"
  },
  "test117630" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117630() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test117630"
  },
  "test044328" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test044328"
  },
  "test044325" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test044325"
  },
  "test044326" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test044326"
  },
  "test104559" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104559() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('1');\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test104559"
  },
  "test077496" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077496() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n}",
    "testName" : "test077496"
  },
  "test131705" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131705() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test131705"
  },
  "test077499" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077499() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test077499"
  },
  "test077497" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077497() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test077497"
  },
  "test077498" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077498() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$VALUES\");\n    boolean boolean0 = cSVFormat1.isNullStringSet();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test077498"
  },
  "test053390" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053390() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test053390"
  },
  "test053391" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053391() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test053391"
  },
  "test131706" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131706() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test131706"
  },
  "test131707" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131707() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test131707"
  },
  "test131708" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131708() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test131708"
  },
  "test131709" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131709() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test131709"
  },
  "test081521" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081521() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test081521"
  },
  "test081520" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081520() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test081520"
  },
  "test044330" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test044330"
  },
  "test044331" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withDelimiter('S');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test044331"
  },
  "test066464" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066464() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test066464"
  },
  "test081518" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081518() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n}",
    "testName" : "test081518"
  },
  "test081517" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081517() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test081517"
  },
  "test117629" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117629() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test117629"
  },
  "test126690" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126690() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    Object object0 = new Object();\n    boolean boolean0 = cSVFormat0.equals(object0);\n}",
    "testName" : "test126690"
  },
  "test081519" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081519() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test081519"
  },
  "test126691" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126691() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    Object object0 = new Object();\n    boolean boolean0 = cSVFormat0.equals(object0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test126691"
  },
  "test081514" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081514() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test081514"
  },
  "test126692" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126692() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    Object object0 = new Object();\n    boolean boolean0 = cSVFormat0.equals(object0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test126692"
  },
  "test126693" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126693() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    Object object0 = new Object();\n    boolean boolean0 = cSVFormat0.equals(object0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test126693"
  },
  "test081516" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081516() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test081516"
  },
  "test126694" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126694() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('p');\n    Object object0 = new Object();\n    boolean boolean0 = cSVFormat0.equals(object0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test126694"
  },
  "test081515" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081515() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('e');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test081515"
  },
  "test104560" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104560() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('1');\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test104560"
  },
  "test117623" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117623() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test117623"
  },
  "test117624" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117624() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test117624"
  },
  "test053392" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053392() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test053392"
  },
  "test117627" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test117627"
  },
  "test053393" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053393() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test053393"
  },
  "test117628" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test117628"
  },
  "test131710" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131710() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test131710"
  },
  "test053394" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053394() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('k');\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test053394"
  },
  "test117625" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117625() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test117625"
  },
  "test131711" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131711() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test131711"
  },
  "test117626" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('?');\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withEscape(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test117626"
  },
  "test131712" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131712() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('7');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test131712"
  },
  "test011100" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('t');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test011100"
  },
  "test091537" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = cSVFormat0.getQuoteCharacter();\n}",
    "testName" : "test091537"
  },
  "test067469" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067469() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test067469"
  },
  "test067465" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067465() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test067465"
  },
  "test067466" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067466() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test067466"
  },
  "test067467" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067467() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test067467"
  },
  "test067468" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067468() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('8');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test067468"
  },
  "test080513" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080513() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);\n    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test080513"
  },
  "test032249" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032249() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test032249"
  },
  "test080512" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080512() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('f');\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape(character0);\n    boolean boolean0 = cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test080512"
  },
  "test032248" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032248() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test032248"
  },
  "test127695" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127695() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n}",
    "testName" : "test127695"
  },
  "test054397" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test054397"
  },
  "test054398" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test054398"
  },
  "test054399" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test054399"
  },
  "test057422" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test057422"
  },
  "test057423" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test057423"
  },
  "test057420" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057420() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test057420"
  },
  "test057421" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test057421"
  },
  "test054395" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054395() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test054395"
  },
  "test054396" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054396() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test054396"
  },
  "test057419" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057419() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test057419"
  },
  "test057417" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057417() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test057417"
  },
  "test057418" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057418() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test057418"
  },
  "test057416" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057416() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    String string0 = cSVFormat1.getRecordSeparator();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test057416"
  },
  "test032255" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032255() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test032255"
  },
  "test032254" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032254() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test032254"
  },
  "test032253" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032253() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test032253"
  },
  "test032252" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032252() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test032252"
  },
  "test032251" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032251() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test032251"
  },
  "test032250" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032250() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('*');\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test032250"
  }
}