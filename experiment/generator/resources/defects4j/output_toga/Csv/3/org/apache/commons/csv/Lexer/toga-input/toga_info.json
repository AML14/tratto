{
  "test1212" : {
    "methodSignature" : "boolean isDelimiter(final int c)",
    "methodName" : "isDelimiter",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringReader stringReader0 = new StringReader(\"org.apache.commons.csv.CSVPrinter$1\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isDelimiter(103);\n}",
    "testName" : "test1212"
  },
  "test3435" : {
    "methodSignature" : "long getLineNumber()",
    "methodName" : "getLineNumber",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, (ExtendedBufferedReader) null);\n    cSVLexer0.getLineNumber();\n}",
    "testName" : "test3435"
  },
  "test2323" : {
    "methodSignature" : "boolean isWhitespace(final int c)",
    "methodName" : "isWhitespace",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"gt2cO/DBu\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isWhitespace(9);\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "boolean isCommentStart(final int c)",
    "methodName" : "isCommentStart",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"#f,wJZF4Zt,38p\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isCommentStart(4);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "boolean readEndOfLine(int c) throws IOException",
    "methodName" : "readEndOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\\n\");\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.readEndOfLine(13);\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "boolean isEndOfFile(final int c)",
    "methodName" : "isEndOfFile",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"gt2cO/DBu\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isEndOfFile(0);\n}",
    "testName" : "test1010"
  },
  "test3233" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"@f'wJZhwZt,3vp\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    int int0 = cSVLexer0.readEscape();\n    int int1 = cSVLexer0.readEscape();\n}",
    "testName" : "test3233"
  },
  "test2121" : {
    "methodSignature" : "boolean isStartOfLine(final int c)",
    "methodName" : "isStartOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringReader stringReader0 = new StringReader(\"org.apache.commons.csv.Lexer\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isStartOfLine(13);\n}",
    "testName" : "test2121"
  },
  "test3232" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"@f'wJZhwZt,3vp\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    int int0 = cSVLexer0.readEscape();\n}",
    "testName" : "test3232"
  },
  "test1111" : {
    "methodSignature" : "boolean isDelimiter(final int c)",
    "methodName" : "isDelimiter",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"gt2cO/DBu\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isDelimiter(9);\n}",
    "testName" : "test1111"
  },
  "test3334" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    StringReader stringReader0 = new StringReader(\"\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    cSVLexer0.readEscape();\n}",
    "testName" : "test3334"
  },
  "test2222" : {
    "methodSignature" : "boolean isStartOfLine(final int c)",
    "methodName" : "isStartOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    Character character0 = Character.valueOf(':');\n    Quote quote0 = Quote.NON_NUMERIC;\n    String[] stringArray0 = new String[5];\n    CSVFormat cSVFormat0 = new CSVFormat(':', character0, quote0, character0, character0, true, true, \" EmptyLines:ignored\", \" EmptyLines:ignored\", stringArray0);\n    StringReader stringReader0 = new StringReader(\" EmptyLines:ignored\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isStartOfLine(10);\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "boolean readEndOfLine(int c) throws IOException",
    "methodName" : "readEndOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    StringReader stringReader0 = new StringReader(\"-pxp?M{rZSY@Y\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    Token token0 = new Token();\n    cSVLexer0.nextToken(token0);\n    boolean boolean0 = cSVLexer0.readEndOfLine(13);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "boolean readEndOfLine(int c) throws IOException",
    "methodName" : "readEndOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"EOF whilst processing escape sequence\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.readEndOfLine(79);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "boolean isStartOfLine(final int c)",
    "methodName" : "isStartOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Character character0 = Character.valueOf('9');\n    Quote quote0 = Quote.NON_NUMERIC;\n    String[] stringArray0 = new String[5];\n    CSVFormat cSVFormat0 = new CSVFormat(':', character0, quote0, character0, character0, true, true, \" EmptyLines:ignored\", \"$\", stringArray0);\n    StringReader stringReader0 = new StringReader(\" EmptyLines:ignored\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isStartOfLine(9);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "boolean isEscape(final int c)",
    "methodName" : "isEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isEscape(65534);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "boolean isEndOfFile(final int c)",
    "methodName" : "isEndOfFile",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringReader stringReader0 = new StringReader(\"\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isEndOfFile((-1));\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "void trimTrailingSpaces(final StringBuilder buffer)",
    "methodName" : "trimTrailingSpaces",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringReader stringReader0 = new StringReader(\"@LNr`+O6Q$\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    cSVLexer0.trimTrailingSpaces((StringBuilder) null);\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    StringReader stringReader0 = new StringReader(\"gt2cO/DBu\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    stringReader0.read();\n    int int0 = cSVLexer0.readEscape();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, (ExtendedBufferedReader) null);\n    cSVLexer0.readEscape();\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "Token nextToken(final Token token) throws IOException",
    "methodName" : "nextToken",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    Character character0 = Character.valueOf('a');\n    Quote quote0 = Quote.MINIMAL;\n    String[] stringArray0 = new String[5];\n    CSVFormat cSVFormat0 = new CSVFormat('V', character0, quote0, (Character) '\\u0000', character0, true, true, \"org.apache.commons.csv.Leler\", \"org.apache.commons.csv.Leler\", stringArray0);\n    StringReader stringReader0 = new StringReader(\"Delimiter=<,> QuoteChar=<\\\">\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    Token token0 = new Token();\n    Token token1 = cSVLexer0.nextToken(token0);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "long getLineNumber()",
    "methodName" : "getLineNumber",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringReader stringReader0 = new StringReader(\"\\n\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    long long0 = cSVLexer0.getLineNumber();\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "boolean readEndOfLine(int c) throws IOException",
    "methodName" : "readEndOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringReader stringReader0 = new StringReader(\"org.apache.commons.csv.Lexer\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.readEndOfLine(13);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "long getLineNumber()",
    "methodName" : "getLineNumber",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"gt2cO/DBu\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    extendedBufferedReader0.readLine();\n    long long0 = cSVLexer0.getLineNumber();\n}",
    "testName" : "test1515"
  },
  "test3030" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    StringReader stringReader0 = new StringReader(\"b&:`h!\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    int int0 = cSVLexer0.readEscape();\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "boolean isQuoteChar(final int c)",
    "methodName" : "isQuoteChar",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Character character0 = Character.valueOf(':');\n    Quote quote0 = Quote.NON_NUMERIC;\n    String[] stringArray0 = new String[5];\n    CSVFormat cSVFormat0 = new CSVFormat(':', character0, quote0, character0, character0, true, true, \" EmptyLines:ignored\", \" EmptyLines:ignored\", stringArray0);\n    StringReader stringReader0 = new StringReader(\" EmptyLines:ignored\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isQuoteChar(':');\n}",
    "testName" : "test2020"
  },
  "test3131" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"\\n\");\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    int int0 = cSVLexer0.readEscape();\n}",
    "testName" : "test3131"
  },
  "test000" : {
    "methodSignature" : "boolean isStartOfLine(final int c)",
    "methodName" : "isStartOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"h}6Jpv\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isStartOfLine((-989));\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "Token nextToken(final Token token) throws IOException",
    "methodName" : "nextToken",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Token token0 = new Token();\n    StringReader stringReader0 = new StringReader(\"vRs'x#y/G(s~bqbCe \");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    Token token1 = cSVLexer0.nextToken(token0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "boolean isWhitespace(final int c)",
    "methodName" : "isWhitespace",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Character character0 = Character.valueOf('|');\n    Quote quote0 = Quote.NONE;\n    String[] stringArray0 = new String[6];\n    CSVFormat cSVFormat0 = new CSVFormat('|', character0, quote0, character0, character0, true, false, \"\", \"The escape character cannot be a line break\", stringArray0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, (ExtendedBufferedReader) null);\n    boolean boolean0 = cSVLexer0.isWhitespace(13);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "boolean isQuoteChar(final int c)",
    "methodName" : "isQuoteChar",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"gt2cO/DBu\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isQuoteChar(102);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "boolean isEscape(final int c)",
    "methodName" : "isEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, (ExtendedBufferedReader) null);\n    boolean boolean0 = cSVLexer0.isEscape(326);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "boolean readEndOfLine(int c) throws IOException",
    "methodName" : "readEndOfLine",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    StringReader stringReader0 = new StringReader(\"-pxp?M{rZSY@Y\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    extendedBufferedReader0.close();\n    cSVLexer0.readEndOfLine(13);\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "int readEscape() throws IOException",
    "methodName" : "readEscape",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    Character character0 = Character.valueOf(':');\n    Quote quote0 = Quote.NON_NUMERIC;\n    String[] stringArray0 = new String[5];\n    CSVFormat cSVFormat0 = new CSVFormat(':', character0, quote0, character0, character0, true, true, \" EmptyLines:ignored\", \" EmptyLines:ignored\", stringArray0);\n    StringReader stringReader0 = new StringReader(\" EmptyLines:ignored\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    Token token0 = new Token();\n    Token token1 = cSVLexer0.nextToken(token0);\n    cSVLexer0.nextToken(token1);\n    cSVLexer0.nextToken(token1);\n    int int0 = cSVLexer0.readEscape();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "boolean isCommentStart(final int c)",
    "methodName" : "isCommentStart",
    "className" : "org.apache.commons.csv.Lexer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    StringReader stringReader0 = new StringReader(\"\");\n    ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);\n    CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);\n    boolean boolean0 = cSVLexer0.isCommentStart(65534);\n}",
    "testName" : "test1919"
  }
}