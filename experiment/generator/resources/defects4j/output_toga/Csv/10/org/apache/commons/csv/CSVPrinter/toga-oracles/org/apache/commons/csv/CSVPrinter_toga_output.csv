project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('d');
    CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
    CSVPrinter cSVPrinter0 = cSVFormat1.print(charArrayWriter0);
    cSVPrinter0.print(charArrayWriter0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(30);
    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat0);
    Object[] objectArray0 = new Object[3];
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords(objectArray0);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.StringCharBuffer"", e);
    }
}",1,
project,0,test022,"public void test022() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
    CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""M%+A%RMx~,Ds"");
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
    cSVPrinter0.close();
    Object[] objectArray0 = new Object[2];
    try {
        cSVPrinter0.printRecords(objectArray0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
    }
}",1,
project,0,test044,"public void test044() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charArrayWriter0);
    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
    doReturn(2876).when(resultSetMetaData0).getColumnCount();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
    doReturn(""dMWn|h+[{SVr/Af{l"", ""dMWn|h+[{SVr/Af{l"", ""dMWn|h+[{SVr/Af{l"", ""\u0085"", """").when(resultSet0).getString(anyInt());
    doReturn(true).when(resultSet0).next();
    // Undeclared exception!
    cSVPrinter0.printRecords(resultSet0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""$zqx9U"");
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords((Iterable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    StringWriter stringWriter0 = new StringWriter(1295);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
    // Undeclared exception!
    try {
        cSVPrinter0.printRecord((Iterable<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",1,
project,0,test1111,"public void test1111() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('+');
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
    // Undeclared exception!
    try {
        cSVPrinter0.printComment((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
    // Undeclared exception!
    try {
        cSVPrinter0.print(cSVFormat0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""M%+A%RMx~,Ds"");
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
    outputStreamWriter0.close();
    CSVPrinter cSVPrinter0 = cSVFormat0.print(outputStreamWriter0);
    try {
        cSVPrinter0.flush();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""\"""");
    CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('c');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
    CSVPrinter cSVPrinter0 = null;
    try {
        cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat2);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // The comment start character and the delimiter cannot be the same ('c')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter("";eI]{*%n"");
    CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintWriter0);
    cSVPrinter0.println();
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
    doReturn(434).when(resultSetMetaData0).getColumnCount();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
    doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
    doReturn(true, false).when(resultSet0).next();
    cSVPrinter0.printRecords(resultSet0);
}",1,
project,0,test2324,"public void test2324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    MockPrintStream mockPrintStream0 = new MockPrintStream("">{Dz~nER$ 3[Z~zTxip"");
    CSVPrinter cSVPrinter0 = cSVFormat0.print(mockPrintStream0);
    cSVPrinter0.printComment("""");
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""/3kPo[q{N7q&"");
    CSVFormat cSVFormat0 = CSVFormat.newFormat('j');
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('\\');
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
    Object[] objectArray0 = new Object[1];
    objectArray0[0] = (Object) mockPrintWriter0;
    cSVPrinter0.printRecords(objectArray0);
    assertEquals(1, objectArray0.length);
}",1,
project,0,test2526,"public void test2526() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('@');
    CharBuffer charBuffer0 = CharBuffer.allocate(101);
    CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
    cSVPrinter0.print(cSVFormat1);
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) cSVFormat0;
    // Undeclared exception!
    try {
        cSVPrinter0.printRecords(objectArray0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",1,
project,0,test2627,"public void test2627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Quote quote0 = Quote.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""$zqx9U"");
    CSVPrinter cSVPrinter0 = cSVFormat1.print(charBuffer0);
    // Undeclared exception!
    try {
        cSVPrinter0.print(cSVFormat0);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.StringCharBuffer"", e);
    }
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1754);
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);
    Object[] objectArray0 = new Object[3];
    objectArray0[0] = (Object) cSVFormat0;
    cSVPrinter0.printRecords(objectArray0);
    assertEquals(3, objectArray0.length);
}",0,
project,0,test2829,"public void test2829() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    Object[] objectArray0 = new Object[5];
    objectArray0[0] = (Object) cSVFormat0;
    String string0 = cSVFormat0.format(objectArray0);
    assertNotNull(string0);
}",0,assertNotNull(string0)
project,0,test2930,"public void test2930() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    StringWriter stringWriter0 = new StringWriter(0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
    cSVPrinter0.flush();
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""$zqx9U"");
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
    cSVPrinter0.flush();
}",1,
project,0,test3132,"public void test3132() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(charBuffer0);
    cSVPrinter0.close();
}",1,
project,0,test3233,"public void test3233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    MockFileWriter mockFileWriter0 = new MockFileWriter(""org.apache.commons.csv.CSVPrinter$1"", false);
    CSVPrinter cSVPrinter0 = cSVFormat0.print(mockFileWriter0);
    Appendable appendable0 = cSVPrinter0.getOut();
    assertSame(mockFileWriter0, appendable0);
}",0,
